
LAB_2_EXIT_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004c90  08004c90  00005c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d50  08004d50  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004d50  08004d50  00005d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d58  08004d58  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d5c  08004d5c  00005d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004d60  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00004b9c  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bfc  20004bfc  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eb3  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d26  00000000  00000000  00019f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0001cc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8c  00000000  00000000  0001de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d40  00000000  00000000  0001eb94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e9c  00000000  00000000  000218d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c7f  00000000  00000000  00034770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001073ef  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cac  00000000  00000000  00107434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0010c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004c78 	.word	0x08004c78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004c78 	.word	0x08004c78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa3c 	bl	8000940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f89a 	bl	8000604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004d0:	f001 fcc0 	bl	8001e54 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <main+0x4c>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <main+0x50>)
 80004da:	f001 fd05 	bl	8001ee8 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <main+0x54>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <main+0x58>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <main+0x5c>)
 80004ea:	f001 fcfd 	bl	8001ee8 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <main+0x60>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <main+0x64>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <main+0x68>)
 80004fa:	f001 fcf5 	bl	8001ee8 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <main+0x6c>)
 8000502:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f001 fcca 	bl	8001e9c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x48>
 800050c:	08004ccc 	.word	0x08004ccc
 8000510:	080006a9 	.word	0x080006a9
 8000514:	2000007c 	.word	0x2000007c
 8000518:	08004cf0 	.word	0x08004cf0
 800051c:	080006b9 	.word	0x080006b9
 8000520:	20000080 	.word	0x20000080
 8000524:	08004d14 	.word	0x08004d14
 8000528:	080006e9 	.word	0x080006e9
 800052c:	20000084 	.word	0x20000084

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fab2 	bl	8004aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fcb6 	bl	8000f28 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f8b5 	bl	8000730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff17 	bl	8001418 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f89e 	bl	8000730 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xa0>)
 8000676:	f000 fc23 	bl	8000ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800067a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_GPIO_Init+0xa0>)
 8000694:	f000 fa78 	bl	8000b88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fcb2 	bl	800201a <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartDefaultTask+0x8>

080006b8 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
	char counter = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
	for(;;)
	{
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c8:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <StartLED1_Task+0x2c>)
 80006ca:	f000 fc12 	bl	8000ef2 <HAL_GPIO_TogglePin>
		osDelay(200);
 80006ce:	20c8      	movs	r0, #200	@ 0xc8
 80006d0:	f001 fca3 	bl	800201a <osDelay>
		counter++;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	3301      	adds	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
		if (counter == 10)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d1f1      	bne.n	80006c4 <StartLED1_Task+0xc>
		{
			osThreadExit();
 80006e0:	f001 fc94 	bl	800200c <osThreadExit>
 80006e4:	40020c00 	.word	0x40020c00

080006e8 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 80006f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <StartLED2_Task+0x20>)
 80006f6:	f000 fbfc 	bl	8000ef2 <HAL_GPIO_TogglePin>
	osDelay(500);
 80006fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006fe:	f001 fc8c 	bl	800201a <osDelay>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000702:	bf00      	nop
 8000704:	e7f4      	b.n	80006f0 <StartLED2_Task+0x8>
 8000706:	bf00      	nop
 8000708:	40020c00 	.word	0x40020c00

0800070c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d101      	bne.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071e:	f000 f931 	bl	8000984 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40010000 	.word	0x40010000

08000730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000734:	b672      	cpsid	i
}
 8000736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000738:	bf00      	nop
 800073a:	e7fd      	b.n	8000738 <Error_Handler+0x8>

0800073c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	4b12      	ldr	r3, [pc, #72]	@ (8000790 <HAL_MspInit+0x54>)
 8000748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800074a:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <HAL_MspInit+0x54>)
 800074c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000750:	6453      	str	r3, [r2, #68]	@ 0x44
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <HAL_MspInit+0x54>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <HAL_MspInit+0x54>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <HAL_MspInit+0x54>)
 8000768:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
 800076e:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_MspInit+0x54>)
 8000770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	210f      	movs	r1, #15
 800077e:	f06f 0001 	mvn.w	r0, #1
 8000782:	f000 f9d7 	bl	8000b34 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800

08000794 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b08c      	sub	sp, #48	@ 0x30
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800079c:	2300      	movs	r3, #0
 800079e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007a4:	2300      	movs	r3, #0
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000868 <HAL_InitTick+0xd4>)
 80007aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000868 <HAL_InitTick+0xd4>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000868 <HAL_InitTick+0xd4>)
 80007b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007c0:	f107 020c 	add.w	r2, r7, #12
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4611      	mov	r1, r2
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 f830 	bl	8001830 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80007d0:	f001 f81a 	bl	8001808 <HAL_RCC_GetPCLK2Freq>
 80007d4:	4603      	mov	r3, r0
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007dc:	4a23      	ldr	r2, [pc, #140]	@ (800086c <HAL_InitTick+0xd8>)
 80007de:	fba2 2303 	umull	r2, r3, r2, r3
 80007e2:	0c9b      	lsrs	r3, r3, #18
 80007e4:	3b01      	subs	r3, #1
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80007e8:	4b21      	ldr	r3, [pc, #132]	@ (8000870 <HAL_InitTick+0xdc>)
 80007ea:	4a22      	ldr	r2, [pc, #136]	@ (8000874 <HAL_InitTick+0xe0>)
 80007ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80007ee:	4b20      	ldr	r3, [pc, #128]	@ (8000870 <HAL_InitTick+0xdc>)
 80007f0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007f4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <HAL_InitTick+0xdc>)
 80007f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007fa:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_InitTick+0xdc>)
 80007fe:	2200      	movs	r2, #0
 8000800:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <HAL_InitTick+0xdc>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_InitTick+0xdc>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800080e:	4818      	ldr	r0, [pc, #96]	@ (8000870 <HAL_InitTick+0xdc>)
 8000810:	f001 f840 	bl	8001894 <HAL_TIM_Base_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800081a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800081e:	2b00      	cmp	r3, #0
 8000820:	d11b      	bne.n	800085a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000822:	4813      	ldr	r0, [pc, #76]	@ (8000870 <HAL_InitTick+0xdc>)
 8000824:	f001 f890 	bl	8001948 <HAL_TIM_Base_Start_IT>
 8000828:	4603      	mov	r3, r0
 800082a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800082e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000832:	2b00      	cmp	r3, #0
 8000834:	d111      	bne.n	800085a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000836:	2019      	movs	r0, #25
 8000838:	f000 f998 	bl	8000b6c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b0f      	cmp	r3, #15
 8000840:	d808      	bhi.n	8000854 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000842:	2200      	movs	r2, #0
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	2019      	movs	r0, #25
 8000848:	f000 f974 	bl	8000b34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800084c:	4a0a      	ldr	r2, [pc, #40]	@ (8000878 <HAL_InitTick+0xe4>)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	6013      	str	r3, [r2, #0]
 8000852:	e002      	b.n	800085a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000854:	2301      	movs	r3, #1
 8000856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800085a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800085e:	4618      	mov	r0, r3
 8000860:	3730      	adds	r7, #48	@ 0x30
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40023800 	.word	0x40023800
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20000088 	.word	0x20000088
 8000874:	40010000 	.word	0x40010000
 8000878:	20000004 	.word	0x20000004

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <NMI_Handler+0x4>

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <MemManage_Handler+0x4>

08000894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <BusFault_Handler+0x4>

0800089c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <UsageFault_Handler+0x4>

080008a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008b8:	4802      	ldr	r0, [pc, #8]	@ (80008c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008ba:	f001 f8b5 	bl	8001a28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000088 	.word	0x20000088

080008c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008cc:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SystemInit+0x20>)
 80008ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008d2:	4a05      	ldr	r2, [pc, #20]	@ (80008e8 <SystemInit+0x20>)
 80008d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000924 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008f0:	f7ff ffea 	bl	80008c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008f6:	490d      	ldr	r1, [pc, #52]	@ (800092c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000930 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008fc:	e002      	b.n	8000904 <LoopCopyDataInit>

080008fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000902:	3304      	adds	r3, #4

08000904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000908:	d3f9      	bcc.n	80008fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090a:	4a0a      	ldr	r2, [pc, #40]	@ (8000934 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800090c:	4c0a      	ldr	r4, [pc, #40]	@ (8000938 <LoopFillZerobss+0x22>)
  movs r3, #0
 800090e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000910:	e001      	b.n	8000916 <LoopFillZerobss>

08000912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000914:	3204      	adds	r2, #4

08000916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000918:	d3fb      	bcc.n	8000912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800091a:	f004 f923 	bl	8004b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800091e:	f7ff fdcf 	bl	80004c0 <main>
  bx  lr    
 8000922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800092c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000930:	08004d60 	.word	0x08004d60
  ldr r2, =_sbss
 8000934:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000938:	20004bfc 	.word	0x20004bfc

0800093c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800093c:	e7fe      	b.n	800093c <ADC_IRQHandler>
	...

08000940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000944:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <HAL_Init+0x40>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0d      	ldr	r2, [pc, #52]	@ (8000980 <HAL_Init+0x40>)
 800094a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800094e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000950:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <HAL_Init+0x40>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	@ (8000980 <HAL_Init+0x40>)
 8000956:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800095a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <HAL_Init+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a07      	ldr	r2, [pc, #28]	@ (8000980 <HAL_Init+0x40>)
 8000962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000968:	2003      	movs	r0, #3
 800096a:	f000 f8d8 	bl	8000b1e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800096e:	200f      	movs	r0, #15
 8000970:	f7ff ff10 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000974:	f7ff fee2 	bl	800073c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000978:	2300      	movs	r3, #0
}
 800097a:	4618      	mov	r0, r3
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023c00 	.word	0x40023c00

08000984 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_IncTick+0x20>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <HAL_IncTick+0x24>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4413      	add	r3, r2
 8000994:	4a04      	ldr	r2, [pc, #16]	@ (80009a8 <HAL_IncTick+0x24>)
 8000996:	6013      	str	r3, [r2, #0]
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000008 	.word	0x20000008
 80009a8:	200000d0 	.word	0x200000d0

080009ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  return uwTick;
 80009b0:	4b03      	ldr	r3, [pc, #12]	@ (80009c0 <HAL_GetTick+0x14>)
 80009b2:	681b      	ldr	r3, [r3, #0]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	200000d0 	.word	0x200000d0

080009c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	f003 0307 	and.w	r3, r3, #7
 80009d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009d6:	68db      	ldr	r3, [r3, #12]
 80009d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009e0:	4013      	ands	r3, r2
 80009e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009f6:	4a04      	ldr	r2, [pc, #16]	@ (8000a08 <__NVIC_SetPriorityGrouping+0x44>)
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	60d3      	str	r3, [r2, #12]
}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	e000ed00 	.word	0xe000ed00

08000a0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a10:	4b04      	ldr	r3, [pc, #16]	@ (8000a24 <__NVIC_GetPriorityGrouping+0x18>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	0a1b      	lsrs	r3, r3, #8
 8000a16:	f003 0307 	and.w	r3, r3, #7
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	db0b      	blt.n	8000a52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 021f 	and.w	r2, r3, #31
 8000a40:	4907      	ldr	r1, [pc, #28]	@ (8000a60 <__NVIC_EnableIRQ+0x38>)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	2001      	movs	r0, #1
 8000a4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	@ (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	@ (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	@ 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	@ 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f7ff ff4c 	bl	80009c4 <__NVIC_SetPriorityGrouping>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
 8000b40:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b46:	f7ff ff61 	bl	8000a0c <__NVIC_GetPriorityGrouping>
 8000b4a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68b9      	ldr	r1, [r7, #8]
 8000b50:	6978      	ldr	r0, [r7, #20]
 8000b52:	f7ff ffb1 	bl	8000ab8 <NVIC_EncodePriority>
 8000b56:	4602      	mov	r2, r0
 8000b58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f7ff ff80 	bl	8000a64 <__NVIC_SetPriority>
}
 8000b64:	bf00      	nop
 8000b66:	3718      	adds	r7, #24
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff ff54 	bl	8000a28 <__NVIC_EnableIRQ>
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	@ 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
 8000ba2:	e16b      	b.n	8000e7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	f040 815a 	bne.w	8000e76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f003 0303 	and.w	r3, r3, #3
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	d005      	beq.n	8000bda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d130      	bne.n	8000c3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	2203      	movs	r2, #3
 8000be6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bea:	43db      	mvns	r3, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4013      	ands	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68da      	ldr	r2, [r3, #12]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	69ba      	ldr	r2, [r7, #24]
 8000c08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c10:	2201      	movs	r2, #1
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	69ba      	ldr	r2, [r7, #24]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	f003 0201 	and.w	r2, r3, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d017      	beq.n	8000c78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	2203      	movs	r2, #3
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6c:	69ba      	ldr	r2, [r7, #24]
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f003 0303 	and.w	r3, r3, #3
 8000c80:	2b02      	cmp	r3, #2
 8000c82:	d123      	bne.n	8000ccc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	f003 0307 	and.w	r3, r3, #7
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	220f      	movs	r2, #15
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	69ba      	ldr	r2, [r7, #24]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	691a      	ldr	r2, [r3, #16]
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	009b      	lsls	r3, r3, #2
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	69b9      	ldr	r1, [r7, #24]
 8000cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	2203      	movs	r2, #3
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	43db      	mvns	r3, r3
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 0203 	and.w	r2, r3, #3
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	f000 80b4 	beq.w	8000e76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d16:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <HAL_GPIO_Init+0x30c>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d2a:	4a5b      	ldr	r2, [pc, #364]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3302      	adds	r3, #2
 8000d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0303 	and.w	r3, r3, #3
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	220f      	movs	r2, #15
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43db      	mvns	r3, r3
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a52      	ldr	r2, [pc, #328]	@ (8000e9c <HAL_GPIO_Init+0x314>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d02b      	beq.n	8000dae <HAL_GPIO_Init+0x226>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a51      	ldr	r2, [pc, #324]	@ (8000ea0 <HAL_GPIO_Init+0x318>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d025      	beq.n	8000daa <HAL_GPIO_Init+0x222>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a50      	ldr	r2, [pc, #320]	@ (8000ea4 <HAL_GPIO_Init+0x31c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01f      	beq.n	8000da6 <HAL_GPIO_Init+0x21e>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea8 <HAL_GPIO_Init+0x320>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x21a>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a4e      	ldr	r2, [pc, #312]	@ (8000eac <HAL_GPIO_Init+0x324>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x216>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a4d      	ldr	r2, [pc, #308]	@ (8000eb0 <HAL_GPIO_Init+0x328>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x212>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a4c      	ldr	r2, [pc, #304]	@ (8000eb4 <HAL_GPIO_Init+0x32c>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x20e>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a4b      	ldr	r2, [pc, #300]	@ (8000eb8 <HAL_GPIO_Init+0x330>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x20a>
 8000d8e:	2307      	movs	r3, #7
 8000d90:	e00e      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d92:	2308      	movs	r3, #8
 8000d94:	e00c      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d96:	2306      	movs	r3, #6
 8000d98:	e00a      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	e008      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000d9e:	2304      	movs	r3, #4
 8000da0:	e006      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da2:	2303      	movs	r3, #3
 8000da4:	e004      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000da6:	2302      	movs	r3, #2
 8000da8:	e002      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000daa:	2301      	movs	r3, #1
 8000dac:	e000      	b.n	8000db0 <HAL_GPIO_Init+0x228>
 8000dae:	2300      	movs	r3, #0
 8000db0:	69fa      	ldr	r2, [r7, #28]
 8000db2:	f002 0203 	and.w	r2, r2, #3
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	4093      	lsls	r3, r2
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000dc0:	4935      	ldr	r1, [pc, #212]	@ (8000e98 <HAL_GPIO_Init+0x310>)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dce:	4b3b      	ldr	r3, [pc, #236]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000df2:	4a32      	ldr	r2, [pc, #200]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000df4:	69bb      	ldr	r3, [r7, #24]
 8000df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000df8:	4b30      	ldr	r3, [pc, #192]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e1c:	4a27      	ldr	r2, [pc, #156]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e3e:	69ba      	ldr	r2, [r7, #24]
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e46:	4a1d      	ldr	r2, [pc, #116]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e52:	693b      	ldr	r3, [r7, #16]
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d003      	beq.n	8000e70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e70:	4a12      	ldr	r2, [pc, #72]	@ (8000ebc <HAL_GPIO_Init+0x334>)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61fb      	str	r3, [r7, #28]
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	f67f ae90 	bls.w	8000ba4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e84:	bf00      	nop
 8000e86:	bf00      	nop
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40013800 	.word	0x40013800
 8000e9c:	40020000 	.word	0x40020000
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	40020800 	.word	0x40020800
 8000ea8:	40020c00 	.word	0x40020c00
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	40021400 	.word	0x40021400
 8000eb4:	40021800 	.word	0x40021800
 8000eb8:	40021c00 	.word	0x40021c00
 8000ebc:	40013c00 	.word	0x40013c00

08000ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
 8000ec8:	460b      	mov	r3, r1
 8000eca:	807b      	strh	r3, [r7, #2]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ed0:	787b      	ldrb	r3, [r7, #1]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed6:	887a      	ldrh	r2, [r7, #2]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000edc:	e003      	b.n	8000ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ede:	887b      	ldrh	r3, [r7, #2]
 8000ee0:	041a      	lsls	r2, r3, #16
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	619a      	str	r2, [r3, #24]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b085      	sub	sp, #20
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	041a      	lsls	r2, r3, #16
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	887b      	ldrh	r3, [r7, #2]
 8000f12:	400b      	ands	r3, r1
 8000f14:	431a      	orrs	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
}
 8000f1a:	bf00      	nop
 8000f1c:	3714      	adds	r7, #20
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d101      	bne.n	8000f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e267      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d075      	beq.n	8001032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f46:	4b88      	ldr	r3, [pc, #544]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d00c      	beq.n	8000f6c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f52:	4b85      	ldr	r3, [pc, #532]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f5a:	2b08      	cmp	r3, #8
 8000f5c:	d112      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f5e:	4b82      	ldr	r3, [pc, #520]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f6a:	d10b      	bne.n	8000f84 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d05b      	beq.n	8001030 <HAL_RCC_OscConfig+0x108>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d157      	bne.n	8001030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e242      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f8c:	d106      	bne.n	8000f9c <HAL_RCC_OscConfig+0x74>
 8000f8e:	4b76      	ldr	r3, [pc, #472]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a75      	ldr	r2, [pc, #468]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	e01d      	b.n	8000fd8 <HAL_RCC_OscConfig+0xb0>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fa4:	d10c      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x98>
 8000fa6:	4b70      	ldr	r3, [pc, #448]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a6f      	ldr	r2, [pc, #444]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a6c      	ldr	r2, [pc, #432]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e00b      	b.n	8000fd8 <HAL_RCC_OscConfig+0xb0>
 8000fc0:	4b69      	ldr	r3, [pc, #420]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a68      	ldr	r2, [pc, #416]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b66      	ldr	r3, [pc, #408]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a65      	ldr	r2, [pc, #404]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d013      	beq.n	8001008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fce4 	bl	80009ac <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe8:	f7ff fce0 	bl	80009ac <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b64      	cmp	r3, #100	@ 0x64
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e207      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ffa:	4b5b      	ldr	r3, [pc, #364]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d0f0      	beq.n	8000fe8 <HAL_RCC_OscConfig+0xc0>
 8001006:	e014      	b.n	8001032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fcd0 	bl	80009ac <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fccc 	bl	80009ac <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	@ 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e1f3      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001022:	4b51      	ldr	r3, [pc, #324]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d1f0      	bne.n	8001010 <HAL_RCC_OscConfig+0xe8>
 800102e:	e000      	b.n	8001032 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d063      	beq.n	8001106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800103e:	4b4a      	ldr	r3, [pc, #296]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 030c 	and.w	r3, r3, #12
 8001046:	2b00      	cmp	r3, #0
 8001048:	d00b      	beq.n	8001062 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104a:	4b47      	ldr	r3, [pc, #284]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001052:	2b08      	cmp	r3, #8
 8001054:	d11c      	bne.n	8001090 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001056:	4b44      	ldr	r3, [pc, #272]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d116      	bne.n	8001090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001062:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <HAL_RCC_OscConfig+0x152>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d001      	beq.n	800107a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
 8001078:	e1c7      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800107a:	4b3b      	ldr	r3, [pc, #236]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	691b      	ldr	r3, [r3, #16]
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4937      	ldr	r1, [pc, #220]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 800108a:	4313      	orrs	r3, r2
 800108c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108e:	e03a      	b.n	8001106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d020      	beq.n	80010da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001098:	4b34      	ldr	r3, [pc, #208]	@ (800116c <HAL_RCC_OscConfig+0x244>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800109e:	f7ff fc85 	bl	80009ac <HAL_GetTick>
 80010a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a4:	e008      	b.n	80010b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a6:	f7ff fc81 	bl	80009ac <HAL_GetTick>
 80010aa:	4602      	mov	r2, r0
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	1ad3      	subs	r3, r2, r3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e1a8      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d0f0      	beq.n	80010a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	691b      	ldr	r3, [r3, #16]
 80010d0:	00db      	lsls	r3, r3, #3
 80010d2:	4925      	ldr	r1, [pc, #148]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 80010d4:	4313      	orrs	r3, r2
 80010d6:	600b      	str	r3, [r1, #0]
 80010d8:	e015      	b.n	8001106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b24      	ldr	r3, [pc, #144]	@ (800116c <HAL_RCC_OscConfig+0x244>)
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010e0:	f7ff fc64 	bl	80009ac <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010e8:	f7ff fc60 	bl	80009ac <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e187      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1f0      	bne.n	80010e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0308 	and.w	r3, r3, #8
 800110e:	2b00      	cmp	r3, #0
 8001110:	d036      	beq.n	8001180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	695b      	ldr	r3, [r3, #20]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d016      	beq.n	8001148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800111a:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <HAL_RCC_OscConfig+0x248>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001120:	f7ff fc44 	bl	80009ac <HAL_GetTick>
 8001124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001126:	e008      	b.n	800113a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001128:	f7ff fc40 	bl	80009ac <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e167      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_RCC_OscConfig+0x240>)
 800113c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x200>
 8001146:	e01b      	b.n	8001180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <HAL_RCC_OscConfig+0x248>)
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800114e:	f7ff fc2d 	bl	80009ac <HAL_GetTick>
 8001152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001154:	e00e      	b.n	8001174 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001156:	f7ff fc29 	bl	80009ac <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b02      	cmp	r3, #2
 8001162:	d907      	bls.n	8001174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e150      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
 8001168:	40023800 	.word	0x40023800
 800116c:	42470000 	.word	0x42470000
 8001170:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001174:	4b88      	ldr	r3, [pc, #544]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d1ea      	bne.n	8001156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	f000 8097 	beq.w	80012bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001192:	4b81      	ldr	r3, [pc, #516]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d10f      	bne.n	80011be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011ba:	2301      	movs	r3, #1
 80011bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011be:	4b77      	ldr	r3, [pc, #476]	@ (800139c <HAL_RCC_OscConfig+0x474>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d118      	bne.n	80011fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ca:	4b74      	ldr	r3, [pc, #464]	@ (800139c <HAL_RCC_OscConfig+0x474>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a73      	ldr	r2, [pc, #460]	@ (800139c <HAL_RCC_OscConfig+0x474>)
 80011d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d6:	f7ff fbe9 	bl	80009ac <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011de:	f7ff fbe5 	bl	80009ac <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e10c      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f0:	4b6a      	ldr	r3, [pc, #424]	@ (800139c <HAL_RCC_OscConfig+0x474>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d0f0      	beq.n	80011de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d106      	bne.n	8001212 <HAL_RCC_OscConfig+0x2ea>
 8001204:	4b64      	ldr	r3, [pc, #400]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001208:	4a63      	ldr	r2, [pc, #396]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001210:	e01c      	b.n	800124c <HAL_RCC_OscConfig+0x324>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	2b05      	cmp	r3, #5
 8001218:	d10c      	bne.n	8001234 <HAL_RCC_OscConfig+0x30c>
 800121a:	4b5f      	ldr	r3, [pc, #380]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 800121c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800121e:	4a5e      	ldr	r2, [pc, #376]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001220:	f043 0304 	orr.w	r3, r3, #4
 8001224:	6713      	str	r3, [r2, #112]	@ 0x70
 8001226:	4b5c      	ldr	r3, [pc, #368]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800122a:	4a5b      	ldr	r2, [pc, #364]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6713      	str	r3, [r2, #112]	@ 0x70
 8001232:	e00b      	b.n	800124c <HAL_RCC_OscConfig+0x324>
 8001234:	4b58      	ldr	r3, [pc, #352]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001238:	4a57      	ldr	r2, [pc, #348]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 800123a:	f023 0301 	bic.w	r3, r3, #1
 800123e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001240:	4b55      	ldr	r3, [pc, #340]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001244:	4a54      	ldr	r2, [pc, #336]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001246:	f023 0304 	bic.w	r3, r3, #4
 800124a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d015      	beq.n	8001280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff fbaa 	bl	80009ac <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800125a:	e00a      	b.n	8001272 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800125c:	f7ff fba6 	bl	80009ac <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800126a:	4293      	cmp	r3, r2
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e0cb      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001272:	4b49      	ldr	r3, [pc, #292]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0ee      	beq.n	800125c <HAL_RCC_OscConfig+0x334>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001280:	f7ff fb94 	bl	80009ac <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	e00a      	b.n	800129e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001288:	f7ff fb90 	bl	80009ac <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001296:	4293      	cmp	r3, r2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e0b5      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800129e:	4b3e      	ldr	r3, [pc, #248]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80012a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ee      	bne.n	8001288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012aa:	7dfb      	ldrb	r3, [r7, #23]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d105      	bne.n	80012bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b0:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80012b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b4:	4a38      	ldr	r2, [pc, #224]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80012b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	f000 80a1 	beq.w	8001408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012c6:	4b34      	ldr	r3, [pc, #208]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b08      	cmp	r3, #8
 80012d0:	d05c      	beq.n	800138c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d141      	bne.n	800135e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b31      	ldr	r3, [pc, #196]	@ (80013a0 <HAL_RCC_OscConfig+0x478>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fb64 	bl	80009ac <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fb60 	bl	80009ac <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e087      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	69da      	ldr	r2, [r3, #28]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	431a      	orrs	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	3b01      	subs	r3, #1
 8001320:	041b      	lsls	r3, r3, #16
 8001322:	431a      	orrs	r2, r3
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001328:	061b      	lsls	r3, r3, #24
 800132a:	491b      	ldr	r1, [pc, #108]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 800132c:	4313      	orrs	r3, r2
 800132e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <HAL_RCC_OscConfig+0x478>)
 8001332:	2201      	movs	r2, #1
 8001334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001336:	f7ff fb39 	bl	80009ac <HAL_GetTick>
 800133a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133c:	e008      	b.n	8001350 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800133e:	f7ff fb35 	bl	80009ac <HAL_GetTick>
 8001342:	4602      	mov	r2, r0
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d901      	bls.n	8001350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800134c:	2303      	movs	r3, #3
 800134e:	e05c      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001358:	2b00      	cmp	r3, #0
 800135a:	d0f0      	beq.n	800133e <HAL_RCC_OscConfig+0x416>
 800135c:	e054      	b.n	8001408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <HAL_RCC_OscConfig+0x478>)
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fb22 	bl	80009ac <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136c:	f7ff fb1e 	bl	80009ac <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e045      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <HAL_RCC_OscConfig+0x470>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x444>
 800138a:	e03d      	b.n	8001408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d107      	bne.n	80013a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e038      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
 8001398:	40023800 	.word	0x40023800
 800139c:	40007000 	.word	0x40007000
 80013a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <HAL_RCC_OscConfig+0x4ec>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d028      	beq.n	8001404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013bc:	429a      	cmp	r2, r3
 80013be:	d121      	bne.n	8001404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d11a      	bne.n	8001404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013d4:	4013      	ands	r3, r2
 80013d6:	687a      	ldr	r2, [r7, #4]
 80013d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80013da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013dc:	4293      	cmp	r3, r2
 80013de:	d111      	bne.n	8001404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ea:	085b      	lsrs	r3, r3, #1
 80013ec:	3b01      	subs	r3, #1
 80013ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d107      	bne.n	8001404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e0cc      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800142c:	4b68      	ldr	r3, [pc, #416]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	429a      	cmp	r2, r3
 8001438:	d90c      	bls.n	8001454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143a:	4b65      	ldr	r3, [pc, #404]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800143c:	683a      	ldr	r2, [r7, #0]
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001442:	4b63      	ldr	r3, [pc, #396]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	429a      	cmp	r2, r3
 800144e:	d001      	beq.n	8001454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0b8      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d020      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	d005      	beq.n	8001478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800146c:	4b59      	ldr	r3, [pc, #356]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	4a58      	ldr	r2, [pc, #352]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001476:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0308 	and.w	r3, r3, #8
 8001480:	2b00      	cmp	r3, #0
 8001482:	d005      	beq.n	8001490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001484:	4b53      	ldr	r3, [pc, #332]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4a52      	ldr	r2, [pc, #328]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800148a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800148e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001490:	4b50      	ldr	r3, [pc, #320]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001492:	689b      	ldr	r3, [r3, #8]
 8001494:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	494d      	ldr	r1, [pc, #308]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d044      	beq.n	8001538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d107      	bne.n	80014c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b47      	ldr	r3, [pc, #284]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d119      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e07f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d003      	beq.n	80014d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d107      	bne.n	80014e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014d6:	4b3f      	ldr	r3, [pc, #252]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d109      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e06f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e6:	4b3b      	ldr	r3, [pc, #236]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e067      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014f6:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f023 0203 	bic.w	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4934      	ldr	r1, [pc, #208]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001504:	4313      	orrs	r3, r2
 8001506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001508:	f7ff fa50 	bl	80009ac <HAL_GetTick>
 800150c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800150e:	e00a      	b.n	8001526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001510:	f7ff fa4c 	bl	80009ac <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800151e:	4293      	cmp	r3, r2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e04f      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001526:	4b2b      	ldr	r3, [pc, #172]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 020c 	and.w	r2, r3, #12
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	429a      	cmp	r2, r3
 8001536:	d1eb      	bne.n	8001510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001538:	4b25      	ldr	r3, [pc, #148]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d20c      	bcs.n	8001560 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b22      	ldr	r3, [pc, #136]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800154e:	4b20      	ldr	r3, [pc, #128]	@ (80015d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	683a      	ldr	r2, [r7, #0]
 8001558:	429a      	cmp	r2, r3
 800155a:	d001      	beq.n	8001560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e032      	b.n	80015c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0304 	and.w	r3, r3, #4
 8001568:	2b00      	cmp	r3, #0
 800156a:	d008      	beq.n	800157e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800156c:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	4916      	ldr	r1, [pc, #88]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800157a:	4313      	orrs	r3, r2
 800157c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0308 	and.w	r3, r3, #8
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	691b      	ldr	r3, [r3, #16]
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	490e      	ldr	r1, [pc, #56]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 800159a:	4313      	orrs	r3, r2
 800159c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800159e:	f000 f821 	bl	80015e4 <HAL_RCC_GetSysClockFreq>
 80015a2:	4602      	mov	r2, r0
 80015a4:	4b0b      	ldr	r3, [pc, #44]	@ (80015d4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	f003 030f 	and.w	r3, r3, #15
 80015ae:	490a      	ldr	r1, [pc, #40]	@ (80015d8 <HAL_RCC_ClockConfig+0x1c0>)
 80015b0:	5ccb      	ldrb	r3, [r1, r3]
 80015b2:	fa22 f303 	lsr.w	r3, r2, r3
 80015b6:	4a09      	ldr	r2, [pc, #36]	@ (80015dc <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015ba:	4b09      	ldr	r3, [pc, #36]	@ (80015e0 <HAL_RCC_ClockConfig+0x1c8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f8e8 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00
 80015d4:	40023800 	.word	0x40023800
 80015d8:	08004d38 	.word	0x08004d38
 80015dc:	20000000 	.word	0x20000000
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015e8:	b094      	sub	sp, #80	@ 0x50
 80015ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fc:	4b79      	ldr	r3, [pc, #484]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
 8001604:	2b08      	cmp	r3, #8
 8001606:	d00d      	beq.n	8001624 <HAL_RCC_GetSysClockFreq+0x40>
 8001608:	2b08      	cmp	r3, #8
 800160a:	f200 80e1 	bhi.w	80017d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d002      	beq.n	8001618 <HAL_RCC_GetSysClockFreq+0x34>
 8001612:	2b04      	cmp	r3, #4
 8001614:	d003      	beq.n	800161e <HAL_RCC_GetSysClockFreq+0x3a>
 8001616:	e0db      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4b73      	ldr	r3, [pc, #460]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800161a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800161c:	e0db      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800161e:	4b73      	ldr	r3, [pc, #460]	@ (80017ec <HAL_RCC_GetSysClockFreq+0x208>)
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001622:	e0d8      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001624:	4b6f      	ldr	r3, [pc, #444]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800162c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800162e:	4b6d      	ldr	r3, [pc, #436]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800163a:	4b6a      	ldr	r3, [pc, #424]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	099b      	lsrs	r3, r3, #6
 8001640:	2200      	movs	r2, #0
 8001642:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001644:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800164c:	633b      	str	r3, [r7, #48]	@ 0x30
 800164e:	2300      	movs	r3, #0
 8001650:	637b      	str	r3, [r7, #52]	@ 0x34
 8001652:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001656:	4622      	mov	r2, r4
 8001658:	462b      	mov	r3, r5
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	0159      	lsls	r1, r3, #5
 8001664:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001668:	0150      	lsls	r0, r2, #5
 800166a:	4602      	mov	r2, r0
 800166c:	460b      	mov	r3, r1
 800166e:	4621      	mov	r1, r4
 8001670:	1a51      	subs	r1, r2, r1
 8001672:	6139      	str	r1, [r7, #16]
 8001674:	4629      	mov	r1, r5
 8001676:	eb63 0301 	sbc.w	r3, r3, r1
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	f04f 0200 	mov.w	r2, #0
 8001680:	f04f 0300 	mov.w	r3, #0
 8001684:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001688:	4659      	mov	r1, fp
 800168a:	018b      	lsls	r3, r1, #6
 800168c:	4651      	mov	r1, sl
 800168e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001692:	4651      	mov	r1, sl
 8001694:	018a      	lsls	r2, r1, #6
 8001696:	4651      	mov	r1, sl
 8001698:	ebb2 0801 	subs.w	r8, r2, r1
 800169c:	4659      	mov	r1, fp
 800169e:	eb63 0901 	sbc.w	r9, r3, r1
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016b6:	4690      	mov	r8, r2
 80016b8:	4699      	mov	r9, r3
 80016ba:	4623      	mov	r3, r4
 80016bc:	eb18 0303 	adds.w	r3, r8, r3
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	462b      	mov	r3, r5
 80016c4:	eb49 0303 	adc.w	r3, r9, r3
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016d6:	4629      	mov	r1, r5
 80016d8:	024b      	lsls	r3, r1, #9
 80016da:	4621      	mov	r1, r4
 80016dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016e0:	4621      	mov	r1, r4
 80016e2:	024a      	lsls	r2, r1, #9
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016ea:	2200      	movs	r2, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80016f4:	f7fe fd6c 	bl	80001d0 <__aeabi_uldivmod>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4613      	mov	r3, r2
 80016fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001700:	e058      	b.n	80017b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001702:	4b38      	ldr	r3, [pc, #224]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	099b      	lsrs	r3, r3, #6
 8001708:	2200      	movs	r2, #0
 800170a:	4618      	mov	r0, r3
 800170c:	4611      	mov	r1, r2
 800170e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24
 8001718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800171c:	4642      	mov	r2, r8
 800171e:	464b      	mov	r3, r9
 8001720:	f04f 0000 	mov.w	r0, #0
 8001724:	f04f 0100 	mov.w	r1, #0
 8001728:	0159      	lsls	r1, r3, #5
 800172a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800172e:	0150      	lsls	r0, r2, #5
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4641      	mov	r1, r8
 8001736:	ebb2 0a01 	subs.w	sl, r2, r1
 800173a:	4649      	mov	r1, r9
 800173c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800174c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001750:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001754:	ebb2 040a 	subs.w	r4, r2, sl
 8001758:	eb63 050b 	sbc.w	r5, r3, fp
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	00eb      	lsls	r3, r5, #3
 8001766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800176a:	00e2      	lsls	r2, r4, #3
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	4643      	mov	r3, r8
 8001772:	18e3      	adds	r3, r4, r3
 8001774:	603b      	str	r3, [r7, #0]
 8001776:	464b      	mov	r3, r9
 8001778:	eb45 0303 	adc.w	r3, r5, r3
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	f04f 0200 	mov.w	r2, #0
 8001782:	f04f 0300 	mov.w	r3, #0
 8001786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800178a:	4629      	mov	r1, r5
 800178c:	028b      	lsls	r3, r1, #10
 800178e:	4621      	mov	r1, r4
 8001790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001794:	4621      	mov	r1, r4
 8001796:	028a      	lsls	r2, r1, #10
 8001798:	4610      	mov	r0, r2
 800179a:	4619      	mov	r1, r3
 800179c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800179e:	2200      	movs	r2, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	61fa      	str	r2, [r7, #28]
 80017a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017a8:	f7fe fd12 	bl	80001d0 <__aeabi_uldivmod>
 80017ac:	4602      	mov	r2, r0
 80017ae:	460b      	mov	r3, r1
 80017b0:	4613      	mov	r3, r2
 80017b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017b4:	4b0b      	ldr	r3, [pc, #44]	@ (80017e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0c1b      	lsrs	r3, r3, #16
 80017ba:	f003 0303 	and.w	r3, r3, #3
 80017be:	3301      	adds	r3, #1
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80017c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ce:	e002      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017d0:	4b05      	ldr	r3, [pc, #20]	@ (80017e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80017d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3750      	adds	r7, #80	@ 0x50
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800
 80017e8:	00f42400 	.word	0x00f42400
 80017ec:	007a1200 	.word	0x007a1200

080017f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <HAL_RCC_GetHCLKFreq+0x14>)
 80017f6:	681b      	ldr	r3, [r3, #0]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000000 	.word	0x20000000

08001808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800180c:	f7ff fff0 	bl	80017f0 <HAL_RCC_GetHCLKFreq>
 8001810:	4602      	mov	r2, r0
 8001812:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	0b5b      	lsrs	r3, r3, #13
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	4903      	ldr	r1, [pc, #12]	@ (800182c <HAL_RCC_GetPCLK2Freq+0x24>)
 800181e:	5ccb      	ldrb	r3, [r1, r3]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001824:	4618      	mov	r0, r3
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40023800 	.word	0x40023800
 800182c:	08004d48 	.word	0x08004d48

08001830 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	220f      	movs	r2, #15
 800183e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001840:	4b12      	ldr	r3, [pc, #72]	@ (800188c <HAL_RCC_GetClockConfig+0x5c>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800184c:	4b0f      	ldr	r3, [pc, #60]	@ (800188c <HAL_RCC_GetClockConfig+0x5c>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <HAL_RCC_GetClockConfig+0x5c>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001864:	4b09      	ldr	r3, [pc, #36]	@ (800188c <HAL_RCC_GetClockConfig+0x5c>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	08db      	lsrs	r3, r3, #3
 800186a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <HAL_RCC_GetClockConfig+0x60>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0207 	and.w	r2, r3, #7
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	601a      	str	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40023800 	.word	0x40023800
 8001890:	40023c00 	.word	0x40023c00

08001894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e041      	b.n	800192a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d106      	bne.n	80018c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f839 	bl	8001932 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3304      	adds	r3, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4610      	mov	r0, r2
 80018d4:	f000 f9c0 	bl	8001c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
	...

08001948 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001956:	b2db      	uxtb	r3, r3
 8001958:	2b01      	cmp	r3, #1
 800195a:	d001      	beq.n	8001960 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e04e      	b.n	80019fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2202      	movs	r2, #2
 8001964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68da      	ldr	r2, [r3, #12]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a23      	ldr	r2, [pc, #140]	@ (8001a0c <HAL_TIM_Base_Start_IT+0xc4>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d022      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198a:	d01d      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a1f      	ldr	r2, [pc, #124]	@ (8001a10 <HAL_TIM_Base_Start_IT+0xc8>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d018      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a1e      	ldr	r2, [pc, #120]	@ (8001a14 <HAL_TIM_Base_Start_IT+0xcc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_TIM_Base_Start_IT+0xd0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00e      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_TIM_Base_Start_IT+0xd4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d009      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a19      	ldr	r2, [pc, #100]	@ (8001a20 <HAL_TIM_Base_Start_IT+0xd8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d004      	beq.n	80019c8 <HAL_TIM_Base_Start_IT+0x80>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a18      	ldr	r2, [pc, #96]	@ (8001a24 <HAL_TIM_Base_Start_IT+0xdc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d111      	bne.n	80019ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d010      	beq.n	80019fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0201 	orr.w	r2, r2, #1
 80019e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019ea:	e007      	b.n	80019fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40000400 	.word	0x40000400
 8001a14:	40000800 	.word	0x40000800
 8001a18:	40000c00 	.word	0x40000c00
 8001a1c:	40010400 	.word	0x40010400
 8001a20:	40014000 	.word	0x40014000
 8001a24:	40001800 	.word	0x40001800

08001a28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d020      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d01b      	beq.n	8001a8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f06f 0202 	mvn.w	r2, #2
 8001a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2201      	movs	r2, #1
 8001a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	f003 0303 	and.w	r3, r3, #3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f8d2 	bl	8001c1c <HAL_TIM_IC_CaptureCallback>
 8001a78:	e005      	b.n	8001a86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8c4 	bl	8001c08 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f000 f8d5 	bl	8001c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d020      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d01b      	beq.n	8001ad8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0204 	mvn.w	r2, #4
 8001aa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2202      	movs	r2, #2
 8001aae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8ac 	bl	8001c1c <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f89e 	bl	8001c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8af 	bl	8001c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d020      	beq.n	8001b24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d01b      	beq.n	8001b24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f06f 0208 	mvn.w	r2, #8
 8001af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2204      	movs	r2, #4
 8001afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f000 f886 	bl	8001c1c <HAL_TIM_IC_CaptureCallback>
 8001b10:	e005      	b.n	8001b1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f878 	bl	8001c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f889 	bl	8001c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d020      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01b      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0210 	mvn.w	r2, #16
 8001b40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2208      	movs	r2, #8
 8001b46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	69db      	ldr	r3, [r3, #28]
 8001b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f860 	bl	8001c1c <HAL_TIM_IC_CaptureCallback>
 8001b5c:	e005      	b.n	8001b6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 f852 	bl	8001c08 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f000 f863 	bl	8001c30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00c      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d007      	beq.n	8001b94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0201 	mvn.w	r2, #1
 8001b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7fe fdbc 	bl	800070c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00c      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d007      	beq.n	8001bb8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f900 	bl	8001db8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f834 	bl	8001c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00c      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	f003 0320 	and.w	r3, r3, #32
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d007      	beq.n	8001c00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0220 	mvn.w	r2, #32
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f8d2 	bl	8001da4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c10:	bf00      	nop
 8001c12:	370c      	adds	r7, #12
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a43      	ldr	r2, [pc, #268]	@ (8001d78 <TIM_Base_SetConfig+0x120>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d013      	beq.n	8001c98 <TIM_Base_SetConfig+0x40>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c76:	d00f      	beq.n	8001c98 <TIM_Base_SetConfig+0x40>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a40      	ldr	r2, [pc, #256]	@ (8001d7c <TIM_Base_SetConfig+0x124>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00b      	beq.n	8001c98 <TIM_Base_SetConfig+0x40>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3f      	ldr	r2, [pc, #252]	@ (8001d80 <TIM_Base_SetConfig+0x128>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <TIM_Base_SetConfig+0x40>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3e      	ldr	r2, [pc, #248]	@ (8001d84 <TIM_Base_SetConfig+0x12c>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d003      	beq.n	8001c98 <TIM_Base_SetConfig+0x40>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a3d      	ldr	r2, [pc, #244]	@ (8001d88 <TIM_Base_SetConfig+0x130>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d108      	bne.n	8001caa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a32      	ldr	r2, [pc, #200]	@ (8001d78 <TIM_Base_SetConfig+0x120>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02b      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cb8:	d027      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a2f      	ldr	r2, [pc, #188]	@ (8001d7c <TIM_Base_SetConfig+0x124>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d023      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8001d80 <TIM_Base_SetConfig+0x128>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a2d      	ldr	r2, [pc, #180]	@ (8001d84 <TIM_Base_SetConfig+0x12c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01b      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d88 <TIM_Base_SetConfig+0x130>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d017      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d8c <TIM_Base_SetConfig+0x134>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2a      	ldr	r2, [pc, #168]	@ (8001d90 <TIM_Base_SetConfig+0x138>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00f      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a29      	ldr	r2, [pc, #164]	@ (8001d94 <TIM_Base_SetConfig+0x13c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <TIM_Base_SetConfig+0x140>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a27      	ldr	r2, [pc, #156]	@ (8001d9c <TIM_Base_SetConfig+0x144>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d003      	beq.n	8001d0a <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a26      	ldr	r2, [pc, #152]	@ (8001da0 <TIM_Base_SetConfig+0x148>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d108      	bne.n	8001d1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	68fa      	ldr	r2, [r7, #12]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8001d78 <TIM_Base_SetConfig+0x120>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d003      	beq.n	8001d4a <TIM_Base_SetConfig+0xf2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a10      	ldr	r2, [pc, #64]	@ (8001d88 <TIM_Base_SetConfig+0x130>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d103      	bne.n	8001d52 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f043 0204 	orr.w	r2, r3, #4
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	40000400 	.word	0x40000400
 8001d80:	40000800 	.word	0x40000800
 8001d84:	40000c00 	.word	0x40000c00
 8001d88:	40010400 	.word	0x40010400
 8001d8c:	40014000 	.word	0x40014000
 8001d90:	40014400 	.word	0x40014400
 8001d94:	40014800 	.word	0x40014800
 8001d98:	40001800 	.word	0x40001800
 8001d9c:	40001c00 	.word	0x40001c00
 8001da0:	40002000 	.word	0x40002000

08001da4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <__NVIC_SetPriority>:
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	6039      	str	r1, [r7, #0]
 8001dd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	db0a      	blt.n	8001df6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <__NVIC_SetPriority+0x4c>)
 8001de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dea:	0112      	lsls	r2, r2, #4
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	440b      	add	r3, r1
 8001df0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001df4:	e00a      	b.n	8001e0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	b2da      	uxtb	r2, r3
 8001dfa:	4908      	ldr	r1, [pc, #32]	@ (8001e1c <__NVIC_SetPriority+0x50>)
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	3b04      	subs	r3, #4
 8001e04:	0112      	lsls	r2, r2, #4
 8001e06:	b2d2      	uxtb	r2, r2
 8001e08:	440b      	add	r3, r1
 8001e0a:	761a      	strb	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	e000e100 	.word	0xe000e100
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e24:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <SysTick_Handler+0x1c>)
 8001e26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e28:	f001 fdc0 	bl	80039ac <xTaskGetSchedulerState>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d001      	beq.n	8001e36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e32:	f002 fbb9 	bl	80045a8 <xPortSysTickHandler>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e44:	2100      	movs	r1, #0
 8001e46:	f06f 0004 	mvn.w	r0, #4
 8001e4a:	f7ff ffbf 	bl	8001dcc <__NVIC_SetPriority>
#endif
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e5a:	f3ef 8305 	mrs	r3, IPSR
 8001e5e:	603b      	str	r3, [r7, #0]
  return(result);
 8001e60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e66:	f06f 0305 	mvn.w	r3, #5
 8001e6a:	607b      	str	r3, [r7, #4]
 8001e6c:	e00c      	b.n	8001e88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <osKernelInitialize+0x44>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e76:	4b08      	ldr	r3, [pc, #32]	@ (8001e98 <osKernelInitialize+0x44>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	607b      	str	r3, [r7, #4]
 8001e80:	e002      	b.n	8001e88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001e88:	687b      	ldr	r3, [r7, #4]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	200000d4 	.word	0x200000d4

08001e9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ea2:	f3ef 8305 	mrs	r3, IPSR
 8001ea6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ea8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001eae:	f06f 0305 	mvn.w	r3, #5
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	e010      	b.n	8001ed8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <osKernelStart+0x48>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d109      	bne.n	8001ed2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001ebe:	f7ff ffbf 	bl	8001e40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	@ (8001ee4 <osKernelStart+0x48>)
 8001ec4:	2202      	movs	r2, #2
 8001ec6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ec8:	f001 f90c 	bl	80030e4 <vTaskStartScheduler>
      stat = osOK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	e002      	b.n	8001ed8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ed8:	687b      	ldr	r3, [r7, #4]
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200000d4 	.word	0x200000d4

08001ee8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b08e      	sub	sp, #56	@ 0x38
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ef8:	f3ef 8305 	mrs	r3, IPSR
 8001efc:	617b      	str	r3, [r7, #20]
  return(result);
 8001efe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d17e      	bne.n	8002002 <osThreadNew+0x11a>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07b      	beq.n	8002002 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f0e:	2318      	movs	r3, #24
 8001f10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d045      	beq.n	8001fae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <osThreadNew+0x48>
        name = attr->name;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <osThreadNew+0x6e>
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b38      	cmp	r3, #56	@ 0x38
 8001f48:	d805      	bhi.n	8001f56 <osThreadNew+0x6e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <osThreadNew+0x72>
        return (NULL);
 8001f56:	2300      	movs	r3, #0
 8001f58:	e054      	b.n	8002004 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	089b      	lsrs	r3, r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00e      	beq.n	8001f90 <osThreadNew+0xa8>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	2ba7      	cmp	r3, #167	@ 0xa7
 8001f78:	d90a      	bls.n	8001f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d006      	beq.n	8001f90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <osThreadNew+0xa8>
        mem = 1;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	e010      	b.n	8001fb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10c      	bne.n	8001fb2 <osThreadNew+0xca>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d108      	bne.n	8001fb2 <osThreadNew+0xca>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d104      	bne.n	8001fb2 <osThreadNew+0xca>
          mem = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61bb      	str	r3, [r7, #24]
 8001fac:	e001      	b.n	8001fb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d110      	bne.n	8001fda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fc0:	9202      	str	r2, [sp, #8]
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6a3a      	ldr	r2, [r7, #32]
 8001fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 fe20 	bl	8002c14 <xTaskCreateStatic>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	e013      	b.n	8002002 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d110      	bne.n	8002002 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	9301      	str	r3, [sp, #4]
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 fe6e 	bl	8002cd4 <xTaskCreate>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d001      	beq.n	8002002 <osThreadNew+0x11a>
            hTask = NULL;
 8001ffe:	2300      	movs	r3, #0
 8002000:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002002:	693b      	ldr	r3, [r7, #16]
}
 8002004:	4618      	mov	r0, r3
 8002006:	3728      	adds	r7, #40	@ 0x28
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8002010:	2000      	movs	r0, #0
 8002012:	f000 ffbd 	bl	8002f90 <vTaskDelete>
#endif
  for (;;);
 8002016:	bf00      	nop
 8002018:	e7fd      	b.n	8002016 <osThreadExit+0xa>

0800201a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800201a:	b580      	push	{r7, lr}
 800201c:	b084      	sub	sp, #16
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002022:	f3ef 8305 	mrs	r3, IPSR
 8002026:	60bb      	str	r3, [r7, #8]
  return(result);
 8002028:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <osDelay+0x1c>
    stat = osErrorISR;
 800202e:	f06f 0305 	mvn.w	r3, #5
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	e007      	b.n	8002046 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f001 f819 	bl	8003078 <vTaskDelay>
    }
  }

  return (stat);
 8002046:	68fb      	ldr	r3, [r7, #12]
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002050:	b480      	push	{r7}
 8002052:	b085      	sub	sp, #20
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4a07      	ldr	r2, [pc, #28]	@ (800207c <vApplicationGetIdleTaskMemory+0x2c>)
 8002060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4a06      	ldr	r2, [pc, #24]	@ (8002080 <vApplicationGetIdleTaskMemory+0x30>)
 8002066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2280      	movs	r2, #128	@ 0x80
 800206c:	601a      	str	r2, [r3, #0]
}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	200000d8 	.word	0x200000d8
 8002080:	20000180 	.word	0x20000180

08002084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4a07      	ldr	r2, [pc, #28]	@ (80020b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4a06      	ldr	r2, [pc, #24]	@ (80020b4 <vApplicationGetTimerTaskMemory+0x30>)
 800209a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020a2:	601a      	str	r2, [r3, #0]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	20000380 	.word	0x20000380
 80020b4:	20000428 	.word	0x20000428

080020b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0208 	add.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f103 0208 	add.w	r2, r3, #8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f103 0208 	add.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr

08002112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002112:	b480      	push	{r7}
 8002114:	b085      	sub	sp, #20
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
 800211a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	1c5a      	adds	r2, r3, #1
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	601a      	str	r2, [r3, #0]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800215a:	b480      	push	{r7}
 800215c:	b085      	sub	sp, #20
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d103      	bne.n	800217a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	e00c      	b.n	8002194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3308      	adds	r3, #8
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	e002      	b.n	8002188 <vListInsert+0x2e>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	d2f6      	bcs.n	8002182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6892      	ldr	r2, [r2, #8]
 80021e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	6852      	ldr	r2, [r2, #4]
 80021ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d103      	bne.n	8002200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	1e5a      	subs	r2, r3, #1
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr

08002220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10b      	bne.n	800224c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002246:	bf00      	nop
 8002248:	bf00      	nop
 800224a:	e7fd      	b.n	8002248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800224c:	f002 f91c 	bl	8004488 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	68f9      	ldr	r1, [r7, #12]
 800225a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800225c:	fb01 f303 	mul.w	r3, r1, r3
 8002260:	441a      	add	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227c:	3b01      	subs	r3, #1
 800227e:	68f9      	ldr	r1, [r7, #12]
 8002280:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002282:	fb01 f303 	mul.w	r3, r1, r3
 8002286:	441a      	add	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	22ff      	movs	r2, #255	@ 0xff
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	22ff      	movs	r2, #255	@ 0xff
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d114      	bne.n	80022cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d01a      	beq.n	80022e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	3310      	adds	r3, #16
 80022ae:	4618      	mov	r0, r3
 80022b0:	f001 f9b6 	bl	8003620 <xTaskRemoveFromEventList>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d012      	beq.n	80022e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80022ba:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <xQueueGenericReset+0xd0>)
 80022bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f3bf 8f4f 	dsb	sy
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	e009      	b.n	80022e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fef1 	bl	80020b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	3324      	adds	r3, #36	@ 0x24
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff feec 	bl	80020b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80022e0:	f002 f904 	bl	80044ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	e000ed04 	.word	0xe000ed04

080022f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08e      	sub	sp, #56	@ 0x38
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800230c:	f383 8811 	msr	BASEPRI, r3
 8002310:	f3bf 8f6f 	isb	sy
 8002314:	f3bf 8f4f 	dsb	sy
 8002318:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800231a:	bf00      	nop
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d002      	beq.n	800234a <xQueueGenericCreateStatic+0x56>
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <xQueueGenericCreateStatic+0x5a>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <xQueueGenericCreateStatic+0x5c>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002358:	f383 8811 	msr	BASEPRI, r3
 800235c:	f3bf 8f6f 	isb	sy
 8002360:	f3bf 8f4f 	dsb	sy
 8002364:	623b      	str	r3, [r7, #32]
}
 8002366:	bf00      	nop
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <xQueueGenericCreateStatic+0x84>
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d101      	bne.n	800237c <xQueueGenericCreateStatic+0x88>
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <xQueueGenericCreateStatic+0x8a>
 800237c:	2300      	movs	r3, #0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d10b      	bne.n	800239a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002386:	f383 8811 	msr	BASEPRI, r3
 800238a:	f3bf 8f6f 	isb	sy
 800238e:	f3bf 8f4f 	dsb	sy
 8002392:	61fb      	str	r3, [r7, #28]
}
 8002394:	bf00      	nop
 8002396:	bf00      	nop
 8002398:	e7fd      	b.n	8002396 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800239a:	2350      	movs	r3, #80	@ 0x50
 800239c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	2b50      	cmp	r3, #80	@ 0x50
 80023a2:	d00b      	beq.n	80023bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80023a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a8:	f383 8811 	msr	BASEPRI, r3
 80023ac:	f3bf 8f6f 	isb	sy
 80023b0:	f3bf 8f4f 	dsb	sy
 80023b4:	61bb      	str	r3, [r7, #24]
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80023bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80023c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00d      	beq.n	80023e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d6:	9300      	str	r3, [sp, #0]
 80023d8:	4613      	mov	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f805 	bl	80023ee <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80023e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3730      	adds	r7, #48	@ 0x30
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d103      	bne.n	800240a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e002      	b.n	8002410 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800241c:	2101      	movs	r1, #1
 800241e:	69b8      	ldr	r0, [r7, #24]
 8002420:	f7ff fefe 	bl	8002220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800242c:	bf00      	nop
 800242e:	3710      	adds	r7, #16
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08e      	sub	sp, #56	@ 0x38
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002442:	2300      	movs	r3, #0
 8002444:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800244a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10b      	bne.n	8002468 <xQueueGenericSend+0x34>
	__asm volatile
 8002450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002462:	bf00      	nop
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <xQueueGenericSend+0x42>
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <xQueueGenericSend+0x46>
 8002476:	2301      	movs	r3, #1
 8002478:	e000      	b.n	800247c <xQueueGenericSend+0x48>
 800247a:	2300      	movs	r3, #0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <xQueueGenericSend+0x64>
	__asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002492:	bf00      	nop
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	2b02      	cmp	r3, #2
 800249c:	d103      	bne.n	80024a6 <xQueueGenericSend+0x72>
 800249e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d101      	bne.n	80024aa <xQueueGenericSend+0x76>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <xQueueGenericSend+0x78>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d10b      	bne.n	80024c8 <xQueueGenericSend+0x94>
	__asm volatile
 80024b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024b4:	f383 8811 	msr	BASEPRI, r3
 80024b8:	f3bf 8f6f 	isb	sy
 80024bc:	f3bf 8f4f 	dsb	sy
 80024c0:	623b      	str	r3, [r7, #32]
}
 80024c2:	bf00      	nop
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024c8:	f001 fa70 	bl	80039ac <xTaskGetSchedulerState>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d102      	bne.n	80024d8 <xQueueGenericSend+0xa4>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <xQueueGenericSend+0xa8>
 80024d8:	2301      	movs	r3, #1
 80024da:	e000      	b.n	80024de <xQueueGenericSend+0xaa>
 80024dc:	2300      	movs	r3, #0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <xQueueGenericSend+0xc6>
	__asm volatile
 80024e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e6:	f383 8811 	msr	BASEPRI, r3
 80024ea:	f3bf 8f6f 	isb	sy
 80024ee:	f3bf 8f4f 	dsb	sy
 80024f2:	61fb      	str	r3, [r7, #28]
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	e7fd      	b.n	80024f6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024fa:	f001 ffc5 	bl	8004488 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80024fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002500:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <xQueueGenericSend+0xdc>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d129      	bne.n	8002564 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002516:	f000 fa0f 	bl	8002938 <prvCopyDataToQueue>
 800251a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002526:	3324      	adds	r3, #36	@ 0x24
 8002528:	4618      	mov	r0, r3
 800252a:	f001 f879 	bl	8003620 <xTaskRemoveFromEventList>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002534:	4b3f      	ldr	r3, [pc, #252]	@ (8002634 <xQueueGenericSend+0x200>)
 8002536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	e00a      	b.n	800255c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	2b00      	cmp	r3, #0
 800254a:	d007      	beq.n	800255c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800254c:	4b39      	ldr	r3, [pc, #228]	@ (8002634 <xQueueGenericSend+0x200>)
 800254e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800255c:	f001 ffc6 	bl	80044ec <vPortExitCritical>
				return pdPASS;
 8002560:	2301      	movs	r3, #1
 8002562:	e063      	b.n	800262c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d103      	bne.n	8002572 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800256a:	f001 ffbf 	bl	80044ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800256e:	2300      	movs	r3, #0
 8002570:	e05c      	b.n	800262c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002574:	2b00      	cmp	r3, #0
 8002576:	d106      	bne.n	8002586 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4618      	mov	r0, r3
 800257e:	f001 f8b3 	bl	80036e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002582:	2301      	movs	r3, #1
 8002584:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002586:	f001 ffb1 	bl	80044ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800258a:	f000 fe1b 	bl	80031c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800258e:	f001 ff7b 	bl	8004488 <vPortEnterCritical>
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002598:	b25b      	sxtb	r3, r3
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d103      	bne.n	80025a8 <xQueueGenericSend+0x174>
 80025a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80025ae:	b25b      	sxtb	r3, r3
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d103      	bne.n	80025be <xQueueGenericSend+0x18a>
 80025b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025be:	f001 ff95 	bl	80044ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025c2:	1d3a      	adds	r2, r7, #4
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4611      	mov	r1, r2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f001 f8a2 	bl	8003714 <xTaskCheckForTimeOut>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d124      	bne.n	8002620 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80025d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025d8:	f000 faa6 	bl	8002b28 <prvIsQueueFull>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80025e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e4:	3310      	adds	r3, #16
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	4611      	mov	r1, r2
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 ffc6 	bl	800357c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80025f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025f2:	f000 fa31 	bl	8002a58 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80025f6:	f000 fdf3 	bl	80031e0 <xTaskResumeAll>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f47f af7c 	bne.w	80024fa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002602:	4b0c      	ldr	r3, [pc, #48]	@ (8002634 <xQueueGenericSend+0x200>)
 8002604:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	f3bf 8f4f 	dsb	sy
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	e772      	b.n	80024fa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002616:	f000 fa1f 	bl	8002a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800261a:	f000 fde1 	bl	80031e0 <xTaskResumeAll>
 800261e:	e76c      	b.n	80024fa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002620:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002622:	f000 fa19 	bl	8002a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002626:	f000 fddb 	bl	80031e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800262a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800262c:	4618      	mov	r0, r3
 800262e:	3738      	adds	r7, #56	@ 0x38
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	e000ed04 	.word	0xe000ed04

08002638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b090      	sub	sp, #64	@ 0x40
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
 8002644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800264a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002662:	bf00      	nop
 8002664:	bf00      	nop
 8002666:	e7fd      	b.n	8002664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d103      	bne.n	8002676 <xQueueGenericSendFromISR+0x3e>
 800266e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <xQueueGenericSendFromISR+0x42>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <xQueueGenericSendFromISR+0x44>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002684:	f383 8811 	msr	BASEPRI, r3
 8002688:	f3bf 8f6f 	isb	sy
 800268c:	f3bf 8f4f 	dsb	sy
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002692:	bf00      	nop
 8002694:	bf00      	nop
 8002696:	e7fd      	b.n	8002694 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d103      	bne.n	80026a6 <xQueueGenericSendFromISR+0x6e>
 800269e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d101      	bne.n	80026aa <xQueueGenericSendFromISR+0x72>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <xQueueGenericSendFromISR+0x74>
 80026aa:	2300      	movs	r3, #0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10b      	bne.n	80026c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80026b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	623b      	str	r3, [r7, #32]
}
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	e7fd      	b.n	80026c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80026c8:	f001 ffbe 	bl	8004648 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80026cc:	f3ef 8211 	mrs	r2, BASEPRI
 80026d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	61fa      	str	r2, [r7, #28]
 80026e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80026e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80026e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80026ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d302      	bcc.n	80026fa <xQueueGenericSendFromISR+0xc2>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d12f      	bne.n	800275a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80026fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002700:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002708:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002710:	f000 f912 	bl	8002938 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002714:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d112      	bne.n	8002744 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800271e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002728:	3324      	adds	r3, #36	@ 0x24
 800272a:	4618      	mov	r0, r3
 800272c:	f000 ff78 	bl	8003620 <xTaskRemoveFromEventList>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00e      	beq.n	8002754 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00b      	beq.n	8002754 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	e007      	b.n	8002754 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002744:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002748:	3301      	adds	r3, #1
 800274a:	b2db      	uxtb	r3, r3
 800274c:	b25a      	sxtb	r2, r3
 800274e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002754:	2301      	movs	r3, #1
 8002756:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002758:	e001      	b.n	800275e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800275a:	2300      	movs	r3, #0
 800275c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800275e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002760:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002768:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800276a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800276c:	4618      	mov	r0, r3
 800276e:	3740      	adds	r7, #64	@ 0x40
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b08c      	sub	sp, #48	@ 0x30
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800278a:	2b00      	cmp	r3, #0
 800278c:	d10b      	bne.n	80027a6 <xQueueReceive+0x32>
	__asm volatile
 800278e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002792:	f383 8811 	msr	BASEPRI, r3
 8002796:	f3bf 8f6f 	isb	sy
 800279a:	f3bf 8f4f 	dsb	sy
 800279e:	623b      	str	r3, [r7, #32]
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	e7fd      	b.n	80027a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <xQueueReceive+0x40>
 80027ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d101      	bne.n	80027b8 <xQueueReceive+0x44>
 80027b4:	2301      	movs	r3, #1
 80027b6:	e000      	b.n	80027ba <xQueueReceive+0x46>
 80027b8:	2300      	movs	r3, #0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10b      	bne.n	80027d6 <xQueueReceive+0x62>
	__asm volatile
 80027be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027c2:	f383 8811 	msr	BASEPRI, r3
 80027c6:	f3bf 8f6f 	isb	sy
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	61fb      	str	r3, [r7, #28]
}
 80027d0:	bf00      	nop
 80027d2:	bf00      	nop
 80027d4:	e7fd      	b.n	80027d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027d6:	f001 f8e9 	bl	80039ac <xTaskGetSchedulerState>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d102      	bne.n	80027e6 <xQueueReceive+0x72>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <xQueueReceive+0x76>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <xQueueReceive+0x78>
 80027ea:	2300      	movs	r3, #0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10b      	bne.n	8002808 <xQueueReceive+0x94>
	__asm volatile
 80027f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f4:	f383 8811 	msr	BASEPRI, r3
 80027f8:	f3bf 8f6f 	isb	sy
 80027fc:	f3bf 8f4f 	dsb	sy
 8002800:	61bb      	str	r3, [r7, #24]
}
 8002802:	bf00      	nop
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002808:	f001 fe3e 	bl	8004488 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01f      	beq.n	8002858 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800281c:	f000 f8f6 	bl	8002a0c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002822:	1e5a      	subs	r2, r3, #1
 8002824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002826:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002832:	3310      	adds	r3, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fef3 	bl	8003620 <xTaskRemoveFromEventList>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002840:	4b3c      	ldr	r3, [pc, #240]	@ (8002934 <xQueueReceive+0x1c0>)
 8002842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	f3bf 8f4f 	dsb	sy
 800284c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002850:	f001 fe4c 	bl	80044ec <vPortExitCritical>
				return pdPASS;
 8002854:	2301      	movs	r3, #1
 8002856:	e069      	b.n	800292c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800285e:	f001 fe45 	bl	80044ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002862:	2300      	movs	r3, #0
 8002864:	e062      	b.n	800292c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002866:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	d106      	bne.n	800287a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	4618      	mov	r0, r3
 8002872:	f000 ff39 	bl	80036e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002876:	2301      	movs	r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800287a:	f001 fe37 	bl	80044ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800287e:	f000 fca1 	bl	80031c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002882:	f001 fe01 	bl	8004488 <vPortEnterCritical>
 8002886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800288c:	b25b      	sxtb	r3, r3
 800288e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002892:	d103      	bne.n	800289c <xQueueReceive+0x128>
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800289c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800289e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028a2:	b25b      	sxtb	r3, r3
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d103      	bne.n	80028b2 <xQueueReceive+0x13e>
 80028aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028b2:	f001 fe1b 	bl	80044ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028b6:	1d3a      	adds	r2, r7, #4
 80028b8:	f107 0310 	add.w	r3, r7, #16
 80028bc:	4611      	mov	r1, r2
 80028be:	4618      	mov	r0, r3
 80028c0:	f000 ff28 	bl	8003714 <xTaskCheckForTimeOut>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d123      	bne.n	8002912 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028cc:	f000 f916 	bl	8002afc <prvIsQueueEmpty>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d017      	beq.n	8002906 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80028d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d8:	3324      	adds	r3, #36	@ 0x24
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f000 fe4c 	bl	800357c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80028e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028e6:	f000 f8b7 	bl	8002a58 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80028ea:	f000 fc79 	bl	80031e0 <xTaskResumeAll>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d189      	bne.n	8002808 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80028f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002934 <xQueueReceive+0x1c0>)
 80028f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	e780      	b.n	8002808 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002906:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002908:	f000 f8a6 	bl	8002a58 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800290c:	f000 fc68 	bl	80031e0 <xTaskResumeAll>
 8002910:	e77a      	b.n	8002808 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002912:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002914:	f000 f8a0 	bl	8002a58 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002918:	f000 fc62 	bl	80031e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800291c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800291e:	f000 f8ed 	bl	8002afc <prvIsQueueEmpty>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	f43f af6f 	beq.w	8002808 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800292a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800292c:	4618      	mov	r0, r3
 800292e:	3730      	adds	r7, #48	@ 0x30
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10d      	bne.n	8002972 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d14d      	bne.n	80029fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f001 f840 	bl	80039e8 <xTaskPriorityDisinherit>
 8002968:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e043      	b.n	80029fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d119      	bne.n	80029ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6858      	ldr	r0, [r3, #4]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002980:	461a      	mov	r2, r3
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	f002 f914 	bl	8004bb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	441a      	add	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685a      	ldr	r2, [r3, #4]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d32b      	bcc.n	80029fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	605a      	str	r2, [r3, #4]
 80029aa:	e026      	b.n	80029fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	68d8      	ldr	r0, [r3, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	461a      	mov	r2, r3
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	f002 f8fa 	bl	8004bb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	425b      	negs	r3, r3
 80029c6:	441a      	add	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	68da      	ldr	r2, [r3, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d207      	bcs.n	80029e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e0:	425b      	negs	r3, r3
 80029e2:	441a      	add	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d105      	bne.n	80029fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d002      	beq.n	80029fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1c5a      	adds	r2, r3, #1
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002a02:	697b      	ldr	r3, [r7, #20]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d018      	beq.n	8002a50 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68da      	ldr	r2, [r3, #12]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	441a      	add	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d303      	bcc.n	8002a40 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68d9      	ldr	r1, [r3, #12]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	461a      	mov	r2, r3
 8002a4a:	6838      	ldr	r0, [r7, #0]
 8002a4c:	f002 f8b0 	bl	8004bb0 <memcpy>
	}
}
 8002a50:	bf00      	nop
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a60:	f001 fd12 	bl	8004488 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a6a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a6c:	e011      	b.n	8002a92 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	3324      	adds	r3, #36	@ 0x24
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fdd0 	bl	8003620 <xTaskRemoveFromEventList>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d001      	beq.n	8002a8a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a86:	f000 fea9 	bl	80037dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a8a:	7bfb      	ldrb	r3, [r7, #15]
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	dce9      	bgt.n	8002a6e <prvUnlockQueue+0x16>
 8002a9a:	e000      	b.n	8002a9e <prvUnlockQueue+0x46>
					break;
 8002a9c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	22ff      	movs	r2, #255	@ 0xff
 8002aa2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002aa6:	f001 fd21 	bl	80044ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002aaa:	f001 fced 	bl	8004488 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ab4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ab6:	e011      	b.n	8002adc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3310      	adds	r3, #16
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fdab 	bl	8003620 <xTaskRemoveFromEventList>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ad0:	f000 fe84 	bl	80037dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	dce9      	bgt.n	8002ab8 <prvUnlockQueue+0x60>
 8002ae4:	e000      	b.n	8002ae8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ae6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	22ff      	movs	r2, #255	@ 0xff
 8002aec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002af0:	f001 fcfc 	bl	80044ec <vPortExitCritical>
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b04:	f001 fcc0 	bl	8004488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d102      	bne.n	8002b16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002b10:	2301      	movs	r3, #1
 8002b12:	60fb      	str	r3, [r7, #12]
 8002b14:	e001      	b.n	8002b1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b1a:	f001 fce7 	bl	80044ec <vPortExitCritical>

	return xReturn;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b30:	f001 fcaa 	bl	8004488 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d102      	bne.n	8002b46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002b40:	2301      	movs	r3, #1
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e001      	b.n	8002b4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b4a:	f001 fccf 	bl	80044ec <vPortExitCritical>

	return xReturn;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e014      	b.n	8002b92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b68:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba8 <vQueueAddToRegistry+0x50>)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10b      	bne.n	8002b8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b74:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <vQueueAddToRegistry+0x50>)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba8 <vQueueAddToRegistry+0x50>)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002b8a:	e006      	b.n	8002b9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d9e7      	bls.n	8002b68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002b98:	bf00      	nop
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	20000828 	.word	0x20000828

08002bac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002bbc:	f001 fc64 	bl	8004488 <vPortEnterCritical>
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bcc:	d103      	bne.n	8002bd6 <vQueueWaitForMessageRestricted+0x2a>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bdc:	b25b      	sxtb	r3, r3
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d103      	bne.n	8002bec <vQueueWaitForMessageRestricted+0x40>
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bec:	f001 fc7e 	bl	80044ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d106      	bne.n	8002c06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	3324      	adds	r3, #36	@ 0x24
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	68b9      	ldr	r1, [r7, #8]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fce1 	bl	80035c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f7ff ff26 	bl	8002a58 <prvUnlockQueue>
	}
 8002c0c:	bf00      	nop
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b08e      	sub	sp, #56	@ 0x38
 8002c18:	af04      	add	r7, sp, #16
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10b      	bne.n	8002c5e <xTaskCreateStatic+0x4a>
	__asm volatile
 8002c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4a:	f383 8811 	msr	BASEPRI, r3
 8002c4e:	f3bf 8f6f 	isb	sy
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	61fb      	str	r3, [r7, #28]
}
 8002c58:	bf00      	nop
 8002c5a:	bf00      	nop
 8002c5c:	e7fd      	b.n	8002c5a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c5e:	23a8      	movs	r3, #168	@ 0xa8
 8002c60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2ba8      	cmp	r3, #168	@ 0xa8
 8002c66:	d00b      	beq.n	8002c80 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61bb      	str	r3, [r7, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002c80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01e      	beq.n	8002cc6 <xTaskCreateStatic+0xb2>
 8002c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01b      	beq.n	8002cc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	2202      	movs	r2, #2
 8002c9c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9303      	str	r3, [sp, #12]
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	9302      	str	r3, [sp, #8]
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	68b9      	ldr	r1, [r7, #8]
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f851 	bl	8002d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002cc0:	f000 f8f6 	bl	8002eb0 <prvAddNewTaskToReadyList>
 8002cc4:	e001      	b.n	8002cca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002cca:	697b      	ldr	r3, [r7, #20]
	}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3728      	adds	r7, #40	@ 0x28
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b08c      	sub	sp, #48	@ 0x30
 8002cd8:	af04      	add	r7, sp, #16
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f001 fcef 	bl	80046cc <pvPortMalloc>
 8002cee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00e      	beq.n	8002d14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002cf6:	20a8      	movs	r0, #168	@ 0xa8
 8002cf8:	f001 fce8 	bl	80046cc <pvPortMalloc>
 8002cfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d0a:	e005      	b.n	8002d18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002d0c:	6978      	ldr	r0, [r7, #20]
 8002d0e:	f001 fdab 	bl	8004868 <vPortFree>
 8002d12:	e001      	b.n	8002d18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d017      	beq.n	8002d4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	2300      	movs	r3, #0
 8002d2a:	9303      	str	r3, [sp, #12]
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	9302      	str	r3, [sp, #8]
 8002d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d32:	9301      	str	r3, [sp, #4]
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f80f 	bl	8002d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d42:	69f8      	ldr	r0, [r7, #28]
 8002d44:	f000 f8b4 	bl	8002eb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	61bb      	str	r3, [r7, #24]
 8002d4c:	e002      	b.n	8002d54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d54:	69bb      	ldr	r3, [r7, #24]
	}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3720      	adds	r7, #32
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
 8002d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	461a      	mov	r2, r3
 8002d78:	21a5      	movs	r1, #165	@ 0xa5
 8002d7a:	f001 fe95 	bl	8004aa8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00b      	beq.n	8002dba <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	617b      	str	r3, [r7, #20]
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01f      	beq.n	8002e00 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61fb      	str	r3, [r7, #28]
 8002dc4:	e012      	b.n	8002dec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	4413      	add	r3, r2
 8002dcc:	7819      	ldrb	r1, [r3, #0]
 8002dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	3334      	adds	r3, #52	@ 0x34
 8002dd6:	460a      	mov	r2, r1
 8002dd8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	4413      	add	r3, r2
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	3301      	adds	r3, #1
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	2b0f      	cmp	r3, #15
 8002df0:	d9e9      	bls.n	8002dc6 <prvInitialiseNewTask+0x66>
 8002df2:	e000      	b.n	8002df6 <prvInitialiseNewTask+0x96>
			{
				break;
 8002df4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dfe:	e003      	b.n	8002e08 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e0a:	2b37      	cmp	r3, #55	@ 0x37
 8002e0c:	d901      	bls.n	8002e12 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e0e:	2337      	movs	r3, #55	@ 0x37
 8002e10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	2200      	movs	r2, #0
 8002e22:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	3304      	adds	r3, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff f965 	bl	80020f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e30:	3318      	adds	r3, #24
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff f960 	bl	80020f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	3354      	adds	r3, #84	@ 0x54
 8002e62:	224c      	movs	r2, #76	@ 0x4c
 8002e64:	2100      	movs	r1, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	f001 fe1e 	bl	8004aa8 <memset>
 8002e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <prvInitialiseNewTask+0x144>)
 8002e70:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	4a0c      	ldr	r2, [pc, #48]	@ (8002ea8 <prvInitialiseNewTask+0x148>)
 8002e76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002eac <prvInitialiseNewTask+0x14c>)
 8002e7c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	68f9      	ldr	r1, [r7, #12]
 8002e82:	69b8      	ldr	r0, [r7, #24]
 8002e84:	f001 f9ce 	bl	8004224 <pxPortInitialiseStack>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e9a:	bf00      	nop
 8002e9c:	3720      	adds	r7, #32
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20004abc 	.word	0x20004abc
 8002ea8:	20004b24 	.word	0x20004b24
 8002eac:	20004b8c 	.word	0x20004b8c

08002eb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002eb8:	f001 fae6 	bl	8004488 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002ebc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ec4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002ece:	4a2a      	ldr	r2, [pc, #168]	@ (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <prvAddNewTaskToReadyList+0xc4>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d110      	bne.n	8002efe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002edc:	f000 fca2 	bl	8003824 <prvInitialiseTaskLists>
 8002ee0:	e00d      	b.n	8002efe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ee2:	4b26      	ldr	r3, [pc, #152]	@ (8002f7c <prvAddNewTaskToReadyList+0xcc>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002eea:	4b23      	ldr	r3, [pc, #140]	@ (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d802      	bhi.n	8002efe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002efe:	4b20      	ldr	r3, [pc, #128]	@ (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a1e      	ldr	r2, [pc, #120]	@ (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	@ (8002f80 <prvAddNewTaskToReadyList+0xd0>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <prvAddNewTaskToReadyList+0xd4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d903      	bls.n	8002f24 <prvAddNewTaskToReadyList+0x74>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	4a18      	ldr	r2, [pc, #96]	@ (8002f84 <prvAddNewTaskToReadyList+0xd4>)
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a15      	ldr	r2, [pc, #84]	@ (8002f88 <prvAddNewTaskToReadyList+0xd8>)
 8002f32:	441a      	add	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7ff f8e9 	bl	8002112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002f40:	f001 fad4 	bl	80044ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002f44:	4b0d      	ldr	r3, [pc, #52]	@ (8002f7c <prvAddNewTaskToReadyList+0xcc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f78 <prvAddNewTaskToReadyList+0xc8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d207      	bcs.n	8002f6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8002f8c <prvAddNewTaskToReadyList+0xdc>)
 8002f5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f60:	601a      	str	r2, [r3, #0]
 8002f62:	f3bf 8f4f 	dsb	sy
 8002f66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000d3c 	.word	0x20000d3c
 8002f78:	20000868 	.word	0x20000868
 8002f7c:	20000d48 	.word	0x20000d48
 8002f80:	20000d58 	.word	0x20000d58
 8002f84:	20000d44 	.word	0x20000d44
 8002f88:	2000086c 	.word	0x2000086c
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002f98:	f001 fa76 	bl	8004488 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <vTaskDelete+0x18>
 8002fa2:	4b2d      	ldr	r3, [pc, #180]	@ (8003058 <vTaskDelete+0xc8>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	e000      	b.n	8002faa <vTaskDelete+0x1a>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	3304      	adds	r3, #4
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f7ff f90b 	bl	80021cc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d004      	beq.n	8002fc8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3318      	adds	r3, #24
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f902 	bl	80021cc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8002fc8:	4b24      	ldr	r3, [pc, #144]	@ (800305c <vTaskDelete+0xcc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a23      	ldr	r2, [pc, #140]	@ (800305c <vTaskDelete+0xcc>)
 8002fd0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8002fd2:	4b21      	ldr	r3, [pc, #132]	@ (8003058 <vTaskDelete+0xc8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d10b      	bne.n	8002ff4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	3304      	adds	r3, #4
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	481f      	ldr	r0, [pc, #124]	@ (8003060 <vTaskDelete+0xd0>)
 8002fe4:	f7ff f895 	bl	8002112 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8002fe8:	4b1e      	ldr	r3, [pc, #120]	@ (8003064 <vTaskDelete+0xd4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3301      	adds	r3, #1
 8002fee:	4a1d      	ldr	r2, [pc, #116]	@ (8003064 <vTaskDelete+0xd4>)
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	e009      	b.n	8003008 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8003068 <vTaskDelete+0xd8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <vTaskDelete+0xd8>)
 8002ffc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fc7e 	bl	8003900 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003004:	f000 fcb2 	bl	800396c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003008:	f001 fa70 	bl	80044ec <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800300c:	4b17      	ldr	r3, [pc, #92]	@ (800306c <vTaskDelete+0xdc>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01c      	beq.n	800304e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003014:	4b10      	ldr	r3, [pc, #64]	@ (8003058 <vTaskDelete+0xc8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	429a      	cmp	r2, r3
 800301c:	d117      	bne.n	800304e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800301e:	4b14      	ldr	r3, [pc, #80]	@ (8003070 <vTaskDelete+0xe0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <vTaskDelete+0xae>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	60bb      	str	r3, [r7, #8]
}
 8003038:	bf00      	nop
 800303a:	bf00      	nop
 800303c:	e7fd      	b.n	800303a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <vTaskDelete+0xe4>)
 8003040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000868 	.word	0x20000868
 800305c:	20000d58 	.word	0x20000d58
 8003060:	20000d10 	.word	0x20000d10
 8003064:	20000d24 	.word	0x20000d24
 8003068:	20000d3c 	.word	0x20000d3c
 800306c:	20000d48 	.word	0x20000d48
 8003070:	20000d64 	.word	0x20000d64
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003080:	2300      	movs	r3, #0
 8003082:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d018      	beq.n	80030bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800308a:	4b14      	ldr	r3, [pc, #80]	@ (80030dc <vTaskDelay+0x64>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <vTaskDelay+0x32>
	__asm volatile
 8003092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003096:	f383 8811 	msr	BASEPRI, r3
 800309a:	f3bf 8f6f 	isb	sy
 800309e:	f3bf 8f4f 	dsb	sy
 80030a2:	60bb      	str	r3, [r7, #8]
}
 80030a4:	bf00      	nop
 80030a6:	bf00      	nop
 80030a8:	e7fd      	b.n	80030a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80030aa:	f000 f88b 	bl	80031c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fd09 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80030b6:	f000 f893 	bl	80031e0 <xTaskResumeAll>
 80030ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <vTaskDelay+0x68>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000d64 	.word	0x20000d64
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	@ 0x28
 80030e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80030f2:	463a      	mov	r2, r7
 80030f4:	1d39      	adds	r1, r7, #4
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7fe ffa8 	bl	8002050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003100:	6839      	ldr	r1, [r7, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68ba      	ldr	r2, [r7, #8]
 8003106:	9202      	str	r2, [sp, #8]
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	2300      	movs	r3, #0
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	460a      	mov	r2, r1
 8003112:	4924      	ldr	r1, [pc, #144]	@ (80031a4 <vTaskStartScheduler+0xc0>)
 8003114:	4824      	ldr	r0, [pc, #144]	@ (80031a8 <vTaskStartScheduler+0xc4>)
 8003116:	f7ff fd7d 	bl	8002c14 <xTaskCreateStatic>
 800311a:	4603      	mov	r3, r0
 800311c:	4a23      	ldr	r2, [pc, #140]	@ (80031ac <vTaskStartScheduler+0xc8>)
 800311e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003120:	4b22      	ldr	r3, [pc, #136]	@ (80031ac <vTaskStartScheduler+0xc8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d002      	beq.n	800312e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003128:	2301      	movs	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	e001      	b.n	8003132 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003138:	f000 fd1a 	bl	8003b70 <xTimerCreateTimerTask>
 800313c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11b      	bne.n	800317c <vTaskStartScheduler+0x98>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	613b      	str	r3, [r7, #16]
}
 8003156:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003158:	4b15      	ldr	r3, [pc, #84]	@ (80031b0 <vTaskStartScheduler+0xcc>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	3354      	adds	r3, #84	@ 0x54
 800315e:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <vTaskStartScheduler+0xd0>)
 8003160:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003162:	4b15      	ldr	r3, [pc, #84]	@ (80031b8 <vTaskStartScheduler+0xd4>)
 8003164:	f04f 32ff 	mov.w	r2, #4294967295
 8003168:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800316a:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <vTaskStartScheduler+0xd8>)
 800316c:	2201      	movs	r2, #1
 800316e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003170:	4b13      	ldr	r3, [pc, #76]	@ (80031c0 <vTaskStartScheduler+0xdc>)
 8003172:	2200      	movs	r2, #0
 8003174:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003176:	f001 f8e3 	bl	8004340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800317a:	e00f      	b.n	800319c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003182:	d10b      	bne.n	800319c <vTaskStartScheduler+0xb8>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	60fb      	str	r3, [r7, #12]
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <vTaskStartScheduler+0xb4>
}
 800319c:	bf00      	nop
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	08004cb4 	.word	0x08004cb4
 80031a8:	080037f5 	.word	0x080037f5
 80031ac:	20000d60 	.word	0x20000d60
 80031b0:	20000868 	.word	0x20000868
 80031b4:	20000010 	.word	0x20000010
 80031b8:	20000d5c 	.word	0x20000d5c
 80031bc:	20000d48 	.word	0x20000d48
 80031c0:	20000d40 	.word	0x20000d40

080031c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80031c8:	4b04      	ldr	r3, [pc, #16]	@ (80031dc <vTaskSuspendAll+0x18>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a03      	ldr	r2, [pc, #12]	@ (80031dc <vTaskSuspendAll+0x18>)
 80031d0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80031d2:	bf00      	nop
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	20000d64 	.word	0x20000d64

080031e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80031ea:	2300      	movs	r3, #0
 80031ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80031ee:	4b42      	ldr	r3, [pc, #264]	@ (80032f8 <xTaskResumeAll+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <xTaskResumeAll+0x2e>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	603b      	str	r3, [r7, #0]
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800320e:	f001 f93b 	bl	8004488 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003212:	4b39      	ldr	r3, [pc, #228]	@ (80032f8 <xTaskResumeAll+0x118>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	3b01      	subs	r3, #1
 8003218:	4a37      	ldr	r2, [pc, #220]	@ (80032f8 <xTaskResumeAll+0x118>)
 800321a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800321c:	4b36      	ldr	r3, [pc, #216]	@ (80032f8 <xTaskResumeAll+0x118>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d162      	bne.n	80032ea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003224:	4b35      	ldr	r3, [pc, #212]	@ (80032fc <xTaskResumeAll+0x11c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d05e      	beq.n	80032ea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800322c:	e02f      	b.n	800328e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800322e:	4b34      	ldr	r3, [pc, #208]	@ (8003300 <xTaskResumeAll+0x120>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3318      	adds	r3, #24
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe ffc6 	bl	80021cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	3304      	adds	r3, #4
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe ffc1 	bl	80021cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	4b2d      	ldr	r3, [pc, #180]	@ (8003304 <xTaskResumeAll+0x124>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	429a      	cmp	r2, r3
 8003254:	d903      	bls.n	800325e <xTaskResumeAll+0x7e>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	4a2a      	ldr	r2, [pc, #168]	@ (8003304 <xTaskResumeAll+0x124>)
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4a27      	ldr	r2, [pc, #156]	@ (8003308 <xTaskResumeAll+0x128>)
 800326c:	441a      	add	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3304      	adds	r3, #4
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f7fe ff4c 	bl	8002112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800327e:	4b23      	ldr	r3, [pc, #140]	@ (800330c <xTaskResumeAll+0x12c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003284:	429a      	cmp	r2, r3
 8003286:	d302      	bcc.n	800328e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003288:	4b21      	ldr	r3, [pc, #132]	@ (8003310 <xTaskResumeAll+0x130>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800328e:	4b1c      	ldr	r3, [pc, #112]	@ (8003300 <xTaskResumeAll+0x120>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1cb      	bne.n	800322e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800329c:	f000 fb66 	bl	800396c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80032a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003314 <xTaskResumeAll+0x134>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d010      	beq.n	80032ce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80032ac:	f000 f846 	bl	800333c <xTaskIncrementTick>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80032b6:	4b16      	ldr	r3, [pc, #88]	@ (8003310 <xTaskResumeAll+0x130>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	3b01      	subs	r3, #1
 80032c0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f1      	bne.n	80032ac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80032c8:	4b12      	ldr	r3, [pc, #72]	@ (8003314 <xTaskResumeAll+0x134>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80032ce:	4b10      	ldr	r3, [pc, #64]	@ (8003310 <xTaskResumeAll+0x130>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d009      	beq.n	80032ea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80032d6:	2301      	movs	r3, #1
 80032d8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80032da:	4b0f      	ldr	r3, [pc, #60]	@ (8003318 <xTaskResumeAll+0x138>)
 80032dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032e0:	601a      	str	r2, [r3, #0]
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80032ea:	f001 f8ff 	bl	80044ec <vPortExitCritical>

	return xAlreadyYielded;
 80032ee:	68bb      	ldr	r3, [r7, #8]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000d64 	.word	0x20000d64
 80032fc:	20000d3c 	.word	0x20000d3c
 8003300:	20000cfc 	.word	0x20000cfc
 8003304:	20000d44 	.word	0x20000d44
 8003308:	2000086c 	.word	0x2000086c
 800330c:	20000868 	.word	0x20000868
 8003310:	20000d50 	.word	0x20000d50
 8003314:	20000d4c 	.word	0x20000d4c
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <xTaskGetTickCount+0x1c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003328:	687b      	ldr	r3, [r7, #4]
}
 800332a:	4618      	mov	r0, r3
 800332c:	370c      	adds	r7, #12
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	20000d40 	.word	0x20000d40

0800333c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003346:	4b4f      	ldr	r3, [pc, #316]	@ (8003484 <xTaskIncrementTick+0x148>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f040 8090 	bne.w	8003470 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003350:	4b4d      	ldr	r3, [pc, #308]	@ (8003488 <xTaskIncrementTick+0x14c>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3301      	adds	r3, #1
 8003356:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003358:	4a4b      	ldr	r2, [pc, #300]	@ (8003488 <xTaskIncrementTick+0x14c>)
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d121      	bne.n	80033a8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003364:	4b49      	ldr	r3, [pc, #292]	@ (800348c <xTaskIncrementTick+0x150>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00b      	beq.n	8003386 <xTaskIncrementTick+0x4a>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	603b      	str	r3, [r7, #0]
}
 8003380:	bf00      	nop
 8003382:	bf00      	nop
 8003384:	e7fd      	b.n	8003382 <xTaskIncrementTick+0x46>
 8003386:	4b41      	ldr	r3, [pc, #260]	@ (800348c <xTaskIncrementTick+0x150>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	4b40      	ldr	r3, [pc, #256]	@ (8003490 <xTaskIncrementTick+0x154>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3e      	ldr	r2, [pc, #248]	@ (800348c <xTaskIncrementTick+0x150>)
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	4a3e      	ldr	r2, [pc, #248]	@ (8003490 <xTaskIncrementTick+0x154>)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b3e      	ldr	r3, [pc, #248]	@ (8003494 <xTaskIncrementTick+0x158>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003494 <xTaskIncrementTick+0x158>)
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	f000 fae2 	bl	800396c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <xTaskIncrementTick+0x15c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d349      	bcc.n	8003446 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033b2:	4b36      	ldr	r3, [pc, #216]	@ (800348c <xTaskIncrementTick+0x150>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d104      	bne.n	80033c6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033bc:	4b36      	ldr	r3, [pc, #216]	@ (8003498 <xTaskIncrementTick+0x15c>)
 80033be:	f04f 32ff 	mov.w	r2, #4294967295
 80033c2:	601a      	str	r2, [r3, #0]
					break;
 80033c4:	e03f      	b.n	8003446 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c6:	4b31      	ldr	r3, [pc, #196]	@ (800348c <xTaskIncrementTick+0x150>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d203      	bcs.n	80033e6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80033de:	4a2e      	ldr	r2, [pc, #184]	@ (8003498 <xTaskIncrementTick+0x15c>)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033e4:	e02f      	b.n	8003446 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	3304      	adds	r3, #4
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fe feee 	bl	80021cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3318      	adds	r3, #24
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fe fee5 	bl	80021cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003406:	4b25      	ldr	r3, [pc, #148]	@ (800349c <xTaskIncrementTick+0x160>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	429a      	cmp	r2, r3
 800340c:	d903      	bls.n	8003416 <xTaskIncrementTick+0xda>
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003412:	4a22      	ldr	r2, [pc, #136]	@ (800349c <xTaskIncrementTick+0x160>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800341a:	4613      	mov	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4a1f      	ldr	r2, [pc, #124]	@ (80034a0 <xTaskIncrementTick+0x164>)
 8003424:	441a      	add	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	3304      	adds	r3, #4
 800342a:	4619      	mov	r1, r3
 800342c:	4610      	mov	r0, r2
 800342e:	f7fe fe70 	bl	8002112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003436:	4b1b      	ldr	r3, [pc, #108]	@ (80034a4 <xTaskIncrementTick+0x168>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343c:	429a      	cmp	r2, r3
 800343e:	d3b8      	bcc.n	80033b2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003440:	2301      	movs	r3, #1
 8003442:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003444:	e7b5      	b.n	80033b2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003446:	4b17      	ldr	r3, [pc, #92]	@ (80034a4 <xTaskIncrementTick+0x168>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344c:	4914      	ldr	r1, [pc, #80]	@ (80034a0 <xTaskIncrementTick+0x164>)
 800344e:	4613      	mov	r3, r2
 8003450:	009b      	lsls	r3, r3, #2
 8003452:	4413      	add	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d901      	bls.n	8003462 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800345e:	2301      	movs	r3, #1
 8003460:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003462:	4b11      	ldr	r3, [pc, #68]	@ (80034a8 <xTaskIncrementTick+0x16c>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d007      	beq.n	800347a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800346a:	2301      	movs	r3, #1
 800346c:	617b      	str	r3, [r7, #20]
 800346e:	e004      	b.n	800347a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003470:	4b0e      	ldr	r3, [pc, #56]	@ (80034ac <xTaskIncrementTick+0x170>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	3301      	adds	r3, #1
 8003476:	4a0d      	ldr	r2, [pc, #52]	@ (80034ac <xTaskIncrementTick+0x170>)
 8003478:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000d64 	.word	0x20000d64
 8003488:	20000d40 	.word	0x20000d40
 800348c:	20000cf4 	.word	0x20000cf4
 8003490:	20000cf8 	.word	0x20000cf8
 8003494:	20000d54 	.word	0x20000d54
 8003498:	20000d5c 	.word	0x20000d5c
 800349c:	20000d44 	.word	0x20000d44
 80034a0:	2000086c 	.word	0x2000086c
 80034a4:	20000868 	.word	0x20000868
 80034a8:	20000d50 	.word	0x20000d50
 80034ac:	20000d4c 	.word	0x20000d4c

080034b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <vTaskSwitchContext+0xb4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80034be:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <vTaskSwitchContext+0xb8>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80034c4:	e047      	b.n	8003556 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80034c6:	4b28      	ldr	r3, [pc, #160]	@ (8003568 <vTaskSwitchContext+0xb8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034cc:	4b27      	ldr	r3, [pc, #156]	@ (800356c <vTaskSwitchContext+0xbc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]
 80034d2:	e011      	b.n	80034f8 <vTaskSwitchContext+0x48>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d10b      	bne.n	80034f2 <vTaskSwitchContext+0x42>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	607b      	str	r3, [r7, #4]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <vTaskSwitchContext+0x3e>
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	491d      	ldr	r1, [pc, #116]	@ (8003570 <vTaskSwitchContext+0xc0>)
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4613      	mov	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0e3      	beq.n	80034d4 <vTaskSwitchContext+0x24>
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	4a16      	ldr	r2, [pc, #88]	@ (8003570 <vTaskSwitchContext+0xc0>)
 8003518:	4413      	add	r3, r2
 800351a:	60bb      	str	r3, [r7, #8]
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	685a      	ldr	r2, [r3, #4]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3308      	adds	r3, #8
 800352e:	429a      	cmp	r2, r3
 8003530:	d104      	bne.n	800353c <vTaskSwitchContext+0x8c>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	685a      	ldr	r2, [r3, #4]
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	605a      	str	r2, [r3, #4]
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	4a0c      	ldr	r2, [pc, #48]	@ (8003574 <vTaskSwitchContext+0xc4>)
 8003544:	6013      	str	r3, [r2, #0]
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <vTaskSwitchContext+0xbc>)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <vTaskSwitchContext+0xc4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3354      	adds	r3, #84	@ 0x54
 8003552:	4a09      	ldr	r2, [pc, #36]	@ (8003578 <vTaskSwitchContext+0xc8>)
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000d64 	.word	0x20000d64
 8003568:	20000d50 	.word	0x20000d50
 800356c:	20000d44 	.word	0x20000d44
 8003570:	2000086c 	.word	0x2000086c
 8003574:	20000868 	.word	0x20000868
 8003578:	20000010 	.word	0x20000010

0800357c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10b      	bne.n	80035a4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035a4:	4b07      	ldr	r3, [pc, #28]	@ (80035c4 <vTaskPlaceOnEventList+0x48>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3318      	adds	r3, #24
 80035aa:	4619      	mov	r1, r3
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f7fe fdd4 	bl	800215a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80035b2:	2101      	movs	r1, #1
 80035b4:	6838      	ldr	r0, [r7, #0]
 80035b6:	f000 fa87 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
}
 80035ba:	bf00      	nop
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000868 	.word	0x20000868

080035c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b086      	sub	sp, #24
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80035da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035de:	f383 8811 	msr	BASEPRI, r3
 80035e2:	f3bf 8f6f 	isb	sy
 80035e6:	f3bf 8f4f 	dsb	sy
 80035ea:	617b      	str	r3, [r7, #20]
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	e7fd      	b.n	80035ee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035f2:	4b0a      	ldr	r3, [pc, #40]	@ (800361c <vTaskPlaceOnEventListRestricted+0x54>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3318      	adds	r3, #24
 80035f8:	4619      	mov	r1, r3
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f7fe fd89 	bl	8002112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003606:	f04f 33ff 	mov.w	r3, #4294967295
 800360a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	f000 fa5a 	bl	8003ac8 <prvAddCurrentTaskToDelayedList>
	}
 8003614:	bf00      	nop
 8003616:	3718      	adds	r7, #24
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	20000868 	.word	0x20000868

08003620 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10b      	bne.n	800364e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	60fb      	str	r3, [r7, #12]
}
 8003648:	bf00      	nop
 800364a:	bf00      	nop
 800364c:	e7fd      	b.n	800364a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	3318      	adds	r3, #24
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe fdba 	bl	80021cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003658:	4b1d      	ldr	r3, [pc, #116]	@ (80036d0 <xTaskRemoveFromEventList+0xb0>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d11d      	bne.n	800369c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	3304      	adds	r3, #4
 8003664:	4618      	mov	r0, r3
 8003666:	f7fe fdb1 	bl	80021cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366e:	4b19      	ldr	r3, [pc, #100]	@ (80036d4 <xTaskRemoveFromEventList+0xb4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d903      	bls.n	800367e <xTaskRemoveFromEventList+0x5e>
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800367a:	4a16      	ldr	r2, [pc, #88]	@ (80036d4 <xTaskRemoveFromEventList+0xb4>)
 800367c:	6013      	str	r3, [r2, #0]
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003682:	4613      	mov	r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4a13      	ldr	r2, [pc, #76]	@ (80036d8 <xTaskRemoveFromEventList+0xb8>)
 800368c:	441a      	add	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3304      	adds	r3, #4
 8003692:	4619      	mov	r1, r3
 8003694:	4610      	mov	r0, r2
 8003696:	f7fe fd3c 	bl	8002112 <vListInsertEnd>
 800369a:	e005      	b.n	80036a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3318      	adds	r3, #24
 80036a0:	4619      	mov	r1, r3
 80036a2:	480e      	ldr	r0, [pc, #56]	@ (80036dc <xTaskRemoveFromEventList+0xbc>)
 80036a4:	f7fe fd35 	bl	8002112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ac:	4b0c      	ldr	r3, [pc, #48]	@ (80036e0 <xTaskRemoveFromEventList+0xc0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d905      	bls.n	80036c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80036b6:	2301      	movs	r3, #1
 80036b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <xTaskRemoveFromEventList+0xc4>)
 80036bc:	2201      	movs	r2, #1
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e001      	b.n	80036c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80036c6:	697b      	ldr	r3, [r7, #20]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3718      	adds	r7, #24
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000d64 	.word	0x20000d64
 80036d4:	20000d44 	.word	0x20000d44
 80036d8:	2000086c 	.word	0x2000086c
 80036dc:	20000cfc 	.word	0x20000cfc
 80036e0:	20000868 	.word	0x20000868
 80036e4:	20000d50 	.word	0x20000d50

080036e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036f0:	4b06      	ldr	r3, [pc, #24]	@ (800370c <vTaskInternalSetTimeOutState+0x24>)
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80036f8:	4b05      	ldr	r3, [pc, #20]	@ (8003710 <vTaskInternalSetTimeOutState+0x28>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr
 800370c:	20000d54 	.word	0x20000d54
 8003710:	20000d40 	.word	0x20000d40

08003714 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	613b      	str	r3, [r7, #16]
}
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003742:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	60fb      	str	r3, [r7, #12]
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	e7fd      	b.n	8003756 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800375a:	f000 fe95 	bl	8004488 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800375e:	4b1d      	ldr	r3, [pc, #116]	@ (80037d4 <xTaskCheckForTimeOut+0xc0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d102      	bne.n	800377e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	e023      	b.n	80037c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	4b15      	ldr	r3, [pc, #84]	@ (80037d8 <xTaskCheckForTimeOut+0xc4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d007      	beq.n	800379a <xTaskCheckForTimeOut+0x86>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003794:	2301      	movs	r3, #1
 8003796:	61fb      	str	r3, [r7, #28]
 8003798:	e015      	b.n	80037c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d20b      	bcs.n	80037bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	1ad2      	subs	r2, r2, r3
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff99 	bl	80036e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80037b6:	2300      	movs	r3, #0
 80037b8:	61fb      	str	r3, [r7, #28]
 80037ba:	e004      	b.n	80037c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80037c6:	f000 fe91 	bl	80044ec <vPortExitCritical>

	return xReturn;
 80037ca:	69fb      	ldr	r3, [r7, #28]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3720      	adds	r7, #32
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000d40 	.word	0x20000d40
 80037d8:	20000d54 	.word	0x20000d54

080037dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80037e0:	4b03      	ldr	r3, [pc, #12]	@ (80037f0 <vTaskMissedYield+0x14>)
 80037e2:	2201      	movs	r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	20000d50 	.word	0x20000d50

080037f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80037fc:	f000 f852 	bl	80038a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003800:	4b06      	ldr	r3, [pc, #24]	@ (800381c <prvIdleTask+0x28>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d9f9      	bls.n	80037fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <prvIdleTask+0x2c>)
 800380a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	f3bf 8f4f 	dsb	sy
 8003814:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003818:	e7f0      	b.n	80037fc <prvIdleTask+0x8>
 800381a:	bf00      	nop
 800381c:	2000086c 	.word	0x2000086c
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800382a:	2300      	movs	r3, #0
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	e00c      	b.n	800384a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4a12      	ldr	r2, [pc, #72]	@ (8003884 <prvInitialiseTaskLists+0x60>)
 800383c:	4413      	add	r3, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe fc3a 	bl	80020b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3301      	adds	r3, #1
 8003848:	607b      	str	r3, [r7, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b37      	cmp	r3, #55	@ 0x37
 800384e:	d9ef      	bls.n	8003830 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003850:	480d      	ldr	r0, [pc, #52]	@ (8003888 <prvInitialiseTaskLists+0x64>)
 8003852:	f7fe fc31 	bl	80020b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003856:	480d      	ldr	r0, [pc, #52]	@ (800388c <prvInitialiseTaskLists+0x68>)
 8003858:	f7fe fc2e 	bl	80020b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800385c:	480c      	ldr	r0, [pc, #48]	@ (8003890 <prvInitialiseTaskLists+0x6c>)
 800385e:	f7fe fc2b 	bl	80020b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003862:	480c      	ldr	r0, [pc, #48]	@ (8003894 <prvInitialiseTaskLists+0x70>)
 8003864:	f7fe fc28 	bl	80020b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003868:	480b      	ldr	r0, [pc, #44]	@ (8003898 <prvInitialiseTaskLists+0x74>)
 800386a:	f7fe fc25 	bl	80020b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800386e:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <prvInitialiseTaskLists+0x78>)
 8003870:	4a05      	ldr	r2, [pc, #20]	@ (8003888 <prvInitialiseTaskLists+0x64>)
 8003872:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003874:	4b0a      	ldr	r3, [pc, #40]	@ (80038a0 <prvInitialiseTaskLists+0x7c>)
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <prvInitialiseTaskLists+0x68>)
 8003878:	601a      	str	r2, [r3, #0]
}
 800387a:	bf00      	nop
 800387c:	3708      	adds	r7, #8
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	2000086c 	.word	0x2000086c
 8003888:	20000ccc 	.word	0x20000ccc
 800388c:	20000ce0 	.word	0x20000ce0
 8003890:	20000cfc 	.word	0x20000cfc
 8003894:	20000d10 	.word	0x20000d10
 8003898:	20000d28 	.word	0x20000d28
 800389c:	20000cf4 	.word	0x20000cf4
 80038a0:	20000cf8 	.word	0x20000cf8

080038a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038aa:	e019      	b.n	80038e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80038ac:	f000 fdec 	bl	8004488 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b0:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <prvCheckTasksWaitingTermination+0x50>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3304      	adds	r3, #4
 80038bc:	4618      	mov	r0, r3
 80038be:	f7fe fc85 	bl	80021cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80038c2:	4b0d      	ldr	r3, [pc, #52]	@ (80038f8 <prvCheckTasksWaitingTermination+0x54>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	4a0b      	ldr	r2, [pc, #44]	@ (80038f8 <prvCheckTasksWaitingTermination+0x54>)
 80038ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80038cc:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3b01      	subs	r3, #1
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80038d6:	f000 fe09 	bl	80044ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f810 	bl	8003900 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038e0:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <prvCheckTasksWaitingTermination+0x58>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1e1      	bne.n	80038ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80038e8:	bf00      	nop
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000d10 	.word	0x20000d10
 80038f8:	20000d3c 	.word	0x20000d3c
 80038fc:	20000d24 	.word	0x20000d24

08003900 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3354      	adds	r3, #84	@ 0x54
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f8d3 	bl	8004ab8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003920:	4618      	mov	r0, r3
 8003922:	f000 ffa1 	bl	8004868 <vPortFree>
				vPortFree( pxTCB );
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 ff9e 	bl	8004868 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800392c:	e019      	b.n	8003962 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003934:	2b01      	cmp	r3, #1
 8003936:	d103      	bne.n	8003940 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 ff95 	bl	8004868 <vPortFree>
	}
 800393e:	e010      	b.n	8003962 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003946:	2b02      	cmp	r3, #2
 8003948:	d00b      	beq.n	8003962 <prvDeleteTCB+0x62>
	__asm volatile
 800394a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800394e:	f383 8811 	msr	BASEPRI, r3
 8003952:	f3bf 8f6f 	isb	sy
 8003956:	f3bf 8f4f 	dsb	sy
 800395a:	60fb      	str	r3, [r7, #12]
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	e7fd      	b.n	800395e <prvDeleteTCB+0x5e>
	}
 8003962:	bf00      	nop
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003972:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <prvResetNextTaskUnblockTime+0x38>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d104      	bne.n	8003986 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800397c:	4b0a      	ldr	r3, [pc, #40]	@ (80039a8 <prvResetNextTaskUnblockTime+0x3c>)
 800397e:	f04f 32ff 	mov.w	r2, #4294967295
 8003982:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003984:	e008      	b.n	8003998 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b07      	ldr	r3, [pc, #28]	@ (80039a4 <prvResetNextTaskUnblockTime+0x38>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	4a04      	ldr	r2, [pc, #16]	@ (80039a8 <prvResetNextTaskUnblockTime+0x3c>)
 8003996:	6013      	str	r3, [r2, #0]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	20000cf4 	.word	0x20000cf4
 80039a8:	20000d5c 	.word	0x20000d5c

080039ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80039b2:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <xTaskGetSchedulerState+0x34>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d102      	bne.n	80039c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80039ba:	2301      	movs	r3, #1
 80039bc:	607b      	str	r3, [r7, #4]
 80039be:	e008      	b.n	80039d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039c0:	4b08      	ldr	r3, [pc, #32]	@ (80039e4 <xTaskGetSchedulerState+0x38>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d102      	bne.n	80039ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80039c8:	2302      	movs	r3, #2
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	e001      	b.n	80039d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80039ce:	2300      	movs	r3, #0
 80039d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80039d2:	687b      	ldr	r3, [r7, #4]
	}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20000d48 	.word	0x20000d48
 80039e4:	20000d64 	.word	0x20000d64

080039e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d058      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80039fe:	4b2f      	ldr	r3, [pc, #188]	@ (8003abc <xTaskPriorityDisinherit+0xd4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d00b      	beq.n	8003a20 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	60fb      	str	r3, [r7, #12]
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2c:	f383 8811 	msr	BASEPRI, r3
 8003a30:	f3bf 8f6f 	isb	sy
 8003a34:	f3bf 8f4f 	dsb	sy
 8003a38:	60bb      	str	r3, [r7, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	bf00      	nop
 8003a3e:	e7fd      	b.n	8003a3c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	1e5a      	subs	r2, r3, #1
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d02c      	beq.n	8003ab0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d128      	bne.n	8003ab0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe fbb2 	bl	80021cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac0 <xTaskPriorityDisinherit+0xd8>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d903      	bls.n	8003a90 <xTaskPriorityDisinherit+0xa8>
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8003ac0 <xTaskPriorityDisinherit+0xd8>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4a09      	ldr	r2, [pc, #36]	@ (8003ac4 <xTaskPriorityDisinherit+0xdc>)
 8003a9e:	441a      	add	r2, r3
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7fe fb33 	bl	8002112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ab0:	697b      	ldr	r3, [r7, #20]
	}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000868 	.word	0x20000868
 8003ac0:	20000d44 	.word	0x20000d44
 8003ac4:	2000086c 	.word	0x2000086c

08003ac8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003ad2:	4b21      	ldr	r3, [pc, #132]	@ (8003b58 <prvAddCurrentTaskToDelayedList+0x90>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ad8:	4b20      	ldr	r3, [pc, #128]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	3304      	adds	r3, #4
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fb74 	bl	80021cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aea:	d10a      	bne.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d007      	beq.n	8003b02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3304      	adds	r3, #4
 8003af8:	4619      	mov	r1, r3
 8003afa:	4819      	ldr	r0, [pc, #100]	@ (8003b60 <prvAddCurrentTaskToDelayedList+0x98>)
 8003afc:	f7fe fb09 	bl	8002112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003b00:	e026      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4413      	add	r3, r2
 8003b08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b0a:	4b14      	ldr	r3, [pc, #80]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d209      	bcs.n	8003b2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b1a:	4b12      	ldr	r3, [pc, #72]	@ (8003b64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3304      	adds	r3, #4
 8003b24:	4619      	mov	r1, r3
 8003b26:	4610      	mov	r0, r2
 8003b28:	f7fe fb17 	bl	800215a <vListInsert>
}
 8003b2c:	e010      	b.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b0a      	ldr	r3, [pc, #40]	@ (8003b5c <prvAddCurrentTaskToDelayedList+0x94>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	3304      	adds	r3, #4
 8003b38:	4619      	mov	r1, r3
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	f7fe fb0d 	bl	800215a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d202      	bcs.n	8003b50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003b4a:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	6013      	str	r3, [r2, #0]
}
 8003b50:	bf00      	nop
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20000d40 	.word	0x20000d40
 8003b5c:	20000868 	.word	0x20000868
 8003b60:	20000d28 	.word	0x20000d28
 8003b64:	20000cf8 	.word	0x20000cf8
 8003b68:	20000cf4 	.word	0x20000cf4
 8003b6c:	20000d5c 	.word	0x20000d5c

08003b70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b08a      	sub	sp, #40	@ 0x28
 8003b74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003b7a:	f000 fb13 	bl	80041a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf4 <xTimerCreateTimerTask+0x84>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d021      	beq.n	8003bca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003b8e:	1d3a      	adds	r2, r7, #4
 8003b90:	f107 0108 	add.w	r1, r7, #8
 8003b94:	f107 030c 	add.w	r3, r7, #12
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fa73 	bl	8002084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	9202      	str	r2, [sp, #8]
 8003ba6:	9301      	str	r3, [sp, #4]
 8003ba8:	2302      	movs	r3, #2
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	2300      	movs	r3, #0
 8003bae:	460a      	mov	r2, r1
 8003bb0:	4911      	ldr	r1, [pc, #68]	@ (8003bf8 <xTimerCreateTimerTask+0x88>)
 8003bb2:	4812      	ldr	r0, [pc, #72]	@ (8003bfc <xTimerCreateTimerTask+0x8c>)
 8003bb4:	f7ff f82e 	bl	8002c14 <xTaskCreateStatic>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	4a11      	ldr	r2, [pc, #68]	@ (8003c00 <xTimerCreateTimerTask+0x90>)
 8003bbc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003bbe:	4b10      	ldr	r3, [pc, #64]	@ (8003c00 <xTimerCreateTimerTask+0x90>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	613b      	str	r3, [r7, #16]
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003be8:	697b      	ldr	r3, [r7, #20]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop
 8003bf4:	20000d98 	.word	0x20000d98
 8003bf8:	08004cbc 	.word	0x08004cbc
 8003bfc:	08003d3d 	.word	0x08003d3d
 8003c00:	20000d9c 	.word	0x20000d9c

08003c04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10b      	bne.n	8003c34 <xTimerGenericCommand+0x30>
	__asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	623b      	str	r3, [r7, #32]
}
 8003c2e:	bf00      	nop
 8003c30:	bf00      	nop
 8003c32:	e7fd      	b.n	8003c30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003c34:	4b19      	ldr	r3, [pc, #100]	@ (8003c9c <xTimerGenericCommand+0x98>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02a      	beq.n	8003c92 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b05      	cmp	r3, #5
 8003c4c:	dc18      	bgt.n	8003c80 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003c4e:	f7ff fead 	bl	80039ac <xTaskGetSchedulerState>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d109      	bne.n	8003c6c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003c58:	4b10      	ldr	r3, [pc, #64]	@ (8003c9c <xTimerGenericCommand+0x98>)
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	f107 0110 	add.w	r1, r7, #16
 8003c60:	2300      	movs	r3, #0
 8003c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c64:	f7fe fbe6 	bl	8002434 <xQueueGenericSend>
 8003c68:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c6a:	e012      	b.n	8003c92 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <xTimerGenericCommand+0x98>)
 8003c6e:	6818      	ldr	r0, [r3, #0]
 8003c70:	f107 0110 	add.w	r1, r7, #16
 8003c74:	2300      	movs	r3, #0
 8003c76:	2200      	movs	r2, #0
 8003c78:	f7fe fbdc 	bl	8002434 <xQueueGenericSend>
 8003c7c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c7e:	e008      	b.n	8003c92 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c80:	4b06      	ldr	r3, [pc, #24]	@ (8003c9c <xTimerGenericCommand+0x98>)
 8003c82:	6818      	ldr	r0, [r3, #0]
 8003c84:	f107 0110 	add.w	r1, r7, #16
 8003c88:	2300      	movs	r3, #0
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	f7fe fcd4 	bl	8002638 <xQueueGenericSendFromISR>
 8003c90:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3728      	adds	r7, #40	@ 0x28
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000d98 	.word	0x20000d98

08003ca0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b088      	sub	sp, #32
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003caa:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <prvProcessExpiredTimer+0x98>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f7fe fa87 	bl	80021cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d023      	beq.n	8003d14 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	18d1      	adds	r1, r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f000 f8d5 	bl	8003e88 <prvInsertTimerInActiveList>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d020      	beq.n	8003d26 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	2300      	movs	r3, #0
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	2100      	movs	r1, #0
 8003cee:	6978      	ldr	r0, [r7, #20]
 8003cf0:	f7ff ff88 	bl	8003c04 <xTimerGenericCommand>
 8003cf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d114      	bne.n	8003d26 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	60fb      	str	r3, [r7, #12]
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d1a:	f023 0301 	bic.w	r3, r3, #1
 8003d1e:	b2da      	uxtb	r2, r3
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	4798      	blx	r3
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	20000d90 	.word	0x20000d90

08003d3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d44:	f107 0308 	add.w	r3, r7, #8
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f000 f859 	bl	8003e00 <prvGetNextExpireTime>
 8003d4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	4619      	mov	r1, r3
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f805 	bl	8003d64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003d5a:	f000 f8d7 	bl	8003f0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003d5e:	bf00      	nop
 8003d60:	e7f0      	b.n	8003d44 <prvTimerTask+0x8>
	...

08003d64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003d6e:	f7ff fa29 	bl	80031c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003d72:	f107 0308 	add.w	r3, r7, #8
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f866 	bl	8003e48 <prvSampleTimeNow>
 8003d7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d130      	bne.n	8003de6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10a      	bne.n	8003da0 <prvProcessTimerOrBlockTask+0x3c>
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d806      	bhi.n	8003da0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003d92:	f7ff fa25 	bl	80031e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d96:	68f9      	ldr	r1, [r7, #12]
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff ff81 	bl	8003ca0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003d9e:	e024      	b.n	8003dea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d008      	beq.n	8003db8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003da6:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <prvProcessTimerOrBlockTask+0x90>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d101      	bne.n	8003db4 <prvProcessTimerOrBlockTask+0x50>
 8003db0:	2301      	movs	r3, #1
 8003db2:	e000      	b.n	8003db6 <prvProcessTimerOrBlockTask+0x52>
 8003db4:	2300      	movs	r3, #0
 8003db6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003db8:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <prvProcessTimerOrBlockTask+0x94>)
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	683a      	ldr	r2, [r7, #0]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	f7fe fef1 	bl	8002bac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003dca:	f7ff fa09 	bl	80031e0 <xTaskResumeAll>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003dd4:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <prvProcessTimerOrBlockTask+0x98>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	f3bf 8f6f 	isb	sy
}
 8003de4:	e001      	b.n	8003dea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003de6:	f7ff f9fb 	bl	80031e0 <xTaskResumeAll>
}
 8003dea:	bf00      	nop
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000d94 	.word	0x20000d94
 8003df8:	20000d98 	.word	0x20000d98
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e08:	4b0e      	ldr	r3, [pc, #56]	@ (8003e44 <prvGetNextExpireTime+0x44>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <prvGetNextExpireTime+0x16>
 8003e12:	2201      	movs	r2, #1
 8003e14:	e000      	b.n	8003e18 <prvGetNextExpireTime+0x18>
 8003e16:	2200      	movs	r2, #0
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d105      	bne.n	8003e30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e24:	4b07      	ldr	r3, [pc, #28]	@ (8003e44 <prvGetNextExpireTime+0x44>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	60fb      	str	r3, [r7, #12]
 8003e2e:	e001      	b.n	8003e34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003e34:	68fb      	ldr	r3, [r7, #12]
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3714      	adds	r7, #20
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000d90 	.word	0x20000d90

08003e48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003e50:	f7ff fa64 	bl	800331c <xTaskGetTickCount>
 8003e54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003e56:	4b0b      	ldr	r3, [pc, #44]	@ (8003e84 <prvSampleTimeNow+0x3c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d205      	bcs.n	8003e6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003e60:	f000 f93a 	bl	80040d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
 8003e6a:	e002      	b.n	8003e72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003e72:	4a04      	ldr	r2, [pc, #16]	@ (8003e84 <prvSampleTimeNow+0x3c>)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003e78:	68fb      	ldr	r3, [r7, #12]
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	20000da0 	.word	0x20000da0

08003e88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
 8003e94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d812      	bhi.n	8003ed4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e01b      	b.n	8003efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003ec2:	4b10      	ldr	r3, [pc, #64]	@ (8003f04 <prvInsertTimerInActiveList+0x7c>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7fe f944 	bl	800215a <vListInsert>
 8003ed2:	e012      	b.n	8003efa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d206      	bcs.n	8003eea <prvInsertTimerInActiveList+0x62>
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d302      	bcc.n	8003eea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]
 8003ee8:	e007      	b.n	8003efa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003eea:	4b07      	ldr	r3, [pc, #28]	@ (8003f08 <prvInsertTimerInActiveList+0x80>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	f7fe f930 	bl	800215a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003efa:	697b      	ldr	r3, [r7, #20]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	20000d94 	.word	0x20000d94
 8003f08:	20000d90 	.word	0x20000d90

08003f0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	@ 0x38
 8003f10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f12:	e0ce      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da19      	bge.n	8003f4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003f1a:	1d3b      	adds	r3, r7, #4
 8003f1c:	3304      	adds	r3, #4
 8003f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	61fb      	str	r3, [r7, #28]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f44:	6850      	ldr	r0, [r2, #4]
 8003f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f2c0 80ae 	blt.w	80040b2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d004      	beq.n	8003f6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f64:	3304      	adds	r3, #4
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7fe f930 	bl	80021cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f6c:	463b      	mov	r3, r7
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff6a 	bl	8003e48 <prvSampleTimeNow>
 8003f74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b09      	cmp	r3, #9
 8003f7a:	f200 8097 	bhi.w	80040ac <prvProcessReceivedCommands+0x1a0>
 8003f7e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f84 <prvProcessReceivedCommands+0x78>)
 8003f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f84:	08003fad 	.word	0x08003fad
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fad 	.word	0x08003fad
 8003f90:	08004023 	.word	0x08004023
 8003f94:	08004037 	.word	0x08004037
 8003f98:	08004083 	.word	0x08004083
 8003f9c:	08003fad 	.word	0x08003fad
 8003fa0:	08003fad 	.word	0x08003fad
 8003fa4:	08004023 	.word	0x08004023
 8003fa8:	08004037 	.word	0x08004037
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fb2:	f043 0301 	orr.w	r3, r3, #1
 8003fb6:	b2da      	uxtb	r2, r3
 8003fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	18d1      	adds	r1, r2, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fcc:	f7ff ff5c 	bl	8003e88 <prvInsertTimerInActiveList>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d06c      	beq.n	80040b0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
 8003fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fdc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d061      	beq.n	80040b0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	441a      	add	r2, r3
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ffe:	f7ff fe01 	bl	8003c04 <xTimerGenericCommand>
 8004002:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d152      	bne.n	80040b0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	61bb      	str	r3, [r7, #24]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	b2da      	uxtb	r2, r3
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004034:	e03d      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004038:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800403c:	f043 0301 	orr.w	r3, r3, #1
 8004040:	b2da      	uxtb	r2, r3
 8004042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800404e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10b      	bne.n	800406e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800405a:	f383 8811 	msr	BASEPRI, r3
 800405e:	f3bf 8f6f 	isb	sy
 8004062:	f3bf 8f4f 	dsb	sy
 8004066:	617b      	str	r3, [r7, #20]
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop
 800406c:	e7fd      	b.n	800406a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800406e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004070:	699a      	ldr	r2, [r3, #24]
 8004072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004074:	18d1      	adds	r1, r2, r3
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800407a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800407c:	f7ff ff04 	bl	8003e88 <prvInsertTimerInActiveList>
					break;
 8004080:	e017      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004090:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004092:	f000 fbe9 	bl	8004868 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004096:	e00c      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800409e:	f023 0301 	bic.w	r3, r3, #1
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80040aa:	e002      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80040ac:	bf00      	nop
 80040ae:	e000      	b.n	80040b2 <prvProcessReceivedCommands+0x1a6>
					break;
 80040b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040b2:	4b08      	ldr	r3, [pc, #32]	@ (80040d4 <prvProcessReceivedCommands+0x1c8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	1d39      	adds	r1, r7, #4
 80040b8:	2200      	movs	r2, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe fb5a 	bl	8002774 <xQueueReceive>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f47f af26 	bne.w	8003f14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80040c8:	bf00      	nop
 80040ca:	bf00      	nop
 80040cc:	3730      	adds	r7, #48	@ 0x30
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	20000d98 	.word	0x20000d98

080040d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040de:	e049      	b.n	8004174 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040e0:	4b2e      	ldr	r3, [pc, #184]	@ (800419c <prvSwitchTimerLists+0xc4>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ea:	4b2c      	ldr	r3, [pc, #176]	@ (800419c <prvSwitchTimerLists+0xc4>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3304      	adds	r3, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fe f867 	bl	80021cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d02f      	beq.n	8004174 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	4413      	add	r3, r2
 800411c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d90e      	bls.n	8004144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004132:	4b1a      	ldr	r3, [pc, #104]	@ (800419c <prvSwitchTimerLists+0xc4>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3304      	adds	r3, #4
 800413a:	4619      	mov	r1, r3
 800413c:	4610      	mov	r0, r2
 800413e:	f7fe f80c 	bl	800215a <vListInsert>
 8004142:	e017      	b.n	8004174 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004144:	2300      	movs	r3, #0
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	2300      	movs	r3, #0
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	2100      	movs	r1, #0
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fd58 	bl	8003c04 <xTimerGenericCommand>
 8004154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	603b      	str	r3, [r7, #0]
}
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004174:	4b09      	ldr	r3, [pc, #36]	@ (800419c <prvSwitchTimerLists+0xc4>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1b0      	bne.n	80040e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800417e:	4b07      	ldr	r3, [pc, #28]	@ (800419c <prvSwitchTimerLists+0xc4>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004184:	4b06      	ldr	r3, [pc, #24]	@ (80041a0 <prvSwitchTimerLists+0xc8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a04      	ldr	r2, [pc, #16]	@ (800419c <prvSwitchTimerLists+0xc4>)
 800418a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800418c:	4a04      	ldr	r2, [pc, #16]	@ (80041a0 <prvSwitchTimerLists+0xc8>)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	6013      	str	r3, [r2, #0]
}
 8004192:	bf00      	nop
 8004194:	3718      	adds	r7, #24
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	20000d90 	.word	0x20000d90
 80041a0:	20000d94 	.word	0x20000d94

080041a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80041aa:	f000 f96d 	bl	8004488 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <prvCheckForValidListAndQueue+0x60>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d120      	bne.n	80041f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80041b6:	4814      	ldr	r0, [pc, #80]	@ (8004208 <prvCheckForValidListAndQueue+0x64>)
 80041b8:	f7fd ff7e 	bl	80020b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041bc:	4813      	ldr	r0, [pc, #76]	@ (800420c <prvCheckForValidListAndQueue+0x68>)
 80041be:	f7fd ff7b 	bl	80020b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041c2:	4b13      	ldr	r3, [pc, #76]	@ (8004210 <prvCheckForValidListAndQueue+0x6c>)
 80041c4:	4a10      	ldr	r2, [pc, #64]	@ (8004208 <prvCheckForValidListAndQueue+0x64>)
 80041c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041c8:	4b12      	ldr	r3, [pc, #72]	@ (8004214 <prvCheckForValidListAndQueue+0x70>)
 80041ca:	4a10      	ldr	r2, [pc, #64]	@ (800420c <prvCheckForValidListAndQueue+0x68>)
 80041cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041ce:	2300      	movs	r3, #0
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	4b11      	ldr	r3, [pc, #68]	@ (8004218 <prvCheckForValidListAndQueue+0x74>)
 80041d4:	4a11      	ldr	r2, [pc, #68]	@ (800421c <prvCheckForValidListAndQueue+0x78>)
 80041d6:	2110      	movs	r1, #16
 80041d8:	200a      	movs	r0, #10
 80041da:	f7fe f88b 	bl	80022f4 <xQueueGenericCreateStatic>
 80041de:	4603      	mov	r3, r0
 80041e0:	4a08      	ldr	r2, [pc, #32]	@ (8004204 <prvCheckForValidListAndQueue+0x60>)
 80041e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041e4:	4b07      	ldr	r3, [pc, #28]	@ (8004204 <prvCheckForValidListAndQueue+0x60>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <prvCheckForValidListAndQueue+0x60>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	490b      	ldr	r1, [pc, #44]	@ (8004220 <prvCheckForValidListAndQueue+0x7c>)
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fe fcb0 	bl	8002b58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80041f8:	f000 f978 	bl	80044ec <vPortExitCritical>
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000d98 	.word	0x20000d98
 8004208:	20000d68 	.word	0x20000d68
 800420c:	20000d7c 	.word	0x20000d7c
 8004210:	20000d90 	.word	0x20000d90
 8004214:	20000d94 	.word	0x20000d94
 8004218:	20000e44 	.word	0x20000e44
 800421c:	20000da4 	.word	0x20000da4
 8004220:	08004cc4 	.word	0x08004cc4

08004224 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	3b04      	subs	r3, #4
 8004234:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800423c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	3b04      	subs	r3, #4
 8004242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f023 0201 	bic.w	r2, r3, #1
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3b04      	subs	r3, #4
 8004252:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004254:	4a0c      	ldr	r2, [pc, #48]	@ (8004288 <pxPortInitialiseStack+0x64>)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	3b14      	subs	r3, #20
 800425e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b04      	subs	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f06f 0202 	mvn.w	r2, #2
 8004272:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3b20      	subs	r3, #32
 8004278:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800427a:	68fb      	ldr	r3, [r7, #12]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	0800428d 	.word	0x0800428d

0800428c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004292:	2300      	movs	r3, #0
 8004294:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004296:	4b13      	ldr	r3, [pc, #76]	@ (80042e4 <prvTaskExitError+0x58>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	d00b      	beq.n	80042b8 <prvTaskExitError+0x2c>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	bf00      	nop
 80042b6:	e7fd      	b.n	80042b4 <prvTaskExitError+0x28>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60bb      	str	r3, [r7, #8]
}
 80042ca:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80042cc:	bf00      	nop
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0fc      	beq.n	80042ce <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c
	...

080042f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80042f0:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <pxCurrentTCBConst2>)
 80042f2:	6819      	ldr	r1, [r3, #0]
 80042f4:	6808      	ldr	r0, [r1, #0]
 80042f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	f380 8809 	msr	PSP, r0
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f04f 0000 	mov.w	r0, #0
 8004306:	f380 8811 	msr	BASEPRI, r0
 800430a:	4770      	bx	lr
 800430c:	f3af 8000 	nop.w

08004310 <pxCurrentTCBConst2>:
 8004310:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop

08004318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004318:	4808      	ldr	r0, [pc, #32]	@ (800433c <prvPortStartFirstTask+0x24>)
 800431a:	6800      	ldr	r0, [r0, #0]
 800431c:	6800      	ldr	r0, [r0, #0]
 800431e:	f380 8808 	msr	MSP, r0
 8004322:	f04f 0000 	mov.w	r0, #0
 8004326:	f380 8814 	msr	CONTROL, r0
 800432a:	b662      	cpsie	i
 800432c:	b661      	cpsie	f
 800432e:	f3bf 8f4f 	dsb	sy
 8004332:	f3bf 8f6f 	isb	sy
 8004336:	df00      	svc	0
 8004338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800433a:	bf00      	nop
 800433c:	e000ed08 	.word	0xe000ed08

08004340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004346:	4b47      	ldr	r3, [pc, #284]	@ (8004464 <xPortStartScheduler+0x124>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a47      	ldr	r2, [pc, #284]	@ (8004468 <xPortStartScheduler+0x128>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d10b      	bne.n	8004368 <xPortStartScheduler+0x28>
	__asm volatile
 8004350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	613b      	str	r3, [r7, #16]
}
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	e7fd      	b.n	8004364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004368:	4b3e      	ldr	r3, [pc, #248]	@ (8004464 <xPortStartScheduler+0x124>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3f      	ldr	r2, [pc, #252]	@ (800446c <xPortStartScheduler+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10b      	bne.n	800438a <xPortStartScheduler+0x4a>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004376:	f383 8811 	msr	BASEPRI, r3
 800437a:	f3bf 8f6f 	isb	sy
 800437e:	f3bf 8f4f 	dsb	sy
 8004382:	60fb      	str	r3, [r7, #12]
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	e7fd      	b.n	8004386 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800438a:	4b39      	ldr	r3, [pc, #228]	@ (8004470 <xPortStartScheduler+0x130>)
 800438c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	22ff      	movs	r2, #255	@ 0xff
 800439a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <xPortStartScheduler+0x134>)
 80043b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043b2:	4b31      	ldr	r3, [pc, #196]	@ (8004478 <xPortStartScheduler+0x138>)
 80043b4:	2207      	movs	r2, #7
 80043b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043b8:	e009      	b.n	80043ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80043ba:	4b2f      	ldr	r3, [pc, #188]	@ (8004478 <xPortStartScheduler+0x138>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	3b01      	subs	r3, #1
 80043c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004478 <xPortStartScheduler+0x138>)
 80043c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043d6:	2b80      	cmp	r3, #128	@ 0x80
 80043d8:	d0ef      	beq.n	80043ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043da:	4b27      	ldr	r3, [pc, #156]	@ (8004478 <xPortStartScheduler+0x138>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f1c3 0307 	rsb	r3, r3, #7
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d00b      	beq.n	80043fe <xPortStartScheduler+0xbe>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60bb      	str	r3, [r7, #8]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043fe:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <xPortStartScheduler+0x138>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	021b      	lsls	r3, r3, #8
 8004404:	4a1c      	ldr	r2, [pc, #112]	@ (8004478 <xPortStartScheduler+0x138>)
 8004406:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004408:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <xPortStartScheduler+0x138>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004410:	4a19      	ldr	r2, [pc, #100]	@ (8004478 <xPortStartScheduler+0x138>)
 8004412:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	b2da      	uxtb	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800441c:	4b17      	ldr	r3, [pc, #92]	@ (800447c <xPortStartScheduler+0x13c>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a16      	ldr	r2, [pc, #88]	@ (800447c <xPortStartScheduler+0x13c>)
 8004422:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004426:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004428:	4b14      	ldr	r3, [pc, #80]	@ (800447c <xPortStartScheduler+0x13c>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a13      	ldr	r2, [pc, #76]	@ (800447c <xPortStartScheduler+0x13c>)
 800442e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004432:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004434:	f000 f8da 	bl	80045ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004438:	4b11      	ldr	r3, [pc, #68]	@ (8004480 <xPortStartScheduler+0x140>)
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800443e:	f000 f8f9 	bl	8004634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004442:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <xPortStartScheduler+0x144>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a0f      	ldr	r2, [pc, #60]	@ (8004484 <xPortStartScheduler+0x144>)
 8004448:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800444c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800444e:	f7ff ff63 	bl	8004318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004452:	f7ff f82d 	bl	80034b0 <vTaskSwitchContext>
	prvTaskExitError();
 8004456:	f7ff ff19 	bl	800428c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3718      	adds	r7, #24
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	e000ed00 	.word	0xe000ed00
 8004468:	410fc271 	.word	0x410fc271
 800446c:	410fc270 	.word	0x410fc270
 8004470:	e000e400 	.word	0xe000e400
 8004474:	20000e94 	.word	0x20000e94
 8004478:	20000e98 	.word	0x20000e98
 800447c:	e000ed20 	.word	0xe000ed20
 8004480:	2000000c 	.word	0x2000000c
 8004484:	e000ef34 	.word	0xe000ef34

08004488 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
	__asm volatile
 800448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004492:	f383 8811 	msr	BASEPRI, r3
 8004496:	f3bf 8f6f 	isb	sy
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	607b      	str	r3, [r7, #4]
}
 80044a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80044a2:	4b10      	ldr	r3, [pc, #64]	@ (80044e4 <vPortEnterCritical+0x5c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3301      	adds	r3, #1
 80044a8:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <vPortEnterCritical+0x5c>)
 80044aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80044ac:	4b0d      	ldr	r3, [pc, #52]	@ (80044e4 <vPortEnterCritical+0x5c>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d110      	bne.n	80044d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <vPortEnterCritical+0x60>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00b      	beq.n	80044d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80044be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c2:	f383 8811 	msr	BASEPRI, r3
 80044c6:	f3bf 8f6f 	isb	sy
 80044ca:	f3bf 8f4f 	dsb	sy
 80044ce:	603b      	str	r3, [r7, #0]
}
 80044d0:	bf00      	nop
 80044d2:	bf00      	nop
 80044d4:	e7fd      	b.n	80044d2 <vPortEnterCritical+0x4a>
	}
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	2000000c 	.word	0x2000000c
 80044e8:	e000ed04 	.word	0xe000ed04

080044ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80044f2:	4b12      	ldr	r3, [pc, #72]	@ (800453c <vPortExitCritical+0x50>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10b      	bne.n	8004512 <vPortExitCritical+0x26>
	__asm volatile
 80044fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044fe:	f383 8811 	msr	BASEPRI, r3
 8004502:	f3bf 8f6f 	isb	sy
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	607b      	str	r3, [r7, #4]
}
 800450c:	bf00      	nop
 800450e:	bf00      	nop
 8004510:	e7fd      	b.n	800450e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <vPortExitCritical+0x50>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	3b01      	subs	r3, #1
 8004518:	4a08      	ldr	r2, [pc, #32]	@ (800453c <vPortExitCritical+0x50>)
 800451a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800451c:	4b07      	ldr	r3, [pc, #28]	@ (800453c <vPortExitCritical+0x50>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <vPortExitCritical+0x44>
 8004524:	2300      	movs	r3, #0
 8004526:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	f383 8811 	msr	BASEPRI, r3
}
 800452e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	2000000c 	.word	0x2000000c

08004540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004540:	f3ef 8009 	mrs	r0, PSP
 8004544:	f3bf 8f6f 	isb	sy
 8004548:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <pxCurrentTCBConst>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	f01e 0f10 	tst.w	lr, #16
 8004550:	bf08      	it	eq
 8004552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800455a:	6010      	str	r0, [r2, #0]
 800455c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004560:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004564:	f380 8811 	msr	BASEPRI, r0
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
 8004570:	f7fe ff9e 	bl	80034b0 <vTaskSwitchContext>
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f380 8811 	msr	BASEPRI, r0
 800457c:	bc09      	pop	{r0, r3}
 800457e:	6819      	ldr	r1, [r3, #0]
 8004580:	6808      	ldr	r0, [r1, #0]
 8004582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004586:	f01e 0f10 	tst.w	lr, #16
 800458a:	bf08      	it	eq
 800458c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004590:	f380 8809 	msr	PSP, r0
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	f3af 8000 	nop.w

080045a0 <pxCurrentTCBConst>:
 80045a0:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop

080045a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
	__asm volatile
 80045ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045b2:	f383 8811 	msr	BASEPRI, r3
 80045b6:	f3bf 8f6f 	isb	sy
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	607b      	str	r3, [r7, #4]
}
 80045c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80045c2:	f7fe febb 	bl	800333c <xTaskIncrementTick>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045cc:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <xPortSysTickHandler+0x40>)
 80045ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	2300      	movs	r3, #0
 80045d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f383 8811 	msr	BASEPRI, r3
}
 80045de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80045e0:	bf00      	nop
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	e000ed04 	.word	0xe000ed04

080045ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <vPortSetupTimerInterrupt+0x34>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80045f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004624 <vPortSetupTimerInterrupt+0x38>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80045fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004628 <vPortSetupTimerInterrupt+0x3c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a0a      	ldr	r2, [pc, #40]	@ (800462c <vPortSetupTimerInterrupt+0x40>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	099b      	lsrs	r3, r3, #6
 8004608:	4a09      	ldr	r2, [pc, #36]	@ (8004630 <vPortSetupTimerInterrupt+0x44>)
 800460a:	3b01      	subs	r3, #1
 800460c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800460e:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <vPortSetupTimerInterrupt+0x34>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
}
 8004614:	bf00      	nop
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010
 8004624:	e000e018 	.word	0xe000e018
 8004628:	20000000 	.word	0x20000000
 800462c:	10624dd3 	.word	0x10624dd3
 8004630:	e000e014 	.word	0xe000e014

08004634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004634:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004644 <vPortEnableVFP+0x10>
 8004638:	6801      	ldr	r1, [r0, #0]
 800463a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800463e:	6001      	str	r1, [r0, #0]
 8004640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004642:	bf00      	nop
 8004644:	e000ed88 	.word	0xe000ed88

08004648 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800464e:	f3ef 8305 	mrs	r3, IPSR
 8004652:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b0f      	cmp	r3, #15
 8004658:	d915      	bls.n	8004686 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800465a:	4a18      	ldr	r2, [pc, #96]	@ (80046bc <vPortValidateInterruptPriority+0x74>)
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	4413      	add	r3, r2
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004664:	4b16      	ldr	r3, [pc, #88]	@ (80046c0 <vPortValidateInterruptPriority+0x78>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	7afa      	ldrb	r2, [r7, #11]
 800466a:	429a      	cmp	r2, r3
 800466c:	d20b      	bcs.n	8004686 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800466e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004672:	f383 8811 	msr	BASEPRI, r3
 8004676:	f3bf 8f6f 	isb	sy
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	607b      	str	r3, [r7, #4]
}
 8004680:	bf00      	nop
 8004682:	bf00      	nop
 8004684:	e7fd      	b.n	8004682 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004686:	4b0f      	ldr	r3, [pc, #60]	@ (80046c4 <vPortValidateInterruptPriority+0x7c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800468e:	4b0e      	ldr	r3, [pc, #56]	@ (80046c8 <vPortValidateInterruptPriority+0x80>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d90b      	bls.n	80046ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	603b      	str	r3, [r7, #0]
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	e7fd      	b.n	80046aa <vPortValidateInterruptPriority+0x62>
	}
 80046ae:	bf00      	nop
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	e000e3f0 	.word	0xe000e3f0
 80046c0:	20000e94 	.word	0x20000e94
 80046c4:	e000ed0c 	.word	0xe000ed0c
 80046c8:	20000e98 	.word	0x20000e98

080046cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	@ 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80046d4:	2300      	movs	r3, #0
 80046d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80046d8:	f7fe fd74 	bl	80031c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80046dc:	4b5c      	ldr	r3, [pc, #368]	@ (8004850 <pvPortMalloc+0x184>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d101      	bne.n	80046e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80046e4:	f000 f924 	bl	8004930 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80046e8:	4b5a      	ldr	r3, [pc, #360]	@ (8004854 <pvPortMalloc+0x188>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4013      	ands	r3, r2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f040 8095 	bne.w	8004820 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01e      	beq.n	800473a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80046fc:	2208      	movs	r2, #8
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	2b00      	cmp	r3, #0
 800470c:	d015      	beq.n	800473a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f023 0307 	bic.w	r3, r3, #7
 8004714:	3308      	adds	r3, #8
 8004716:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <pvPortMalloc+0x6e>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	617b      	str	r3, [r7, #20]
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d06f      	beq.n	8004820 <pvPortMalloc+0x154>
 8004740:	4b45      	ldr	r3, [pc, #276]	@ (8004858 <pvPortMalloc+0x18c>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	687a      	ldr	r2, [r7, #4]
 8004746:	429a      	cmp	r2, r3
 8004748:	d86a      	bhi.n	8004820 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800474a:	4b44      	ldr	r3, [pc, #272]	@ (800485c <pvPortMalloc+0x190>)
 800474c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800474e:	4b43      	ldr	r3, [pc, #268]	@ (800485c <pvPortMalloc+0x190>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004754:	e004      	b.n	8004760 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004758:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800475a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	429a      	cmp	r2, r3
 8004768:	d903      	bls.n	8004772 <pvPortMalloc+0xa6>
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f1      	bne.n	8004756 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004772:	4b37      	ldr	r3, [pc, #220]	@ (8004850 <pvPortMalloc+0x184>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004778:	429a      	cmp	r2, r3
 800477a:	d051      	beq.n	8004820 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2208      	movs	r2, #8
 8004782:	4413      	add	r3, r2
 8004784:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800478e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	1ad2      	subs	r2, r2, r3
 8004796:	2308      	movs	r3, #8
 8004798:	005b      	lsls	r3, r3, #1
 800479a:	429a      	cmp	r2, r3
 800479c:	d920      	bls.n	80047e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800479e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	4413      	add	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00b      	beq.n	80047c8 <pvPortMalloc+0xfc>
	__asm volatile
 80047b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
}
 80047c2:	bf00      	nop
 80047c4:	bf00      	nop
 80047c6:	e7fd      	b.n	80047c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	1ad2      	subs	r2, r2, r3
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047da:	69b8      	ldr	r0, [r7, #24]
 80047dc:	f000 f90a 	bl	80049f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004858 <pvPortMalloc+0x18c>)
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	4a1b      	ldr	r2, [pc, #108]	@ (8004858 <pvPortMalloc+0x18c>)
 80047ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ee:	4b1a      	ldr	r3, [pc, #104]	@ (8004858 <pvPortMalloc+0x18c>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004860 <pvPortMalloc+0x194>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d203      	bcs.n	8004802 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047fa:	4b17      	ldr	r3, [pc, #92]	@ (8004858 <pvPortMalloc+0x18c>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a18      	ldr	r2, [pc, #96]	@ (8004860 <pvPortMalloc+0x194>)
 8004800:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004804:	685a      	ldr	r2, [r3, #4]
 8004806:	4b13      	ldr	r3, [pc, #76]	@ (8004854 <pvPortMalloc+0x188>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	431a      	orrs	r2, r3
 800480c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004816:	4b13      	ldr	r3, [pc, #76]	@ (8004864 <pvPortMalloc+0x198>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	4a11      	ldr	r2, [pc, #68]	@ (8004864 <pvPortMalloc+0x198>)
 800481e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004820:	f7fe fcde 	bl	80031e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	f003 0307 	and.w	r3, r3, #7
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00b      	beq.n	8004846 <pvPortMalloc+0x17a>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	60fb      	str	r3, [r7, #12]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <pvPortMalloc+0x176>
	return pvReturn;
 8004846:	69fb      	ldr	r3, [r7, #28]
}
 8004848:	4618      	mov	r0, r3
 800484a:	3728      	adds	r7, #40	@ 0x28
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20004aa4 	.word	0x20004aa4
 8004854:	20004ab8 	.word	0x20004ab8
 8004858:	20004aa8 	.word	0x20004aa8
 800485c:	20004a9c 	.word	0x20004a9c
 8004860:	20004aac 	.word	0x20004aac
 8004864:	20004ab0 	.word	0x20004ab0

08004868 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d04f      	beq.n	800491a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800487a:	2308      	movs	r3, #8
 800487c:	425b      	negs	r3, r3
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	4413      	add	r3, r2
 8004882:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	4b25      	ldr	r3, [pc, #148]	@ (8004924 <vPortFree+0xbc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4013      	ands	r3, r2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <vPortFree+0x46>
	__asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60fb      	str	r3, [r7, #12]
}
 80048a8:	bf00      	nop
 80048aa:	bf00      	nop
 80048ac:	e7fd      	b.n	80048aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <vPortFree+0x66>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	e7fd      	b.n	80048ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	685a      	ldr	r2, [r3, #4]
 80048d2:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <vPortFree+0xbc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d01e      	beq.n	800491a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d11a      	bne.n	800491a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b0e      	ldr	r3, [pc, #56]	@ (8004924 <vPortFree+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	43db      	mvns	r3, r3
 80048ee:	401a      	ands	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80048f4:	f7fe fc66 	bl	80031c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	685a      	ldr	r2, [r3, #4]
 80048fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004928 <vPortFree+0xc0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4413      	add	r3, r2
 8004902:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <vPortFree+0xc0>)
 8004904:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f000 f874 	bl	80049f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <vPortFree+0xc4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	4a06      	ldr	r2, [pc, #24]	@ (800492c <vPortFree+0xc4>)
 8004914:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004916:	f7fe fc63 	bl	80031e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800491a:	bf00      	nop
 800491c:	3718      	adds	r7, #24
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20004ab8 	.word	0x20004ab8
 8004928:	20004aa8 	.word	0x20004aa8
 800492c:	20004ab4 	.word	0x20004ab4

08004930 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004936:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800493a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800493c:	4b27      	ldr	r3, [pc, #156]	@ (80049dc <prvHeapInit+0xac>)
 800493e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00c      	beq.n	8004964 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	3307      	adds	r3, #7
 800494e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f023 0307 	bic.w	r3, r3, #7
 8004956:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	4a1f      	ldr	r2, [pc, #124]	@ (80049dc <prvHeapInit+0xac>)
 8004960:	4413      	add	r3, r2
 8004962:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004968:	4a1d      	ldr	r2, [pc, #116]	@ (80049e0 <prvHeapInit+0xb0>)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800496e:	4b1c      	ldr	r3, [pc, #112]	@ (80049e0 <prvHeapInit+0xb0>)
 8004970:	2200      	movs	r2, #0
 8004972:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	4413      	add	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800497c:	2208      	movs	r2, #8
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4a15      	ldr	r2, [pc, #84]	@ (80049e4 <prvHeapInit+0xb4>)
 8004990:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004992:	4b14      	ldr	r3, [pc, #80]	@ (80049e4 <prvHeapInit+0xb4>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800499a:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <prvHeapInit+0xb4>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2200      	movs	r2, #0
 80049a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	1ad2      	subs	r2, r2, r3
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80049b0:	4b0c      	ldr	r3, [pc, #48]	@ (80049e4 <prvHeapInit+0xb4>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	@ (80049e8 <prvHeapInit+0xb8>)
 80049be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	4a09      	ldr	r2, [pc, #36]	@ (80049ec <prvHeapInit+0xbc>)
 80049c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80049c8:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <prvHeapInit+0xc0>)
 80049ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80049ce:	601a      	str	r2, [r3, #0]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	20000e9c 	.word	0x20000e9c
 80049e0:	20004a9c 	.word	0x20004a9c
 80049e4:	20004aa4 	.word	0x20004aa4
 80049e8:	20004aac 	.word	0x20004aac
 80049ec:	20004aa8 	.word	0x20004aa8
 80049f0:	20004ab8 	.word	0x20004ab8

080049f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80049fc:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <prvInsertBlockIntoFreeList+0xac>)
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e002      	b.n	8004a08 <prvInsertBlockIntoFreeList+0x14>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	60fb      	str	r3, [r7, #12]
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d8f7      	bhi.n	8004a02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	4413      	add	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d108      	bne.n	8004a36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	685a      	ldr	r2, [r3, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	441a      	add	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	68ba      	ldr	r2, [r7, #8]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d118      	bne.n	8004a7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	4b15      	ldr	r3, [pc, #84]	@ (8004aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d00d      	beq.n	8004a72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685a      	ldr	r2, [r3, #4]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	601a      	str	r2, [r3, #0]
 8004a70:	e008      	b.n	8004a84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004a72:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa4 <prvInsertBlockIntoFreeList+0xb0>)
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e003      	b.n	8004a84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d002      	beq.n	8004a92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a92:	bf00      	nop
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20004a9c 	.word	0x20004a9c
 8004aa4:	20004aa4 	.word	0x20004aa4

08004aa8 <memset>:
 8004aa8:	4402      	add	r2, r0
 8004aaa:	4603      	mov	r3, r0
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d100      	bne.n	8004ab2 <memset+0xa>
 8004ab0:	4770      	bx	lr
 8004ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ab6:	e7f9      	b.n	8004aac <memset+0x4>

08004ab8 <_reclaim_reent>:
 8004ab8:	4b29      	ldr	r3, [pc, #164]	@ (8004b60 <_reclaim_reent+0xa8>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4283      	cmp	r3, r0
 8004abe:	b570      	push	{r4, r5, r6, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	d04b      	beq.n	8004b5c <_reclaim_reent+0xa4>
 8004ac4:	69c3      	ldr	r3, [r0, #28]
 8004ac6:	b1ab      	cbz	r3, 8004af4 <_reclaim_reent+0x3c>
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	b16b      	cbz	r3, 8004ae8 <_reclaim_reent+0x30>
 8004acc:	2500      	movs	r5, #0
 8004ace:	69e3      	ldr	r3, [r4, #28]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	5959      	ldr	r1, [r3, r5]
 8004ad4:	2900      	cmp	r1, #0
 8004ad6:	d13b      	bne.n	8004b50 <_reclaim_reent+0x98>
 8004ad8:	3504      	adds	r5, #4
 8004ada:	2d80      	cmp	r5, #128	@ 0x80
 8004adc:	d1f7      	bne.n	8004ace <_reclaim_reent+0x16>
 8004ade:	69e3      	ldr	r3, [r4, #28]
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	68d9      	ldr	r1, [r3, #12]
 8004ae4:	f000 f872 	bl	8004bcc <_free_r>
 8004ae8:	69e3      	ldr	r3, [r4, #28]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	b111      	cbz	r1, 8004af4 <_reclaim_reent+0x3c>
 8004aee:	4620      	mov	r0, r4
 8004af0:	f000 f86c 	bl	8004bcc <_free_r>
 8004af4:	6961      	ldr	r1, [r4, #20]
 8004af6:	b111      	cbz	r1, 8004afe <_reclaim_reent+0x46>
 8004af8:	4620      	mov	r0, r4
 8004afa:	f000 f867 	bl	8004bcc <_free_r>
 8004afe:	69e1      	ldr	r1, [r4, #28]
 8004b00:	b111      	cbz	r1, 8004b08 <_reclaim_reent+0x50>
 8004b02:	4620      	mov	r0, r4
 8004b04:	f000 f862 	bl	8004bcc <_free_r>
 8004b08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004b0a:	b111      	cbz	r1, 8004b12 <_reclaim_reent+0x5a>
 8004b0c:	4620      	mov	r0, r4
 8004b0e:	f000 f85d 	bl	8004bcc <_free_r>
 8004b12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004b14:	b111      	cbz	r1, 8004b1c <_reclaim_reent+0x64>
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f858 	bl	8004bcc <_free_r>
 8004b1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004b1e:	b111      	cbz	r1, 8004b26 <_reclaim_reent+0x6e>
 8004b20:	4620      	mov	r0, r4
 8004b22:	f000 f853 	bl	8004bcc <_free_r>
 8004b26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004b28:	b111      	cbz	r1, 8004b30 <_reclaim_reent+0x78>
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f000 f84e 	bl	8004bcc <_free_r>
 8004b30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004b32:	b111      	cbz	r1, 8004b3a <_reclaim_reent+0x82>
 8004b34:	4620      	mov	r0, r4
 8004b36:	f000 f849 	bl	8004bcc <_free_r>
 8004b3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004b3c:	b111      	cbz	r1, 8004b44 <_reclaim_reent+0x8c>
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f000 f844 	bl	8004bcc <_free_r>
 8004b44:	6a23      	ldr	r3, [r4, #32]
 8004b46:	b14b      	cbz	r3, 8004b5c <_reclaim_reent+0xa4>
 8004b48:	4620      	mov	r0, r4
 8004b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004b4e:	4718      	bx	r3
 8004b50:	680e      	ldr	r6, [r1, #0]
 8004b52:	4620      	mov	r0, r4
 8004b54:	f000 f83a 	bl	8004bcc <_free_r>
 8004b58:	4631      	mov	r1, r6
 8004b5a:	e7bb      	b.n	8004ad4 <_reclaim_reent+0x1c>
 8004b5c:	bd70      	pop	{r4, r5, r6, pc}
 8004b5e:	bf00      	nop
 8004b60:	20000010 	.word	0x20000010

08004b64 <__libc_init_array>:
 8004b64:	b570      	push	{r4, r5, r6, lr}
 8004b66:	4d0d      	ldr	r5, [pc, #52]	@ (8004b9c <__libc_init_array+0x38>)
 8004b68:	4c0d      	ldr	r4, [pc, #52]	@ (8004ba0 <__libc_init_array+0x3c>)
 8004b6a:	1b64      	subs	r4, r4, r5
 8004b6c:	10a4      	asrs	r4, r4, #2
 8004b6e:	2600      	movs	r6, #0
 8004b70:	42a6      	cmp	r6, r4
 8004b72:	d109      	bne.n	8004b88 <__libc_init_array+0x24>
 8004b74:	4d0b      	ldr	r5, [pc, #44]	@ (8004ba4 <__libc_init_array+0x40>)
 8004b76:	4c0c      	ldr	r4, [pc, #48]	@ (8004ba8 <__libc_init_array+0x44>)
 8004b78:	f000 f87e 	bl	8004c78 <_init>
 8004b7c:	1b64      	subs	r4, r4, r5
 8004b7e:	10a4      	asrs	r4, r4, #2
 8004b80:	2600      	movs	r6, #0
 8004b82:	42a6      	cmp	r6, r4
 8004b84:	d105      	bne.n	8004b92 <__libc_init_array+0x2e>
 8004b86:	bd70      	pop	{r4, r5, r6, pc}
 8004b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8c:	4798      	blx	r3
 8004b8e:	3601      	adds	r6, #1
 8004b90:	e7ee      	b.n	8004b70 <__libc_init_array+0xc>
 8004b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b96:	4798      	blx	r3
 8004b98:	3601      	adds	r6, #1
 8004b9a:	e7f2      	b.n	8004b82 <__libc_init_array+0x1e>
 8004b9c:	08004d58 	.word	0x08004d58
 8004ba0:	08004d58 	.word	0x08004d58
 8004ba4:	08004d58 	.word	0x08004d58
 8004ba8:	08004d5c 	.word	0x08004d5c

08004bac <__retarget_lock_acquire_recursive>:
 8004bac:	4770      	bx	lr

08004bae <__retarget_lock_release_recursive>:
 8004bae:	4770      	bx	lr

08004bb0 <memcpy>:
 8004bb0:	440a      	add	r2, r1
 8004bb2:	4291      	cmp	r1, r2
 8004bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004bb8:	d100      	bne.n	8004bbc <memcpy+0xc>
 8004bba:	4770      	bx	lr
 8004bbc:	b510      	push	{r4, lr}
 8004bbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bc6:	4291      	cmp	r1, r2
 8004bc8:	d1f9      	bne.n	8004bbe <memcpy+0xe>
 8004bca:	bd10      	pop	{r4, pc}

08004bcc <_free_r>:
 8004bcc:	b538      	push	{r3, r4, r5, lr}
 8004bce:	4605      	mov	r5, r0
 8004bd0:	2900      	cmp	r1, #0
 8004bd2:	d041      	beq.n	8004c58 <_free_r+0x8c>
 8004bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bd8:	1f0c      	subs	r4, r1, #4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bfb8      	it	lt
 8004bde:	18e4      	addlt	r4, r4, r3
 8004be0:	f000 f83e 	bl	8004c60 <__malloc_lock>
 8004be4:	4a1d      	ldr	r2, [pc, #116]	@ (8004c5c <_free_r+0x90>)
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	b933      	cbnz	r3, 8004bf8 <_free_r+0x2c>
 8004bea:	6063      	str	r3, [r4, #4]
 8004bec:	6014      	str	r4, [r2, #0]
 8004bee:	4628      	mov	r0, r5
 8004bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf4:	f000 b83a 	b.w	8004c6c <__malloc_unlock>
 8004bf8:	42a3      	cmp	r3, r4
 8004bfa:	d908      	bls.n	8004c0e <_free_r+0x42>
 8004bfc:	6820      	ldr	r0, [r4, #0]
 8004bfe:	1821      	adds	r1, r4, r0
 8004c00:	428b      	cmp	r3, r1
 8004c02:	bf01      	itttt	eq
 8004c04:	6819      	ldreq	r1, [r3, #0]
 8004c06:	685b      	ldreq	r3, [r3, #4]
 8004c08:	1809      	addeq	r1, r1, r0
 8004c0a:	6021      	streq	r1, [r4, #0]
 8004c0c:	e7ed      	b.n	8004bea <_free_r+0x1e>
 8004c0e:	461a      	mov	r2, r3
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	b10b      	cbz	r3, 8004c18 <_free_r+0x4c>
 8004c14:	42a3      	cmp	r3, r4
 8004c16:	d9fa      	bls.n	8004c0e <_free_r+0x42>
 8004c18:	6811      	ldr	r1, [r2, #0]
 8004c1a:	1850      	adds	r0, r2, r1
 8004c1c:	42a0      	cmp	r0, r4
 8004c1e:	d10b      	bne.n	8004c38 <_free_r+0x6c>
 8004c20:	6820      	ldr	r0, [r4, #0]
 8004c22:	4401      	add	r1, r0
 8004c24:	1850      	adds	r0, r2, r1
 8004c26:	4283      	cmp	r3, r0
 8004c28:	6011      	str	r1, [r2, #0]
 8004c2a:	d1e0      	bne.n	8004bee <_free_r+0x22>
 8004c2c:	6818      	ldr	r0, [r3, #0]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	6053      	str	r3, [r2, #4]
 8004c32:	4408      	add	r0, r1
 8004c34:	6010      	str	r0, [r2, #0]
 8004c36:	e7da      	b.n	8004bee <_free_r+0x22>
 8004c38:	d902      	bls.n	8004c40 <_free_r+0x74>
 8004c3a:	230c      	movs	r3, #12
 8004c3c:	602b      	str	r3, [r5, #0]
 8004c3e:	e7d6      	b.n	8004bee <_free_r+0x22>
 8004c40:	6820      	ldr	r0, [r4, #0]
 8004c42:	1821      	adds	r1, r4, r0
 8004c44:	428b      	cmp	r3, r1
 8004c46:	bf04      	itt	eq
 8004c48:	6819      	ldreq	r1, [r3, #0]
 8004c4a:	685b      	ldreq	r3, [r3, #4]
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	bf04      	itt	eq
 8004c50:	1809      	addeq	r1, r1, r0
 8004c52:	6021      	streq	r1, [r4, #0]
 8004c54:	6054      	str	r4, [r2, #4]
 8004c56:	e7ca      	b.n	8004bee <_free_r+0x22>
 8004c58:	bd38      	pop	{r3, r4, r5, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20004bf8 	.word	0x20004bf8

08004c60 <__malloc_lock>:
 8004c60:	4801      	ldr	r0, [pc, #4]	@ (8004c68 <__malloc_lock+0x8>)
 8004c62:	f7ff bfa3 	b.w	8004bac <__retarget_lock_acquire_recursive>
 8004c66:	bf00      	nop
 8004c68:	20004bf4 	.word	0x20004bf4

08004c6c <__malloc_unlock>:
 8004c6c:	4801      	ldr	r0, [pc, #4]	@ (8004c74 <__malloc_unlock+0x8>)
 8004c6e:	f7ff bf9e 	b.w	8004bae <__retarget_lock_release_recursive>
 8004c72:	bf00      	nop
 8004c74:	20004bf4 	.word	0x20004bf4

08004c78 <_init>:
 8004c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7a:	bf00      	nop
 8004c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c7e:	bc08      	pop	{r3}
 8004c80:	469e      	mov	lr, r3
 8004c82:	4770      	bx	lr

08004c84 <_fini>:
 8004c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c86:	bf00      	nop
 8004c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8a:	bc08      	pop	{r3}
 8004c8c:	469e      	mov	lr, r3
 8004c8e:	4770      	bx	lr
