
LAB_4_SUSPEND_RESUME_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004e50  08004e50  00005e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f10  08004f10  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f18  08004f18  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f18  08004f18  00005f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f1c  08004f1c  00005f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004f20  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006060  2**0
                  CONTENTS
 10 .bss          00004b9c  20000060  20000060  00006060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004bfc  20004bfc  00006060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013ee4  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d12  00000000  00000000  00019f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0001cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d8c  00000000  00000000  0001de20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d40  00000000  00000000  0001ebac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ea1  00000000  00000000  000218ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2c89  00000000  00000000  0003478d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00107416  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cac  00000000  00000000  0010745c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  0010c108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e38 	.word	0x08004e38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004e38 	.word	0x08004e38

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fa50 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f832 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f89a 	bl	8000604 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004d0:	f001 fcd4 	bl	8001e7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d4:	4a0d      	ldr	r2, [pc, #52]	@ (800050c <main+0x4c>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480d      	ldr	r0, [pc, #52]	@ (8000510 <main+0x50>)
 80004da:	f001 fd19 	bl	8001f10 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000514 <main+0x54>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <main+0x58>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <main+0x5c>)
 80004ea:	f001 fd11 	bl	8001f10 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <main+0x60>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 80004f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000524 <main+0x64>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480b      	ldr	r0, [pc, #44]	@ (8000528 <main+0x68>)
 80004fa:	f001 fd09 	bl	8001f10 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	@ (800052c <main+0x6c>)
 8000502:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000504:	f001 fcde 	bl	8001ec4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <main+0x48>
 800050c:	08004e8c 	.word	0x08004e8c
 8000510:	080006a9 	.word	0x080006a9
 8000514:	2000007c 	.word	0x2000007c
 8000518:	08004eb0 	.word	0x08004eb0
 800051c:	080006b9 	.word	0x080006b9
 8000520:	20000080 	.word	0x20000080
 8000524:	08004ed4 	.word	0x08004ed4
 8000528:	080006f5 	.word	0x080006f5
 800052c:	20000084 	.word	0x20000084

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fb92 	bl	8004c68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f000 fcca 	bl	8000f50 <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f8c9 	bl	8000758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 ff2b 	bl	8001440 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f8b2 	bl	8000758 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b088      	sub	sp, #32
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	f107 030c 	add.w	r3, r7, #12
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
 8000612:	605a      	str	r2, [r3, #4]
 8000614:	609a      	str	r2, [r3, #8]
 8000616:	60da      	str	r2, [r3, #12]
 8000618:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b20      	ldr	r3, [pc, #128]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1f      	ldr	r2, [pc, #124]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1d      	ldr	r3, [pc, #116]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b19      	ldr	r3, [pc, #100]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a18      	ldr	r2, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a11      	ldr	r2, [pc, #68]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_GPIO_Init+0x9c>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	603b      	str	r3, [r7, #0]
 800066c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000674:	480b      	ldr	r0, [pc, #44]	@ (80006a4 <MX_GPIO_Init+0xa0>)
 8000676:	f000 fc37 	bl	8000ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800067a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800067e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4619      	mov	r1, r3
 8000692:	4804      	ldr	r0, [pc, #16]	@ (80006a4 <MX_GPIO_Init+0xa0>)
 8000694:	f000 fa8c 	bl	8000bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000698:	bf00      	nop
 800069a:	3720      	adds	r7, #32
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40020c00 	.word	0x40020c00

080006a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006b0:	2001      	movs	r0, #1
 80006b2:	f001 fd01 	bl	80020b8 <osDelay>
 80006b6:	e7fb      	b.n	80006b0 <StartDefaultTask+0x8>

080006b8 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  char counter = 0x00;
 80006c0:	2300      	movs	r3, #0
 80006c2:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006c8:	4808      	ldr	r0, [pc, #32]	@ (80006ec <StartLED1_Task+0x34>)
 80006ca:	f000 fc26 	bl	8000f1a <HAL_GPIO_TogglePin>
	osDelay(200);
 80006ce:	20c8      	movs	r0, #200	@ 0xc8
 80006d0:	f001 fcf2 	bl	80020b8 <osDelay>
	counter++;
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	3301      	adds	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
	if (counter == 10)
 80006da:	7bfb      	ldrb	r3, [r7, #15]
 80006dc:	2b0a      	cmp	r3, #10
 80006de:	d1f1      	bne.n	80006c4 <StartLED1_Task+0xc>
	{
		osThreadSuspend(LED1_TaskHandle);
 80006e0:	4b03      	ldr	r3, [pc, #12]	@ (80006f0 <StartLED1_Task+0x38>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fca5 	bl	8002034 <osThreadSuspend>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80006ea:	e7eb      	b.n	80006c4 <StartLED1_Task+0xc>
 80006ec:	40020c00 	.word	0x40020c00
 80006f0:	20000080 	.word	0x20000080

080006f4 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  char counter = 0x00;
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4809      	ldr	r0, [pc, #36]	@ (800072c <StartLED2_Task+0x38>)
 8000706:	f000 fc08 	bl	8000f1a <HAL_GPIO_TogglePin>
	osDelay(500);
 800070a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800070e:	f001 fcd3 	bl	80020b8 <osDelay>
	counter++;
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	3301      	adds	r3, #1
 8000716:	73fb      	strb	r3, [r7, #15]
	if (counter == 20)
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	2b14      	cmp	r3, #20
 800071c:	d1f0      	bne.n	8000700 <StartLED2_Task+0xc>
	{
		osThreadResume(LED1_TaskHandle);
 800071e:	4b04      	ldr	r3, [pc, #16]	@ (8000730 <StartLED2_Task+0x3c>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fca7 	bl	8002076 <osThreadResume>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000728:	e7ea      	b.n	8000700 <StartLED2_Task+0xc>
 800072a:	bf00      	nop
 800072c:	40020c00 	.word	0x40020c00
 8000730:	20000080 	.word	0x20000080

08000734 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	@ (8000754 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d101      	bne.n	800074a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000746:	f000 f931 	bl	80009ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40010000 	.word	0x40010000

08000758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800075c:	b672      	cpsid	i
}
 800075e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000760:	bf00      	nop
 8000762:	e7fd      	b.n	8000760 <Error_Handler+0x8>

08000764 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_MspInit+0x54>)
 8000770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000772:	4a11      	ldr	r2, [pc, #68]	@ (80007b8 <HAL_MspInit+0x54>)
 8000774:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000778:	6453      	str	r3, [r2, #68]	@ 0x44
 800077a:	4b0f      	ldr	r3, [pc, #60]	@ (80007b8 <HAL_MspInit+0x54>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
 800078a:	4b0b      	ldr	r3, [pc, #44]	@ (80007b8 <HAL_MspInit+0x54>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <HAL_MspInit+0x54>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000794:	6413      	str	r3, [r2, #64]	@ 0x40
 8000796:	4b08      	ldr	r3, [pc, #32]	@ (80007b8 <HAL_MspInit+0x54>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	210f      	movs	r1, #15
 80007a6:	f06f 0001 	mvn.w	r0, #1
 80007aa:	f000 f9d7 	bl	8000b5c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40023800 	.word	0x40023800

080007bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80007c8:	2300      	movs	r3, #0
 80007ca:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
 80007d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <HAL_InitTick+0xd4>)
 80007d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d4:	4a2e      	ldr	r2, [pc, #184]	@ (8000890 <HAL_InitTick+0xd4>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6453      	str	r3, [r2, #68]	@ 0x44
 80007dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000890 <HAL_InitTick+0xd4>)
 80007de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e8:	f107 020c 	add.w	r2, r7, #12
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	4611      	mov	r1, r2
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 f830 	bl	8001858 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80007f8:	f001 f81a 	bl	8001830 <HAL_RCC_GetPCLK2Freq>
 80007fc:	4603      	mov	r3, r0
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000804:	4a23      	ldr	r2, [pc, #140]	@ (8000894 <HAL_InitTick+0xd8>)
 8000806:	fba2 2303 	umull	r2, r3, r2, r3
 800080a:	0c9b      	lsrs	r3, r3, #18
 800080c:	3b01      	subs	r3, #1
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000810:	4b21      	ldr	r3, [pc, #132]	@ (8000898 <HAL_InitTick+0xdc>)
 8000812:	4a22      	ldr	r2, [pc, #136]	@ (800089c <HAL_InitTick+0xe0>)
 8000814:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000816:	4b20      	ldr	r3, [pc, #128]	@ (8000898 <HAL_InitTick+0xdc>)
 8000818:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800081c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800081e:	4a1e      	ldr	r2, [pc, #120]	@ (8000898 <HAL_InitTick+0xdc>)
 8000820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000822:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000824:	4b1c      	ldr	r3, [pc, #112]	@ (8000898 <HAL_InitTick+0xdc>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <HAL_InitTick+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000830:	4b19      	ldr	r3, [pc, #100]	@ (8000898 <HAL_InitTick+0xdc>)
 8000832:	2200      	movs	r2, #0
 8000834:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000836:	4818      	ldr	r0, [pc, #96]	@ (8000898 <HAL_InitTick+0xdc>)
 8000838:	f001 f840 	bl	80018bc <HAL_TIM_Base_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000842:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000846:	2b00      	cmp	r3, #0
 8000848:	d11b      	bne.n	8000882 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800084a:	4813      	ldr	r0, [pc, #76]	@ (8000898 <HAL_InitTick+0xdc>)
 800084c:	f001 f890 	bl	8001970 <HAL_TIM_Base_Start_IT>
 8000850:	4603      	mov	r3, r0
 8000852:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000856:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800085a:	2b00      	cmp	r3, #0
 800085c:	d111      	bne.n	8000882 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800085e:	2019      	movs	r0, #25
 8000860:	f000 f998 	bl	8000b94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	d808      	bhi.n	800087c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800086a:	2200      	movs	r2, #0
 800086c:	6879      	ldr	r1, [r7, #4]
 800086e:	2019      	movs	r0, #25
 8000870:	f000 f974 	bl	8000b5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000874:	4a0a      	ldr	r2, [pc, #40]	@ (80008a0 <HAL_InitTick+0xe4>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6013      	str	r3, [r2, #0]
 800087a:	e002      	b.n	8000882 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000886:	4618      	mov	r0, r3
 8000888:	3730      	adds	r7, #48	@ 0x30
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023800 	.word	0x40023800
 8000894:	431bde83 	.word	0x431bde83
 8000898:	20000088 	.word	0x20000088
 800089c:	40010000 	.word	0x40010000
 80008a0:	20000004 	.word	0x20000004

080008a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a8:	bf00      	nop
 80008aa:	e7fd      	b.n	80008a8 <NMI_Handler+0x4>

080008ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	bf00      	nop
 80008b2:	e7fd      	b.n	80008b0 <HardFault_Handler+0x4>

080008b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <MemManage_Handler+0x4>

080008bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <BusFault_Handler+0x4>

080008c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <UsageFault_Handler+0x4>

080008cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008e0:	4802      	ldr	r0, [pc, #8]	@ (80008ec <TIM1_UP_TIM10_IRQHandler+0x10>)
 80008e2:	f001 f8b5 	bl	8001a50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000088 	.word	0x20000088

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800094c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000918:	f7ff ffea 	bl	80008f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800091e:	490d      	ldr	r1, [pc, #52]	@ (8000954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000920:	4a0d      	ldr	r2, [pc, #52]	@ (8000958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000924:	e002      	b.n	800092c <LoopCopyDataInit>

08000926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092a:	3304      	adds	r3, #4

0800092c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800092c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000930:	d3f9      	bcc.n	8000926 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000932:	4a0a      	ldr	r2, [pc, #40]	@ (800095c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000934:	4c0a      	ldr	r4, [pc, #40]	@ (8000960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000938:	e001      	b.n	800093e <LoopFillZerobss>

0800093a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800093c:	3204      	adds	r2, #4

0800093e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000940:	d3fb      	bcc.n	800093a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000942:	f004 f9ef 	bl	8004d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff fdbb 	bl	80004c0 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000958:	08004f20 	.word	0x08004f20
  ldr r2, =_sbss
 800095c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000960:	20004bfc 	.word	0x20004bfc

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800096c:	4b0e      	ldr	r3, [pc, #56]	@ (80009a8 <HAL_Init+0x40>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0d      	ldr	r2, [pc, #52]	@ (80009a8 <HAL_Init+0x40>)
 8000972:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000976:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <HAL_Init+0x40>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a0a      	ldr	r2, [pc, #40]	@ (80009a8 <HAL_Init+0x40>)
 800097e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000982:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000984:	4b08      	ldr	r3, [pc, #32]	@ (80009a8 <HAL_Init+0x40>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a07      	ldr	r2, [pc, #28]	@ (80009a8 <HAL_Init+0x40>)
 800098a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800098e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000990:	2003      	movs	r0, #3
 8000992:	f000 f8d8 	bl	8000b46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000996:	200f      	movs	r0, #15
 8000998:	f7ff ff10 	bl	80007bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800099c:	f7ff fee2 	bl	8000764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023c00 	.word	0x40023c00

080009ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b0:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_IncTick+0x20>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b06      	ldr	r3, [pc, #24]	@ (80009d0 <HAL_IncTick+0x24>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4413      	add	r3, r2
 80009bc:	4a04      	ldr	r2, [pc, #16]	@ (80009d0 <HAL_IncTick+0x24>)
 80009be:	6013      	str	r3, [r2, #0]
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	20000008 	.word	0x20000008
 80009d0:	200000d0 	.word	0x200000d0

080009d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b03      	ldr	r3, [pc, #12]	@ (80009e8 <HAL_GetTick+0x14>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	200000d0 	.word	0x200000d0

080009ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a02:	68ba      	ldr	r2, [r7, #8]
 8000a04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1e:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <__NVIC_SetPriorityGrouping+0x44>)
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	60d3      	str	r3, [r2, #12]
}
 8000a24:	bf00      	nop
 8000a26:	3714      	adds	r7, #20
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <__NVIC_GetPriorityGrouping+0x18>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	0a1b      	lsrs	r3, r3, #8
 8000a3e:	f003 0307 	and.w	r3, r3, #7
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	db0b      	blt.n	8000a7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	f003 021f 	and.w	r2, r3, #31
 8000a68:	4907      	ldr	r1, [pc, #28]	@ (8000a88 <__NVIC_EnableIRQ+0x38>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	2001      	movs	r0, #1
 8000a72:	fa00 f202 	lsl.w	r2, r0, r2
 8000a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000e100 	.word	0xe000e100

08000a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	db0a      	blt.n	8000ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	b2da      	uxtb	r2, r3
 8000aa4:	490c      	ldr	r1, [pc, #48]	@ (8000ad8 <__NVIC_SetPriority+0x4c>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	0112      	lsls	r2, r2, #4
 8000aac:	b2d2      	uxtb	r2, r2
 8000aae:	440b      	add	r3, r1
 8000ab0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab4:	e00a      	b.n	8000acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4908      	ldr	r1, [pc, #32]	@ (8000adc <__NVIC_SetPriority+0x50>)
 8000abc:	79fb      	ldrb	r3, [r7, #7]
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	3b04      	subs	r3, #4
 8000ac4:	0112      	lsls	r2, r2, #4
 8000ac6:	b2d2      	uxtb	r2, r2
 8000ac8:	440b      	add	r3, r1
 8000aca:	761a      	strb	r2, [r3, #24]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b089      	sub	sp, #36	@ 0x24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60f8      	str	r0, [r7, #12]
 8000ae8:	60b9      	str	r1, [r7, #8]
 8000aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	f1c3 0307 	rsb	r3, r3, #7
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	bf28      	it	cs
 8000afe:	2304      	movcs	r3, #4
 8000b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3304      	adds	r3, #4
 8000b06:	2b06      	cmp	r3, #6
 8000b08:	d902      	bls.n	8000b10 <NVIC_EncodePriority+0x30>
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	3b03      	subs	r3, #3
 8000b0e:	e000      	b.n	8000b12 <NVIC_EncodePriority+0x32>
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b14:	f04f 32ff 	mov.w	r2, #4294967295
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	401a      	ands	r2, r3
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b28:	f04f 31ff 	mov.w	r1, #4294967295
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b32:	43d9      	mvns	r1, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b38:	4313      	orrs	r3, r2
         );
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3724      	adds	r7, #36	@ 0x24
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ff4c 	bl	80009ec <__NVIC_SetPriorityGrouping>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
 8000b68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b6e:	f7ff ff61 	bl	8000a34 <__NVIC_GetPriorityGrouping>
 8000b72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	68b9      	ldr	r1, [r7, #8]
 8000b78:	6978      	ldr	r0, [r7, #20]
 8000b7a:	f7ff ffb1 	bl	8000ae0 <NVIC_EncodePriority>
 8000b7e:	4602      	mov	r2, r0
 8000b80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff80 	bl	8000a8c <__NVIC_SetPriority>
}
 8000b8c:	bf00      	nop
 8000b8e:	3718      	adds	r7, #24
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff54 	bl	8000a50 <__NVIC_EnableIRQ>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	@ 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
 8000bca:	e16b      	b.n	8000ea4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bcc:	2201      	movs	r2, #1
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	697a      	ldr	r2, [r7, #20]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f040 815a 	bne.w	8000e9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 0303 	and.w	r3, r3, #3
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bfe:	2b02      	cmp	r3, #2
 8000c00:	d130      	bne.n	8000c64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	2203      	movs	r2, #3
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43db      	mvns	r3, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4013      	ands	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	68da      	ldr	r2, [r3, #12]
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	005b      	lsls	r3, r3, #1
 8000c22:	fa02 f303 	lsl.w	r3, r2, r3
 8000c26:	69ba      	ldr	r2, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4013      	ands	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	091b      	lsrs	r3, r3, #4
 8000c4e:	f003 0201 	and.w	r2, r3, #1
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b03      	cmp	r3, #3
 8000c6e:	d017      	beq.n	8000ca0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	43db      	mvns	r3, r3
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	4013      	ands	r3, r2
 8000c86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	d123      	bne.n	8000cf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	08da      	lsrs	r2, r3, #3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3208      	adds	r2, #8
 8000cb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	f003 0307 	and.w	r3, r3, #7
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	69ba      	ldr	r2, [r7, #24]
 8000ccc:	4013      	ands	r3, r2
 8000cce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	691a      	ldr	r2, [r3, #16]
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0307 	and.w	r3, r3, #7
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	69b9      	ldr	r1, [r7, #24]
 8000cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	f003 0203 	and.w	r2, r3, #3
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69ba      	ldr	r2, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	f000 80b4 	beq.w	8000e9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b60      	ldr	r3, [pc, #384]	@ (8000ebc <HAL_GPIO_Init+0x30c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3e:	4a5f      	ldr	r2, [pc, #380]	@ (8000ebc <HAL_GPIO_Init+0x30c>)
 8000d40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d46:	4b5d      	ldr	r3, [pc, #372]	@ (8000ebc <HAL_GPIO_Init+0x30c>)
 8000d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d52:	4a5b      	ldr	r2, [pc, #364]	@ (8000ec0 <HAL_GPIO_Init+0x310>)
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f003 0303 	and.w	r3, r3, #3
 8000d66:	009b      	lsls	r3, r3, #2
 8000d68:	220f      	movs	r2, #15
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43db      	mvns	r3, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4013      	ands	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a52      	ldr	r2, [pc, #328]	@ (8000ec4 <HAL_GPIO_Init+0x314>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d02b      	beq.n	8000dd6 <HAL_GPIO_Init+0x226>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a51      	ldr	r2, [pc, #324]	@ (8000ec8 <HAL_GPIO_Init+0x318>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d025      	beq.n	8000dd2 <HAL_GPIO_Init+0x222>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a50      	ldr	r2, [pc, #320]	@ (8000ecc <HAL_GPIO_Init+0x31c>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d01f      	beq.n	8000dce <HAL_GPIO_Init+0x21e>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a4f      	ldr	r2, [pc, #316]	@ (8000ed0 <HAL_GPIO_Init+0x320>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d019      	beq.n	8000dca <HAL_GPIO_Init+0x21a>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4a4e      	ldr	r2, [pc, #312]	@ (8000ed4 <HAL_GPIO_Init+0x324>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d013      	beq.n	8000dc6 <HAL_GPIO_Init+0x216>
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4a4d      	ldr	r2, [pc, #308]	@ (8000ed8 <HAL_GPIO_Init+0x328>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d00d      	beq.n	8000dc2 <HAL_GPIO_Init+0x212>
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4a4c      	ldr	r2, [pc, #304]	@ (8000edc <HAL_GPIO_Init+0x32c>)
 8000daa:	4293      	cmp	r3, r2
 8000dac:	d007      	beq.n	8000dbe <HAL_GPIO_Init+0x20e>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4a4b      	ldr	r2, [pc, #300]	@ (8000ee0 <HAL_GPIO_Init+0x330>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d101      	bne.n	8000dba <HAL_GPIO_Init+0x20a>
 8000db6:	2307      	movs	r3, #7
 8000db8:	e00e      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dba:	2308      	movs	r3, #8
 8000dbc:	e00c      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dbe:	2306      	movs	r3, #6
 8000dc0:	e00a      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dc2:	2305      	movs	r3, #5
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x228>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	@ (8000ec0 <HAL_GPIO_Init+0x310>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000df6:	4b3b      	ldr	r3, [pc, #236]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e1a:	4a32      	ldr	r2, [pc, #200]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e20:	4b30      	ldr	r3, [pc, #192]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e44:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e4a:	4b26      	ldr	r3, [pc, #152]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e98:	4a12      	ldr	r2, [pc, #72]	@ (8000ee4 <HAL_GPIO_Init+0x334>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f ae90 	bls.w	8000bcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	@ 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40021400 	.word	0x40021400
 8000edc:	40021800 	.word	0x40021800
 8000ee0:	40021c00 	.word	0x40021c00
 8000ee4:	40013c00 	.word	0x40013c00

08000ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	807b      	strh	r3, [r7, #2]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef8:	787b      	ldrb	r3, [r7, #1]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f04:	e003      	b.n	8000f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	619a      	str	r2, [r3, #24]
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b085      	sub	sp, #20
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
 8000f2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f2c:	887a      	ldrh	r2, [r7, #2]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4013      	ands	r3, r2
 8000f32:	041a      	lsls	r2, r3, #16
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	400b      	ands	r3, r1
 8000f3c:	431a      	orrs	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	619a      	str	r2, [r3, #24]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
	...

08000f50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d101      	bne.n	8000f62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e267      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d075      	beq.n	800105a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f6e:	4b88      	ldr	r3, [pc, #544]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	d00c      	beq.n	8000f94 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f7a:	4b85      	ldr	r3, [pc, #532]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	d112      	bne.n	8000fac <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f86:	4b82      	ldr	r3, [pc, #520]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000f92:	d10b      	bne.n	8000fac <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f94:	4b7e      	ldr	r3, [pc, #504]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d05b      	beq.n	8001058 <HAL_RCC_OscConfig+0x108>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d157      	bne.n	8001058 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e242      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fb4:	d106      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x74>
 8000fb6:	4b76      	ldr	r3, [pc, #472]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a75      	ldr	r2, [pc, #468]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e01d      	b.n	8001000 <HAL_RCC_OscConfig+0xb0>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x98>
 8000fce:	4b70      	ldr	r3, [pc, #448]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a6f      	ldr	r2, [pc, #444]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b6d      	ldr	r3, [pc, #436]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a6c      	ldr	r2, [pc, #432]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e00b      	b.n	8001000 <HAL_RCC_OscConfig+0xb0>
 8000fe8:	4b69      	ldr	r3, [pc, #420]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a68      	ldr	r2, [pc, #416]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000fee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ff2:	6013      	str	r3, [r2, #0]
 8000ff4:	4b66      	ldr	r3, [pc, #408]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a65      	ldr	r2, [pc, #404]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ffe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d013      	beq.n	8001030 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001008:	f7ff fce4 	bl	80009d4 <HAL_GetTick>
 800100c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800100e:	e008      	b.n	8001022 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001010:	f7ff fce0 	bl	80009d4 <HAL_GetTick>
 8001014:	4602      	mov	r2, r0
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	2b64      	cmp	r3, #100	@ 0x64
 800101c:	d901      	bls.n	8001022 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800101e:	2303      	movs	r3, #3
 8001020:	e207      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4b5b      	ldr	r3, [pc, #364]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d0f0      	beq.n	8001010 <HAL_RCC_OscConfig+0xc0>
 800102e:	e014      	b.n	800105a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001030:	f7ff fcd0 	bl	80009d4 <HAL_GetTick>
 8001034:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001036:	e008      	b.n	800104a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001038:	f7ff fccc 	bl	80009d4 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	2b64      	cmp	r3, #100	@ 0x64
 8001044:	d901      	bls.n	800104a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001046:	2303      	movs	r3, #3
 8001048:	e1f3      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	4b51      	ldr	r3, [pc, #324]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d1f0      	bne.n	8001038 <HAL_RCC_OscConfig+0xe8>
 8001056:	e000      	b.n	800105a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001058:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	2b00      	cmp	r3, #0
 8001064:	d063      	beq.n	800112e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001066:	4b4a      	ldr	r3, [pc, #296]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	2b00      	cmp	r3, #0
 8001070:	d00b      	beq.n	800108a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001072:	4b47      	ldr	r3, [pc, #284]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800107a:	2b08      	cmp	r3, #8
 800107c:	d11c      	bne.n	80010b8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800107e:	4b44      	ldr	r3, [pc, #272]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d116      	bne.n	80010b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800108a:	4b41      	ldr	r3, [pc, #260]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x152>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d001      	beq.n	80010a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e1c7      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	691b      	ldr	r3, [r3, #16]
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4937      	ldr	r1, [pc, #220]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	e03a      	b.n	800112e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d020      	beq.n	8001102 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010c0:	4b34      	ldr	r3, [pc, #208]	@ (8001194 <HAL_RCC_OscConfig+0x244>)
 80010c2:	2201      	movs	r2, #1
 80010c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c6:	f7ff fc85 	bl	80009d4 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010cc:	e008      	b.n	80010e0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010ce:	f7ff fc81 	bl	80009d4 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	2b02      	cmp	r3, #2
 80010da:	d901      	bls.n	80010e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010dc:	2303      	movs	r3, #3
 80010de:	e1a8      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0302 	and.w	r3, r3, #2
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d0f0      	beq.n	80010ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ec:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	691b      	ldr	r3, [r3, #16]
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	4925      	ldr	r1, [pc, #148]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]
 8001100:	e015      	b.n	800112e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_RCC_OscConfig+0x244>)
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001108:	f7ff fc64 	bl	80009d4 <HAL_GetTick>
 800110c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110e:	e008      	b.n	8001122 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001110:	f7ff fc60 	bl	80009d4 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d901      	bls.n	8001122 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e187      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1f0      	bne.n	8001110 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 0308 	and.w	r3, r3, #8
 8001136:	2b00      	cmp	r3, #0
 8001138:	d036      	beq.n	80011a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d016      	beq.n	8001170 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001142:	4b15      	ldr	r3, [pc, #84]	@ (8001198 <HAL_RCC_OscConfig+0x248>)
 8001144:	2201      	movs	r2, #1
 8001146:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001148:	f7ff fc44 	bl	80009d4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001150:	f7ff fc40 	bl	80009d4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e167      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <HAL_RCC_OscConfig+0x240>)
 8001164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d0f0      	beq.n	8001150 <HAL_RCC_OscConfig+0x200>
 800116e:	e01b      	b.n	80011a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001170:	4b09      	ldr	r3, [pc, #36]	@ (8001198 <HAL_RCC_OscConfig+0x248>)
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001176:	f7ff fc2d 	bl	80009d4 <HAL_GetTick>
 800117a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800117c:	e00e      	b.n	800119c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800117e:	f7ff fc29 	bl	80009d4 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	2b02      	cmp	r3, #2
 800118a:	d907      	bls.n	800119c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800118c:	2303      	movs	r3, #3
 800118e:	e150      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
 8001190:	40023800 	.word	0x40023800
 8001194:	42470000 	.word	0x42470000
 8001198:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800119c:	4b88      	ldr	r3, [pc, #544]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800119e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ea      	bne.n	800117e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 8097 	beq.w	80012e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ba:	4b81      	ldr	r3, [pc, #516]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b7d      	ldr	r3, [pc, #500]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a7c      	ldr	r2, [pc, #496]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b7a      	ldr	r3, [pc, #488]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011e2:	2301      	movs	r3, #1
 80011e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	4b77      	ldr	r3, [pc, #476]	@ (80013c4 <HAL_RCC_OscConfig+0x474>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d118      	bne.n	8001224 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f2:	4b74      	ldr	r3, [pc, #464]	@ (80013c4 <HAL_RCC_OscConfig+0x474>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a73      	ldr	r2, [pc, #460]	@ (80013c4 <HAL_RCC_OscConfig+0x474>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fbe9 	bl	80009d4 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001206:	f7ff fbe5 	bl	80009d4 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e10c      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	4b6a      	ldr	r3, [pc, #424]	@ (80013c4 <HAL_RCC_OscConfig+0x474>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d106      	bne.n	800123a <HAL_RCC_OscConfig+0x2ea>
 800122c:	4b64      	ldr	r3, [pc, #400]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001230:	4a63      	ldr	r2, [pc, #396]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	6713      	str	r3, [r2, #112]	@ 0x70
 8001238:	e01c      	b.n	8001274 <HAL_RCC_OscConfig+0x324>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b05      	cmp	r3, #5
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0x30c>
 8001242:	4b5f      	ldr	r3, [pc, #380]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001244:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001246:	4a5e      	ldr	r2, [pc, #376]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6713      	str	r3, [r2, #112]	@ 0x70
 800124e:	4b5c      	ldr	r3, [pc, #368]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001252:	4a5b      	ldr	r2, [pc, #364]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6713      	str	r3, [r2, #112]	@ 0x70
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0x324>
 800125c:	4b58      	ldr	r3, [pc, #352]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800125e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001260:	4a57      	ldr	r2, [pc, #348]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001262:	f023 0301 	bic.w	r3, r3, #1
 8001266:	6713      	str	r3, [r2, #112]	@ 0x70
 8001268:	4b55      	ldr	r3, [pc, #340]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800126a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800126c:	4a54      	ldr	r2, [pc, #336]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800126e:	f023 0304 	bic.w	r3, r3, #4
 8001272:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d015      	beq.n	80012a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff fbaa 	bl	80009d4 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001282:	e00a      	b.n	800129a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001284:	f7ff fba6 	bl	80009d4 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001292:	4293      	cmp	r3, r2
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e0cb      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129a:	4b49      	ldr	r3, [pc, #292]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800129c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d0ee      	beq.n	8001284 <HAL_RCC_OscConfig+0x334>
 80012a6:	e014      	b.n	80012d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a8:	f7ff fb94 	bl	80009d4 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012b0:	f7ff fb90 	bl	80009d4 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0b5      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c6:	4b3e      	ldr	r3, [pc, #248]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1ee      	bne.n	80012b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d105      	bne.n	80012e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012d8:	4b39      	ldr	r3, [pc, #228]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012dc:	4a38      	ldr	r2, [pc, #224]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80012de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	f000 80a1 	beq.w	8001430 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012ee:	4b34      	ldr	r3, [pc, #208]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	f003 030c 	and.w	r3, r3, #12
 80012f6:	2b08      	cmp	r3, #8
 80012f8:	d05c      	beq.n	80013b4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	699b      	ldr	r3, [r3, #24]
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d141      	bne.n	8001386 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001302:	4b31      	ldr	r3, [pc, #196]	@ (80013c8 <HAL_RCC_OscConfig+0x478>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001308:	f7ff fb64 	bl	80009d4 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001310:	f7ff fb60 	bl	80009d4 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e087      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	4b27      	ldr	r3, [pc, #156]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69da      	ldr	r2, [r3, #28]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800133c:	019b      	lsls	r3, r3, #6
 800133e:	431a      	orrs	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001344:	085b      	lsrs	r3, r3, #1
 8001346:	3b01      	subs	r3, #1
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	491b      	ldr	r1, [pc, #108]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001358:	4b1b      	ldr	r3, [pc, #108]	@ (80013c8 <HAL_RCC_OscConfig+0x478>)
 800135a:	2201      	movs	r2, #1
 800135c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135e:	f7ff fb39 	bl	80009d4 <HAL_GetTick>
 8001362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001364:	e008      	b.n	8001378 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001366:	f7ff fb35 	bl	80009d4 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	2b02      	cmp	r3, #2
 8001372:	d901      	bls.n	8001378 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001374:	2303      	movs	r3, #3
 8001376:	e05c      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d0f0      	beq.n	8001366 <HAL_RCC_OscConfig+0x416>
 8001384:	e054      	b.n	8001430 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001386:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <HAL_RCC_OscConfig+0x478>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fb22 	bl	80009d4 <HAL_GetTick>
 8001390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001392:	e008      	b.n	80013a6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001394:	f7ff fb1e 	bl	80009d4 <HAL_GetTick>
 8001398:	4602      	mov	r2, r0
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	2b02      	cmp	r3, #2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e045      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <HAL_RCC_OscConfig+0x470>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1f0      	bne.n	8001394 <HAL_RCC_OscConfig+0x444>
 80013b2:	e03d      	b.n	8001430 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e038      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40007000 	.word	0x40007000
 80013c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	@ (800143c <HAL_RCC_OscConfig+0x4ec>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d028      	beq.n	800142c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d121      	bne.n	800142c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d11a      	bne.n	800142c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001402:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001404:	4293      	cmp	r3, r2
 8001406:	d111      	bne.n	800142c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001412:	085b      	lsrs	r3, r3, #1
 8001414:	3b01      	subs	r3, #1
 8001416:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001418:	429a      	cmp	r2, r3
 800141a:	d107      	bne.n	800142c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001426:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800

08001440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0cc      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b68      	ldr	r3, [pc, #416]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d90c      	bls.n	800147c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b65      	ldr	r3, [pc, #404]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001464:	683a      	ldr	r2, [r7, #0]
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146a:	4b63      	ldr	r3, [pc, #396]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	683a      	ldr	r2, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	d001      	beq.n	800147c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	e0b8      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0302 	and.w	r3, r3, #2
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 0304 	and.w	r3, r3, #4
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001494:	4b59      	ldr	r3, [pc, #356]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	4a58      	ldr	r2, [pc, #352]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 800149a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800149e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ac:	4b53      	ldr	r3, [pc, #332]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	4a52      	ldr	r2, [pc, #328]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014b2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80014b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b8:	4b50      	ldr	r3, [pc, #320]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	494d      	ldr	r1, [pc, #308]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d044      	beq.n	8001560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d107      	bne.n	80014ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014de:	4b47      	ldr	r3, [pc, #284]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d119      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e07f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d003      	beq.n	80014fe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b3f      	ldr	r3, [pc, #252]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e06f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b3b      	ldr	r3, [pc, #236]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e067      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b37      	ldr	r3, [pc, #220]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4934      	ldr	r1, [pc, #208]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	4313      	orrs	r3, r2
 800152e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff fa50 	bl	80009d4 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff fa4c 	bl	80009d4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e04f      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b2b      	ldr	r3, [pc, #172]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b25      	ldr	r3, [pc, #148]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d20c      	bcs.n	8001588 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	b2d2      	uxtb	r2, r2
 8001574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	683a      	ldr	r2, [r7, #0]
 8001580:	429a      	cmp	r2, r3
 8001582:	d001      	beq.n	8001588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e032      	b.n	80015ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	2b00      	cmp	r3, #0
 8001592:	d008      	beq.n	80015a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001594:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	4916      	ldr	r1, [pc, #88]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015a2:	4313      	orrs	r3, r2
 80015a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d009      	beq.n	80015c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	490e      	ldr	r1, [pc, #56]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015c6:	f000 f821 	bl	800160c <HAL_RCC_GetSysClockFreq>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b0b      	ldr	r3, [pc, #44]	@ (80015fc <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	091b      	lsrs	r3, r3, #4
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	490a      	ldr	r1, [pc, #40]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 80015d8:	5ccb      	ldrb	r3, [r1, r3]
 80015da:	fa22 f303 	lsr.w	r3, r2, r3
 80015de:	4a09      	ldr	r2, [pc, #36]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff f8e8 	bl	80007bc <HAL_InitTick>

  return HAL_OK;
 80015ec:	2300      	movs	r3, #0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40023c00 	.word	0x40023c00
 80015fc:	40023800 	.word	0x40023800
 8001600:	08004ef8 	.word	0x08004ef8
 8001604:	20000000 	.word	0x20000000
 8001608:	20000004 	.word	0x20000004

0800160c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800160c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001610:	b094      	sub	sp, #80	@ 0x50
 8001612:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001614:	2300      	movs	r3, #0
 8001616:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001620:	2300      	movs	r3, #0
 8001622:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001624:	4b79      	ldr	r3, [pc, #484]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	2b08      	cmp	r3, #8
 800162e:	d00d      	beq.n	800164c <HAL_RCC_GetSysClockFreq+0x40>
 8001630:	2b08      	cmp	r3, #8
 8001632:	f200 80e1 	bhi.w	80017f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_RCC_GetSysClockFreq+0x34>
 800163a:	2b04      	cmp	r3, #4
 800163c:	d003      	beq.n	8001646 <HAL_RCC_GetSysClockFreq+0x3a>
 800163e:	e0db      	b.n	80017f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001640:	4b73      	ldr	r3, [pc, #460]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x204>)
 8001642:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001644:	e0db      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001646:	4b73      	ldr	r3, [pc, #460]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x208>)
 8001648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800164a:	e0d8      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800164c:	4b6f      	ldr	r3, [pc, #444]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001654:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001656:	4b6d      	ldr	r3, [pc, #436]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d063      	beq.n	800172a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001662:	4b6a      	ldr	r3, [pc, #424]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	099b      	lsrs	r3, r3, #6
 8001668:	2200      	movs	r2, #0
 800166a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800166c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800166e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001670:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
 800167a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800167e:	4622      	mov	r2, r4
 8001680:	462b      	mov	r3, r5
 8001682:	f04f 0000 	mov.w	r0, #0
 8001686:	f04f 0100 	mov.w	r1, #0
 800168a:	0159      	lsls	r1, r3, #5
 800168c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001690:	0150      	lsls	r0, r2, #5
 8001692:	4602      	mov	r2, r0
 8001694:	460b      	mov	r3, r1
 8001696:	4621      	mov	r1, r4
 8001698:	1a51      	subs	r1, r2, r1
 800169a:	6139      	str	r1, [r7, #16]
 800169c:	4629      	mov	r1, r5
 800169e:	eb63 0301 	sbc.w	r3, r3, r1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016b0:	4659      	mov	r1, fp
 80016b2:	018b      	lsls	r3, r1, #6
 80016b4:	4651      	mov	r1, sl
 80016b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ba:	4651      	mov	r1, sl
 80016bc:	018a      	lsls	r2, r1, #6
 80016be:	4651      	mov	r1, sl
 80016c0:	ebb2 0801 	subs.w	r8, r2, r1
 80016c4:	4659      	mov	r1, fp
 80016c6:	eb63 0901 	sbc.w	r9, r3, r1
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016de:	4690      	mov	r8, r2
 80016e0:	4699      	mov	r9, r3
 80016e2:	4623      	mov	r3, r4
 80016e4:	eb18 0303 	adds.w	r3, r8, r3
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	462b      	mov	r3, r5
 80016ec:	eb49 0303 	adc.w	r3, r9, r3
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	f04f 0200 	mov.w	r2, #0
 80016f6:	f04f 0300 	mov.w	r3, #0
 80016fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016fe:	4629      	mov	r1, r5
 8001700:	024b      	lsls	r3, r1, #9
 8001702:	4621      	mov	r1, r4
 8001704:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001708:	4621      	mov	r1, r4
 800170a:	024a      	lsls	r2, r1, #9
 800170c:	4610      	mov	r0, r2
 800170e:	4619      	mov	r1, r3
 8001710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001712:	2200      	movs	r2, #0
 8001714:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001718:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800171c:	f7fe fd58 	bl	80001d0 <__aeabi_uldivmod>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4613      	mov	r3, r2
 8001726:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001728:	e058      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800172a:	4b38      	ldr	r3, [pc, #224]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	099b      	lsrs	r3, r3, #6
 8001730:	2200      	movs	r2, #0
 8001732:	4618      	mov	r0, r3
 8001734:	4611      	mov	r1, r2
 8001736:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001740:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001744:	4642      	mov	r2, r8
 8001746:	464b      	mov	r3, r9
 8001748:	f04f 0000 	mov.w	r0, #0
 800174c:	f04f 0100 	mov.w	r1, #0
 8001750:	0159      	lsls	r1, r3, #5
 8001752:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001756:	0150      	lsls	r0, r2, #5
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4641      	mov	r1, r8
 800175e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001762:	4649      	mov	r1, r9
 8001764:	eb63 0b01 	sbc.w	fp, r3, r1
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	f04f 0300 	mov.w	r3, #0
 8001770:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001774:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001778:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800177c:	ebb2 040a 	subs.w	r4, r2, sl
 8001780:	eb63 050b 	sbc.w	r5, r3, fp
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	00eb      	lsls	r3, r5, #3
 800178e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001792:	00e2      	lsls	r2, r4, #3
 8001794:	4614      	mov	r4, r2
 8001796:	461d      	mov	r5, r3
 8001798:	4643      	mov	r3, r8
 800179a:	18e3      	adds	r3, r4, r3
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	464b      	mov	r3, r9
 80017a0:	eb45 0303 	adc.w	r3, r5, r3
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b2:	4629      	mov	r1, r5
 80017b4:	028b      	lsls	r3, r1, #10
 80017b6:	4621      	mov	r1, r4
 80017b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017bc:	4621      	mov	r1, r4
 80017be:	028a      	lsls	r2, r1, #10
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017c6:	2200      	movs	r2, #0
 80017c8:	61bb      	str	r3, [r7, #24]
 80017ca:	61fa      	str	r2, [r7, #28]
 80017cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017d0:	f7fe fcfe 	bl	80001d0 <__aeabi_uldivmod>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	4613      	mov	r3, r2
 80017da:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80017dc:	4b0b      	ldr	r3, [pc, #44]	@ (800180c <HAL_RCC_GetSysClockFreq+0x200>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	3301      	adds	r3, #1
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80017ec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80017f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017f6:	e002      	b.n	80017fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x204>)
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001800:	4618      	mov	r0, r3
 8001802:	3750      	adds	r7, #80	@ 0x50
 8001804:	46bd      	mov	sp, r7
 8001806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	00f42400 	.word	0x00f42400
 8001814:	007a1200 	.word	0x007a1200

08001818 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <HAL_RCC_GetHCLKFreq+0x14>)
 800181e:	681b      	ldr	r3, [r3, #0]
}
 8001820:	4618      	mov	r0, r3
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001834:	f7ff fff0 	bl	8001818 <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	0b5b      	lsrs	r3, r3, #13
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	@ (8001854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800
 8001854:	08004f08 	.word	0x08004f08

08001858 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	220f      	movs	r2, #15
 8001866:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001868:	4b12      	ldr	r3, [pc, #72]	@ (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001874:	4b0f      	ldr	r3, [pc, #60]	@ (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001880:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <HAL_RCC_GetClockConfig+0x5c>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800189a:	4b07      	ldr	r3, [pc, #28]	@ (80018b8 <HAL_RCC_GetClockConfig+0x60>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	601a      	str	r2, [r3, #0]
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40023c00 	.word	0x40023c00

080018bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e041      	b.n	8001952 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d106      	bne.n	80018e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f000 f839 	bl	800195a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2202      	movs	r2, #2
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3304      	adds	r3, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f000 f9c0 	bl	8001c80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2201      	movs	r2, #1
 800190c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2201      	movs	r2, #1
 8001924:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b01      	cmp	r3, #1
 8001982:	d001      	beq.n	8001988 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e04e      	b.n	8001a26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a23      	ldr	r2, [pc, #140]	@ (8001a34 <HAL_TIM_Base_Start_IT+0xc4>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d022      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b2:	d01d      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001a38 <HAL_TIM_Base_Start_IT+0xc8>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d018      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1e      	ldr	r2, [pc, #120]	@ (8001a3c <HAL_TIM_Base_Start_IT+0xcc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d013      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <HAL_TIM_Base_Start_IT+0xd0>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00e      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <HAL_TIM_Base_Start_IT+0xd4>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d009      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a19      	ldr	r2, [pc, #100]	@ (8001a48 <HAL_TIM_Base_Start_IT+0xd8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d004      	beq.n	80019f0 <HAL_TIM_Base_Start_IT+0x80>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a18      	ldr	r2, [pc, #96]	@ (8001a4c <HAL_TIM_Base_Start_IT+0xdc>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d111      	bne.n	8001a14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 0307 	and.w	r3, r3, #7
 80019fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d010      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a12:	e007      	b.n	8001a24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f042 0201 	orr.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40010000 	.word	0x40010000
 8001a38:	40000400 	.word	0x40000400
 8001a3c:	40000800 	.word	0x40000800
 8001a40:	40000c00 	.word	0x40000c00
 8001a44:	40010400 	.word	0x40010400
 8001a48:	40014000 	.word	0x40014000
 8001a4c:	40001800 	.word	0x40001800

08001a50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f003 0302 	and.w	r3, r3, #2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d020      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01b      	beq.n	8001ab4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f06f 0202 	mvn.w	r2, #2
 8001a84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	699b      	ldr	r3, [r3, #24]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8d2 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 8001aa0:	e005      	b.n	8001aae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f8c4 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f000 f8d5 	bl	8001c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d020      	beq.n	8001b00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d01b      	beq.n	8001b00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f06f 0204 	mvn.w	r2, #4
 8001ad0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f8ac 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 8001aec:	e005      	b.n	8001afa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f000 f89e 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f000 f8af 	bl	8001c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 0308 	and.w	r3, r3, #8
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d020      	beq.n	8001b4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f003 0308 	and.w	r3, r3, #8
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01b      	beq.n	8001b4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f06f 0208 	mvn.w	r2, #8
 8001b1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2204      	movs	r2, #4
 8001b22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 f886 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 8001b38:	e005      	b.n	8001b46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f878 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f889 	bl	8001c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d020      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 0310 	and.w	r3, r3, #16
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01b      	beq.n	8001b98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f06f 0210 	mvn.w	r2, #16
 8001b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2208      	movs	r2, #8
 8001b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f860 	bl	8001c44 <HAL_TIM_IC_CaptureCallback>
 8001b84:	e005      	b.n	8001b92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f000 f852 	bl	8001c30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f863 	bl	8001c58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f003 0301 	and.w	r3, r3, #1
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00c      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d007      	beq.n	8001bbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0201 	mvn.w	r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fdbc 	bl	8000734 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d00c      	beq.n	8001be0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d007      	beq.n	8001be0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f000 f900 	bl	8001de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00c      	beq.n	8001c04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f834 	bl	8001c6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	f003 0320 	and.w	r3, r3, #32
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00c      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f003 0320 	and.w	r3, r3, #32
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d007      	beq.n	8001c28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f06f 0220 	mvn.w	r2, #32
 8001c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 f8d2 	bl	8001dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a43      	ldr	r2, [pc, #268]	@ (8001da0 <TIM_Base_SetConfig+0x120>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d013      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c9e:	d00f      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a40      	ldr	r2, [pc, #256]	@ (8001da4 <TIM_Base_SetConfig+0x124>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a3f      	ldr	r2, [pc, #252]	@ (8001da8 <TIM_Base_SetConfig+0x128>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d007      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3e      	ldr	r2, [pc, #248]	@ (8001dac <TIM_Base_SetConfig+0x12c>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x40>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3d      	ldr	r2, [pc, #244]	@ (8001db0 <TIM_Base_SetConfig+0x130>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a32      	ldr	r2, [pc, #200]	@ (8001da0 <TIM_Base_SetConfig+0x120>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d02b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ce0:	d027      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8001da4 <TIM_Base_SetConfig+0x124>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d023      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a2e      	ldr	r2, [pc, #184]	@ (8001da8 <TIM_Base_SetConfig+0x128>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d01f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001dac <TIM_Base_SetConfig+0x12c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d01b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8001db0 <TIM_Base_SetConfig+0x130>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d017      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a2b      	ldr	r2, [pc, #172]	@ (8001db4 <TIM_Base_SetConfig+0x134>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a2a      	ldr	r2, [pc, #168]	@ (8001db8 <TIM_Base_SetConfig+0x138>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00f      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a29      	ldr	r2, [pc, #164]	@ (8001dbc <TIM_Base_SetConfig+0x13c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d00b      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a28      	ldr	r2, [pc, #160]	@ (8001dc0 <TIM_Base_SetConfig+0x140>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d007      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a27      	ldr	r2, [pc, #156]	@ (8001dc4 <TIM_Base_SetConfig+0x144>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d003      	beq.n	8001d32 <TIM_Base_SetConfig+0xb2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a26      	ldr	r2, [pc, #152]	@ (8001dc8 <TIM_Base_SetConfig+0x148>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d108      	bne.n	8001d44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	695b      	ldr	r3, [r3, #20]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	689a      	ldr	r2, [r3, #8]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0e      	ldr	r2, [pc, #56]	@ (8001da0 <TIM_Base_SetConfig+0x120>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <TIM_Base_SetConfig+0xf2>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <TIM_Base_SetConfig+0x130>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d103      	bne.n	8001d7a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	691a      	ldr	r2, [r3, #16]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	601a      	str	r2, [r3, #0]
}
 8001d92:	bf00      	nop
 8001d94:	3714      	adds	r7, #20
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000400 	.word	0x40000400
 8001da8:	40000800 	.word	0x40000800
 8001dac:	40000c00 	.word	0x40000c00
 8001db0:	40010400 	.word	0x40010400
 8001db4:	40014000 	.word	0x40014000
 8001db8:	40014400 	.word	0x40014400
 8001dbc:	40014800 	.word	0x40014800
 8001dc0:	40001800 	.word	0x40001800
 8001dc4:	40001c00 	.word	0x40001c00
 8001dc8:	40002000 	.word	0x40002000

08001dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr

08001df4 <__NVIC_SetPriority>:
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	6039      	str	r1, [r7, #0]
 8001dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	db0a      	blt.n	8001e1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	490c      	ldr	r1, [pc, #48]	@ (8001e40 <__NVIC_SetPriority+0x4c>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	0112      	lsls	r2, r2, #4
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	440b      	add	r3, r1
 8001e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001e1c:	e00a      	b.n	8001e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4908      	ldr	r1, [pc, #32]	@ (8001e44 <__NVIC_SetPriority+0x50>)
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	3b04      	subs	r3, #4
 8001e2c:	0112      	lsls	r2, r2, #4
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	440b      	add	r3, r1
 8001e32:	761a      	strb	r2, [r3, #24]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100
 8001e44:	e000ed00 	.word	0xe000ed00

08001e48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e4c:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <SysTick_Handler+0x1c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e50:	f001 fe90 	bl	8003b74 <xTaskGetSchedulerState>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d001      	beq.n	8001e5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e5a:	f002 fc85 	bl	8004768 <xPortSysTickHandler>
  }
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	e000e010 	.word	0xe000e010

08001e68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f06f 0004 	mvn.w	r0, #4
 8001e72:	f7ff ffbf 	bl	8001df4 <__NVIC_SetPriority>
#endif
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e82:	f3ef 8305 	mrs	r3, IPSR
 8001e86:	603b      	str	r3, [r7, #0]
  return(result);
 8001e88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001e8e:	f06f 0305 	mvn.w	r3, #5
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	e00c      	b.n	8001eb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <osKernelInitialize+0x44>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001e9e:	4b08      	ldr	r3, [pc, #32]	@ (8001ec0 <osKernelInitialize+0x44>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	e002      	b.n	8001eb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8001eae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	200000d4 	.word	0x200000d4

08001ec4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eca:	f3ef 8305 	mrs	r3, IPSR
 8001ece:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <osKernelStart+0x1a>
    stat = osErrorISR;
 8001ed6:	f06f 0305 	mvn.w	r3, #5
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	e010      	b.n	8001f00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <osKernelStart+0x48>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d109      	bne.n	8001efa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001ee6:	f7ff ffbf 	bl	8001e68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <osKernelStart+0x48>)
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001ef0:	f001 f9dc 	bl	80032ac <vTaskStartScheduler>
      stat = osOK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e002      	b.n	8001f00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	200000d4 	.word	0x200000d4

08001f10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08e      	sub	sp, #56	@ 0x38
 8001f14:	af04      	add	r7, sp, #16
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f20:	f3ef 8305 	mrs	r3, IPSR
 8001f24:	617b      	str	r3, [r7, #20]
  return(result);
 8001f26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d17e      	bne.n	800202a <osThreadNew+0x11a>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d07b      	beq.n	800202a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f32:	2380      	movs	r3, #128	@ 0x80
 8001f34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f36:	2318      	movs	r3, #24
 8001f38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d045      	beq.n	8001fd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <osThreadNew+0x48>
        name = attr->name;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d002      	beq.n	8001f66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <osThreadNew+0x6e>
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b38      	cmp	r3, #56	@ 0x38
 8001f70:	d805      	bhi.n	8001f7e <osThreadNew+0x6e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <osThreadNew+0x72>
        return (NULL);
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e054      	b.n	800202c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <osThreadNew+0xa8>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8001fa0:	d90a      	bls.n	8001fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d002      	beq.n	8001fb8 <osThreadNew+0xa8>
        mem = 1;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e010      	b.n	8001fda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10c      	bne.n	8001fda <osThreadNew+0xca>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d108      	bne.n	8001fda <osThreadNew+0xca>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d104      	bne.n	8001fda <osThreadNew+0xca>
          mem = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]
 8001fd4:	e001      	b.n	8001fda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d110      	bne.n	8002002 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001fe8:	9202      	str	r2, [sp, #8]
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	6a3a      	ldr	r2, [r7, #32]
 8001ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fe5c 	bl	8002cb4 <xTaskCreateStatic>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	613b      	str	r3, [r7, #16]
 8002000:	e013      	b.n	800202a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d110      	bne.n	800202a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	b29a      	uxth	r2, r3
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800201a:	68f8      	ldr	r0, [r7, #12]
 800201c:	f000 feaa 	bl	8002d74 <xTaskCreate>
 8002020:	4603      	mov	r3, r0
 8002022:	2b01      	cmp	r3, #1
 8002024:	d001      	beq.n	800202a <osThreadNew+0x11a>
            hTask = NULL;
 8002026:	2300      	movs	r3, #0
 8002028:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800202a:	693b      	ldr	r3, [r7, #16]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3728      	adds	r7, #40	@ 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002040:	f3ef 8305 	mrs	r3, IPSR
 8002044:	60fb      	str	r3, [r7, #12]
  return(result);
 8002046:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <osThreadSuspend+0x20>
    stat = osErrorISR;
 800204c:	f06f 0305 	mvn.w	r3, #5
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e00b      	b.n	800206c <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d103      	bne.n	8002062 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 800205a:	f06f 0303 	mvn.w	r3, #3
 800205e:	617b      	str	r3, [r7, #20]
 8002060:	e004      	b.n	800206c <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8002066:	6938      	ldr	r0, [r7, #16]
 8002068:	f001 f818 	bl	800309c <vTaskSuspend>
  }

  return (stat);
 800206c:	697b      	ldr	r3, [r7, #20]
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b086      	sub	sp, #24
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002082:	f3ef 8305 	mrs	r3, IPSR
 8002086:	60fb      	str	r3, [r7, #12]
  return(result);
 8002088:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <osThreadResume+0x20>
    stat = osErrorISR;
 800208e:	f06f 0305 	mvn.w	r3, #5
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e00b      	b.n	80020ae <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <osThreadResume+0x2e>
    stat = osErrorParameter;
 800209c:	f06f 0303 	mvn.w	r3, #3
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e004      	b.n	80020ae <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80020a8:	6938      	ldr	r0, [r7, #16]
 80020aa:	f001 f89f 	bl	80031ec <vTaskResume>
  }

  return (stat);
 80020ae:	697b      	ldr	r3, [r7, #20]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020c0:	f3ef 8305 	mrs	r3, IPSR
 80020c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80020c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d003      	beq.n	80020d4 <osDelay+0x1c>
    stat = osErrorISR;
 80020cc:	f06f 0305 	mvn.w	r3, #5
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	e007      	b.n	80020e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d002      	beq.n	80020e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 ffa6 	bl	8003030 <vTaskDelay>
    }
  }

  return (stat);
 80020e4:	68fb      	ldr	r3, [r7, #12]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	60b9      	str	r1, [r7, #8]
 80020fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4a07      	ldr	r2, [pc, #28]	@ (800211c <vApplicationGetIdleTaskMemory+0x2c>)
 8002100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4a06      	ldr	r2, [pc, #24]	@ (8002120 <vApplicationGetIdleTaskMemory+0x30>)
 8002106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	601a      	str	r2, [r3, #0]
}
 800210e:	bf00      	nop
 8002110:	3714      	adds	r7, #20
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200000d8 	.word	0x200000d8
 8002120:	20000180 	.word	0x20000180

08002124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	4a07      	ldr	r2, [pc, #28]	@ (8002150 <vApplicationGetTimerTaskMemory+0x2c>)
 8002134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	4a06      	ldr	r2, [pc, #24]	@ (8002154 <vApplicationGetTimerTaskMemory+0x30>)
 800213a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002142:	601a      	str	r2, [r3, #0]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	20000380 	.word	0x20000380
 8002154:	20000428 	.word	0x20000428

08002158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0208 	add.w	r2, r3, #8
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f103 0208 	add.w	r2, r3, #8
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f103 0208 	add.w	r2, r3, #8
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1c5a      	adds	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
}
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr

080021fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021fa:	b480      	push	{r7}
 80021fc:	b085      	sub	sp, #20
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
 8002202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002210:	d103      	bne.n	800221a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e00c      	b.n	8002234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3308      	adds	r3, #8
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	e002      	b.n	8002228 <vListInsert+0x2e>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	429a      	cmp	r2, r3
 8002232:	d2f6      	bcs.n	8002222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	601a      	str	r2, [r3, #0]
}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6852      	ldr	r2, [r2, #4]
 800228c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	d103      	bne.n	80022a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	1e5a      	subs	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022d8:	f383 8811 	msr	BASEPRI, r3
 80022dc:	f3bf 8f6f 	isb	sy
 80022e0:	f3bf 8f4f 	dsb	sy
 80022e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022e6:	bf00      	nop
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022ec:	f002 f9ac 	bl	8004648 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	68f9      	ldr	r1, [r7, #12]
 80022fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	441a      	add	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800231c:	3b01      	subs	r3, #1
 800231e:	68f9      	ldr	r1, [r7, #12]
 8002320:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	441a      	add	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	22ff      	movs	r2, #255	@ 0xff
 8002330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	22ff      	movs	r2, #255	@ 0xff
 8002338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d114      	bne.n	800236c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d01a      	beq.n	8002380 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3310      	adds	r3, #16
 800234e:	4618      	mov	r0, r3
 8002350:	f001 fa4a 	bl	80037e8 <xTaskRemoveFromEventList>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d012      	beq.n	8002380 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <xQueueGenericReset+0xd0>)
 800235c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	f3bf 8f4f 	dsb	sy
 8002366:	f3bf 8f6f 	isb	sy
 800236a:	e009      	b.n	8002380 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3310      	adds	r3, #16
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff fef1 	bl	8002158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3324      	adds	r3, #36	@ 0x24
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff feec 	bl	8002158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002380:	f002 f994 	bl	80046ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002384:	2301      	movs	r3, #1
}
 8002386:	4618      	mov	r0, r3
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000ed04 	.word	0xe000ed04

08002394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	@ 0x38
 8002398:	af02      	add	r7, sp, #8
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
 80023a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d10b      	bne.n	80023c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80023a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ac:	f383 8811 	msr	BASEPRI, r3
 80023b0:	f3bf 8f6f 	isb	sy
 80023b4:	f3bf 8f4f 	dsb	sy
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80023ba:	bf00      	nop
 80023bc:	bf00      	nop
 80023be:	e7fd      	b.n	80023bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10b      	bne.n	80023de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	e7fd      	b.n	80023da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d002      	beq.n	80023ea <xQueueGenericCreateStatic+0x56>
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <xQueueGenericCreateStatic+0x5a>
 80023ea:	2301      	movs	r3, #1
 80023ec:	e000      	b.n	80023f0 <xQueueGenericCreateStatic+0x5c>
 80023ee:	2300      	movs	r3, #0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80023f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f8:	f383 8811 	msr	BASEPRI, r3
 80023fc:	f3bf 8f6f 	isb	sy
 8002400:	f3bf 8f4f 	dsb	sy
 8002404:	623b      	str	r3, [r7, #32]
}
 8002406:	bf00      	nop
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d102      	bne.n	8002418 <xQueueGenericCreateStatic+0x84>
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <xQueueGenericCreateStatic+0x88>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <xQueueGenericCreateStatic+0x8a>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d10b      	bne.n	800243a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	61fb      	str	r3, [r7, #28]
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	e7fd      	b.n	8002436 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800243a:	2350      	movs	r3, #80	@ 0x50
 800243c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	2b50      	cmp	r3, #80	@ 0x50
 8002442:	d00b      	beq.n	800245c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	61bb      	str	r3, [r7, #24]
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	e7fd      	b.n	8002458 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800245c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00d      	beq.n	8002484 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002470:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4613      	mov	r3, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f805 	bl	800248e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002486:	4618      	mov	r0, r3
 8002488:	3730      	adds	r7, #48	@ 0x30
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d103      	bne.n	80024aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	e002      	b.n	80024b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024bc:	2101      	movs	r1, #1
 80024be:	69b8      	ldr	r0, [r7, #24]
 80024c0:	f7ff fefe 	bl	80022c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08e      	sub	sp, #56	@ 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024e2:	2300      	movs	r3, #0
 80024e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <xQueueGenericSend+0x34>
	__asm volatile
 80024f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f4:	f383 8811 	msr	BASEPRI, r3
 80024f8:	f3bf 8f6f 	isb	sy
 80024fc:	f3bf 8f4f 	dsb	sy
 8002500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002502:	bf00      	nop
 8002504:	bf00      	nop
 8002506:	e7fd      	b.n	8002504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d103      	bne.n	8002516 <xQueueGenericSend+0x42>
 800250e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <xQueueGenericSend+0x46>
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <xQueueGenericSend+0x48>
 800251a:	2300      	movs	r3, #0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d10b      	bne.n	8002538 <xQueueGenericSend+0x64>
	__asm volatile
 8002520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002524:	f383 8811 	msr	BASEPRI, r3
 8002528:	f3bf 8f6f 	isb	sy
 800252c:	f3bf 8f4f 	dsb	sy
 8002530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002532:	bf00      	nop
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d103      	bne.n	8002546 <xQueueGenericSend+0x72>
 800253e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002542:	2b01      	cmp	r3, #1
 8002544:	d101      	bne.n	800254a <xQueueGenericSend+0x76>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <xQueueGenericSend+0x78>
 800254a:	2300      	movs	r3, #0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10b      	bne.n	8002568 <xQueueGenericSend+0x94>
	__asm volatile
 8002550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002554:	f383 8811 	msr	BASEPRI, r3
 8002558:	f3bf 8f6f 	isb	sy
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	623b      	str	r3, [r7, #32]
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002568:	f001 fb04 	bl	8003b74 <xTaskGetSchedulerState>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <xQueueGenericSend+0xa4>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <xQueueGenericSend+0xa8>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <xQueueGenericSend+0xaa>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10b      	bne.n	800259a <xQueueGenericSend+0xc6>
	__asm volatile
 8002582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002586:	f383 8811 	msr	BASEPRI, r3
 800258a:	f3bf 8f6f 	isb	sy
 800258e:	f3bf 8f4f 	dsb	sy
 8002592:	61fb      	str	r3, [r7, #28]
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	e7fd      	b.n	8002596 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800259a:	f002 f855 	bl	8004648 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800259e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <xQueueGenericSend+0xdc>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d129      	bne.n	8002604 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	68b9      	ldr	r1, [r7, #8]
 80025b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025b6:	f000 fa0f 	bl	80029d8 <prvCopyDataToQueue>
 80025ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d010      	beq.n	80025e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	3324      	adds	r3, #36	@ 0x24
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 f90d 	bl	80037e8 <xTaskRemoveFromEventList>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d013      	beq.n	80025fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80025d4:	4b3f      	ldr	r3, [pc, #252]	@ (80026d4 <xQueueGenericSend+0x200>)
 80025d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025da:	601a      	str	r2, [r3, #0]
 80025dc:	f3bf 8f4f 	dsb	sy
 80025e0:	f3bf 8f6f 	isb	sy
 80025e4:	e00a      	b.n	80025fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80025e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80025ec:	4b39      	ldr	r3, [pc, #228]	@ (80026d4 <xQueueGenericSend+0x200>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025fc:	f002 f856 	bl	80046ac <vPortExitCritical>
				return pdPASS;
 8002600:	2301      	movs	r3, #1
 8002602:	e063      	b.n	80026cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800260a:	f002 f84f 	bl	80046ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800260e:	2300      	movs	r3, #0
 8002610:	e05c      	b.n	80026cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002614:	2b00      	cmp	r3, #0
 8002616:	d106      	bne.n	8002626 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002618:	f107 0314 	add.w	r3, r7, #20
 800261c:	4618      	mov	r0, r3
 800261e:	f001 f947 	bl	80038b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002622:	2301      	movs	r3, #1
 8002624:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002626:	f002 f841 	bl	80046ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800262a:	f000 feaf 	bl	800338c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800262e:	f002 f80b 	bl	8004648 <vPortEnterCritical>
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002638:	b25b      	sxtb	r3, r3
 800263a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800263e:	d103      	bne.n	8002648 <xQueueGenericSend+0x174>
 8002640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002642:	2200      	movs	r2, #0
 8002644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800264a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800264e:	b25b      	sxtb	r3, r3
 8002650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002654:	d103      	bne.n	800265e <xQueueGenericSend+0x18a>
 8002656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800265e:	f002 f825 	bl	80046ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002662:	1d3a      	adds	r2, r7, #4
 8002664:	f107 0314 	add.w	r3, r7, #20
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f001 f936 	bl	80038dc <xTaskCheckForTimeOut>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d124      	bne.n	80026c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002676:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002678:	f000 faa6 	bl	8002bc8 <prvIsQueueFull>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d018      	beq.n	80026b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002684:	3310      	adds	r3, #16
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f001 f85a 	bl	8003744 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002692:	f000 fa31 	bl	8002af8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002696:	f000 fe87 	bl	80033a8 <xTaskResumeAll>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	f47f af7c 	bne.w	800259a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80026a2:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <xQueueGenericSend+0x200>)
 80026a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	e772      	b.n	800259a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80026b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026b6:	f000 fa1f 	bl	8002af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80026ba:	f000 fe75 	bl	80033a8 <xTaskResumeAll>
 80026be:	e76c      	b.n	800259a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80026c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026c2:	f000 fa19 	bl	8002af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80026c6:	f000 fe6f 	bl	80033a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80026ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3738      	adds	r7, #56	@ 0x38
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	e000ed04 	.word	0xe000ed04

080026d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b090      	sub	sp, #64	@ 0x40
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80026ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80026f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f4:	f383 8811 	msr	BASEPRI, r3
 80026f8:	f3bf 8f6f 	isb	sy
 80026fc:	f3bf 8f4f 	dsb	sy
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	e7fd      	b.n	8002704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <xQueueGenericSendFromISR+0x3e>
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <xQueueGenericSendFromISR+0x42>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <xQueueGenericSendFromISR+0x44>
 800271a:	2300      	movs	r3, #0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002724:	f383 8811 	msr	BASEPRI, r3
 8002728:	f3bf 8f6f 	isb	sy
 800272c:	f3bf 8f4f 	dsb	sy
 8002730:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002732:	bf00      	nop
 8002734:	bf00      	nop
 8002736:	e7fd      	b.n	8002734 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b02      	cmp	r3, #2
 800273c:	d103      	bne.n	8002746 <xQueueGenericSendFromISR+0x6e>
 800273e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002742:	2b01      	cmp	r3, #1
 8002744:	d101      	bne.n	800274a <xQueueGenericSendFromISR+0x72>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <xQueueGenericSendFromISR+0x74>
 800274a:	2300      	movs	r3, #0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002754:	f383 8811 	msr	BASEPRI, r3
 8002758:	f3bf 8f6f 	isb	sy
 800275c:	f3bf 8f4f 	dsb	sy
 8002760:	623b      	str	r3, [r7, #32]
}
 8002762:	bf00      	nop
 8002764:	bf00      	nop
 8002766:	e7fd      	b.n	8002764 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002768:	f002 f84e 	bl	8004808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800276c:	f3ef 8211 	mrs	r2, BASEPRI
 8002770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	61fa      	str	r2, [r7, #28]
 8002782:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002784:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002786:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800278c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	429a      	cmp	r2, r3
 8002792:	d302      	bcc.n	800279a <xQueueGenericSendFromISR+0xc2>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d12f      	bne.n	80027fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800279a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027b0:	f000 f912 	bl	80029d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80027b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d112      	bne.n	80027e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d016      	beq.n	80027f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c8:	3324      	adds	r3, #36	@ 0x24
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 f80c 	bl	80037e8 <xTaskRemoveFromEventList>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00e      	beq.n	80027f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00b      	beq.n	80027f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	e007      	b.n	80027f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80027e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	b25a      	sxtb	r2, r3
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80027f4:	2301      	movs	r3, #1
 80027f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80027f8:	e001      	b.n	80027fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002800:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002808:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800280a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800280c:	4618      	mov	r0, r3
 800280e:	3740      	adds	r7, #64	@ 0x40
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08c      	sub	sp, #48	@ 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10b      	bne.n	8002846 <xQueueReceive+0x32>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	623b      	str	r3, [r7, #32]
}
 8002840:	bf00      	nop
 8002842:	bf00      	nop
 8002844:	e7fd      	b.n	8002842 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d103      	bne.n	8002854 <xQueueReceive+0x40>
 800284c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800284e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <xQueueReceive+0x44>
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <xQueueReceive+0x46>
 8002858:	2300      	movs	r3, #0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <xQueueReceive+0x62>
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	61fb      	str	r3, [r7, #28]
}
 8002870:	bf00      	nop
 8002872:	bf00      	nop
 8002874:	e7fd      	b.n	8002872 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002876:	f001 f97d 	bl	8003b74 <xTaskGetSchedulerState>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d102      	bne.n	8002886 <xQueueReceive+0x72>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <xQueueReceive+0x76>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <xQueueReceive+0x78>
 800288a:	2300      	movs	r3, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10b      	bne.n	80028a8 <xQueueReceive+0x94>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	61bb      	str	r3, [r7, #24]
}
 80028a2:	bf00      	nop
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028a8:	f001 fece 	bl	8004648 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01f      	beq.n	80028f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028b8:	68b9      	ldr	r1, [r7, #8]
 80028ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80028bc:	f000 f8f6 	bl	8002aac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c2:	1e5a      	subs	r2, r3, #1
 80028c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00f      	beq.n	80028f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d2:	3310      	adds	r3, #16
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 ff87 	bl	80037e8 <xTaskRemoveFromEventList>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d007      	beq.n	80028f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80028e0:	4b3c      	ldr	r3, [pc, #240]	@ (80029d4 <xQueueReceive+0x1c0>)
 80028e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80028f0:	f001 fedc 	bl	80046ac <vPortExitCritical>
				return pdPASS;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e069      	b.n	80029cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d103      	bne.n	8002906 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028fe:	f001 fed5 	bl	80046ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002902:	2300      	movs	r3, #0
 8002904:	e062      	b.n	80029cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d106      	bne.n	800291a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800290c:	f107 0310 	add.w	r3, r7, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f000 ffcd 	bl	80038b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002916:	2301      	movs	r3, #1
 8002918:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800291a:	f001 fec7 	bl	80046ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800291e:	f000 fd35 	bl	800338c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002922:	f001 fe91 	bl	8004648 <vPortEnterCritical>
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800292c:	b25b      	sxtb	r3, r3
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d103      	bne.n	800293c <xQueueReceive+0x128>
 8002934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800293c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002942:	b25b      	sxtb	r3, r3
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d103      	bne.n	8002952 <xQueueReceive+0x13e>
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002952:	f001 feab 	bl	80046ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002956:	1d3a      	adds	r2, r7, #4
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f000 ffbc 	bl	80038dc <xTaskCheckForTimeOut>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d123      	bne.n	80029b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800296a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800296c:	f000 f916 	bl	8002b9c <prvIsQueueEmpty>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d017      	beq.n	80029a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	3324      	adds	r3, #36	@ 0x24
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f000 fee0 	bl	8003744 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002986:	f000 f8b7 	bl	8002af8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800298a:	f000 fd0d 	bl	80033a8 <xTaskResumeAll>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d189      	bne.n	80028a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002994:	4b0f      	ldr	r3, [pc, #60]	@ (80029d4 <xQueueReceive+0x1c0>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	e780      	b.n	80028a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80029a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029a8:	f000 f8a6 	bl	8002af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ac:	f000 fcfc 	bl	80033a8 <xTaskResumeAll>
 80029b0:	e77a      	b.n	80028a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80029b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029b4:	f000 f8a0 	bl	8002af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029b8:	f000 fcf6 	bl	80033a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029be:	f000 f8ed 	bl	8002b9c <prvIsQueueEmpty>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f43f af6f 	beq.w	80028a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80029ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3730      	adds	r7, #48	@ 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10d      	bne.n	8002a12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d14d      	bne.n	8002a9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f001 f8d4 	bl	8003bb0 <xTaskPriorityDisinherit>
 8002a08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	e043      	b.n	8002a9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d119      	bne.n	8002a4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6858      	ldr	r0, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a20:	461a      	mov	r2, r3
 8002a22:	68b9      	ldr	r1, [r7, #8]
 8002a24:	f002 f9a4 	bl	8004d70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a30:	441a      	add	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	685a      	ldr	r2, [r3, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d32b      	bcc.n	8002a9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]
 8002a4a:	e026      	b.n	8002a9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68d8      	ldr	r0, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	461a      	mov	r2, r3
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	f002 f98a 	bl	8004d70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	68da      	ldr	r2, [r3, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a64:	425b      	negs	r3, r3
 8002a66:	441a      	add	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68da      	ldr	r2, [r3, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d207      	bcs.n	8002a88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	425b      	negs	r3, r3
 8002a82:	441a      	add	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d105      	bne.n	8002a9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002aa2:	697b      	ldr	r3, [r7, #20]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d018      	beq.n	8002af0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	441a      	add	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68da      	ldr	r2, [r3, #12]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d303      	bcc.n	8002ae0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68d9      	ldr	r1, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae8:	461a      	mov	r2, r3
 8002aea:	6838      	ldr	r0, [r7, #0]
 8002aec:	f002 f940 	bl	8004d70 <memcpy>
	}
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002b00:	f001 fda2 	bl	8004648 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b0c:	e011      	b.n	8002b32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d012      	beq.n	8002b3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3324      	adds	r3, #36	@ 0x24
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fe64 	bl	80037e8 <xTaskRemoveFromEventList>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002b26:	f000 ff3d 	bl	80039a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	dce9      	bgt.n	8002b0e <prvUnlockQueue+0x16>
 8002b3a:	e000      	b.n	8002b3e <prvUnlockQueue+0x46>
					break;
 8002b3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	22ff      	movs	r2, #255	@ 0xff
 8002b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002b46:	f001 fdb1 	bl	80046ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002b4a:	f001 fd7d 	bl	8004648 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b56:	e011      	b.n	8002b7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d012      	beq.n	8002b86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3310      	adds	r3, #16
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fe3f 	bl	80037e8 <xTaskRemoveFromEventList>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002b70:	f000 ff18 	bl	80039a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002b74:	7bbb      	ldrb	r3, [r7, #14]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	dce9      	bgt.n	8002b58 <prvUnlockQueue+0x60>
 8002b84:	e000      	b.n	8002b88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002b86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	22ff      	movs	r2, #255	@ 0xff
 8002b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002b90:	f001 fd8c 	bl	80046ac <vPortExitCritical>
}
 8002b94:	bf00      	nop
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ba4:	f001 fd50 	bl	8004648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
 8002bb4:	e001      	b.n	8002bba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bba:	f001 fd77 	bl	80046ac <vPortExitCritical>

	return xReturn;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bd0:	f001 fd3a 	bl	8004648 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d102      	bne.n	8002be6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002be0:	2301      	movs	r3, #1
 8002be2:	60fb      	str	r3, [r7, #12]
 8002be4:	e001      	b.n	8002bea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002bea:	f001 fd5f 	bl	80046ac <vPortExitCritical>

	return xReturn;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e014      	b.n	8002c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c08:	4a0f      	ldr	r2, [pc, #60]	@ (8002c48 <vQueueAddToRegistry+0x50>)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d10b      	bne.n	8002c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002c14:	490c      	ldr	r1, [pc, #48]	@ (8002c48 <vQueueAddToRegistry+0x50>)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c48 <vQueueAddToRegistry+0x50>)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	4413      	add	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002c2a:	e006      	b.n	8002c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60fb      	str	r3, [r7, #12]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b07      	cmp	r3, #7
 8002c36:	d9e7      	bls.n	8002c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002c38:	bf00      	nop
 8002c3a:	bf00      	nop
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000828 	.word	0x20000828

08002c4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002c5c:	f001 fcf4 	bl	8004648 <vPortEnterCritical>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002c66:	b25b      	sxtb	r3, r3
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d103      	bne.n	8002c76 <vQueueWaitForMessageRestricted+0x2a>
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c7c:	b25b      	sxtb	r3, r3
 8002c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c82:	d103      	bne.n	8002c8c <vQueueWaitForMessageRestricted+0x40>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c8c:	f001 fd0e 	bl	80046ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d106      	bne.n	8002ca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	3324      	adds	r3, #36	@ 0x24
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fd75 	bl	8003790 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002ca6:	6978      	ldr	r0, [r7, #20]
 8002ca8:	f7ff ff26 	bl	8002af8 <prvUnlockQueue>
	}
 8002cac:	bf00      	nop
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08e      	sub	sp, #56	@ 0x38
 8002cb8:	af04      	add	r7, sp, #16
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ccc:	f383 8811 	msr	BASEPRI, r3
 8002cd0:	f3bf 8f6f 	isb	sy
 8002cd4:	f3bf 8f4f 	dsb	sy
 8002cd8:	623b      	str	r3, [r7, #32]
}
 8002cda:	bf00      	nop
 8002cdc:	bf00      	nop
 8002cde:	e7fd      	b.n	8002cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10b      	bne.n	8002cfe <xTaskCreateStatic+0x4a>
	__asm volatile
 8002ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cea:	f383 8811 	msr	BASEPRI, r3
 8002cee:	f3bf 8f6f 	isb	sy
 8002cf2:	f3bf 8f4f 	dsb	sy
 8002cf6:	61fb      	str	r3, [r7, #28]
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	e7fd      	b.n	8002cfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002cfe:	23a8      	movs	r3, #168	@ 0xa8
 8002d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	2ba8      	cmp	r3, #168	@ 0xa8
 8002d06:	d00b      	beq.n	8002d20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d0c:	f383 8811 	msr	BASEPRI, r3
 8002d10:	f3bf 8f6f 	isb	sy
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	61bb      	str	r3, [r7, #24]
}
 8002d1a:	bf00      	nop
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002d20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d01e      	beq.n	8002d66 <xTaskCreateStatic+0xb2>
 8002d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01b      	beq.n	8002d66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002d40:	2300      	movs	r3, #0
 8002d42:	9303      	str	r3, [sp, #12]
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d46:	9302      	str	r3, [sp, #8]
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	9301      	str	r3, [sp, #4]
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 f851 	bl	8002e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d60:	f000 f8f6 	bl	8002f50 <prvAddNewTaskToReadyList>
 8002d64:	e001      	b.n	8002d6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002d6a:	697b      	ldr	r3, [r7, #20]
	}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3728      	adds	r7, #40	@ 0x28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}

08002d74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08c      	sub	sp, #48	@ 0x30
 8002d78:	af04      	add	r7, sp, #16
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	603b      	str	r3, [r7, #0]
 8002d80:	4613      	mov	r3, r2
 8002d82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f001 fd7f 	bl	800488c <pvPortMalloc>
 8002d8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d96:	20a8      	movs	r0, #168	@ 0xa8
 8002d98:	f001 fd78 	bl	800488c <pvPortMalloc>
 8002d9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	631a      	str	r2, [r3, #48]	@ 0x30
 8002daa:	e005      	b.n	8002db8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002dac:	6978      	ldr	r0, [r7, #20]
 8002dae:	f001 fe3b 	bl	8004a28 <vPortFree>
 8002db2:	e001      	b.n	8002db8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d017      	beq.n	8002dee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002dc6:	88fa      	ldrh	r2, [r7, #6]
 8002dc8:	2300      	movs	r3, #0
 8002dca:	9303      	str	r3, [sp, #12]
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	9302      	str	r3, [sp, #8]
 8002dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd2:	9301      	str	r3, [sp, #4]
 8002dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f80f 	bl	8002e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002de2:	69f8      	ldr	r0, [r7, #28]
 8002de4:	f000 f8b4 	bl	8002f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002de8:	2301      	movs	r3, #1
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e002      	b.n	8002df4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dee:	f04f 33ff 	mov.w	r3, #4294967295
 8002df2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002df4:	69bb      	ldr	r3, [r7, #24]
	}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
 8002e0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	461a      	mov	r2, r3
 8002e18:	21a5      	movs	r1, #165	@ 0xa5
 8002e1a:	f001 ff25 	bl	8004c68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	4413      	add	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e46:	f383 8811 	msr	BASEPRI, r3
 8002e4a:	f3bf 8f6f 	isb	sy
 8002e4e:	f3bf 8f4f 	dsb	sy
 8002e52:	617b      	str	r3, [r7, #20]
}
 8002e54:	bf00      	nop
 8002e56:	bf00      	nop
 8002e58:	e7fd      	b.n	8002e56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d01f      	beq.n	8002ea0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e60:	2300      	movs	r3, #0
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	e012      	b.n	8002e8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	7819      	ldrb	r1, [r3, #0]
 8002e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	3334      	adds	r3, #52	@ 0x34
 8002e76:	460a      	mov	r2, r1
 8002e78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d006      	beq.n	8002e94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	61fb      	str	r3, [r7, #28]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	2b0f      	cmp	r3, #15
 8002e90:	d9e9      	bls.n	8002e66 <prvInitialiseNewTask+0x66>
 8002e92:	e000      	b.n	8002e96 <prvInitialiseNewTask+0x96>
			{
				break;
 8002e94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e9e:	e003      	b.n	8002ea8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	2b37      	cmp	r3, #55	@ 0x37
 8002eac:	d901      	bls.n	8002eb2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002eae:	2337      	movs	r3, #55	@ 0x37
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec6:	3304      	adds	r3, #4
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff f965 	bl	8002198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed0:	3318      	adds	r3, #24
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7ff f960 	bl	8002198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002edc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f00:	3354      	adds	r3, #84	@ 0x54
 8002f02:	224c      	movs	r2, #76	@ 0x4c
 8002f04:	2100      	movs	r1, #0
 8002f06:	4618      	mov	r0, r3
 8002f08:	f001 feae 	bl	8004c68 <memset>
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8002f44 <prvInitialiseNewTask+0x144>)
 8002f10:	659a      	str	r2, [r3, #88]	@ 0x58
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	4a0c      	ldr	r2, [pc, #48]	@ (8002f48 <prvInitialiseNewTask+0x148>)
 8002f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8002f4c <prvInitialiseNewTask+0x14c>)
 8002f1c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	68f9      	ldr	r1, [r7, #12]
 8002f22:	69b8      	ldr	r0, [r7, #24]
 8002f24:	f001 fa62 	bl	80043ec <pxPortInitialiseStack>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d002      	beq.n	8002f3a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002f3a:	bf00      	nop
 8002f3c:	3720      	adds	r7, #32
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20004abc 	.word	0x20004abc
 8002f48:	20004b24 	.word	0x20004b24
 8002f4c:	20004b8c 	.word	0x20004b8c

08002f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f58:	f001 fb76 	bl	8004648 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8003014 <prvAddNewTaskToReadyList+0xc4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	3301      	adds	r3, #1
 8002f62:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <prvAddNewTaskToReadyList+0xc4>)
 8002f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002f66:	4b2c      	ldr	r3, [pc, #176]	@ (8003018 <prvAddNewTaskToReadyList+0xc8>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d109      	bne.n	8002f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003018 <prvAddNewTaskToReadyList+0xc8>)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f74:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <prvAddNewTaskToReadyList+0xc4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d110      	bne.n	8002f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002f7c:	f000 fd36 	bl	80039ec <prvInitialiseTaskLists>
 8002f80:	e00d      	b.n	8002f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002f82:	4b26      	ldr	r3, [pc, #152]	@ (800301c <prvAddNewTaskToReadyList+0xcc>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f8a:	4b23      	ldr	r3, [pc, #140]	@ (8003018 <prvAddNewTaskToReadyList+0xc8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d802      	bhi.n	8002f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002f98:	4a1f      	ldr	r2, [pc, #124]	@ (8003018 <prvAddNewTaskToReadyList+0xc8>)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002f9e:	4b20      	ldr	r3, [pc, #128]	@ (8003020 <prvAddNewTaskToReadyList+0xd0>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8003020 <prvAddNewTaskToReadyList+0xd0>)
 8002fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8003020 <prvAddNewTaskToReadyList+0xd0>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <prvAddNewTaskToReadyList+0xd4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d903      	bls.n	8002fc4 <prvAddNewTaskToReadyList+0x74>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc0:	4a18      	ldr	r2, [pc, #96]	@ (8003024 <prvAddNewTaskToReadyList+0xd4>)
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc8:	4613      	mov	r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	4413      	add	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4a15      	ldr	r2, [pc, #84]	@ (8003028 <prvAddNewTaskToReadyList+0xd8>)
 8002fd2:	441a      	add	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7ff f8e9 	bl	80021b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002fe0:	f001 fb64 	bl	80046ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <prvAddNewTaskToReadyList+0xcc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fec:	4b0a      	ldr	r3, [pc, #40]	@ (8003018 <prvAddNewTaskToReadyList+0xc8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d207      	bcs.n	800300a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800302c <prvAddNewTaskToReadyList+0xdc>)
 8002ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800300a:	bf00      	nop
 800300c:	3708      	adds	r7, #8
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000d3c 	.word	0x20000d3c
 8003018:	20000868 	.word	0x20000868
 800301c:	20000d48 	.word	0x20000d48
 8003020:	20000d58 	.word	0x20000d58
 8003024:	20000d44 	.word	0x20000d44
 8003028:	2000086c 	.word	0x2000086c
 800302c:	e000ed04 	.word	0xe000ed04

08003030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003042:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <vTaskDelay+0x64>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <vTaskDelay+0x32>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	60bb      	str	r3, [r7, #8]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003062:	f000 f993 	bl	800338c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003066:	2100      	movs	r1, #0
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fe11 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800306e:	f000 f99b 	bl	80033a8 <xTaskResumeAll>
 8003072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d107      	bne.n	800308a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800307a:	4b07      	ldr	r3, [pc, #28]	@ (8003098 <vTaskDelay+0x68>)
 800307c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800308a:	bf00      	nop
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000d64 	.word	0x20000d64
 8003098:	e000ed04 	.word	0xe000ed04

0800309c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80030a4:	f001 fad0 	bl	8004648 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <vTaskSuspend+0x18>
 80030ae:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <vTaskSuspend+0xd4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	e000      	b.n	80030b6 <vTaskSuspend+0x1a>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	3304      	adds	r3, #4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7ff f8d5 	bl	800226c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d004      	beq.n	80030d4 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	3318      	adds	r3, #24
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7ff f8cc 	bl	800226c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	3304      	adds	r3, #4
 80030d8:	4619      	mov	r1, r3
 80030da:	4826      	ldr	r0, [pc, #152]	@ (8003174 <vTaskSuspend+0xd8>)
 80030dc:	f7ff f869 	bl	80021b2 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d103      	bne.n	80030f4 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80030f4:	f001 fada 	bl	80046ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80030f8:	4b1f      	ldr	r3, [pc, #124]	@ (8003178 <vTaskSuspend+0xdc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003100:	f001 faa2 	bl	8004648 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003104:	f000 fd16 	bl	8003b34 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003108:	f001 fad0 	bl	80046ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800310c:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <vTaskSuspend+0xd4>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	429a      	cmp	r2, r3
 8003114:	d128      	bne.n	8003168 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003116:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <vTaskSuspend+0xdc>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d018      	beq.n	8003150 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800311e:	4b17      	ldr	r3, [pc, #92]	@ (800317c <vTaskSuspend+0xe0>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00b      	beq.n	800313e <vTaskSuspend+0xa2>
	__asm volatile
 8003126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312a:	f383 8811 	msr	BASEPRI, r3
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f3bf 8f4f 	dsb	sy
 8003136:	60bb      	str	r3, [r7, #8]
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	e7fd      	b.n	800313a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800313e:	4b10      	ldr	r3, [pc, #64]	@ (8003180 <vTaskSuspend+0xe4>)
 8003140:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	f3bf 8f4f 	dsb	sy
 800314a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800314e:	e00b      	b.n	8003168 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003150:	4b08      	ldr	r3, [pc, #32]	@ (8003174 <vTaskSuspend+0xd8>)
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <vTaskSuspend+0xe8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	429a      	cmp	r2, r3
 800315a:	d103      	bne.n	8003164 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <vTaskSuspend+0xd4>)
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
	}
 8003162:	e001      	b.n	8003168 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8003164:	f000 fa88 	bl	8003678 <vTaskSwitchContext>
	}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20000868 	.word	0x20000868
 8003174:	20000d28 	.word	0x20000d28
 8003178:	20000d48 	.word	0x20000d48
 800317c:	20000d64 	.word	0x20000d64
 8003180:	e000ed04 	.word	0xe000ed04
 8003184:	20000d3c 	.word	0x20000d3c

08003188 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10b      	bne.n	80031b6 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800319e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a2:	f383 8811 	msr	BASEPRI, r3
 80031a6:	f3bf 8f6f 	isb	sy
 80031aa:	f3bf 8f4f 	dsb	sy
 80031ae:	60fb      	str	r3, [r7, #12]
}
 80031b0:	bf00      	nop
 80031b2:	bf00      	nop
 80031b4:	e7fd      	b.n	80031b2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4a0a      	ldr	r2, [pc, #40]	@ (80031e4 <prvTaskIsTaskSuspended+0x5c>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d10a      	bne.n	80031d6 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	4a08      	ldr	r2, [pc, #32]	@ (80031e8 <prvTaskIsTaskSuspended+0x60>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d005      	beq.n	80031d6 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 80031d2:	2301      	movs	r3, #1
 80031d4:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80031d6:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80031d8:	4618      	mov	r0, r3
 80031da:	371c      	adds	r7, #28
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	20000d28 	.word	0x20000d28
 80031e8:	20000cfc 	.word	0x20000cfc

080031ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10b      	bne.n	8003216 <vTaskResume+0x2a>
	__asm volatile
 80031fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003202:	f383 8811 	msr	BASEPRI, r3
 8003206:	f3bf 8f6f 	isb	sy
 800320a:	f3bf 8f4f 	dsb	sy
 800320e:	60bb      	str	r3, [r7, #8]
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	e7fd      	b.n	8003212 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003216:	4b21      	ldr	r3, [pc, #132]	@ (800329c <vTaskResume+0xb0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	429a      	cmp	r2, r3
 800321e:	d038      	beq.n	8003292 <vTaskResume+0xa6>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d035      	beq.n	8003292 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8003226:	f001 fa0f 	bl	8004648 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f7ff ffac 	bl	8003188 <prvTaskIsTaskSuspended>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d02b      	beq.n	800328e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	3304      	adds	r3, #4
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff f816 	bl	800226c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003244:	4b16      	ldr	r3, [pc, #88]	@ (80032a0 <vTaskResume+0xb4>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	429a      	cmp	r2, r3
 800324a:	d903      	bls.n	8003254 <vTaskResume+0x68>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003250:	4a13      	ldr	r2, [pc, #76]	@ (80032a0 <vTaskResume+0xb4>)
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003258:	4613      	mov	r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4a10      	ldr	r2, [pc, #64]	@ (80032a4 <vTaskResume+0xb8>)
 8003262:	441a      	add	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	3304      	adds	r3, #4
 8003268:	4619      	mov	r1, r3
 800326a:	4610      	mov	r0, r2
 800326c:	f7fe ffa1 	bl	80021b2 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003274:	4b09      	ldr	r3, [pc, #36]	@ (800329c <vTaskResume+0xb0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327a:	429a      	cmp	r2, r3
 800327c:	d307      	bcc.n	800328e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800327e:	4b0a      	ldr	r3, [pc, #40]	@ (80032a8 <vTaskResume+0xbc>)
 8003280:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800328e:	f001 fa0d 	bl	80046ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	20000868 	.word	0x20000868
 80032a0:	20000d44 	.word	0x20000d44
 80032a4:	2000086c 	.word	0x2000086c
 80032a8:	e000ed04 	.word	0xe000ed04

080032ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	@ 0x28
 80032b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032ba:	463a      	mov	r2, r7
 80032bc:	1d39      	adds	r1, r7, #4
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe ff14 	bl	80020f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032c8:	6839      	ldr	r1, [r7, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68ba      	ldr	r2, [r7, #8]
 80032ce:	9202      	str	r2, [sp, #8]
 80032d0:	9301      	str	r3, [sp, #4]
 80032d2:	2300      	movs	r3, #0
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2300      	movs	r3, #0
 80032d8:	460a      	mov	r2, r1
 80032da:	4924      	ldr	r1, [pc, #144]	@ (800336c <vTaskStartScheduler+0xc0>)
 80032dc:	4824      	ldr	r0, [pc, #144]	@ (8003370 <vTaskStartScheduler+0xc4>)
 80032de:	f7ff fce9 	bl	8002cb4 <xTaskCreateStatic>
 80032e2:	4603      	mov	r3, r0
 80032e4:	4a23      	ldr	r2, [pc, #140]	@ (8003374 <vTaskStartScheduler+0xc8>)
 80032e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032e8:	4b22      	ldr	r3, [pc, #136]	@ (8003374 <vTaskStartScheduler+0xc8>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d002      	beq.n	80032f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032f0:	2301      	movs	r3, #1
 80032f2:	617b      	str	r3, [r7, #20]
 80032f4:	e001      	b.n	80032fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d102      	bne.n	8003306 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003300:	f000 fd1a 	bl	8003d38 <xTimerCreateTimerTask>
 8003304:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d11b      	bne.n	8003344 <vTaskStartScheduler+0x98>
	__asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	613b      	str	r3, [r7, #16]
}
 800331e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003320:	4b15      	ldr	r3, [pc, #84]	@ (8003378 <vTaskStartScheduler+0xcc>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	3354      	adds	r3, #84	@ 0x54
 8003326:	4a15      	ldr	r2, [pc, #84]	@ (800337c <vTaskStartScheduler+0xd0>)
 8003328:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800332a:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <vTaskStartScheduler+0xd4>)
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003332:	4b14      	ldr	r3, [pc, #80]	@ (8003384 <vTaskStartScheduler+0xd8>)
 8003334:	2201      	movs	r2, #1
 8003336:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <vTaskStartScheduler+0xdc>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800333e:	f001 f8df 	bl	8004500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003342:	e00f      	b.n	8003364 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d10b      	bne.n	8003364 <vTaskStartScheduler+0xb8>
	__asm volatile
 800334c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003350:	f383 8811 	msr	BASEPRI, r3
 8003354:	f3bf 8f6f 	isb	sy
 8003358:	f3bf 8f4f 	dsb	sy
 800335c:	60fb      	str	r3, [r7, #12]
}
 800335e:	bf00      	nop
 8003360:	bf00      	nop
 8003362:	e7fd      	b.n	8003360 <vTaskStartScheduler+0xb4>
}
 8003364:	bf00      	nop
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	08004e74 	.word	0x08004e74
 8003370:	080039bd 	.word	0x080039bd
 8003374:	20000d60 	.word	0x20000d60
 8003378:	20000868 	.word	0x20000868
 800337c:	20000010 	.word	0x20000010
 8003380:	20000d5c 	.word	0x20000d5c
 8003384:	20000d48 	.word	0x20000d48
 8003388:	20000d40 	.word	0x20000d40

0800338c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003390:	4b04      	ldr	r3, [pc, #16]	@ (80033a4 <vTaskSuspendAll+0x18>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a03      	ldr	r2, [pc, #12]	@ (80033a4 <vTaskSuspendAll+0x18>)
 8003398:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800339a:	bf00      	nop
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	20000d64 	.word	0x20000d64

080033a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80033b6:	4b42      	ldr	r3, [pc, #264]	@ (80034c0 <xTaskResumeAll+0x118>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <xTaskResumeAll+0x2e>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	603b      	str	r3, [r7, #0]
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	e7fd      	b.n	80033d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033d6:	f001 f937 	bl	8004648 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033da:	4b39      	ldr	r3, [pc, #228]	@ (80034c0 <xTaskResumeAll+0x118>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3b01      	subs	r3, #1
 80033e0:	4a37      	ldr	r2, [pc, #220]	@ (80034c0 <xTaskResumeAll+0x118>)
 80033e2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033e4:	4b36      	ldr	r3, [pc, #216]	@ (80034c0 <xTaskResumeAll+0x118>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d162      	bne.n	80034b2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033ec:	4b35      	ldr	r3, [pc, #212]	@ (80034c4 <xTaskResumeAll+0x11c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d05e      	beq.n	80034b2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033f4:	e02f      	b.n	8003456 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033f6:	4b34      	ldr	r3, [pc, #208]	@ (80034c8 <xTaskResumeAll+0x120>)
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	3318      	adds	r3, #24
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe ff32 	bl	800226c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3304      	adds	r3, #4
 800340c:	4618      	mov	r0, r3
 800340e:	f7fe ff2d 	bl	800226c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	4b2d      	ldr	r3, [pc, #180]	@ (80034cc <xTaskResumeAll+0x124>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	429a      	cmp	r2, r3
 800341c:	d903      	bls.n	8003426 <xTaskResumeAll+0x7e>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003422:	4a2a      	ldr	r2, [pc, #168]	@ (80034cc <xTaskResumeAll+0x124>)
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800342a:	4613      	mov	r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <xTaskResumeAll+0x128>)
 8003434:	441a      	add	r2, r3
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3304      	adds	r3, #4
 800343a:	4619      	mov	r1, r3
 800343c:	4610      	mov	r0, r2
 800343e:	f7fe feb8 	bl	80021b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003446:	4b23      	ldr	r3, [pc, #140]	@ (80034d4 <xTaskResumeAll+0x12c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344c:	429a      	cmp	r2, r3
 800344e:	d302      	bcc.n	8003456 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003450:	4b21      	ldr	r3, [pc, #132]	@ (80034d8 <xTaskResumeAll+0x130>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003456:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <xTaskResumeAll+0x120>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1cb      	bne.n	80033f6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003464:	f000 fb66 	bl	8003b34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003468:	4b1c      	ldr	r3, [pc, #112]	@ (80034dc <xTaskResumeAll+0x134>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003474:	f000 f846 	bl	8003504 <xTaskIncrementTick>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d002      	beq.n	8003484 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800347e:	4b16      	ldr	r3, [pc, #88]	@ (80034d8 <xTaskResumeAll+0x130>)
 8003480:	2201      	movs	r2, #1
 8003482:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	3b01      	subs	r3, #1
 8003488:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1f1      	bne.n	8003474 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003490:	4b12      	ldr	r3, [pc, #72]	@ (80034dc <xTaskResumeAll+0x134>)
 8003492:	2200      	movs	r2, #0
 8003494:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003496:	4b10      	ldr	r3, [pc, #64]	@ (80034d8 <xTaskResumeAll+0x130>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800349e:	2301      	movs	r3, #1
 80034a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80034a2:	4b0f      	ldr	r3, [pc, #60]	@ (80034e0 <xTaskResumeAll+0x138>)
 80034a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80034b2:	f001 f8fb 	bl	80046ac <vPortExitCritical>

	return xAlreadyYielded;
 80034b6:	68bb      	ldr	r3, [r7, #8]
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	20000d64 	.word	0x20000d64
 80034c4:	20000d3c 	.word	0x20000d3c
 80034c8:	20000cfc 	.word	0x20000cfc
 80034cc:	20000d44 	.word	0x20000d44
 80034d0:	2000086c 	.word	0x2000086c
 80034d4:	20000868 	.word	0x20000868
 80034d8:	20000d50 	.word	0x20000d50
 80034dc:	20000d4c 	.word	0x20000d4c
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034ea:	4b05      	ldr	r3, [pc, #20]	@ (8003500 <xTaskGetTickCount+0x1c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	370c      	adds	r7, #12
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000d40 	.word	0x20000d40

08003504 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800350e:	4b4f      	ldr	r3, [pc, #316]	@ (800364c <xTaskIncrementTick+0x148>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 8090 	bne.w	8003638 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003518:	4b4d      	ldr	r3, [pc, #308]	@ (8003650 <xTaskIncrementTick+0x14c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003520:	4a4b      	ldr	r2, [pc, #300]	@ (8003650 <xTaskIncrementTick+0x14c>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d121      	bne.n	8003570 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800352c:	4b49      	ldr	r3, [pc, #292]	@ (8003654 <xTaskIncrementTick+0x150>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00b      	beq.n	800354e <xTaskIncrementTick+0x4a>
	__asm volatile
 8003536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800353a:	f383 8811 	msr	BASEPRI, r3
 800353e:	f3bf 8f6f 	isb	sy
 8003542:	f3bf 8f4f 	dsb	sy
 8003546:	603b      	str	r3, [r7, #0]
}
 8003548:	bf00      	nop
 800354a:	bf00      	nop
 800354c:	e7fd      	b.n	800354a <xTaskIncrementTick+0x46>
 800354e:	4b41      	ldr	r3, [pc, #260]	@ (8003654 <xTaskIncrementTick+0x150>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	4b40      	ldr	r3, [pc, #256]	@ (8003658 <xTaskIncrementTick+0x154>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a3e      	ldr	r2, [pc, #248]	@ (8003654 <xTaskIncrementTick+0x150>)
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4a3e      	ldr	r2, [pc, #248]	@ (8003658 <xTaskIncrementTick+0x154>)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	4b3e      	ldr	r3, [pc, #248]	@ (800365c <xTaskIncrementTick+0x158>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	4a3c      	ldr	r2, [pc, #240]	@ (800365c <xTaskIncrementTick+0x158>)
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	f000 fae2 	bl	8003b34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003570:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <xTaskIncrementTick+0x15c>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	429a      	cmp	r2, r3
 8003578:	d349      	bcc.n	800360e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800357a:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <xTaskIncrementTick+0x150>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d104      	bne.n	800358e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003584:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <xTaskIncrementTick+0x15c>)
 8003586:	f04f 32ff 	mov.w	r2, #4294967295
 800358a:	601a      	str	r2, [r3, #0]
					break;
 800358c:	e03f      	b.n	800360e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800358e:	4b31      	ldr	r3, [pc, #196]	@ (8003654 <xTaskIncrementTick+0x150>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d203      	bcs.n	80035ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035a6:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <xTaskIncrementTick+0x15c>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035ac:	e02f      	b.n	800360e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4618      	mov	r0, r3
 80035b4:	f7fe fe5a 	bl	800226c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d004      	beq.n	80035ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	3318      	adds	r3, #24
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7fe fe51 	bl	800226c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ce:	4b25      	ldr	r3, [pc, #148]	@ (8003664 <xTaskIncrementTick+0x160>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d903      	bls.n	80035de <xTaskIncrementTick+0xda>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035da:	4a22      	ldr	r2, [pc, #136]	@ (8003664 <xTaskIncrementTick+0x160>)
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e2:	4613      	mov	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	4413      	add	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003668 <xTaskIncrementTick+0x164>)
 80035ec:	441a      	add	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	3304      	adds	r3, #4
 80035f2:	4619      	mov	r1, r3
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7fe fddc 	bl	80021b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <xTaskIncrementTick+0x168>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003604:	429a      	cmp	r2, r3
 8003606:	d3b8      	bcc.n	800357a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003608:	2301      	movs	r3, #1
 800360a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800360c:	e7b5      	b.n	800357a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800360e:	4b17      	ldr	r3, [pc, #92]	@ (800366c <xTaskIncrementTick+0x168>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003614:	4914      	ldr	r1, [pc, #80]	@ (8003668 <xTaskIncrementTick+0x164>)
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d901      	bls.n	800362a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800362a:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <xTaskIncrementTick+0x16c>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d007      	beq.n	8003642 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
 8003636:	e004      	b.n	8003642 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003638:	4b0e      	ldr	r3, [pc, #56]	@ (8003674 <xTaskIncrementTick+0x170>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	4a0d      	ldr	r2, [pc, #52]	@ (8003674 <xTaskIncrementTick+0x170>)
 8003640:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003642:	697b      	ldr	r3, [r7, #20]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20000d64 	.word	0x20000d64
 8003650:	20000d40 	.word	0x20000d40
 8003654:	20000cf4 	.word	0x20000cf4
 8003658:	20000cf8 	.word	0x20000cf8
 800365c:	20000d54 	.word	0x20000d54
 8003660:	20000d5c 	.word	0x20000d5c
 8003664:	20000d44 	.word	0x20000d44
 8003668:	2000086c 	.word	0x2000086c
 800366c:	20000868 	.word	0x20000868
 8003670:	20000d50 	.word	0x20000d50
 8003674:	20000d4c 	.word	0x20000d4c

08003678 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367e:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <vTaskSwitchContext+0xb4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d003      	beq.n	800368e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003686:	4b2a      	ldr	r3, [pc, #168]	@ (8003730 <vTaskSwitchContext+0xb8>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800368c:	e047      	b.n	800371e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800368e:	4b28      	ldr	r3, [pc, #160]	@ (8003730 <vTaskSwitchContext+0xb8>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003694:	4b27      	ldr	r3, [pc, #156]	@ (8003734 <vTaskSwitchContext+0xbc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	60fb      	str	r3, [r7, #12]
 800369a:	e011      	b.n	80036c0 <vTaskSwitchContext+0x48>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <vTaskSwitchContext+0x42>
	__asm volatile
 80036a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a6:	f383 8811 	msr	BASEPRI, r3
 80036aa:	f3bf 8f6f 	isb	sy
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	607b      	str	r3, [r7, #4]
}
 80036b4:	bf00      	nop
 80036b6:	bf00      	nop
 80036b8:	e7fd      	b.n	80036b6 <vTaskSwitchContext+0x3e>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	3b01      	subs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	491d      	ldr	r1, [pc, #116]	@ (8003738 <vTaskSwitchContext+0xc0>)
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4613      	mov	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0e3      	beq.n	800369c <vTaskSwitchContext+0x24>
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	4a16      	ldr	r2, [pc, #88]	@ (8003738 <vTaskSwitchContext+0xc0>)
 80036e0:	4413      	add	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	605a      	str	r2, [r3, #4]
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3308      	adds	r3, #8
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d104      	bne.n	8003704 <vTaskSwitchContext+0x8c>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	4a0c      	ldr	r2, [pc, #48]	@ (800373c <vTaskSwitchContext+0xc4>)
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <vTaskSwitchContext+0xbc>)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <vTaskSwitchContext+0xc4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3354      	adds	r3, #84	@ 0x54
 800371a:	4a09      	ldr	r2, [pc, #36]	@ (8003740 <vTaskSwitchContext+0xc8>)
 800371c:	6013      	str	r3, [r2, #0]
}
 800371e:	bf00      	nop
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000d64 	.word	0x20000d64
 8003730:	20000d50 	.word	0x20000d50
 8003734:	20000d44 	.word	0x20000d44
 8003738:	2000086c 	.word	0x2000086c
 800373c:	20000868 	.word	0x20000868
 8003740:	20000010 	.word	0x20000010

08003744 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10b      	bne.n	800376c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	60fb      	str	r3, [r7, #12]
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	e7fd      	b.n	8003768 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800376c:	4b07      	ldr	r3, [pc, #28]	@ (800378c <vTaskPlaceOnEventList+0x48>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	3318      	adds	r3, #24
 8003772:	4619      	mov	r1, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fe fd40 	bl	80021fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800377a:	2101      	movs	r1, #1
 800377c:	6838      	ldr	r0, [r7, #0]
 800377e:	f000 fa87 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20000868 	.word	0x20000868

08003790 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003790:	b580      	push	{r7, lr}
 8003792:	b086      	sub	sp, #24
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10b      	bne.n	80037ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80037a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a6:	f383 8811 	msr	BASEPRI, r3
 80037aa:	f3bf 8f6f 	isb	sy
 80037ae:	f3bf 8f4f 	dsb	sy
 80037b2:	617b      	str	r3, [r7, #20]
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop
 80037b8:	e7fd      	b.n	80037b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037ba:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3318      	adds	r3, #24
 80037c0:	4619      	mov	r1, r3
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7fe fcf5 	bl	80021b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d002      	beq.n	80037d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80037ce:	f04f 33ff 	mov.w	r3, #4294967295
 80037d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	68b8      	ldr	r0, [r7, #8]
 80037d8:	f000 fa5a 	bl	8003c90 <prvAddCurrentTaskToDelayedList>
	}
 80037dc:	bf00      	nop
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	20000868 	.word	0x20000868

080037e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10b      	bne.n	8003816 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80037fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003802:	f383 8811 	msr	BASEPRI, r3
 8003806:	f3bf 8f6f 	isb	sy
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	60fb      	str	r3, [r7, #12]
}
 8003810:	bf00      	nop
 8003812:	bf00      	nop
 8003814:	e7fd      	b.n	8003812 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3318      	adds	r3, #24
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fd26 	bl	800226c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003820:	4b1d      	ldr	r3, [pc, #116]	@ (8003898 <xTaskRemoveFromEventList+0xb0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d11d      	bne.n	8003864 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fd1d 	bl	800226c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003836:	4b19      	ldr	r3, [pc, #100]	@ (800389c <xTaskRemoveFromEventList+0xb4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d903      	bls.n	8003846 <xTaskRemoveFromEventList+0x5e>
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003842:	4a16      	ldr	r2, [pc, #88]	@ (800389c <xTaskRemoveFromEventList+0xb4>)
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4a13      	ldr	r2, [pc, #76]	@ (80038a0 <xTaskRemoveFromEventList+0xb8>)
 8003854:	441a      	add	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	3304      	adds	r3, #4
 800385a:	4619      	mov	r1, r3
 800385c:	4610      	mov	r0, r2
 800385e:	f7fe fca8 	bl	80021b2 <vListInsertEnd>
 8003862:	e005      	b.n	8003870 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	3318      	adds	r3, #24
 8003868:	4619      	mov	r1, r3
 800386a:	480e      	ldr	r0, [pc, #56]	@ (80038a4 <xTaskRemoveFromEventList+0xbc>)
 800386c:	f7fe fca1 	bl	80021b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4b0c      	ldr	r3, [pc, #48]	@ (80038a8 <xTaskRemoveFromEventList+0xc0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d905      	bls.n	800388a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800387e:	2301      	movs	r3, #1
 8003880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003882:	4b0a      	ldr	r3, [pc, #40]	@ (80038ac <xTaskRemoveFromEventList+0xc4>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	e001      	b.n	800388e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800388e:	697b      	ldr	r3, [r7, #20]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20000d64 	.word	0x20000d64
 800389c:	20000d44 	.word	0x20000d44
 80038a0:	2000086c 	.word	0x2000086c
 80038a4:	20000cfc 	.word	0x20000cfc
 80038a8:	20000868 	.word	0x20000868
 80038ac:	20000d50 	.word	0x20000d50

080038b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038b8:	4b06      	ldr	r3, [pc, #24]	@ (80038d4 <vTaskInternalSetTimeOutState+0x24>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038c0:	4b05      	ldr	r3, [pc, #20]	@ (80038d8 <vTaskInternalSetTimeOutState+0x28>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	605a      	str	r2, [r3, #4]
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	20000d54 	.word	0x20000d54
 80038d8:	20000d40 	.word	0x20000d40

080038dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b088      	sub	sp, #32
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	613b      	str	r3, [r7, #16]
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	60fb      	str	r3, [r7, #12]
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003922:	f000 fe91 	bl	8004648 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003926:	4b1d      	ldr	r3, [pc, #116]	@ (800399c <xTaskCheckForTimeOut+0xc0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d102      	bne.n	8003946 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003940:	2300      	movs	r3, #0
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	e023      	b.n	800398e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	4b15      	ldr	r3, [pc, #84]	@ (80039a0 <xTaskCheckForTimeOut+0xc4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d007      	beq.n	8003962 <xTaskCheckForTimeOut+0x86>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	429a      	cmp	r2, r3
 800395a:	d302      	bcc.n	8003962 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800395c:	2301      	movs	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e015      	b.n	800398e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	d20b      	bcs.n	8003984 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	1ad2      	subs	r2, r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7ff ff99 	bl	80038b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
 8003982:	e004      	b.n	800398e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800398a:	2301      	movs	r3, #1
 800398c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800398e:	f000 fe8d 	bl	80046ac <vPortExitCritical>

	return xReturn;
 8003992:	69fb      	ldr	r3, [r7, #28]
}
 8003994:	4618      	mov	r0, r3
 8003996:	3720      	adds	r7, #32
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	20000d40 	.word	0x20000d40
 80039a0:	20000d54 	.word	0x20000d54

080039a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <vTaskMissedYield+0x14>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	20000d50 	.word	0x20000d50

080039bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039c4:	f000 f852 	bl	8003a6c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <prvIdleTask+0x28>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d9f9      	bls.n	80039c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <prvIdleTask+0x2c>)
 80039d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039e0:	e7f0      	b.n	80039c4 <prvIdleTask+0x8>
 80039e2:	bf00      	nop
 80039e4:	2000086c 	.word	0x2000086c
 80039e8:	e000ed04 	.word	0xe000ed04

080039ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	e00c      	b.n	8003a12 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4a12      	ldr	r2, [pc, #72]	@ (8003a4c <prvInitialiseTaskLists+0x60>)
 8003a04:	4413      	add	r3, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fba6 	bl	8002158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b37      	cmp	r3, #55	@ 0x37
 8003a16:	d9ef      	bls.n	80039f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a18:	480d      	ldr	r0, [pc, #52]	@ (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a1a:	f7fe fb9d 	bl	8002158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a1e:	480d      	ldr	r0, [pc, #52]	@ (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a20:	f7fe fb9a 	bl	8002158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a24:	480c      	ldr	r0, [pc, #48]	@ (8003a58 <prvInitialiseTaskLists+0x6c>)
 8003a26:	f7fe fb97 	bl	8002158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a2a:	480c      	ldr	r0, [pc, #48]	@ (8003a5c <prvInitialiseTaskLists+0x70>)
 8003a2c:	f7fe fb94 	bl	8002158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a30:	480b      	ldr	r0, [pc, #44]	@ (8003a60 <prvInitialiseTaskLists+0x74>)
 8003a32:	f7fe fb91 	bl	8002158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <prvInitialiseTaskLists+0x78>)
 8003a38:	4a05      	ldr	r2, [pc, #20]	@ (8003a50 <prvInitialiseTaskLists+0x64>)
 8003a3a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <prvInitialiseTaskLists+0x7c>)
 8003a3e:	4a05      	ldr	r2, [pc, #20]	@ (8003a54 <prvInitialiseTaskLists+0x68>)
 8003a40:	601a      	str	r2, [r3, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	2000086c 	.word	0x2000086c
 8003a50:	20000ccc 	.word	0x20000ccc
 8003a54:	20000ce0 	.word	0x20000ce0
 8003a58:	20000cfc 	.word	0x20000cfc
 8003a5c:	20000d10 	.word	0x20000d10
 8003a60:	20000d28 	.word	0x20000d28
 8003a64:	20000cf4 	.word	0x20000cf4
 8003a68:	20000cf8 	.word	0x20000cf8

08003a6c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a72:	e019      	b.n	8003aa8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a74:	f000 fde8 	bl	8004648 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a78:	4b10      	ldr	r3, [pc, #64]	@ (8003abc <prvCheckTasksWaitingTermination+0x50>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3304      	adds	r3, #4
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7fe fbf1 	bl	800226c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	4a0b      	ldr	r2, [pc, #44]	@ (8003ac0 <prvCheckTasksWaitingTermination+0x54>)
 8003a92:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a94:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003a9c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a9e:	f000 fe05 	bl	80046ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f810 	bl	8003ac8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003aa8:	4b06      	ldr	r3, [pc, #24]	@ (8003ac4 <prvCheckTasksWaitingTermination+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e1      	bne.n	8003a74 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000d10 	.word	0x20000d10
 8003ac0:	20000d3c 	.word	0x20000d3c
 8003ac4:	20000d24 	.word	0x20000d24

08003ac8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3354      	adds	r3, #84	@ 0x54
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f001 f8cf 	bl	8004c78 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d108      	bne.n	8003af6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ff9d 	bl	8004a28 <vPortFree>
				vPortFree( pxTCB );
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 ff9a 	bl	8004a28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003af4:	e019      	b.n	8003b2a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d103      	bne.n	8003b08 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 ff91 	bl	8004a28 <vPortFree>
	}
 8003b06:	e010      	b.n	8003b2a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d00b      	beq.n	8003b2a <prvDeleteTCB+0x62>
	__asm volatile
 8003b12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b16:	f383 8811 	msr	BASEPRI, r3
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	f3bf 8f4f 	dsb	sy
 8003b22:	60fb      	str	r3, [r7, #12]
}
 8003b24:	bf00      	nop
 8003b26:	bf00      	nop
 8003b28:	e7fd      	b.n	8003b26 <prvDeleteTCB+0x5e>
	}
 8003b2a:	bf00      	nop
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <prvResetNextTaskUnblockTime+0x38>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d104      	bne.n	8003b4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b44:	4b0a      	ldr	r3, [pc, #40]	@ (8003b70 <prvResetNextTaskUnblockTime+0x3c>)
 8003b46:	f04f 32ff 	mov.w	r2, #4294967295
 8003b4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b4c:	e008      	b.n	8003b60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b4e:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <prvResetNextTaskUnblockTime+0x38>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	@ (8003b70 <prvResetNextTaskUnblockTime+0x3c>)
 8003b5e:	6013      	str	r3, [r2, #0]
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000cf4 	.word	0x20000cf4
 8003b70:	20000d5c 	.word	0x20000d5c

08003b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <xTaskGetSchedulerState+0x34>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d102      	bne.n	8003b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b82:	2301      	movs	r3, #1
 8003b84:	607b      	str	r3, [r7, #4]
 8003b86:	e008      	b.n	8003b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b88:	4b08      	ldr	r3, [pc, #32]	@ (8003bac <xTaskGetSchedulerState+0x38>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b90:	2302      	movs	r3, #2
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	e001      	b.n	8003b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b96:	2300      	movs	r3, #0
 8003b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b9a:	687b      	ldr	r3, [r7, #4]
	}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	20000d48 	.word	0x20000d48
 8003bac:	20000d64 	.word	0x20000d64

08003bb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d058      	beq.n	8003c78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bc6:	4b2f      	ldr	r3, [pc, #188]	@ (8003c84 <xTaskPriorityDisinherit+0xd4>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d00b      	beq.n	8003be8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	60fb      	str	r3, [r7, #12]
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	e7fd      	b.n	8003be4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	60bb      	str	r3, [r7, #8]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c0c:	1e5a      	subs	r2, r3, #1
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d02c      	beq.n	8003c78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d128      	bne.n	8003c78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7fe fb1e 	bl	800226c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <xTaskPriorityDisinherit+0xd8>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d903      	bls.n	8003c58 <xTaskPriorityDisinherit+0xa8>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <xTaskPriorityDisinherit+0xd8>)
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4413      	add	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4a09      	ldr	r2, [pc, #36]	@ (8003c8c <xTaskPriorityDisinherit+0xdc>)
 8003c66:	441a      	add	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	4610      	mov	r0, r2
 8003c70:	f7fe fa9f 	bl	80021b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c74:	2301      	movs	r3, #1
 8003c76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c78:	697b      	ldr	r3, [r7, #20]
	}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20000868 	.word	0x20000868
 8003c88:	20000d44 	.word	0x20000d44
 8003c8c:	2000086c 	.word	0x2000086c

08003c90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b084      	sub	sp, #16
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c9a:	4b21      	ldr	r3, [pc, #132]	@ (8003d20 <prvAddCurrentTaskToDelayedList+0x90>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ca0:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	3304      	adds	r3, #4
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fae0 	bl	800226c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d10a      	bne.n	8003cca <prvAddCurrentTaskToDelayedList+0x3a>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cba:	4b1a      	ldr	r3, [pc, #104]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3304      	adds	r3, #4
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4819      	ldr	r0, [pc, #100]	@ (8003d28 <prvAddCurrentTaskToDelayedList+0x98>)
 8003cc4:	f7fe fa75 	bl	80021b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cc8:	e026      	b.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cca:	68fa      	ldr	r2, [r7, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	4413      	add	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd2:	4b14      	ldr	r3, [pc, #80]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d209      	bcs.n	8003cf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce2:	4b12      	ldr	r3, [pc, #72]	@ (8003d2c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3304      	adds	r3, #4
 8003cec:	4619      	mov	r1, r3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	f7fe fa83 	bl	80021fa <vListInsert>
}
 8003cf4:	e010      	b.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf6:	4b0e      	ldr	r3, [pc, #56]	@ (8003d30 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8003d24 <prvAddCurrentTaskToDelayedList+0x94>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7fe fa79 	bl	80021fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d08:	4b0a      	ldr	r3, [pc, #40]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d202      	bcs.n	8003d18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003d12:	4a08      	ldr	r2, [pc, #32]	@ (8003d34 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	6013      	str	r3, [r2, #0]
}
 8003d18:	bf00      	nop
 8003d1a:	3710      	adds	r7, #16
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20000d40 	.word	0x20000d40
 8003d24:	20000868 	.word	0x20000868
 8003d28:	20000d28 	.word	0x20000d28
 8003d2c:	20000cf8 	.word	0x20000cf8
 8003d30:	20000cf4 	.word	0x20000cf4
 8003d34:	20000d5c 	.word	0x20000d5c

08003d38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b08a      	sub	sp, #40	@ 0x28
 8003d3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003d42:	f000 fb13 	bl	800436c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003d46:	4b1d      	ldr	r3, [pc, #116]	@ (8003dbc <xTimerCreateTimerTask+0x84>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d021      	beq.n	8003d92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003d56:	1d3a      	adds	r2, r7, #4
 8003d58:	f107 0108 	add.w	r1, r7, #8
 8003d5c:	f107 030c 	add.w	r3, r7, #12
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fe f9df 	bl	8002124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	9202      	str	r2, [sp, #8]
 8003d6e:	9301      	str	r3, [sp, #4]
 8003d70:	2302      	movs	r3, #2
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	460a      	mov	r2, r1
 8003d78:	4911      	ldr	r1, [pc, #68]	@ (8003dc0 <xTimerCreateTimerTask+0x88>)
 8003d7a:	4812      	ldr	r0, [pc, #72]	@ (8003dc4 <xTimerCreateTimerTask+0x8c>)
 8003d7c:	f7fe ff9a 	bl	8002cb4 <xTaskCreateStatic>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <xTimerCreateTimerTask+0x90>)
 8003d84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003d86:	4b10      	ldr	r3, [pc, #64]	@ (8003dc8 <xTimerCreateTimerTask+0x90>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d001      	beq.n	8003d92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10b      	bne.n	8003db0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	613b      	str	r3, [r7, #16]
}
 8003daa:	bf00      	nop
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003db0:	697b      	ldr	r3, [r7, #20]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3718      	adds	r7, #24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000d98 	.word	0x20000d98
 8003dc0:	08004e7c 	.word	0x08004e7c
 8003dc4:	08003f05 	.word	0x08003f05
 8003dc8:	20000d9c 	.word	0x20000d9c

08003dcc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	@ 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
 8003dd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10b      	bne.n	8003dfc <xTimerGenericCommand+0x30>
	__asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	623b      	str	r3, [r7, #32]
}
 8003df6:	bf00      	nop
 8003df8:	bf00      	nop
 8003dfa:	e7fd      	b.n	8003df8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003dfc:	4b19      	ldr	r3, [pc, #100]	@ (8003e64 <xTimerGenericCommand+0x98>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d02a      	beq.n	8003e5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	dc18      	bgt.n	8003e48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e16:	f7ff fead 	bl	8003b74 <xTaskGetSchedulerState>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d109      	bne.n	8003e34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e20:	4b10      	ldr	r3, [pc, #64]	@ (8003e64 <xTimerGenericCommand+0x98>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	f107 0110 	add.w	r1, r7, #16
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e2c:	f7fe fb52 	bl	80024d4 <xQueueGenericSend>
 8003e30:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e32:	e012      	b.n	8003e5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e34:	4b0b      	ldr	r3, [pc, #44]	@ (8003e64 <xTimerGenericCommand+0x98>)
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	f107 0110 	add.w	r1, r7, #16
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f7fe fb48 	bl	80024d4 <xQueueGenericSend>
 8003e44:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e46:	e008      	b.n	8003e5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e48:	4b06      	ldr	r3, [pc, #24]	@ (8003e64 <xTimerGenericCommand+0x98>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	f107 0110 	add.w	r1, r7, #16
 8003e50:	2300      	movs	r3, #0
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	f7fe fc40 	bl	80026d8 <xQueueGenericSendFromISR>
 8003e58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3728      	adds	r7, #40	@ 0x28
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000d98 	.word	0x20000d98

08003e68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e72:	4b23      	ldr	r3, [pc, #140]	@ (8003f00 <prvProcessExpiredTimer+0x98>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3304      	adds	r3, #4
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7fe f9f3 	bl	800226c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e8c:	f003 0304 	and.w	r3, r3, #4
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d023      	beq.n	8003edc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	699a      	ldr	r2, [r3, #24]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	18d1      	adds	r1, r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	6978      	ldr	r0, [r7, #20]
 8003ea2:	f000 f8d5 	bl	8004050 <prvInsertTimerInActiveList>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003eac:	2300      	movs	r3, #0
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	6978      	ldr	r0, [r7, #20]
 8003eb8:	f7ff ff88 	bl	8003dcc <xTimerGenericCommand>
 8003ebc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d114      	bne.n	8003eee <prvProcessExpiredTimer+0x86>
	__asm volatile
 8003ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec8:	f383 8811 	msr	BASEPRI, r3
 8003ecc:	f3bf 8f6f 	isb	sy
 8003ed0:	f3bf 8f4f 	dsb	sy
 8003ed4:	60fb      	str	r3, [r7, #12]
}
 8003ed6:	bf00      	nop
 8003ed8:	bf00      	nop
 8003eda:	e7fd      	b.n	8003ed8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	6a1b      	ldr	r3, [r3, #32]
 8003ef2:	6978      	ldr	r0, [r7, #20]
 8003ef4:	4798      	blx	r3
}
 8003ef6:	bf00      	nop
 8003ef8:	3718      	adds	r7, #24
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	20000d90 	.word	0x20000d90

08003f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f0c:	f107 0308 	add.w	r3, r7, #8
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 f859 	bl	8003fc8 <prvGetNextExpireTime>
 8003f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f805 	bl	8003f2c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003f22:	f000 f8d7 	bl	80040d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f26:	bf00      	nop
 8003f28:	e7f0      	b.n	8003f0c <prvTimerTask+0x8>
	...

08003f2c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003f36:	f7ff fa29 	bl	800338c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f3a:	f107 0308 	add.w	r3, r7, #8
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 f866 	bl	8004010 <prvSampleTimeNow>
 8003f44:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d130      	bne.n	8003fae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <prvProcessTimerOrBlockTask+0x3c>
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d806      	bhi.n	8003f68 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003f5a:	f7ff fa25 	bl	80033a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f5e:	68f9      	ldr	r1, [r7, #12]
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7ff ff81 	bl	8003e68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003f66:	e024      	b.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f6e:	4b13      	ldr	r3, [pc, #76]	@ (8003fbc <prvProcessTimerOrBlockTask+0x90>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <prvProcessTimerOrBlockTask+0x50>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <prvProcessTimerOrBlockTask+0x52>
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f80:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc0 <prvProcessTimerOrBlockTask+0x94>)
 8003f82:	6818      	ldr	r0, [r3, #0]
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f7fe fe5d 	bl	8002c4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003f92:	f7ff fa09 	bl	80033a8 <xTaskResumeAll>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003f9c:	4b09      	ldr	r3, [pc, #36]	@ (8003fc4 <prvProcessTimerOrBlockTask+0x98>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	f3bf 8f6f 	isb	sy
}
 8003fac:	e001      	b.n	8003fb2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003fae:	f7ff f9fb 	bl	80033a8 <xTaskResumeAll>
}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20000d94 	.word	0x20000d94
 8003fc0:	20000d98 	.word	0x20000d98
 8003fc4:	e000ed04 	.word	0xe000ed04

08003fc8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fd0:	4b0e      	ldr	r3, [pc, #56]	@ (800400c <prvGetNextExpireTime+0x44>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d101      	bne.n	8003fde <prvGetNextExpireTime+0x16>
 8003fda:	2201      	movs	r2, #1
 8003fdc:	e000      	b.n	8003fe0 <prvGetNextExpireTime+0x18>
 8003fde:	2200      	movs	r2, #0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d105      	bne.n	8003ff8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fec:	4b07      	ldr	r3, [pc, #28]	@ (800400c <prvGetNextExpireTime+0x44>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	e001      	b.n	8003ffc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3714      	adds	r7, #20
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000d90 	.word	0x20000d90

08004010 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004018:	f7ff fa64 	bl	80034e4 <xTaskGetTickCount>
 800401c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <prvSampleTimeNow+0x3c>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	429a      	cmp	r2, r3
 8004026:	d205      	bcs.n	8004034 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004028:	f000 f93a 	bl	80042a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	e002      	b.n	800403a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800403a:	4a04      	ldr	r2, [pc, #16]	@ (800404c <prvSampleTimeNow+0x3c>)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000da0 	.word	0x20000da0

08004050 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68fa      	ldr	r2, [r7, #12]
 800406c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	429a      	cmp	r2, r3
 8004074:	d812      	bhi.n	800409c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	1ad2      	subs	r2, r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e01b      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800408a:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <prvInsertTimerInActiveList+0x7c>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	3304      	adds	r3, #4
 8004092:	4619      	mov	r1, r3
 8004094:	4610      	mov	r0, r2
 8004096:	f7fe f8b0 	bl	80021fa <vListInsert>
 800409a:	e012      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d206      	bcs.n	80040b2 <prvInsertTimerInActiveList+0x62>
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d302      	bcc.n	80040b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80040ac:	2301      	movs	r3, #1
 80040ae:	617b      	str	r3, [r7, #20]
 80040b0:	e007      	b.n	80040c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040b2:	4b07      	ldr	r3, [pc, #28]	@ (80040d0 <prvInsertTimerInActiveList+0x80>)
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3304      	adds	r3, #4
 80040ba:	4619      	mov	r1, r3
 80040bc:	4610      	mov	r0, r2
 80040be:	f7fe f89c 	bl	80021fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80040c2:	697b      	ldr	r3, [r7, #20]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000d94 	.word	0x20000d94
 80040d0:	20000d90 	.word	0x20000d90

080040d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	@ 0x38
 80040d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040da:	e0ce      	b.n	800427a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	da19      	bge.n	8004116 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	3304      	adds	r3, #4
 80040e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	61fb      	str	r3, [r7, #28]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410c:	6850      	ldr	r0, [r2, #4]
 800410e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004110:	6892      	ldr	r2, [r2, #8]
 8004112:	4611      	mov	r1, r2
 8004114:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	f2c0 80ae 	blt.w	800427a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d004      	beq.n	8004134 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	3304      	adds	r3, #4
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe f89c 	bl	800226c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004134:	463b      	mov	r3, r7
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff6a 	bl	8004010 <prvSampleTimeNow>
 800413c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2b09      	cmp	r3, #9
 8004142:	f200 8097 	bhi.w	8004274 <prvProcessReceivedCommands+0x1a0>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <prvProcessReceivedCommands+0x78>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004175 	.word	0x08004175
 8004150:	08004175 	.word	0x08004175
 8004154:	08004175 	.word	0x08004175
 8004158:	080041eb 	.word	0x080041eb
 800415c:	080041ff 	.word	0x080041ff
 8004160:	0800424b 	.word	0x0800424b
 8004164:	08004175 	.word	0x08004175
 8004168:	08004175 	.word	0x08004175
 800416c:	080041eb 	.word	0x080041eb
 8004170:	080041ff 	.word	0x080041ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	b2da      	uxtb	r2, r3
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	18d1      	adds	r1, r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004192:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004194:	f7ff ff5c 	bl	8004050 <prvInsertTimerInActiveList>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d06c      	beq.n	8004278 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d061      	beq.n	8004278 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	441a      	add	r2, r3
 80041bc:	2300      	movs	r3, #0
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041c6:	f7ff fe01 	bl	8003dcc <xTimerGenericCommand>
 80041ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d152      	bne.n	8004278 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80041d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d6:	f383 8811 	msr	BASEPRI, r3
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	f3bf 8f4f 	dsb	sy
 80041e2:	61bb      	str	r3, [r7, #24]
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	e7fd      	b.n	80041e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	b2da      	uxtb	r2, r3
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80041fc:	e03d      	b.n	800427a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004204:	f043 0301 	orr.w	r3, r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800420c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004214:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10b      	bne.n	8004236 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	617b      	str	r3, [r7, #20]
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	e7fd      	b.n	8004232 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	18d1      	adds	r1, r2, r3
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004244:	f7ff ff04 	bl	8004050 <prvInsertTimerInActiveList>
					break;
 8004248:	e017      	b.n	800427a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	2b00      	cmp	r3, #0
 8004256:	d103      	bne.n	8004260 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800425a:	f000 fbe5 	bl	8004a28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800425e:	e00c      	b.n	800427a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004262:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004272:	e002      	b.n	800427a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004274:	bf00      	nop
 8004276:	e000      	b.n	800427a <prvProcessReceivedCommands+0x1a6>
					break;
 8004278:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800427a:	4b08      	ldr	r3, [pc, #32]	@ (800429c <prvProcessReceivedCommands+0x1c8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	1d39      	adds	r1, r7, #4
 8004280:	2200      	movs	r2, #0
 8004282:	4618      	mov	r0, r3
 8004284:	f7fe fac6 	bl	8002814 <xQueueReceive>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	f47f af26 	bne.w	80040dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004290:	bf00      	nop
 8004292:	bf00      	nop
 8004294:	3730      	adds	r7, #48	@ 0x30
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	20000d98 	.word	0x20000d98

080042a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042a6:	e049      	b.n	800433c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	3304      	adds	r3, #4
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fd ffd3 	bl	800226c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02f      	beq.n	800433c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4413      	add	r3, r2
 80042e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d90e      	bls.n	800430c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042fa:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f7fd ff78 	bl	80021fa <vListInsert>
 800430a:	e017      	b.n	800433c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800430c:	2300      	movs	r3, #0
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	2300      	movs	r3, #0
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	2100      	movs	r1, #0
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7ff fd58 	bl	8003dcc <xTimerGenericCommand>
 800431c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10b      	bne.n	800433c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	603b      	str	r3, [r7, #0]
}
 8004336:	bf00      	nop
 8004338:	bf00      	nop
 800433a:	e7fd      	b.n	8004338 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800433c:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1b0      	bne.n	80042a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004346:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <prvSwitchTimerLists+0xc8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a04      	ldr	r2, [pc, #16]	@ (8004364 <prvSwitchTimerLists+0xc4>)
 8004352:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004354:	4a04      	ldr	r2, [pc, #16]	@ (8004368 <prvSwitchTimerLists+0xc8>)
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6013      	str	r3, [r2, #0]
}
 800435a:	bf00      	nop
 800435c:	3718      	adds	r7, #24
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000d90 	.word	0x20000d90
 8004368:	20000d94 	.word	0x20000d94

0800436c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004372:	f000 f969 	bl	8004648 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <prvCheckForValidListAndQueue+0x60>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d120      	bne.n	80043c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800437e:	4814      	ldr	r0, [pc, #80]	@ (80043d0 <prvCheckForValidListAndQueue+0x64>)
 8004380:	f7fd feea 	bl	8002158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004384:	4813      	ldr	r0, [pc, #76]	@ (80043d4 <prvCheckForValidListAndQueue+0x68>)
 8004386:	f7fd fee7 	bl	8002158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800438a:	4b13      	ldr	r3, [pc, #76]	@ (80043d8 <prvCheckForValidListAndQueue+0x6c>)
 800438c:	4a10      	ldr	r2, [pc, #64]	@ (80043d0 <prvCheckForValidListAndQueue+0x64>)
 800438e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004390:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <prvCheckForValidListAndQueue+0x70>)
 8004392:	4a10      	ldr	r2, [pc, #64]	@ (80043d4 <prvCheckForValidListAndQueue+0x68>)
 8004394:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4b11      	ldr	r3, [pc, #68]	@ (80043e0 <prvCheckForValidListAndQueue+0x74>)
 800439c:	4a11      	ldr	r2, [pc, #68]	@ (80043e4 <prvCheckForValidListAndQueue+0x78>)
 800439e:	2110      	movs	r1, #16
 80043a0:	200a      	movs	r0, #10
 80043a2:	f7fd fff7 	bl	8002394 <xQueueGenericCreateStatic>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4a08      	ldr	r2, [pc, #32]	@ (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80043ac:	4b07      	ldr	r3, [pc, #28]	@ (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d005      	beq.n	80043c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <prvCheckForValidListAndQueue+0x60>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	490b      	ldr	r1, [pc, #44]	@ (80043e8 <prvCheckForValidListAndQueue+0x7c>)
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fe fc1c 	bl	8002bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80043c0:	f000 f974 	bl	80046ac <vPortExitCritical>
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	20000d98 	.word	0x20000d98
 80043d0:	20000d68 	.word	0x20000d68
 80043d4:	20000d7c 	.word	0x20000d7c
 80043d8:	20000d90 	.word	0x20000d90
 80043dc:	20000d94 	.word	0x20000d94
 80043e0:	20000e44 	.word	0x20000e44
 80043e4:	20000da4 	.word	0x20000da4
 80043e8:	08004e84 	.word	0x08004e84

080043ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3b04      	subs	r3, #4
 80043fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3b04      	subs	r3, #4
 800440a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f023 0201 	bic.w	r2, r3, #1
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	3b04      	subs	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800441c:	4a0c      	ldr	r2, [pc, #48]	@ (8004450 <pxPortInitialiseStack+0x64>)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3b14      	subs	r3, #20
 8004426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f06f 0202 	mvn.w	r2, #2
 800443a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	3b20      	subs	r3, #32
 8004440:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004442:	68fb      	ldr	r3, [r7, #12]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3714      	adds	r7, #20
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	08004455 	.word	0x08004455

08004454 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800445e:	4b13      	ldr	r3, [pc, #76]	@ (80044ac <prvTaskExitError+0x58>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004466:	d00b      	beq.n	8004480 <prvTaskExitError+0x2c>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	60fb      	str	r3, [r7, #12]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <prvTaskExitError+0x28>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60bb      	str	r3, [r7, #8]
}
 8004492:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004494:	bf00      	nop
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d0fc      	beq.n	8004496 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000000c 	.word	0x2000000c

080044b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80044b0:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <pxCurrentTCBConst2>)
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f380 8809 	msr	PSP, r0
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f380 8811 	msr	BASEPRI, r0
 80044ca:	4770      	bx	lr
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst2>:
 80044d0:	20000868 	.word	0x20000868
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80044d8:	4808      	ldr	r0, [pc, #32]	@ (80044fc <prvPortStartFirstTask+0x24>)
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	6800      	ldr	r0, [r0, #0]
 80044de:	f380 8808 	msr	MSP, r0
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8814 	msr	CONTROL, r0
 80044ea:	b662      	cpsie	i
 80044ec:	b661      	cpsie	f
 80044ee:	f3bf 8f4f 	dsb	sy
 80044f2:	f3bf 8f6f 	isb	sy
 80044f6:	df00      	svc	0
 80044f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80044fa:	bf00      	nop
 80044fc:	e000ed08 	.word	0xe000ed08

08004500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b086      	sub	sp, #24
 8004504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004506:	4b47      	ldr	r3, [pc, #284]	@ (8004624 <xPortStartScheduler+0x124>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a47      	ldr	r2, [pc, #284]	@ (8004628 <xPortStartScheduler+0x128>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10b      	bne.n	8004528 <xPortStartScheduler+0x28>
	__asm volatile
 8004510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004514:	f383 8811 	msr	BASEPRI, r3
 8004518:	f3bf 8f6f 	isb	sy
 800451c:	f3bf 8f4f 	dsb	sy
 8004520:	613b      	str	r3, [r7, #16]
}
 8004522:	bf00      	nop
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004528:	4b3e      	ldr	r3, [pc, #248]	@ (8004624 <xPortStartScheduler+0x124>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3f      	ldr	r2, [pc, #252]	@ (800462c <xPortStartScheduler+0x12c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10b      	bne.n	800454a <xPortStartScheduler+0x4a>
	__asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60fb      	str	r3, [r7, #12]
}
 8004544:	bf00      	nop
 8004546:	bf00      	nop
 8004548:	e7fd      	b.n	8004546 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800454a:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <xPortStartScheduler+0x130>)
 800454c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	22ff      	movs	r2, #255	@ 0xff
 800455a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004564:	78fb      	ldrb	r3, [r7, #3]
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b31      	ldr	r3, [pc, #196]	@ (8004634 <xPortStartScheduler+0x134>)
 8004570:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004572:	4b31      	ldr	r3, [pc, #196]	@ (8004638 <xPortStartScheduler+0x138>)
 8004574:	2207      	movs	r2, #7
 8004576:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004578:	e009      	b.n	800458e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800457a:	4b2f      	ldr	r3, [pc, #188]	@ (8004638 <xPortStartScheduler+0x138>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	3b01      	subs	r3, #1
 8004580:	4a2d      	ldr	r2, [pc, #180]	@ (8004638 <xPortStartScheduler+0x138>)
 8004582:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800458e:	78fb      	ldrb	r3, [r7, #3]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b80      	cmp	r3, #128	@ 0x80
 8004598:	d0ef      	beq.n	800457a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800459a:	4b27      	ldr	r3, [pc, #156]	@ (8004638 <xPortStartScheduler+0x138>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f1c3 0307 	rsb	r3, r3, #7
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d00b      	beq.n	80045be <xPortStartScheduler+0xbe>
	__asm volatile
 80045a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60bb      	str	r3, [r7, #8]
}
 80045b8:	bf00      	nop
 80045ba:	bf00      	nop
 80045bc:	e7fd      	b.n	80045ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045be:	4b1e      	ldr	r3, [pc, #120]	@ (8004638 <xPortStartScheduler+0x138>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004638 <xPortStartScheduler+0x138>)
 80045c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004638 <xPortStartScheduler+0x138>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045d0:	4a19      	ldr	r2, [pc, #100]	@ (8004638 <xPortStartScheduler+0x138>)
 80045d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80045dc:	4b17      	ldr	r3, [pc, #92]	@ (800463c <xPortStartScheduler+0x13c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a16      	ldr	r2, [pc, #88]	@ (800463c <xPortStartScheduler+0x13c>)
 80045e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80045e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80045e8:	4b14      	ldr	r3, [pc, #80]	@ (800463c <xPortStartScheduler+0x13c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a13      	ldr	r2, [pc, #76]	@ (800463c <xPortStartScheduler+0x13c>)
 80045ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80045f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80045f4:	f000 f8da 	bl	80047ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80045f8:	4b11      	ldr	r3, [pc, #68]	@ (8004640 <xPortStartScheduler+0x140>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80045fe:	f000 f8f9 	bl	80047f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004602:	4b10      	ldr	r3, [pc, #64]	@ (8004644 <xPortStartScheduler+0x144>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a0f      	ldr	r2, [pc, #60]	@ (8004644 <xPortStartScheduler+0x144>)
 8004608:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800460c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800460e:	f7ff ff63 	bl	80044d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004612:	f7ff f831 	bl	8003678 <vTaskSwitchContext>
	prvTaskExitError();
 8004616:	f7ff ff1d 	bl	8004454 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800461a:	2300      	movs	r3, #0
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	e000ed00 	.word	0xe000ed00
 8004628:	410fc271 	.word	0x410fc271
 800462c:	410fc270 	.word	0x410fc270
 8004630:	e000e400 	.word	0xe000e400
 8004634:	20000e94 	.word	0x20000e94
 8004638:	20000e98 	.word	0x20000e98
 800463c:	e000ed20 	.word	0xe000ed20
 8004640:	2000000c 	.word	0x2000000c
 8004644:	e000ef34 	.word	0xe000ef34

08004648 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
	__asm volatile
 800464e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004652:	f383 8811 	msr	BASEPRI, r3
 8004656:	f3bf 8f6f 	isb	sy
 800465a:	f3bf 8f4f 	dsb	sy
 800465e:	607b      	str	r3, [r7, #4]
}
 8004660:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004662:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <vPortEnterCritical+0x5c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3301      	adds	r3, #1
 8004668:	4a0e      	ldr	r2, [pc, #56]	@ (80046a4 <vPortEnterCritical+0x5c>)
 800466a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800466c:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <vPortEnterCritical+0x5c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2b01      	cmp	r3, #1
 8004672:	d110      	bne.n	8004696 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004674:	4b0c      	ldr	r3, [pc, #48]	@ (80046a8 <vPortEnterCritical+0x60>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <vPortEnterCritical+0x4e>
	__asm volatile
 800467e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004682:	f383 8811 	msr	BASEPRI, r3
 8004686:	f3bf 8f6f 	isb	sy
 800468a:	f3bf 8f4f 	dsb	sy
 800468e:	603b      	str	r3, [r7, #0]
}
 8004690:	bf00      	nop
 8004692:	bf00      	nop
 8004694:	e7fd      	b.n	8004692 <vPortEnterCritical+0x4a>
	}
}
 8004696:	bf00      	nop
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	2000000c 	.word	0x2000000c
 80046a8:	e000ed04 	.word	0xe000ed04

080046ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80046b2:	4b12      	ldr	r3, [pc, #72]	@ (80046fc <vPortExitCritical+0x50>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <vPortExitCritical+0x26>
	__asm volatile
 80046ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046be:	f383 8811 	msr	BASEPRI, r3
 80046c2:	f3bf 8f6f 	isb	sy
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	607b      	str	r3, [r7, #4]
}
 80046cc:	bf00      	nop
 80046ce:	bf00      	nop
 80046d0:	e7fd      	b.n	80046ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80046d2:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <vPortExitCritical+0x50>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	4a08      	ldr	r2, [pc, #32]	@ (80046fc <vPortExitCritical+0x50>)
 80046da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80046dc:	4b07      	ldr	r3, [pc, #28]	@ (80046fc <vPortExitCritical+0x50>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <vPortExitCritical+0x44>
 80046e4:	2300      	movs	r3, #0
 80046e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f383 8811 	msr	BASEPRI, r3
}
 80046ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	2000000c 	.word	0x2000000c

08004700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004700:	f3ef 8009 	mrs	r0, PSP
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	4b15      	ldr	r3, [pc, #84]	@ (8004760 <pxCurrentTCBConst>)
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	f01e 0f10 	tst.w	lr, #16
 8004710:	bf08      	it	eq
 8004712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800471a:	6010      	str	r0, [r2, #0]
 800471c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004720:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004724:	f380 8811 	msr	BASEPRI, r0
 8004728:	f3bf 8f4f 	dsb	sy
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f7fe ffa2 	bl	8003678 <vTaskSwitchContext>
 8004734:	f04f 0000 	mov.w	r0, #0
 8004738:	f380 8811 	msr	BASEPRI, r0
 800473c:	bc09      	pop	{r0, r3}
 800473e:	6819      	ldr	r1, [r3, #0]
 8004740:	6808      	ldr	r0, [r1, #0]
 8004742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004746:	f01e 0f10 	tst.w	lr, #16
 800474a:	bf08      	it	eq
 800474c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004750:	f380 8809 	msr	PSP, r0
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	f3af 8000 	nop.w

08004760 <pxCurrentTCBConst>:
 8004760:	20000868 	.word	0x20000868
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
}
 8004780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004782:	f7fe febf 	bl	8003504 <xTaskIncrementTick>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d003      	beq.n	8004794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <xPortSysTickHandler+0x40>)
 800478e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	2300      	movs	r3, #0
 8004796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f383 8811 	msr	BASEPRI, r3
}
 800479e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80047a0:	bf00      	nop
 80047a2:	3708      	adds	r7, #8
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047b6:	4b0b      	ldr	r3, [pc, #44]	@ (80047e4 <vPortSetupTimerInterrupt+0x38>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047bc:	4b0a      	ldr	r3, [pc, #40]	@ (80047e8 <vPortSetupTimerInterrupt+0x3c>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0a      	ldr	r2, [pc, #40]	@ (80047ec <vPortSetupTimerInterrupt+0x40>)
 80047c2:	fba2 2303 	umull	r2, r3, r2, r3
 80047c6:	099b      	lsrs	r3, r3, #6
 80047c8:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <vPortSetupTimerInterrupt+0x44>)
 80047ca:	3b01      	subs	r3, #1
 80047cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047ce:	4b04      	ldr	r3, [pc, #16]	@ (80047e0 <vPortSetupTimerInterrupt+0x34>)
 80047d0:	2207      	movs	r2, #7
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	e000e010 	.word	0xe000e010
 80047e4:	e000e018 	.word	0xe000e018
 80047e8:	20000000 	.word	0x20000000
 80047ec:	10624dd3 	.word	0x10624dd3
 80047f0:	e000e014 	.word	0xe000e014

080047f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80047f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004804 <vPortEnableVFP+0x10>
 80047f8:	6801      	ldr	r1, [r0, #0]
 80047fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80047fe:	6001      	str	r1, [r0, #0]
 8004800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004802:	bf00      	nop
 8004804:	e000ed88 	.word	0xe000ed88

08004808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004808:	b480      	push	{r7}
 800480a:	b085      	sub	sp, #20
 800480c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800480e:	f3ef 8305 	mrs	r3, IPSR
 8004812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2b0f      	cmp	r3, #15
 8004818:	d915      	bls.n	8004846 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800481a:	4a18      	ldr	r2, [pc, #96]	@ (800487c <vPortValidateInterruptPriority+0x74>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4413      	add	r3, r2
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004824:	4b16      	ldr	r3, [pc, #88]	@ (8004880 <vPortValidateInterruptPriority+0x78>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	7afa      	ldrb	r2, [r7, #11]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20b      	bcs.n	8004846 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004846:	4b0f      	ldr	r3, [pc, #60]	@ (8004884 <vPortValidateInterruptPriority+0x7c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800484e:	4b0e      	ldr	r3, [pc, #56]	@ (8004888 <vPortValidateInterruptPriority+0x80>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d90b      	bls.n	800486e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800485a:	f383 8811 	msr	BASEPRI, r3
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	f3bf 8f4f 	dsb	sy
 8004866:	603b      	str	r3, [r7, #0]
}
 8004868:	bf00      	nop
 800486a:	bf00      	nop
 800486c:	e7fd      	b.n	800486a <vPortValidateInterruptPriority+0x62>
	}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000e3f0 	.word	0xe000e3f0
 8004880:	20000e94 	.word	0x20000e94
 8004884:	e000ed0c 	.word	0xe000ed0c
 8004888:	20000e98 	.word	0x20000e98

0800488c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004894:	2300      	movs	r3, #0
 8004896:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004898:	f7fe fd78 	bl	800338c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800489c:	4b5c      	ldr	r3, [pc, #368]	@ (8004a10 <pvPortMalloc+0x184>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d101      	bne.n	80048a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80048a4:	f000 f924 	bl	8004af0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80048a8:	4b5a      	ldr	r3, [pc, #360]	@ (8004a14 <pvPortMalloc+0x188>)
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4013      	ands	r3, r2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8095 	bne.w	80049e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01e      	beq.n	80048fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80048bc:	2208      	movs	r2, #8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4413      	add	r3, r2
 80048c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d015      	beq.n	80048fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f023 0307 	bic.w	r3, r3, #7
 80048d4:	3308      	adds	r3, #8
 80048d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <pvPortMalloc+0x6e>
	__asm volatile
 80048e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	617b      	str	r3, [r7, #20]
}
 80048f4:	bf00      	nop
 80048f6:	bf00      	nop
 80048f8:	e7fd      	b.n	80048f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d06f      	beq.n	80049e0 <pvPortMalloc+0x154>
 8004900:	4b45      	ldr	r3, [pc, #276]	@ (8004a18 <pvPortMalloc+0x18c>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	429a      	cmp	r2, r3
 8004908:	d86a      	bhi.n	80049e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800490a:	4b44      	ldr	r3, [pc, #272]	@ (8004a1c <pvPortMalloc+0x190>)
 800490c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800490e:	4b43      	ldr	r3, [pc, #268]	@ (8004a1c <pvPortMalloc+0x190>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004914:	e004      	b.n	8004920 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800491a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <pvPortMalloc+0xa6>
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1f1      	bne.n	8004916 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004932:	4b37      	ldr	r3, [pc, #220]	@ (8004a10 <pvPortMalloc+0x184>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004938:	429a      	cmp	r2, r3
 800493a:	d051      	beq.n	80049e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2208      	movs	r2, #8
 8004942:	4413      	add	r3, r2
 8004944:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	685a      	ldr	r2, [r3, #4]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	1ad2      	subs	r2, r2, r3
 8004956:	2308      	movs	r3, #8
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	429a      	cmp	r2, r3
 800495c:	d920      	bls.n	80049a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800495e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4413      	add	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00b      	beq.n	8004988 <pvPortMalloc+0xfc>
	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	613b      	str	r3, [r7, #16]
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	e7fd      	b.n	8004984 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	1ad2      	subs	r2, r2, r3
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800499a:	69b8      	ldr	r0, [r7, #24]
 800499c:	f000 f90a 	bl	8004bb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a18 <pvPortMalloc+0x18c>)
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004a18 <pvPortMalloc+0x18c>)
 80049ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049ae:	4b1a      	ldr	r3, [pc, #104]	@ (8004a18 <pvPortMalloc+0x18c>)
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4b1b      	ldr	r3, [pc, #108]	@ (8004a20 <pvPortMalloc+0x194>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d203      	bcs.n	80049c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049ba:	4b17      	ldr	r3, [pc, #92]	@ (8004a18 <pvPortMalloc+0x18c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a18      	ldr	r2, [pc, #96]	@ (8004a20 <pvPortMalloc+0x194>)
 80049c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	4b13      	ldr	r3, [pc, #76]	@ (8004a14 <pvPortMalloc+0x188>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	431a      	orrs	r2, r3
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80049d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80049d6:	4b13      	ldr	r3, [pc, #76]	@ (8004a24 <pvPortMalloc+0x198>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3301      	adds	r3, #1
 80049dc:	4a11      	ldr	r2, [pc, #68]	@ (8004a24 <pvPortMalloc+0x198>)
 80049de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80049e0:	f7fe fce2 	bl	80033a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f003 0307 	and.w	r3, r3, #7
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <pvPortMalloc+0x17a>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	60fb      	str	r3, [r7, #12]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <pvPortMalloc+0x176>
	return pvReturn;
 8004a06:	69fb      	ldr	r3, [r7, #28]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	20004aa4 	.word	0x20004aa4
 8004a14:	20004ab8 	.word	0x20004ab8
 8004a18:	20004aa8 	.word	0x20004aa8
 8004a1c:	20004a9c 	.word	0x20004a9c
 8004a20:	20004aac 	.word	0x20004aac
 8004a24:	20004ab0 	.word	0x20004ab0

08004a28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d04f      	beq.n	8004ada <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004a3a:	2308      	movs	r3, #8
 8004a3c:	425b      	negs	r3, r3
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4413      	add	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ae4 <vPortFree+0xbc>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <vPortFree+0x46>
	__asm volatile
 8004a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5a:	f383 8811 	msr	BASEPRI, r3
 8004a5e:	f3bf 8f6f 	isb	sy
 8004a62:	f3bf 8f4f 	dsb	sy
 8004a66:	60fb      	str	r3, [r7, #12]
}
 8004a68:	bf00      	nop
 8004a6a:	bf00      	nop
 8004a6c:	e7fd      	b.n	8004a6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00b      	beq.n	8004a8e <vPortFree+0x66>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	60bb      	str	r3, [r7, #8]
}
 8004a88:	bf00      	nop
 8004a8a:	bf00      	nop
 8004a8c:	e7fd      	b.n	8004a8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	4b14      	ldr	r3, [pc, #80]	@ (8004ae4 <vPortFree+0xbc>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4013      	ands	r3, r2
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01e      	beq.n	8004ada <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d11a      	bne.n	8004ada <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ae4 <vPortFree+0xbc>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	43db      	mvns	r3, r3
 8004aae:	401a      	ands	r2, r3
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ab4:	f7fe fc6a 	bl	800338c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	685a      	ldr	r2, [r3, #4]
 8004abc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ae8 <vPortFree+0xc0>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	4a09      	ldr	r2, [pc, #36]	@ (8004ae8 <vPortFree+0xc0>)
 8004ac4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f000 f874 	bl	8004bb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004acc:	4b07      	ldr	r3, [pc, #28]	@ (8004aec <vPortFree+0xc4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	4a06      	ldr	r2, [pc, #24]	@ (8004aec <vPortFree+0xc4>)
 8004ad4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004ad6:	f7fe fc67 	bl	80033a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ada:	bf00      	nop
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20004ab8 	.word	0x20004ab8
 8004ae8:	20004aa8 	.word	0x20004aa8
 8004aec:	20004ab4 	.word	0x20004ab4

08004af0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004af6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004afa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004afc:	4b27      	ldr	r3, [pc, #156]	@ (8004b9c <prvHeapInit+0xac>)
 8004afe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00c      	beq.n	8004b24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3307      	adds	r3, #7
 8004b0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b18:	68ba      	ldr	r2, [r7, #8]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b9c <prvHeapInit+0xac>)
 8004b20:	4413      	add	r3, r2
 8004b22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ba0 <prvHeapInit+0xb0>)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004ba0 <prvHeapInit+0xb0>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	4413      	add	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	f023 0307 	bic.w	r3, r3, #7
 8004b4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a15      	ldr	r2, [pc, #84]	@ (8004ba4 <prvHeapInit+0xb4>)
 8004b50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004b52:	4b14      	ldr	r3, [pc, #80]	@ (8004ba4 <prvHeapInit+0xb4>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2200      	movs	r2, #0
 8004b58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004b5a:	4b12      	ldr	r3, [pc, #72]	@ (8004ba4 <prvHeapInit+0xb4>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <prvHeapInit+0xb4>)
 8004b72:	681a      	ldr	r2, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004ba8 <prvHeapInit+0xb8>)
 8004b7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	4a09      	ldr	r2, [pc, #36]	@ (8004bac <prvHeapInit+0xbc>)
 8004b86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b88:	4b09      	ldr	r3, [pc, #36]	@ (8004bb0 <prvHeapInit+0xc0>)
 8004b8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004b8e:	601a      	str	r2, [r3, #0]
}
 8004b90:	bf00      	nop
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	20000e9c 	.word	0x20000e9c
 8004ba0:	20004a9c 	.word	0x20004a9c
 8004ba4:	20004aa4 	.word	0x20004aa4
 8004ba8:	20004aac 	.word	0x20004aac
 8004bac:	20004aa8 	.word	0x20004aa8
 8004bb0:	20004ab8 	.word	0x20004ab8

08004bb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bbc:	4b28      	ldr	r3, [pc, #160]	@ (8004c60 <prvInsertBlockIntoFreeList+0xac>)
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	e002      	b.n	8004bc8 <prvInsertBlockIntoFreeList+0x14>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60fb      	str	r3, [r7, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d8f7      	bhi.n	8004bc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	68ba      	ldr	r2, [r7, #8]
 8004bdc:	4413      	add	r3, r2
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d108      	bne.n	8004bf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	441a      	add	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	441a      	add	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d118      	bne.n	8004c3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	4b15      	ldr	r3, [pc, #84]	@ (8004c64 <prvInsertBlockIntoFreeList+0xb0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d00d      	beq.n	8004c32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	e008      	b.n	8004c44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c32:	4b0c      	ldr	r3, [pc, #48]	@ (8004c64 <prvInsertBlockIntoFreeList+0xb0>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e003      	b.n	8004c44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d002      	beq.n	8004c52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c52:	bf00      	nop
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	20004a9c 	.word	0x20004a9c
 8004c64:	20004aa4 	.word	0x20004aa4

08004c68 <memset>:
 8004c68:	4402      	add	r2, r0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d100      	bne.n	8004c72 <memset+0xa>
 8004c70:	4770      	bx	lr
 8004c72:	f803 1b01 	strb.w	r1, [r3], #1
 8004c76:	e7f9      	b.n	8004c6c <memset+0x4>

08004c78 <_reclaim_reent>:
 8004c78:	4b29      	ldr	r3, [pc, #164]	@ (8004d20 <_reclaim_reent+0xa8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4283      	cmp	r3, r0
 8004c7e:	b570      	push	{r4, r5, r6, lr}
 8004c80:	4604      	mov	r4, r0
 8004c82:	d04b      	beq.n	8004d1c <_reclaim_reent+0xa4>
 8004c84:	69c3      	ldr	r3, [r0, #28]
 8004c86:	b1ab      	cbz	r3, 8004cb4 <_reclaim_reent+0x3c>
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	b16b      	cbz	r3, 8004ca8 <_reclaim_reent+0x30>
 8004c8c:	2500      	movs	r5, #0
 8004c8e:	69e3      	ldr	r3, [r4, #28]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	5959      	ldr	r1, [r3, r5]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d13b      	bne.n	8004d10 <_reclaim_reent+0x98>
 8004c98:	3504      	adds	r5, #4
 8004c9a:	2d80      	cmp	r5, #128	@ 0x80
 8004c9c:	d1f7      	bne.n	8004c8e <_reclaim_reent+0x16>
 8004c9e:	69e3      	ldr	r3, [r4, #28]
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	68d9      	ldr	r1, [r3, #12]
 8004ca4:	f000 f872 	bl	8004d8c <_free_r>
 8004ca8:	69e3      	ldr	r3, [r4, #28]
 8004caa:	6819      	ldr	r1, [r3, #0]
 8004cac:	b111      	cbz	r1, 8004cb4 <_reclaim_reent+0x3c>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	f000 f86c 	bl	8004d8c <_free_r>
 8004cb4:	6961      	ldr	r1, [r4, #20]
 8004cb6:	b111      	cbz	r1, 8004cbe <_reclaim_reent+0x46>
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f000 f867 	bl	8004d8c <_free_r>
 8004cbe:	69e1      	ldr	r1, [r4, #28]
 8004cc0:	b111      	cbz	r1, 8004cc8 <_reclaim_reent+0x50>
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f862 	bl	8004d8c <_free_r>
 8004cc8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004cca:	b111      	cbz	r1, 8004cd2 <_reclaim_reent+0x5a>
 8004ccc:	4620      	mov	r0, r4
 8004cce:	f000 f85d 	bl	8004d8c <_free_r>
 8004cd2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cd4:	b111      	cbz	r1, 8004cdc <_reclaim_reent+0x64>
 8004cd6:	4620      	mov	r0, r4
 8004cd8:	f000 f858 	bl	8004d8c <_free_r>
 8004cdc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8004cde:	b111      	cbz	r1, 8004ce6 <_reclaim_reent+0x6e>
 8004ce0:	4620      	mov	r0, r4
 8004ce2:	f000 f853 	bl	8004d8c <_free_r>
 8004ce6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8004ce8:	b111      	cbz	r1, 8004cf0 <_reclaim_reent+0x78>
 8004cea:	4620      	mov	r0, r4
 8004cec:	f000 f84e 	bl	8004d8c <_free_r>
 8004cf0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8004cf2:	b111      	cbz	r1, 8004cfa <_reclaim_reent+0x82>
 8004cf4:	4620      	mov	r0, r4
 8004cf6:	f000 f849 	bl	8004d8c <_free_r>
 8004cfa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004cfc:	b111      	cbz	r1, 8004d04 <_reclaim_reent+0x8c>
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f000 f844 	bl	8004d8c <_free_r>
 8004d04:	6a23      	ldr	r3, [r4, #32]
 8004d06:	b14b      	cbz	r3, 8004d1c <_reclaim_reent+0xa4>
 8004d08:	4620      	mov	r0, r4
 8004d0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004d0e:	4718      	bx	r3
 8004d10:	680e      	ldr	r6, [r1, #0]
 8004d12:	4620      	mov	r0, r4
 8004d14:	f000 f83a 	bl	8004d8c <_free_r>
 8004d18:	4631      	mov	r1, r6
 8004d1a:	e7bb      	b.n	8004c94 <_reclaim_reent+0x1c>
 8004d1c:	bd70      	pop	{r4, r5, r6, pc}
 8004d1e:	bf00      	nop
 8004d20:	20000010 	.word	0x20000010

08004d24 <__libc_init_array>:
 8004d24:	b570      	push	{r4, r5, r6, lr}
 8004d26:	4d0d      	ldr	r5, [pc, #52]	@ (8004d5c <__libc_init_array+0x38>)
 8004d28:	4c0d      	ldr	r4, [pc, #52]	@ (8004d60 <__libc_init_array+0x3c>)
 8004d2a:	1b64      	subs	r4, r4, r5
 8004d2c:	10a4      	asrs	r4, r4, #2
 8004d2e:	2600      	movs	r6, #0
 8004d30:	42a6      	cmp	r6, r4
 8004d32:	d109      	bne.n	8004d48 <__libc_init_array+0x24>
 8004d34:	4d0b      	ldr	r5, [pc, #44]	@ (8004d64 <__libc_init_array+0x40>)
 8004d36:	4c0c      	ldr	r4, [pc, #48]	@ (8004d68 <__libc_init_array+0x44>)
 8004d38:	f000 f87e 	bl	8004e38 <_init>
 8004d3c:	1b64      	subs	r4, r4, r5
 8004d3e:	10a4      	asrs	r4, r4, #2
 8004d40:	2600      	movs	r6, #0
 8004d42:	42a6      	cmp	r6, r4
 8004d44:	d105      	bne.n	8004d52 <__libc_init_array+0x2e>
 8004d46:	bd70      	pop	{r4, r5, r6, pc}
 8004d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4c:	4798      	blx	r3
 8004d4e:	3601      	adds	r6, #1
 8004d50:	e7ee      	b.n	8004d30 <__libc_init_array+0xc>
 8004d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d56:	4798      	blx	r3
 8004d58:	3601      	adds	r6, #1
 8004d5a:	e7f2      	b.n	8004d42 <__libc_init_array+0x1e>
 8004d5c:	08004f18 	.word	0x08004f18
 8004d60:	08004f18 	.word	0x08004f18
 8004d64:	08004f18 	.word	0x08004f18
 8004d68:	08004f1c 	.word	0x08004f1c

08004d6c <__retarget_lock_acquire_recursive>:
 8004d6c:	4770      	bx	lr

08004d6e <__retarget_lock_release_recursive>:
 8004d6e:	4770      	bx	lr

08004d70 <memcpy>:
 8004d70:	440a      	add	r2, r1
 8004d72:	4291      	cmp	r1, r2
 8004d74:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d78:	d100      	bne.n	8004d7c <memcpy+0xc>
 8004d7a:	4770      	bx	lr
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d86:	4291      	cmp	r1, r2
 8004d88:	d1f9      	bne.n	8004d7e <memcpy+0xe>
 8004d8a:	bd10      	pop	{r4, pc}

08004d8c <_free_r>:
 8004d8c:	b538      	push	{r3, r4, r5, lr}
 8004d8e:	4605      	mov	r5, r0
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d041      	beq.n	8004e18 <_free_r+0x8c>
 8004d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d98:	1f0c      	subs	r4, r1, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	bfb8      	it	lt
 8004d9e:	18e4      	addlt	r4, r4, r3
 8004da0:	f000 f83e 	bl	8004e20 <__malloc_lock>
 8004da4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e1c <_free_r+0x90>)
 8004da6:	6813      	ldr	r3, [r2, #0]
 8004da8:	b933      	cbnz	r3, 8004db8 <_free_r+0x2c>
 8004daa:	6063      	str	r3, [r4, #4]
 8004dac:	6014      	str	r4, [r2, #0]
 8004dae:	4628      	mov	r0, r5
 8004db0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004db4:	f000 b83a 	b.w	8004e2c <__malloc_unlock>
 8004db8:	42a3      	cmp	r3, r4
 8004dba:	d908      	bls.n	8004dce <_free_r+0x42>
 8004dbc:	6820      	ldr	r0, [r4, #0]
 8004dbe:	1821      	adds	r1, r4, r0
 8004dc0:	428b      	cmp	r3, r1
 8004dc2:	bf01      	itttt	eq
 8004dc4:	6819      	ldreq	r1, [r3, #0]
 8004dc6:	685b      	ldreq	r3, [r3, #4]
 8004dc8:	1809      	addeq	r1, r1, r0
 8004dca:	6021      	streq	r1, [r4, #0]
 8004dcc:	e7ed      	b.n	8004daa <_free_r+0x1e>
 8004dce:	461a      	mov	r2, r3
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b10b      	cbz	r3, 8004dd8 <_free_r+0x4c>
 8004dd4:	42a3      	cmp	r3, r4
 8004dd6:	d9fa      	bls.n	8004dce <_free_r+0x42>
 8004dd8:	6811      	ldr	r1, [r2, #0]
 8004dda:	1850      	adds	r0, r2, r1
 8004ddc:	42a0      	cmp	r0, r4
 8004dde:	d10b      	bne.n	8004df8 <_free_r+0x6c>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	4401      	add	r1, r0
 8004de4:	1850      	adds	r0, r2, r1
 8004de6:	4283      	cmp	r3, r0
 8004de8:	6011      	str	r1, [r2, #0]
 8004dea:	d1e0      	bne.n	8004dae <_free_r+0x22>
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	6053      	str	r3, [r2, #4]
 8004df2:	4408      	add	r0, r1
 8004df4:	6010      	str	r0, [r2, #0]
 8004df6:	e7da      	b.n	8004dae <_free_r+0x22>
 8004df8:	d902      	bls.n	8004e00 <_free_r+0x74>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	602b      	str	r3, [r5, #0]
 8004dfe:	e7d6      	b.n	8004dae <_free_r+0x22>
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	1821      	adds	r1, r4, r0
 8004e04:	428b      	cmp	r3, r1
 8004e06:	bf04      	itt	eq
 8004e08:	6819      	ldreq	r1, [r3, #0]
 8004e0a:	685b      	ldreq	r3, [r3, #4]
 8004e0c:	6063      	str	r3, [r4, #4]
 8004e0e:	bf04      	itt	eq
 8004e10:	1809      	addeq	r1, r1, r0
 8004e12:	6021      	streq	r1, [r4, #0]
 8004e14:	6054      	str	r4, [r2, #4]
 8004e16:	e7ca      	b.n	8004dae <_free_r+0x22>
 8004e18:	bd38      	pop	{r3, r4, r5, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20004bf8 	.word	0x20004bf8

08004e20 <__malloc_lock>:
 8004e20:	4801      	ldr	r0, [pc, #4]	@ (8004e28 <__malloc_lock+0x8>)
 8004e22:	f7ff bfa3 	b.w	8004d6c <__retarget_lock_acquire_recursive>
 8004e26:	bf00      	nop
 8004e28:	20004bf4 	.word	0x20004bf4

08004e2c <__malloc_unlock>:
 8004e2c:	4801      	ldr	r0, [pc, #4]	@ (8004e34 <__malloc_unlock+0x8>)
 8004e2e:	f7ff bf9e 	b.w	8004d6e <__retarget_lock_release_recursive>
 8004e32:	bf00      	nop
 8004e34:	20004bf4 	.word	0x20004bf4

08004e38 <_init>:
 8004e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e3a:	bf00      	nop
 8004e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e3e:	bc08      	pop	{r3}
 8004e40:	469e      	mov	lr, r3
 8004e42:	4770      	bx	lr

08004e44 <_fini>:
 8004e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e46:	bf00      	nop
 8004e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e4a:	bc08      	pop	{r3}
 8004e4c:	469e      	mov	lr, r3
 8004e4e:	4770      	bx	lr
