
LAB_6_ADVANCED_GENERIC_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08006344  08006344  00007344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006514  08006514  00008090  2**0
                  CONTENTS
  4 .ARM          00000008  08006514  08006514  00007514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800651c  0800651c  00008090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800651c  0800651c  0000751c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006520  08006520  00007520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08006524  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008090  2**0
                  CONTENTS
 10 .bss          00004c70  20000090  20000090  00008090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d00  20004d00  00008090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b45  00000000  00000000  000080c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031df  00000000  00000000  0001fc05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f0  00000000  00000000  00022de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f82  00000000  00000000  000241d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003846  00000000  00000000  0002515a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016085  00000000  00000000  000289a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5e20  00000000  00000000  0003ea25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114845  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005934  00000000  00000000  00114888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  0011a1bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800632c 	.word	0x0800632c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800632c 	.word	0x0800632c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fc14 	bl	8000da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 f884 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 f916 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f8ea 	bl	8000758 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f002 fab6 	bl	8002af4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a25      	ldr	r2, [pc, #148]	@ (8000620 <main+0xb0>)
 800058a:	2100      	movs	r1, #0
 800058c:	4825      	ldr	r0, [pc, #148]	@ (8000624 <main+0xb4>)
 800058e:	f002 fafb 	bl	8002b88 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a24      	ldr	r2, [pc, #144]	@ (8000628 <main+0xb8>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 8000598:	4a24      	ldr	r2, [pc, #144]	@ (800062c <main+0xbc>)
 800059a:	2100      	movs	r1, #0
 800059c:	4824      	ldr	r0, [pc, #144]	@ (8000630 <main+0xc0>)
 800059e:	f002 faf3 	bl	8002b88 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a23      	ldr	r2, [pc, #140]	@ (8000634 <main+0xc4>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 80005a8:	4a23      	ldr	r2, [pc, #140]	@ (8000638 <main+0xc8>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	4823      	ldr	r0, [pc, #140]	@ (800063c <main+0xcc>)
 80005ae:	f002 faeb 	bl	8002b88 <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a22      	ldr	r2, [pc, #136]	@ (8000640 <main+0xd0>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of LED3_Task */
  LED3_TaskHandle = osThreadNew(StartLED3_Task, NULL, &LED3_Task_attributes);
 80005b8:	4a22      	ldr	r2, [pc, #136]	@ (8000644 <main+0xd4>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	4822      	ldr	r0, [pc, #136]	@ (8000648 <main+0xd8>)
 80005be:	f002 fae3 	bl	8002b88 <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a21      	ldr	r2, [pc, #132]	@ (800064c <main+0xdc>)
 80005c6:	6013      	str	r3, [r2, #0]

  /* creation of LED4_Task */
  LED4_TaskHandle = osThreadNew(StartLED4_Task, NULL, &LED4_Task_attributes);
 80005c8:	4a21      	ldr	r2, [pc, #132]	@ (8000650 <main+0xe0>)
 80005ca:	2100      	movs	r1, #0
 80005cc:	4821      	ldr	r0, [pc, #132]	@ (8000654 <main+0xe4>)
 80005ce:	f002 fadb 	bl	8002b88 <osThreadNew>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a20      	ldr	r2, [pc, #128]	@ (8000658 <main+0xe8>)
 80005d6:	6013      	str	r3, [r2, #0]

  /* creation of LedGenericTask */
  LedGeneric1TaskHandle = osThreadNew(StartLedGenericTask, &led1, &LedGenericTask_attributes);
 80005d8:	4a20      	ldr	r2, [pc, #128]	@ (800065c <main+0xec>)
 80005da:	4921      	ldr	r1, [pc, #132]	@ (8000660 <main+0xf0>)
 80005dc:	4821      	ldr	r0, [pc, #132]	@ (8000664 <main+0xf4>)
 80005de:	f002 fad3 	bl	8002b88 <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a20      	ldr	r2, [pc, #128]	@ (8000668 <main+0xf8>)
 80005e6:	6013      	str	r3, [r2, #0]
  LedGeneric2TaskHandle = osThreadNew(StartLedGenericTask, &led2, &LedGenericTask_attributes);
 80005e8:	4a1c      	ldr	r2, [pc, #112]	@ (800065c <main+0xec>)
 80005ea:	4920      	ldr	r1, [pc, #128]	@ (800066c <main+0xfc>)
 80005ec:	481d      	ldr	r0, [pc, #116]	@ (8000664 <main+0xf4>)
 80005ee:	f002 facb 	bl	8002b88 <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000670 <main+0x100>)
 80005f6:	6013      	str	r3, [r2, #0]
  LedGeneric3TaskHandle = osThreadNew(StartLedGenericTask, &led3, &LedGenericTask_attributes);
 80005f8:	4a18      	ldr	r2, [pc, #96]	@ (800065c <main+0xec>)
 80005fa:	491e      	ldr	r1, [pc, #120]	@ (8000674 <main+0x104>)
 80005fc:	4819      	ldr	r0, [pc, #100]	@ (8000664 <main+0xf4>)
 80005fe:	f002 fac3 	bl	8002b88 <osThreadNew>
 8000602:	4603      	mov	r3, r0
 8000604:	4a1c      	ldr	r2, [pc, #112]	@ (8000678 <main+0x108>)
 8000606:	6013      	str	r3, [r2, #0]
  LedGeneric4TaskHandle = osThreadNew(StartLedGenericTask, &led4, &LedGenericTask_attributes);
 8000608:	4a14      	ldr	r2, [pc, #80]	@ (800065c <main+0xec>)
 800060a:	491c      	ldr	r1, [pc, #112]	@ (800067c <main+0x10c>)
 800060c:	4815      	ldr	r0, [pc, #84]	@ (8000664 <main+0xf4>)
 800060e:	f002 fabb 	bl	8002b88 <osThreadNew>
 8000612:	4603      	mov	r3, r0
 8000614:	4a1a      	ldr	r2, [pc, #104]	@ (8000680 <main+0x110>)
 8000616:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000618:	f002 fa90 	bl	8002b3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <main+0xac>
 8000620:	080063f0 	.word	0x080063f0
 8000624:	08000851 	.word	0x08000851
 8000628:	2000015c 	.word	0x2000015c
 800062c:	08006414 	.word	0x08006414
 8000630:	08000861 	.word	0x08000861
 8000634:	20000160 	.word	0x20000160
 8000638:	08006438 	.word	0x08006438
 800063c:	08000871 	.word	0x08000871
 8000640:	20000164 	.word	0x20000164
 8000644:	0800645c 	.word	0x0800645c
 8000648:	08000881 	.word	0x08000881
 800064c:	20000168 	.word	0x20000168
 8000650:	08006480 	.word	0x08006480
 8000654:	08000891 	.word	0x08000891
 8000658:	2000016c 	.word	0x2000016c
 800065c:	080064a4 	.word	0x080064a4
 8000660:	20000000 	.word	0x20000000
 8000664:	080008a1 	.word	0x080008a1
 8000668:	20000170 	.word	0x20000170
 800066c:	2000000c 	.word	0x2000000c
 8000670:	20000174 	.word	0x20000174
 8000674:	20000018 	.word	0x20000018
 8000678:	20000178 	.word	0x20000178
 800067c:	20000024 	.word	0x20000024
 8000680:	2000017c 	.word	0x2000017c

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	@ 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	@ 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f005 f974 	bl	8005980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	@ (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	@ (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e0:	2301      	movs	r3, #1
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ea:	2302      	movs	r3, #2
 80006ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000702:	2307      	movs	r3, #7
 8000704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000706:	f107 0320 	add.w	r3, r7, #32
 800070a:	4618      	mov	r0, r3
 800070c:	f000 fe3c 	bl	8001388 <HAL_RCC_OscConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000716:	f000 f9bd 	bl	8000a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071a:	230f      	movs	r3, #15
 800071c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071e:	2302      	movs	r3, #2
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000726:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000730:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2105      	movs	r1, #5
 8000738:	4618      	mov	r0, r3
 800073a:	f001 f89d 	bl	8001878 <HAL_RCC_ClockConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000744:	f000 f9a6 	bl	8000a94 <Error_Handler>
  }
}
 8000748:	bf00      	nop
 800074a:	3750      	adds	r7, #80	@ 0x50
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800075c:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800075e:	4a12      	ldr	r2, [pc, #72]	@ (80007a8 <MX_USART2_UART_Init+0x50>)
 8000760:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000764:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000768:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000770:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800077c:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800077e:	220c      	movs	r2, #12
 8000780:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000788:	4b06      	ldr	r3, [pc, #24]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	@ (80007a4 <MX_USART2_UART_Init+0x4c>)
 8000790:	f001 fd60 	bl	8002254 <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079a:	f000 f97b 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000114 	.word	0x20000114
 80007a8:	40004400 	.word	0x40004400

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b20      	ldr	r3, [pc, #128]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1f      	ldr	r2, [pc, #124]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_GPIO_Init+0x9c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x9c>)
 8000804:	f043 0308 	orr.w	r3, r3, #8
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x9c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0308 	and.w	r3, r3, #8
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <MX_GPIO_Init+0xa0>)
 800081e:	f000 fd7f 	bl	8001320 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000822:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_GPIO_Init+0xa0>)
 800083c:	f000 fbd4 	bl	8000fe8 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020c00 	.word	0x40020c00

08000850 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(1);
 8000858:	2001      	movs	r0, #1
 800085a:	f002 fa74 	bl	8002d46 <osDelay>
 800085e:	e7fb      	b.n	8000858 <StartDefaultTask+0x8>

08000860 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f002 fa6c 	bl	8002d46 <osDelay>
 800086e:	e7fb      	b.n	8000868 <StartLED1_Task+0x8>

08000870 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f002 fa64 	bl	8002d46 <osDelay>
 800087e:	e7fb      	b.n	8000878 <StartLED2_Task+0x8>

08000880 <StartLED3_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED3_Task */
void StartLED3_Task(void *argument)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED3_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f002 fa5c 	bl	8002d46 <osDelay>
 800088e:	e7fb      	b.n	8000888 <StartLED3_Task+0x8>

08000890 <StartLED4_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED4_Task */
void StartLED4_Task(void *argument)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED4_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000898:	2001      	movs	r0, #1
 800089a:	f002 fa54 	bl	8002d46 <osDelay>
 800089e:	e7fb      	b.n	8000898 <StartLED4_Task+0x8>

080008a0 <StartLedGenericTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLedGenericTask */
void StartLedGenericTask(void *argument)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLedGenericTask */
	ala:
	Ala_Struct_LedConfig ala;
	if (argument != NULL)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d006      	beq.n	80008bc <StartLedGenericTask+0x1c>
	{
		ala = *(Ala_Struct_LedConfig*) argument;
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	f107 030c 	add.w	r3, r7, #12
 80008b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80008b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80008ba:	e006      	b.n	80008ca <StartLedGenericTask+0x2a>
	}
	else
	{
		// Default Configuration If NULL Is Passed
		ala.delay   = 1000;
 80008bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c0:	81bb      	strh	r3, [r7, #12]
		ala.pin     = GPIO_PIN_0;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
		ala.port    = GPIOA;
 80008c6:	4b5f      	ldr	r3, [pc, #380]	@ (8000a44 <StartLedGenericTask+0x1a4>)
 80008c8:	617b      	str	r3, [r7, #20]
	}
	osThreadId_t currentTaskHandle 	= osThreadGetId();
 80008ca:	f002 f9ef 	bl	8002cac <osThreadGetId>
 80008ce:	61b8      	str	r0, [r7, #24]
	uint8_t suspendThreshold 		= 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	77fb      	strb	r3, [r7, #31]
	uint8_t taskId 					= 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	77bb      	strb	r3, [r7, #30]
	if (currentTaskHandle == LedGeneric1TaskHandle)
 80008d8:	4b5b      	ldr	r3, [pc, #364]	@ (8000a48 <StartLedGenericTask+0x1a8>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	429a      	cmp	r2, r3
 80008e0:	d104      	bne.n	80008ec <StartLedGenericTask+0x4c>
	{
		taskId = 1;
 80008e2:	2301      	movs	r3, #1
 80008e4:	77bb      	strb	r3, [r7, #30]
		suspendThreshold = 10; // LED1 suspends after 10 cycles
 80008e6:	230a      	movs	r3, #10
 80008e8:	77fb      	strb	r3, [r7, #31]
 80008ea:	e01c      	b.n	8000926 <StartLedGenericTask+0x86>
	}
	else if (currentTaskHandle == LedGeneric2TaskHandle)
 80008ec:	4b57      	ldr	r3, [pc, #348]	@ (8000a4c <StartLedGenericTask+0x1ac>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	69ba      	ldr	r2, [r7, #24]
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d104      	bne.n	8000900 <StartLedGenericTask+0x60>
	{
		taskId = 2;
 80008f6:	2302      	movs	r3, #2
 80008f8:	77bb      	strb	r3, [r7, #30]
		suspendThreshold = 20; // LED2 suspends after 20 cycles
 80008fa:	2314      	movs	r3, #20
 80008fc:	77fb      	strb	r3, [r7, #31]
 80008fe:	e012      	b.n	8000926 <StartLedGenericTask+0x86>
	}
	else if (currentTaskHandle == LedGeneric3TaskHandle)
 8000900:	4b53      	ldr	r3, [pc, #332]	@ (8000a50 <StartLedGenericTask+0x1b0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	69ba      	ldr	r2, [r7, #24]
 8000906:	429a      	cmp	r2, r3
 8000908:	d104      	bne.n	8000914 <StartLedGenericTask+0x74>
	{
		taskId = 3;
 800090a:	2303      	movs	r3, #3
 800090c:	77bb      	strb	r3, [r7, #30]
		suspendThreshold = 30; // LED3 suspends after 30 cycles
 800090e:	231e      	movs	r3, #30
 8000910:	77fb      	strb	r3, [r7, #31]
 8000912:	e008      	b.n	8000926 <StartLedGenericTask+0x86>
	}
	else if (currentTaskHandle == LedGeneric4TaskHandle)
 8000914:	4b4f      	ldr	r3, [pc, #316]	@ (8000a54 <StartLedGenericTask+0x1b4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	429a      	cmp	r2, r3
 800091c:	d103      	bne.n	8000926 <StartLedGenericTask+0x86>
	{
		taskId = 4;
 800091e:	2304      	movs	r3, #4
 8000920:	77bb      	strb	r3, [r7, #30]
		suspendThreshold = 40; // LED4 suspends after 40 cycles
 8000922:	2328      	movs	r3, #40	@ 0x28
 8000924:	77fb      	strb	r3, [r7, #31]
	}
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(ala.port, ala.pin);
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	b292      	uxth	r2, r2
 800092c:	4611      	mov	r1, r2
 800092e:	4618      	mov	r0, r3
 8000930:	f000 fd0f 	bl	8001352 <HAL_GPIO_TogglePin>
		osDelay(ala.delay);
 8000934:	89bb      	ldrh	r3, [r7, #12]
 8000936:	4618      	mov	r0, r3
 8000938:	f002 fa05 	bl	8002d46 <osDelay>
		mycounter++;
 800093c:	4b46      	ldr	r3, [pc, #280]	@ (8000a58 <StartLedGenericTask+0x1b8>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b44      	ldr	r3, [pc, #272]	@ (8000a58 <StartLedGenericTask+0x1b8>)
 8000946:	701a      	strb	r2, [r3, #0]
		if (mycounter >= suspendThreshold)
 8000948:	4b43      	ldr	r3, [pc, #268]	@ (8000a58 <StartLedGenericTask+0x1b8>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	7ffa      	ldrb	r2, [r7, #31]
 800094e:	429a      	cmp	r2, r3
 8000950:	d8e9      	bhi.n	8000926 <StartLedGenericTask+0x86>
		{
			HAL_GPIO_WritePin(ala.port, ala.pin, GPIO_PIN_RESET);
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	693a      	ldr	r2, [r7, #16]
 8000956:	b291      	uxth	r1, r2
 8000958:	2200      	movs	r2, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f000 fce0 	bl	8001320 <HAL_GPIO_WritePin>
			taskENTER_CRITICAL();
 8000960:	f004 fcca 	bl	80052f8 <vPortEnterCritical>
			snprintf(buffer, sizeof(buffer), "LED %d Is OFF\r\n", taskId);
 8000964:	7fbb      	ldrb	r3, [r7, #30]
 8000966:	4a3d      	ldr	r2, [pc, #244]	@ (8000a5c <StartLedGenericTask+0x1bc>)
 8000968:	2164      	movs	r1, #100	@ 0x64
 800096a:	483d      	ldr	r0, [pc, #244]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 800096c:	f004 ffd4 	bl	8005918 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000970:	483b      	ldr	r0, [pc, #236]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 8000972:	f7ff fc2d 	bl	80001d0 <strlen>
 8000976:	4603      	mov	r3, r0
 8000978:	b29a      	uxth	r2, r3
 800097a:	f04f 33ff 	mov.w	r3, #4294967295
 800097e:	4938      	ldr	r1, [pc, #224]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 8000980:	4838      	ldr	r0, [pc, #224]	@ (8000a64 <StartLedGenericTask+0x1c4>)
 8000982:	f001 fcb7 	bl	80022f4 <HAL_UART_Transmit>
			taskEXIT_CRITICAL();
 8000986:	f004 fce9 	bl	800535c <vPortExitCritical>
			suspendedLedCount++;
 800098a:	4b37      	ldr	r3, [pc, #220]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	b2da      	uxtb	r2, r3
 8000992:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 8000994:	701a      	strb	r2, [r3, #0]
			if (suspendedLedCount >= 4)
 8000996:	4b34      	ldr	r3, [pc, #208]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b03      	cmp	r3, #3
 800099c:	d940      	bls.n	8000a20 <StartLedGenericTask+0x180>
			{
				taskENTER_CRITICAL();
 800099e:	f004 fcab 	bl	80052f8 <vPortEnterCritical>
				snprintf(buffer, sizeof(buffer), "All LEDs Suspended ... Auto-Resume After 10 Seconds\r\n");
 80009a2:	4a32      	ldr	r2, [pc, #200]	@ (8000a6c <StartLedGenericTask+0x1cc>)
 80009a4:	2164      	movs	r1, #100	@ 0x64
 80009a6:	482e      	ldr	r0, [pc, #184]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 80009a8:	f004 ffb6 	bl	8005918 <sniprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80009ac:	482c      	ldr	r0, [pc, #176]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	4603      	mov	r3, r0
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4929      	ldr	r1, [pc, #164]	@ (8000a60 <StartLedGenericTask+0x1c0>)
 80009bc:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <StartLedGenericTask+0x1c4>)
 80009be:	f001 fc99 	bl	80022f4 <HAL_UART_Transmit>
				taskEXIT_CRITICAL();
 80009c2:	f004 fccb 	bl	800535c <vPortExitCritical>
				osDelay(10000);
 80009c6:	f242 7010 	movw	r0, #10000	@ 0x2710
 80009ca:	f002 f9bc 	bl	8002d46 <osDelay>
				suspendedLedCount = 0;
 80009ce:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
				if (LedGeneric1TaskHandle != NULL) osThreadResume(LedGeneric1TaskHandle);
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <StartLedGenericTask+0x1a8>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d004      	beq.n	80009e6 <StartLedGenericTask+0x146>
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <StartLedGenericTask+0x1a8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f002 f98f 	bl	8002d04 <osThreadResume>
				if (LedGeneric2TaskHandle != NULL) osThreadResume(LedGeneric2TaskHandle);
 80009e6:	4b19      	ldr	r3, [pc, #100]	@ (8000a4c <StartLedGenericTask+0x1ac>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <StartLedGenericTask+0x158>
 80009ee:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <StartLedGenericTask+0x1ac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 f986 	bl	8002d04 <osThreadResume>
				if (LedGeneric3TaskHandle != NULL) osThreadResume(LedGeneric3TaskHandle);
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <StartLedGenericTask+0x1b0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <StartLedGenericTask+0x16a>
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <StartLedGenericTask+0x1b0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f002 f97d 	bl	8002d04 <osThreadResume>
				if (LedGeneric4TaskHandle != NULL) osThreadResume(LedGeneric4TaskHandle);
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <StartLedGenericTask+0x1b4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	f43f af4a 	beq.w	80008a8 <StartLedGenericTask+0x8>
 8000a14:	4b0f      	ldr	r3, [pc, #60]	@ (8000a54 <StartLedGenericTask+0x1b4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f002 f973 	bl	8002d04 <osThreadResume>
				goto ala;
 8000a1e:	e743      	b.n	80008a8 <StartLedGenericTask+0x8>
			}
			osThreadSuspend(currentTaskHandle);
 8000a20:	69b8      	ldr	r0, [r7, #24]
 8000a22:	f002 f94e 	bl	8002cc2 <osThreadSuspend>
			mycounter = 0;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	@ (8000a58 <StartLedGenericTask+0x1b8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
			if (suspendedLedCount > 0)
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f43f af78 	beq.w	8000926 <StartLedGenericTask+0x86>
			{
				suspendedLedCount--;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <StartLedGenericTask+0x1c8>)
 8000a40:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(ala.port, ala.pin);
 8000a42:	e770      	b.n	8000926 <StartLedGenericTask+0x86>
 8000a44:	40020000 	.word	0x40020000
 8000a48:	20000170 	.word	0x20000170
 8000a4c:	20000174 	.word	0x20000174
 8000a50:	20000178 	.word	0x20000178
 8000a54:	2000017c 	.word	0x2000017c
 8000a58:	20000111 	.word	0x20000111
 8000a5c:	08006390 	.word	0x08006390
 8000a60:	200000ac 	.word	0x200000ac
 8000a64:	20000114 	.word	0x20000114
 8000a68:	20000110 	.word	0x20000110
 8000a6c:	080063a0 	.word	0x080063a0

08000a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d101      	bne.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a82:	f000 f9af 	bl	8000de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40010000 	.word	0x40010000

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <Error_Handler+0x8>

08000aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <HAL_MspInit+0x54>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aae:	4a11      	ldr	r2, [pc, #68]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <HAL_MspInit+0x54>)
 8000acc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_MspInit+0x54>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	210f      	movs	r1, #15
 8000ae2:	f06f 0001 	mvn.w	r0, #1
 8000ae6:	f000 fa55 	bl	8000f94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40023800 	.word	0x40023800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	@ 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <HAL_UART_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12b      	bne.n	8000b72 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a17      	ldr	r2, [pc, #92]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b15      	ldr	r3, [pc, #84]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b52:	230c      	movs	r3, #12
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b62:	2307      	movs	r3, #7
 8000b64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b6e:	f000 fa3b 	bl	8000fe8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08c      	sub	sp, #48	@ 0x30
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba0:	4a2e      	ldr	r2, [pc, #184]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ba8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <HAL_InitTick+0xd4>)
 8000baa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bac:	f003 0301 	and.w	r3, r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb4:	f107 020c 	add.w	r2, r7, #12
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 f87a 	bl	8001cb8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000bc4:	f001 f864 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd0:	4a23      	ldr	r2, [pc, #140]	@ (8000c60 <HAL_InitTick+0xd8>)
 8000bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd6:	0c9b      	lsrs	r3, r3, #18
 8000bd8:	3b01      	subs	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000bdc:	4b21      	ldr	r3, [pc, #132]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bde:	4a22      	ldr	r2, [pc, #136]	@ (8000c68 <HAL_InitTick+0xe0>)
 8000be0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000be2:	4b20      	ldr	r3, [pc, #128]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000be4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000be8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000bea:	4a1e      	ldr	r2, [pc, #120]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfc:	4b19      	ldr	r3, [pc, #100]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000c02:	4818      	ldr	r0, [pc, #96]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c04:	f001 f88a 	bl	8001d1c <HAL_TIM_Base_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000c16:	4813      	ldr	r0, [pc, #76]	@ (8000c64 <HAL_InitTick+0xdc>)
 8000c18:	f001 f8da 	bl	8001dd0 <HAL_TIM_Base_Start_IT>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000c22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d111      	bne.n	8000c4e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000c2a:	2019      	movs	r0, #25
 8000c2c:	f000 f9ce 	bl	8000fcc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2b0f      	cmp	r3, #15
 8000c34:	d808      	bhi.n	8000c48 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000c36:	2200      	movs	r2, #0
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2019      	movs	r0, #25
 8000c3c:	f000 f9aa 	bl	8000f94 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_InitTick+0xe4>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e002      	b.n	8000c4e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3730      	adds	r7, #48	@ 0x30
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	431bde83 	.word	0x431bde83
 8000c64:	20000180 	.word	0x20000180
 8000c68:	40010000 	.word	0x40010000
 8000c6c:	20000034 	.word	0x20000034

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <NMI_Handler+0x4>

08000c78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <MemManage_Handler+0x4>

08000c88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cac:	4802      	ldr	r0, [pc, #8]	@ (8000cb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cae:	f001 f8ff 	bl	8001eb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20000180 	.word	0x20000180

08000cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cc4:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <_sbrk+0x5c>)
 8000cc6:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <_sbrk+0x60>)
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd0:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <_sbrk+0x64>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d102      	bne.n	8000cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <_sbrk+0x64>)
 8000cda:	4a12      	ldr	r2, [pc, #72]	@ (8000d24 <_sbrk+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cde:	4b10      	ldr	r3, [pc, #64]	@ (8000d20 <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d207      	bcs.n	8000cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cec:	f004 fea6 	bl	8005a3c <__errno>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220c      	movs	r2, #12
 8000cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfa:	e009      	b.n	8000d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <_sbrk+0x64>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d02:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a05      	ldr	r2, [pc, #20]	@ (8000d20 <_sbrk+0x64>)
 8000d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20020000 	.word	0x20020000
 8000d1c:	00000400 	.word	0x00000400
 8000d20:	200001c8 	.word	0x200001c8
 8000d24:	20004d00 	.word	0x20004d00

08000d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d2c:	4b06      	ldr	r3, [pc, #24]	@ (8000d48 <SystemInit+0x20>)
 8000d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d32:	4a05      	ldr	r2, [pc, #20]	@ (8000d48 <SystemInit+0x20>)
 8000d34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d50:	f7ff ffea 	bl	8000d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d54:	480c      	ldr	r0, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d56:	490d      	ldr	r1, [pc, #52]	@ (8000d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d58:	4a0d      	ldr	r2, [pc, #52]	@ (8000d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f004 fe65 	bl	8005a48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d7e:	f7ff fbf7 	bl	8000570 <main>
  bx  lr    
 8000d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d8c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000d90:	08006524 	.word	0x08006524
  ldr r2, =_sbss
 8000d94:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000d98:	20004d00 	.word	0x20004d00

08000d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d9c:	e7fe      	b.n	8000d9c <ADC_IRQHandler>
	...

08000da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000da4:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <HAL_Init+0x40>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a0d      	ldr	r2, [pc, #52]	@ (8000de0 <HAL_Init+0x40>)
 8000daa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db0:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0a      	ldr	r2, [pc, #40]	@ (8000de0 <HAL_Init+0x40>)
 8000db6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dbc:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a07      	ldr	r2, [pc, #28]	@ (8000de0 <HAL_Init+0x40>)
 8000dc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc8:	2003      	movs	r0, #3
 8000dca:	f000 f8d8 	bl	8000f7e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dce:	200f      	movs	r0, #15
 8000dd0:	f7ff feda 	bl	8000b88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dd4:	f7ff fe64 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	40023c00 	.word	0x40023c00

08000de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <HAL_IncTick+0x20>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	461a      	mov	r2, r3
 8000dee:	4b06      	ldr	r3, [pc, #24]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4413      	add	r3, r2
 8000df4:	4a04      	ldr	r2, [pc, #16]	@ (8000e08 <HAL_IncTick+0x24>)
 8000df6:	6013      	str	r3, [r2, #0]
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	20000038 	.word	0x20000038
 8000e08:	200001cc 	.word	0x200001cc

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	@ (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001cc 	.word	0x200001cc

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	@ (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	@ (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	@ (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff4c 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	60b9      	str	r1, [r7, #8]
 8000f9e:	607a      	str	r2, [r7, #4]
 8000fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fa6:	f7ff ff61 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000faa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fac:	687a      	ldr	r2, [r7, #4]
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	6978      	ldr	r0, [r7, #20]
 8000fb2:	f7ff ffb1 	bl	8000f18 <NVIC_EncodePriority>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fbc:	4611      	mov	r1, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff ff80 	bl	8000ec4 <__NVIC_SetPriority>
}
 8000fc4:	bf00      	nop
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ff54 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b089      	sub	sp, #36	@ 0x24
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
 8001002:	e16b      	b.n	80012dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001004:	2201      	movs	r2, #1
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	fa02 f303 	lsl.w	r3, r2, r3
 800100c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	697a      	ldr	r2, [r7, #20]
 8001014:	4013      	ands	r3, r2
 8001016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	429a      	cmp	r2, r3
 800101e:	f040 815a 	bne.w	80012d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b01      	cmp	r3, #1
 800102c:	d005      	beq.n	800103a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001036:	2b02      	cmp	r3, #2
 8001038:	d130      	bne.n	800109c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	2203      	movs	r2, #3
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	68da      	ldr	r2, [r3, #12]
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001070:	2201      	movs	r2, #1
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	091b      	lsrs	r3, r3, #4
 8001086:	f003 0201 	and.w	r2, r3, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f003 0303 	and.w	r3, r3, #3
 80010a4:	2b03      	cmp	r3, #3
 80010a6:	d017      	beq.n	80010d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	2203      	movs	r2, #3
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 0303 	and.w	r3, r3, #3
 80010e0:	2b02      	cmp	r3, #2
 80010e2:	d123      	bne.n	800112c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	08da      	lsrs	r2, r3, #3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3208      	adds	r2, #8
 80010ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	f003 0307 	and.w	r3, r3, #7
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	4313      	orrs	r3, r2
 800111c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	69b9      	ldr	r1, [r7, #24]
 8001128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4313      	orrs	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001168:	2b00      	cmp	r3, #0
 800116a:	f000 80b4 	beq.w	80012d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b60      	ldr	r3, [pc, #384]	@ (80012f4 <HAL_GPIO_Init+0x30c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001176:	4a5f      	ldr	r2, [pc, #380]	@ (80012f4 <HAL_GPIO_Init+0x30c>)
 8001178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800117c:	6453      	str	r3, [r2, #68]	@ 0x44
 800117e:	4b5d      	ldr	r3, [pc, #372]	@ (80012f4 <HAL_GPIO_Init+0x30c>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800118a:	4a5b      	ldr	r2, [pc, #364]	@ (80012f8 <HAL_GPIO_Init+0x310>)
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	220f      	movs	r2, #15
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4013      	ands	r3, r2
 80011ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a52      	ldr	r2, [pc, #328]	@ (80012fc <HAL_GPIO_Init+0x314>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d02b      	beq.n	800120e <HAL_GPIO_Init+0x226>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a51      	ldr	r2, [pc, #324]	@ (8001300 <HAL_GPIO_Init+0x318>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d025      	beq.n	800120a <HAL_GPIO_Init+0x222>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a50      	ldr	r2, [pc, #320]	@ (8001304 <HAL_GPIO_Init+0x31c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d01f      	beq.n	8001206 <HAL_GPIO_Init+0x21e>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001308 <HAL_GPIO_Init+0x320>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d019      	beq.n	8001202 <HAL_GPIO_Init+0x21a>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4e      	ldr	r2, [pc, #312]	@ (800130c <HAL_GPIO_Init+0x324>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d013      	beq.n	80011fe <HAL_GPIO_Init+0x216>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4d      	ldr	r2, [pc, #308]	@ (8001310 <HAL_GPIO_Init+0x328>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d00d      	beq.n	80011fa <HAL_GPIO_Init+0x212>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4a4c      	ldr	r2, [pc, #304]	@ (8001314 <HAL_GPIO_Init+0x32c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d007      	beq.n	80011f6 <HAL_GPIO_Init+0x20e>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001318 <HAL_GPIO_Init+0x330>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d101      	bne.n	80011f2 <HAL_GPIO_Init+0x20a>
 80011ee:	2307      	movs	r3, #7
 80011f0:	e00e      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f2:	2308      	movs	r3, #8
 80011f4:	e00c      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011f6:	2306      	movs	r3, #6
 80011f8:	e00a      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fa:	2305      	movs	r3, #5
 80011fc:	e008      	b.n	8001210 <HAL_GPIO_Init+0x228>
 80011fe:	2304      	movs	r3, #4
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001202:	2303      	movs	r3, #3
 8001204:	e004      	b.n	8001210 <HAL_GPIO_Init+0x228>
 8001206:	2302      	movs	r3, #2
 8001208:	e002      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <HAL_GPIO_Init+0x228>
 800120e:	2300      	movs	r3, #0
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	f002 0203 	and.w	r2, r2, #3
 8001216:	0092      	lsls	r2, r2, #2
 8001218:	4093      	lsls	r3, r2
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001220:	4935      	ldr	r1, [pc, #212]	@ (80012f8 <HAL_GPIO_Init+0x310>)
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	089b      	lsrs	r3, r3, #2
 8001226:	3302      	adds	r3, #2
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122e:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <HAL_GPIO_Init+0x334>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	43db      	mvns	r3, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4013      	ands	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001252:	4a32      	ldr	r2, [pc, #200]	@ (800131c <HAL_GPIO_Init+0x334>)
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001258:	4b30      	ldr	r3, [pc, #192]	@ (800131c <HAL_GPIO_Init+0x334>)
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d003      	beq.n	800127c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800127c:	4a27      	ldr	r2, [pc, #156]	@ (800131c <HAL_GPIO_Init+0x334>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001282:	4b26      	ldr	r3, [pc, #152]	@ (800131c <HAL_GPIO_Init+0x334>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	43db      	mvns	r3, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4013      	ands	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a6:	4a1d      	ldr	r2, [pc, #116]	@ (800131c <HAL_GPIO_Init+0x334>)
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012ac:	4b1b      	ldr	r3, [pc, #108]	@ (800131c <HAL_GPIO_Init+0x334>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d003      	beq.n	80012d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012d0:	4a12      	ldr	r2, [pc, #72]	@ (800131c <HAL_GPIO_Init+0x334>)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	2b0f      	cmp	r3, #15
 80012e0:	f67f ae90 	bls.w	8001004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop
 80012e8:	3724      	adds	r7, #36	@ 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	40020000 	.word	0x40020000
 8001300:	40020400 	.word	0x40020400
 8001304:	40020800 	.word	0x40020800
 8001308:	40020c00 	.word	0x40020c00
 800130c:	40021000 	.word	0x40021000
 8001310:	40021400 	.word	0x40021400
 8001314:	40021800 	.word	0x40021800
 8001318:	40021c00 	.word	0x40021c00
 800131c:	40013c00 	.word	0x40013c00

08001320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	460b      	mov	r3, r1
 800132a:	807b      	strh	r3, [r7, #2]
 800132c:	4613      	mov	r3, r2
 800132e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001330:	787b      	ldrb	r3, [r7, #1]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d003      	beq.n	800133e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001336:	887a      	ldrh	r2, [r7, #2]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800133c:	e003      	b.n	8001346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800133e:	887b      	ldrh	r3, [r7, #2]
 8001340:	041a      	lsls	r2, r3, #16
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	619a      	str	r2, [r3, #24]
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001364:	887a      	ldrh	r2, [r7, #2]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	4013      	ands	r3, r2
 800136a:	041a      	lsls	r2, r3, #16
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43d9      	mvns	r1, r3
 8001370:	887b      	ldrh	r3, [r7, #2]
 8001372:	400b      	ands	r3, r1
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e267      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d075      	beq.n	8001492 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013a6:	4b88      	ldr	r3, [pc, #544]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b04      	cmp	r3, #4
 80013b0:	d00c      	beq.n	80013cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013b2:	4b85      	ldr	r3, [pc, #532]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d112      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013be:	4b82      	ldr	r3, [pc, #520]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80013ca:	d10b      	bne.n	80013e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	4b7e      	ldr	r3, [pc, #504]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d05b      	beq.n	8001490 <HAL_RCC_OscConfig+0x108>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d157      	bne.n	8001490 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e242      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013ec:	d106      	bne.n	80013fc <HAL_RCC_OscConfig+0x74>
 80013ee:	4b76      	ldr	r3, [pc, #472]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a75      	ldr	r2, [pc, #468]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80013f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	e01d      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001404:	d10c      	bne.n	8001420 <HAL_RCC_OscConfig+0x98>
 8001406:	4b70      	ldr	r3, [pc, #448]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a6f      	ldr	r2, [pc, #444]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800140c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001410:	6013      	str	r3, [r2, #0]
 8001412:	4b6d      	ldr	r3, [pc, #436]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6c      	ldr	r2, [pc, #432]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001418:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	e00b      	b.n	8001438 <HAL_RCC_OscConfig+0xb0>
 8001420:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a68      	ldr	r2, [pc, #416]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800142a:	6013      	str	r3, [r2, #0]
 800142c:	4b66      	ldr	r3, [pc, #408]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a65      	ldr	r2, [pc, #404]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001432:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d013      	beq.n	8001468 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001440:	f7ff fce4 	bl	8000e0c <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001448:	f7ff fce0 	bl	8000e0c <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b64      	cmp	r3, #100	@ 0x64
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e207      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800145a:	4b5b      	ldr	r3, [pc, #364]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d0f0      	beq.n	8001448 <HAL_RCC_OscConfig+0xc0>
 8001466:	e014      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fcd0 	bl	8000e0c <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001470:	f7ff fccc 	bl	8000e0c <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b64      	cmp	r3, #100	@ 0x64
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e1f3      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001482:	4b51      	ldr	r3, [pc, #324]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0xe8>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d063      	beq.n	8001566 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800149e:	4b4a      	ldr	r3, [pc, #296]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 030c 	and.w	r3, r3, #12
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d00b      	beq.n	80014c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014aa:	4b47      	ldr	r3, [pc, #284]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80014b2:	2b08      	cmp	r3, #8
 80014b4:	d11c      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b6:	4b44      	ldr	r3, [pc, #272]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d116      	bne.n	80014f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c2:	4b41      	ldr	r3, [pc, #260]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d001      	beq.n	80014da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e1c7      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014da:	4b3b      	ldr	r3, [pc, #236]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	00db      	lsls	r3, r3, #3
 80014e8:	4937      	ldr	r1, [pc, #220]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 80014ea:	4313      	orrs	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ee:	e03a      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d020      	beq.n	800153a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014f8:	4b34      	ldr	r3, [pc, #208]	@ (80015cc <HAL_RCC_OscConfig+0x244>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fe:	f7ff fc85 	bl	8000e0c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fc81 	bl	8000e0c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e1a8      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001518:	4b2b      	ldr	r3, [pc, #172]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001524:	4b28      	ldr	r3, [pc, #160]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	4925      	ldr	r1, [pc, #148]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 8001534:	4313      	orrs	r3, r2
 8001536:	600b      	str	r3, [r1, #0]
 8001538:	e015      	b.n	8001566 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153a:	4b24      	ldr	r3, [pc, #144]	@ (80015cc <HAL_RCC_OscConfig+0x244>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fc64 	bl	8000e0c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fc60 	bl	8000e0c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e187      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155a:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d036      	beq.n	80015e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d016      	beq.n	80015a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157a:	4b15      	ldr	r3, [pc, #84]	@ (80015d0 <HAL_RCC_OscConfig+0x248>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001580:	f7ff fc44 	bl	8000e0c <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001588:	f7ff fc40 	bl	8000e0c <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e167      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800159a:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_RCC_OscConfig+0x240>)
 800159c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d0f0      	beq.n	8001588 <HAL_RCC_OscConfig+0x200>
 80015a6:	e01b      	b.n	80015e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <HAL_RCC_OscConfig+0x248>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ae:	f7ff fc2d 	bl	8000e0c <HAL_GetTick>
 80015b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015b4:	e00e      	b.n	80015d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015b6:	f7ff fc29 	bl	8000e0c <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d907      	bls.n	80015d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80015c4:	2303      	movs	r3, #3
 80015c6:	e150      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
 80015c8:	40023800 	.word	0x40023800
 80015cc:	42470000 	.word	0x42470000
 80015d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d4:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1ea      	bne.n	80015b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0304 	and.w	r3, r3, #4
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	f000 8097 	beq.w	800171c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015f2:	4b81      	ldr	r3, [pc, #516]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d10f      	bne.n	800161e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b7d      	ldr	r3, [pc, #500]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a7c      	ldr	r2, [pc, #496]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b7a      	ldr	r3, [pc, #488]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800161a:	2301      	movs	r3, #1
 800161c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161e:	4b77      	ldr	r3, [pc, #476]	@ (80017fc <HAL_RCC_OscConfig+0x474>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001626:	2b00      	cmp	r3, #0
 8001628:	d118      	bne.n	800165c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800162a:	4b74      	ldr	r3, [pc, #464]	@ (80017fc <HAL_RCC_OscConfig+0x474>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a73      	ldr	r2, [pc, #460]	@ (80017fc <HAL_RCC_OscConfig+0x474>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001634:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001636:	f7ff fbe9 	bl	8000e0c <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163e:	f7ff fbe5 	bl	8000e0c <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e10c      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b6a      	ldr	r3, [pc, #424]	@ (80017fc <HAL_RCC_OscConfig+0x474>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0f0      	beq.n	800163e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d106      	bne.n	8001672 <HAL_RCC_OscConfig+0x2ea>
 8001664:	4b64      	ldr	r3, [pc, #400]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a63      	ldr	r2, [pc, #396]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001670:	e01c      	b.n	80016ac <HAL_RCC_OscConfig+0x324>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b05      	cmp	r3, #5
 8001678:	d10c      	bne.n	8001694 <HAL_RCC_OscConfig+0x30c>
 800167a:	4b5f      	ldr	r3, [pc, #380]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800167e:	4a5e      	ldr	r2, [pc, #376]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	6713      	str	r3, [r2, #112]	@ 0x70
 8001686:	4b5c      	ldr	r3, [pc, #368]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168a:	4a5b      	ldr	r2, [pc, #364]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6713      	str	r3, [r2, #112]	@ 0x70
 8001692:	e00b      	b.n	80016ac <HAL_RCC_OscConfig+0x324>
 8001694:	4b58      	ldr	r3, [pc, #352]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001698:	4a57      	ldr	r2, [pc, #348]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800169a:	f023 0301 	bic.w	r3, r3, #1
 800169e:	6713      	str	r3, [r2, #112]	@ 0x70
 80016a0:	4b55      	ldr	r3, [pc, #340]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a4:	4a54      	ldr	r2, [pc, #336]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016a6:	f023 0304 	bic.w	r3, r3, #4
 80016aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d015      	beq.n	80016e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b4:	f7ff fbaa 	bl	8000e0c <HAL_GetTick>
 80016b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ba:	e00a      	b.n	80016d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016bc:	f7ff fba6 	bl	8000e0c <HAL_GetTick>
 80016c0:	4602      	mov	r2, r0
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e0cb      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d2:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80016d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0ee      	beq.n	80016bc <HAL_RCC_OscConfig+0x334>
 80016de:	e014      	b.n	800170a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fb94 	bl	8000e0c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e6:	e00a      	b.n	80016fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb90 	bl	8000e0c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e0b5      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016fe:	4b3e      	ldr	r3, [pc, #248]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ee      	bne.n	80016e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	4a38      	ldr	r2, [pc, #224]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80a1 	beq.w	8001868 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001726:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d05c      	beq.n	80017ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b02      	cmp	r3, #2
 8001738:	d141      	bne.n	80017be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <HAL_RCC_OscConfig+0x478>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb64 	bl	8000e0c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fb60 	bl	8000e0c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e087      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69da      	ldr	r2, [r3, #28]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	431a      	orrs	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001774:	019b      	lsls	r3, r3, #6
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	041b      	lsls	r3, r3, #16
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	491b      	ldr	r1, [pc, #108]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001790:	4b1b      	ldr	r3, [pc, #108]	@ (8001800 <HAL_RCC_OscConfig+0x478>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff fb39 	bl	8000e0c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff fb35 	bl	8000e0c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e05c      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017b0:	4b11      	ldr	r3, [pc, #68]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d0f0      	beq.n	800179e <HAL_RCC_OscConfig+0x416>
 80017bc:	e054      	b.n	8001868 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_RCC_OscConfig+0x478>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb22 	bl	8000e0c <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017cc:	f7ff fb1e 	bl	8000e0c <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e045      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <HAL_RCC_OscConfig+0x470>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f0      	bne.n	80017cc <HAL_RCC_OscConfig+0x444>
 80017ea:	e03d      	b.n	8001868 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e038      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40007000 	.word	0x40007000
 8001800:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001804:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_RCC_OscConfig+0x4ec>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d028      	beq.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d121      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800182a:	429a      	cmp	r2, r3
 800182c:	d11a      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800183a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800183c:	4293      	cmp	r3, r2
 800183e:	d111      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	085b      	lsrs	r3, r3, #1
 800184c:	3b01      	subs	r3, #1
 800184e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001850:	429a      	cmp	r2, r3
 8001852:	d107      	bne.n	8001864 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001868:	2300      	movs	r3, #0
}
 800186a:	4618      	mov	r0, r3
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800

08001878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0cc      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800188c:	4b68      	ldr	r3, [pc, #416]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d90c      	bls.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b65      	ldr	r3, [pc, #404]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e0b8      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d005      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018cc:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d005      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e4:	4b53      	ldr	r3, [pc, #332]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	4a52      	ldr	r2, [pc, #328]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f0:	4b50      	ldr	r3, [pc, #320]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	494d      	ldr	r1, [pc, #308]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	2b00      	cmp	r3, #0
 800190c:	d044      	beq.n	8001998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d107      	bne.n	8001926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d119      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e07f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001932:	2b03      	cmp	r3, #3
 8001934:	d107      	bne.n	8001946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001936:	4b3f      	ldr	r3, [pc, #252]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d109      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e06f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001946:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e067      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001956:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f023 0203 	bic.w	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4934      	ldr	r1, [pc, #208]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001964:	4313      	orrs	r3, r2
 8001966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001968:	f7ff fa50 	bl	8000e0c <HAL_GetTick>
 800196c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196e:	e00a      	b.n	8001986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001970:	f7ff fa4c 	bl	8000e0c <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e04f      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001986:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 020c 	and.w	r2, r3, #12
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	429a      	cmp	r2, r3
 8001996:	d1eb      	bne.n	8001970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001998:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d20c      	bcs.n	80019c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019a8:	683a      	ldr	r2, [r7, #0]
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	@ (8001a30 <HAL_RCC_ClockConfig+0x1b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e032      	b.n	8001a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d008      	beq.n	80019de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4916      	ldr	r1, [pc, #88]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0308 	and.w	r3, r3, #8
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d009      	beq.n	80019fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	490e      	ldr	r1, [pc, #56]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019fe:	f000 f821 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001a02:	4602      	mov	r2, r0
 8001a04:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	091b      	lsrs	r3, r3, #4
 8001a0a:	f003 030f 	and.w	r3, r3, #15
 8001a0e:	490a      	ldr	r1, [pc, #40]	@ (8001a38 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	5ccb      	ldrb	r3, [r1, r3]
 8001a12:	fa22 f303 	lsr.w	r3, r2, r3
 8001a16:	4a09      	ldr	r2, [pc, #36]	@ (8001a3c <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a1a:	4b09      	ldr	r3, [pc, #36]	@ (8001a40 <HAL_RCC_ClockConfig+0x1c8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f8b2 	bl	8000b88 <HAL_InitTick>

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40023c00 	.word	0x40023c00
 8001a34:	40023800 	.word	0x40023800
 8001a38:	080064c8 	.word	0x080064c8
 8001a3c:	20000030 	.word	0x20000030
 8001a40:	20000034 	.word	0x20000034

08001a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a48:	b094      	sub	sp, #80	@ 0x50
 8001a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a5c:	4b79      	ldr	r3, [pc, #484]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d00d      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x40>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	f200 80e1 	bhi.w	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x34>
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a76:	e0db      	b.n	8001c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a78:	4b73      	ldr	r3, [pc, #460]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a7c:	e0db      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a7e:	4b73      	ldr	r3, [pc, #460]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a80:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a82:	e0d8      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a84:	4b6f      	ldr	r3, [pc, #444]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a8c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a8e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a9a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	099b      	lsrs	r3, r3, #6
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001aa4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aac:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4621      	mov	r1, r4
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	6139      	str	r1, [r7, #16]
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ae8:	4659      	mov	r1, fp
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	4651      	mov	r1, sl
 8001aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af2:	4651      	mov	r1, sl
 8001af4:	018a      	lsls	r2, r1, #6
 8001af6:	4651      	mov	r1, sl
 8001af8:	ebb2 0801 	subs.w	r8, r2, r1
 8001afc:	4659      	mov	r1, fp
 8001afe:	eb63 0901 	sbc.w	r9, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001b16:	4690      	mov	r8, r2
 8001b18:	4699      	mov	r9, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb18 0303 	adds.w	r3, r8, r3
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	462b      	mov	r3, r5
 8001b24:	eb49 0303 	adc.w	r3, r9, r3
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b36:	4629      	mov	r1, r5
 8001b38:	024b      	lsls	r3, r1, #9
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b40:	4621      	mov	r1, r4
 8001b42:	024a      	lsls	r2, r1, #9
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b54:	f7fe fb94 	bl	8000280 <__aeabi_uldivmod>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b60:	e058      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	2200      	movs	r2, #0
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	4611      	mov	r1, r2
 8001b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b72:	623b      	str	r3, [r7, #32]
 8001b74:	2300      	movs	r3, #0
 8001b76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b7c:	4642      	mov	r2, r8
 8001b7e:	464b      	mov	r3, r9
 8001b80:	f04f 0000 	mov.w	r0, #0
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	0159      	lsls	r1, r3, #5
 8001b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b8e:	0150      	lsls	r0, r2, #5
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4641      	mov	r1, r8
 8001b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b9a:	4649      	mov	r1, r9
 8001b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8001bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	00eb      	lsls	r3, r5, #3
 8001bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001bca:	00e2      	lsls	r2, r4, #3
 8001bcc:	4614      	mov	r4, r2
 8001bce:	461d      	mov	r5, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	18e3      	adds	r3, r4, r3
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	464b      	mov	r3, r9
 8001bd8:	eb45 0303 	adc.w	r3, r5, r3
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	f04f 0300 	mov.w	r3, #0
 8001be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bea:	4629      	mov	r1, r5
 8001bec:	028b      	lsls	r3, r1, #10
 8001bee:	4621      	mov	r1, r4
 8001bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bf4:	4621      	mov	r1, r4
 8001bf6:	028a      	lsls	r2, r1, #10
 8001bf8:	4610      	mov	r0, r2
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bfe:	2200      	movs	r2, #0
 8001c00:	61bb      	str	r3, [r7, #24]
 8001c02:	61fa      	str	r2, [r7, #28]
 8001c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c08:	f7fe fb3a 	bl	8000280 <__aeabi_uldivmod>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4613      	mov	r3, r2
 8001c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001c14:	4b0b      	ldr	r3, [pc, #44]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001c24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c2e:	e002      	b.n	8001c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c30:	4b05      	ldr	r3, [pc, #20]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3750      	adds	r7, #80	@ 0x50
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	@ (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000030 	.word	0x20000030

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a9b      	lsrs	r3, r3, #10
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4903      	ldr	r1, [pc, #12]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	080064d8 	.word	0x080064d8

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c94:	f7ff ffdc 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0b5b      	lsrs	r3, r3, #13
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4903      	ldr	r1, [pc, #12]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	080064d8 	.word	0x080064d8

08001cb8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	220f      	movs	r2, #15
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cc8:	4b12      	ldr	r3, [pc, #72]	@ (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 0203 	and.w	r2, r3, #3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cec:	4b09      	ldr	r3, [pc, #36]	@ (8001d14 <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	08db      	lsrs	r3, r3, #3
 8001cf2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cfa:	4b07      	ldr	r3, [pc, #28]	@ (8001d18 <HAL_RCC_GetClockConfig+0x60>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0207 	and.w	r2, r3, #7
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40023c00 	.word	0x40023c00

08001d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e041      	b.n	8001db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d106      	bne.n	8001d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 f839 	bl	8001dba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f000 f9c0 	bl	80020e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e04e      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2202      	movs	r2, #2
 8001dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a23      	ldr	r2, [pc, #140]	@ (8001e94 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d022      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e12:	d01d      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a1f      	ldr	r2, [pc, #124]	@ (8001e98 <HAL_TIM_Base_Start_IT+0xc8>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d018      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a1e      	ldr	r2, [pc, #120]	@ (8001e9c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d013      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d00e      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d009      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a19      	ldr	r2, [pc, #100]	@ (8001ea8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d004      	beq.n	8001e50 <HAL_TIM_Base_Start_IT+0x80>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a18      	ldr	r2, [pc, #96]	@ (8001eac <HAL_TIM_Base_Start_IT+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d010      	beq.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	e007      	b.n	8001e84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40010000 	.word	0x40010000
 8001e98:	40000400 	.word	0x40000400
 8001e9c:	40000800 	.word	0x40000800
 8001ea0:	40000c00 	.word	0x40000c00
 8001ea4:	40010400 	.word	0x40010400
 8001ea8:	40014000 	.word	0x40014000
 8001eac:	40001800 	.word	0x40001800

08001eb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d020      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d01b      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0202 	mvn.w	r2, #2
 8001ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8d2 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8c4 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8d5 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d020      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d01b      	beq.n	8001f60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f06f 0204 	mvn.w	r2, #4
 8001f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f8ac 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001f4c:	e005      	b.n	8001f5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f89e 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8af 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d020      	beq.n	8001fac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0308 	and.w	r3, r3, #8
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d01b      	beq.n	8001fac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0208 	mvn.w	r2, #8
 8001f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2204      	movs	r2, #4
 8001f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d003      	beq.n	8001f9a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f886 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001f98:	e005      	b.n	8001fa6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f878 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 f889 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d020      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f003 0310 	and.w	r3, r3, #16
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d01b      	beq.n	8001ff8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0210 	mvn.w	r2, #16
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f860 	bl	80020a4 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f852 	bl	8002090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f863 	bl	80020b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00c      	beq.n	800201c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f003 0301 	and.w	r3, r3, #1
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f06f 0201 	mvn.w	r2, #1
 8002014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe fd2a 	bl	8000a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00c      	beq.n	8002040 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800202c:	2b00      	cmp	r3, #0
 800202e:	d007      	beq.n	8002040 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f900 	bl	8002240 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00c      	beq.n	8002064 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002050:	2b00      	cmp	r3, #0
 8002052:	d007      	beq.n	8002064 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800205c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f834 	bl	80020cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0320 	and.w	r3, r3, #32
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0220 	mvn.w	r2, #32
 8002080:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 f8d2 	bl	800222c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002088:	bf00      	nop
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a43      	ldr	r2, [pc, #268]	@ (8002200 <TIM_Base_SetConfig+0x120>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d013      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fe:	d00f      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	4a40      	ldr	r2, [pc, #256]	@ (8002204 <TIM_Base_SetConfig+0x124>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d00b      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a3f      	ldr	r2, [pc, #252]	@ (8002208 <TIM_Base_SetConfig+0x128>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d007      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4a3e      	ldr	r2, [pc, #248]	@ (800220c <TIM_Base_SetConfig+0x12c>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d003      	beq.n	8002120 <TIM_Base_SetConfig+0x40>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4a3d      	ldr	r2, [pc, #244]	@ (8002210 <TIM_Base_SetConfig+0x130>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d108      	bne.n	8002132 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002126:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	68fa      	ldr	r2, [r7, #12]
 800212e:	4313      	orrs	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a32      	ldr	r2, [pc, #200]	@ (8002200 <TIM_Base_SetConfig+0x120>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d02b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002140:	d027      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <TIM_Base_SetConfig+0x124>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d023      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <TIM_Base_SetConfig+0x128>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01f      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2d      	ldr	r2, [pc, #180]	@ (800220c <TIM_Base_SetConfig+0x12c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d01b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2c      	ldr	r2, [pc, #176]	@ (8002210 <TIM_Base_SetConfig+0x130>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d017      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2b      	ldr	r2, [pc, #172]	@ (8002214 <TIM_Base_SetConfig+0x134>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d013      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a2a      	ldr	r2, [pc, #168]	@ (8002218 <TIM_Base_SetConfig+0x138>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d00f      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a29      	ldr	r2, [pc, #164]	@ (800221c <TIM_Base_SetConfig+0x13c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00b      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a28      	ldr	r2, [pc, #160]	@ (8002220 <TIM_Base_SetConfig+0x140>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a27      	ldr	r2, [pc, #156]	@ (8002224 <TIM_Base_SetConfig+0x144>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d003      	beq.n	8002192 <TIM_Base_SetConfig+0xb2>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a26      	ldr	r2, [pc, #152]	@ (8002228 <TIM_Base_SetConfig+0x148>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d108      	bne.n	80021a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	689a      	ldr	r2, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <TIM_Base_SetConfig+0x120>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0xf2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <TIM_Base_SetConfig+0x130>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d103      	bne.n	80021da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	691a      	ldr	r2, [r3, #16]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f043 0204 	orr.w	r2, r3, #4
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	601a      	str	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40000400 	.word	0x40000400
 8002208:	40000800 	.word	0x40000800
 800220c:	40000c00 	.word	0x40000c00
 8002210:	40010400 	.word	0x40010400
 8002214:	40014000 	.word	0x40014000
 8002218:	40014400 	.word	0x40014400
 800221c:	40014800 	.word	0x40014800
 8002220:	40001800 	.word	0x40001800
 8002224:	40001c00 	.word	0x40001c00
 8002228:	40002000 	.word	0x40002000

0800222c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e042      	b.n	80022ec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7fe fc3c 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2224      	movs	r2, #36	@ 0x24
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002296:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 f973 	bl	8002584 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2220      	movs	r2, #32
 80022e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08a      	sub	sp, #40	@ 0x28
 80022f8:	af02      	add	r7, sp, #8
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	603b      	str	r3, [r7, #0]
 8002300:	4613      	mov	r3, r2
 8002302:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b20      	cmp	r3, #32
 8002312:	d175      	bne.n	8002400 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d002      	beq.n	8002320 <HAL_UART_Transmit+0x2c>
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e06e      	b.n	8002402 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2200      	movs	r2, #0
 8002328:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2221      	movs	r2, #33	@ 0x21
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002332:	f7fe fd6b 	bl	8000e0c <HAL_GetTick>
 8002336:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	88fa      	ldrh	r2, [r7, #6]
 800233c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	88fa      	ldrh	r2, [r7, #6]
 8002342:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800234c:	d108      	bne.n	8002360 <HAL_UART_Transmit+0x6c>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d104      	bne.n	8002360 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	61bb      	str	r3, [r7, #24]
 800235e:	e003      	b.n	8002368 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002364:	2300      	movs	r3, #0
 8002366:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002368:	e02e      	b.n	80023c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	2200      	movs	r2, #0
 8002372:	2180      	movs	r1, #128	@ 0x80
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f848 	bl	800240a <UART_WaitOnFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2220      	movs	r2, #32
 8002384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e03a      	b.n	8002402 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	881b      	ldrh	r3, [r3, #0]
 8002396:	461a      	mov	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	3302      	adds	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
 80023a8:	e007      	b.n	80023ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	781a      	ldrb	r2, [r3, #0]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	3301      	adds	r3, #1
 80023b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023be:	b29b      	uxth	r3, r3
 80023c0:	3b01      	subs	r3, #1
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1cb      	bne.n	800236a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	2140      	movs	r1, #64	@ 0x40
 80023dc:	68f8      	ldr	r0, [r7, #12]
 80023de:	f000 f814 	bl	800240a <UART_WaitOnFlagUntilTimeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d005      	beq.n	80023f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e006      	b.n	8002402 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	e000      	b.n	8002402 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002400:	2302      	movs	r3, #2
  }
}
 8002402:	4618      	mov	r0, r3
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	603b      	str	r3, [r7, #0]
 8002416:	4613      	mov	r3, r2
 8002418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800241a:	e03b      	b.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002422:	d037      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002424:	f7fe fcf2 	bl	8000e0c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	6a3a      	ldr	r2, [r7, #32]
 8002430:	429a      	cmp	r2, r3
 8002432:	d302      	bcc.n	800243a <UART_WaitOnFlagUntilTimeout+0x30>
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d101      	bne.n	800243e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e03a      	b.n	80024b4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	2b80      	cmp	r3, #128	@ 0x80
 8002450:	d020      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b40      	cmp	r3, #64	@ 0x40
 8002456:	d01d      	beq.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b08      	cmp	r3, #8
 8002464:	d116      	bne.n	8002494 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800247c:	68f8      	ldr	r0, [r7, #12]
 800247e:	f000 f81d 	bl	80024bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2208      	movs	r2, #8
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e00f      	b.n	80024b4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	4013      	ands	r3, r2
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	429a      	cmp	r2, r3
 80024a2:	bf0c      	ite	eq
 80024a4:	2301      	moveq	r3, #1
 80024a6:	2300      	movne	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d0b4      	beq.n	800241c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024bc:	b480      	push	{r7}
 80024be:	b095      	sub	sp, #84	@ 0x54
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024ce:	e853 3f00 	ldrex	r3, [r3]
 80024d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	330c      	adds	r3, #12
 80024e2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024e4:	643a      	str	r2, [r7, #64]	@ 0x40
 80024e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024ec:	e841 2300 	strex	r3, r2, [r1]
 80024f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e5      	bne.n	80024c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3314      	adds	r3, #20
 80024fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002500:	6a3b      	ldr	r3, [r7, #32]
 8002502:	e853 3f00 	ldrex	r3, [r3]
 8002506:	61fb      	str	r3, [r7, #28]
   return(result);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f023 0301 	bic.w	r3, r3, #1
 800250e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	3314      	adds	r3, #20
 8002516:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002518:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002520:	e841 2300 	strex	r3, r2, [r1]
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1e5      	bne.n	80024f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	2b01      	cmp	r3, #1
 8002532:	d119      	bne.n	8002568 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	330c      	adds	r3, #12
 800253a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	e853 3f00 	ldrex	r3, [r3]
 8002542:	60bb      	str	r3, [r7, #8]
   return(result);
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f023 0310 	bic.w	r3, r3, #16
 800254a:	647b      	str	r3, [r7, #68]	@ 0x44
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	330c      	adds	r3, #12
 8002552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002554:	61ba      	str	r2, [r7, #24]
 8002556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002558:	6979      	ldr	r1, [r7, #20]
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	e841 2300 	strex	r3, r2, [r1]
 8002560:	613b      	str	r3, [r7, #16]
   return(result);
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e5      	bne.n	8002534 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2220      	movs	r2, #32
 800256c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002576:	bf00      	nop
 8002578:	3754      	adds	r7, #84	@ 0x54
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
	...

08002584 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002584:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002588:	b0c0      	sub	sp, #256	@ 0x100
 800258a:	af00      	add	r7, sp, #0
 800258c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800259c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a0:	68d9      	ldr	r1, [r3, #12]
 80025a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	ea40 0301 	orr.w	r3, r0, r1
 80025ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	431a      	orrs	r2, r3
 80025c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80025d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80025dc:	f021 010c 	bic.w	r1, r1, #12
 80025e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80025ea:	430b      	orrs	r3, r1
 80025ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80025fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025fe:	6999      	ldr	r1, [r3, #24]
 8002600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	ea40 0301 	orr.w	r3, r0, r1
 800260a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800260c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	4b8f      	ldr	r3, [pc, #572]	@ (8002850 <UART_SetConfig+0x2cc>)
 8002614:	429a      	cmp	r2, r3
 8002616:	d005      	beq.n	8002624 <UART_SetConfig+0xa0>
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	4b8d      	ldr	r3, [pc, #564]	@ (8002854 <UART_SetConfig+0x2d0>)
 8002620:	429a      	cmp	r2, r3
 8002622:	d104      	bne.n	800262e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002624:	f7ff fb34 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 8002628:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800262c:	e003      	b.n	8002636 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800262e:	f7ff fb1b 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002632:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002640:	f040 810c 	bne.w	800285c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002648:	2200      	movs	r2, #0
 800264a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800264e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002652:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002656:	4622      	mov	r2, r4
 8002658:	462b      	mov	r3, r5
 800265a:	1891      	adds	r1, r2, r2
 800265c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800265e:	415b      	adcs	r3, r3
 8002660:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002662:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002666:	4621      	mov	r1, r4
 8002668:	eb12 0801 	adds.w	r8, r2, r1
 800266c:	4629      	mov	r1, r5
 800266e:	eb43 0901 	adc.w	r9, r3, r1
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800267e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002682:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	4623      	mov	r3, r4
 800268c:	eb18 0303 	adds.w	r3, r8, r3
 8002690:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002694:	462b      	mov	r3, r5
 8002696:	eb49 0303 	adc.w	r3, r9, r3
 800269a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026aa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026b2:	460b      	mov	r3, r1
 80026b4:	18db      	adds	r3, r3, r3
 80026b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026b8:	4613      	mov	r3, r2
 80026ba:	eb42 0303 	adc.w	r3, r2, r3
 80026be:	657b      	str	r3, [r7, #84]	@ 0x54
 80026c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80026c8:	f7fd fdda 	bl	8000280 <__aeabi_uldivmod>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <UART_SetConfig+0x2d4>)
 80026d2:	fba3 2302 	umull	r2, r3, r3, r2
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	011c      	lsls	r4, r3, #4
 80026da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026de:	2200      	movs	r2, #0
 80026e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026e4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80026e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80026ec:	4642      	mov	r2, r8
 80026ee:	464b      	mov	r3, r9
 80026f0:	1891      	adds	r1, r2, r2
 80026f2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80026f4:	415b      	adcs	r3, r3
 80026f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80026fc:	4641      	mov	r1, r8
 80026fe:	eb12 0a01 	adds.w	sl, r2, r1
 8002702:	4649      	mov	r1, r9
 8002704:	eb43 0b01 	adc.w	fp, r3, r1
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002714:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002718:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800271c:	4692      	mov	sl, r2
 800271e:	469b      	mov	fp, r3
 8002720:	4643      	mov	r3, r8
 8002722:	eb1a 0303 	adds.w	r3, sl, r3
 8002726:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800272a:	464b      	mov	r3, r9
 800272c:	eb4b 0303 	adc.w	r3, fp, r3
 8002730:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002740:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002744:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002748:	460b      	mov	r3, r1
 800274a:	18db      	adds	r3, r3, r3
 800274c:	643b      	str	r3, [r7, #64]	@ 0x40
 800274e:	4613      	mov	r3, r2
 8002750:	eb42 0303 	adc.w	r3, r2, r3
 8002754:	647b      	str	r3, [r7, #68]	@ 0x44
 8002756:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800275a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800275e:	f7fd fd8f 	bl	8000280 <__aeabi_uldivmod>
 8002762:	4602      	mov	r2, r0
 8002764:	460b      	mov	r3, r1
 8002766:	4611      	mov	r1, r2
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <UART_SetConfig+0x2d4>)
 800276a:	fba3 2301 	umull	r2, r3, r3, r1
 800276e:	095b      	lsrs	r3, r3, #5
 8002770:	2264      	movs	r2, #100	@ 0x64
 8002772:	fb02 f303 	mul.w	r3, r2, r3
 8002776:	1acb      	subs	r3, r1, r3
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800277e:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <UART_SetConfig+0x2d4>)
 8002780:	fba3 2302 	umull	r2, r3, r3, r2
 8002784:	095b      	lsrs	r3, r3, #5
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800278c:	441c      	add	r4, r3
 800278e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002792:	2200      	movs	r2, #0
 8002794:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002798:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800279c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027a0:	4642      	mov	r2, r8
 80027a2:	464b      	mov	r3, r9
 80027a4:	1891      	adds	r1, r2, r2
 80027a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027a8:	415b      	adcs	r3, r3
 80027aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027b0:	4641      	mov	r1, r8
 80027b2:	1851      	adds	r1, r2, r1
 80027b4:	6339      	str	r1, [r7, #48]	@ 0x30
 80027b6:	4649      	mov	r1, r9
 80027b8:	414b      	adcs	r3, r1
 80027ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80027c8:	4659      	mov	r1, fp
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	4651      	mov	r1, sl
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	4651      	mov	r1, sl
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	4642      	mov	r2, r8
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80027e4:	464b      	mov	r3, r9
 80027e6:	460a      	mov	r2, r1
 80027e8:	eb42 0303 	adc.w	r3, r2, r3
 80027ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80027fc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002800:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002804:	460b      	mov	r3, r1
 8002806:	18db      	adds	r3, r3, r3
 8002808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280a:	4613      	mov	r3, r2
 800280c:	eb42 0303 	adc.w	r3, r2, r3
 8002810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002812:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002816:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800281a:	f7fd fd31 	bl	8000280 <__aeabi_uldivmod>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <UART_SetConfig+0x2d4>)
 8002824:	fba3 1302 	umull	r1, r3, r3, r2
 8002828:	095b      	lsrs	r3, r3, #5
 800282a:	2164      	movs	r1, #100	@ 0x64
 800282c:	fb01 f303 	mul.w	r3, r1, r3
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	3332      	adds	r3, #50	@ 0x32
 8002836:	4a08      	ldr	r2, [pc, #32]	@ (8002858 <UART_SetConfig+0x2d4>)
 8002838:	fba2 2303 	umull	r2, r3, r2, r3
 800283c:	095b      	lsrs	r3, r3, #5
 800283e:	f003 0207 	and.w	r2, r3, #7
 8002842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4422      	add	r2, r4
 800284a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800284c:	e106      	b.n	8002a5c <UART_SetConfig+0x4d8>
 800284e:	bf00      	nop
 8002850:	40011000 	.word	0x40011000
 8002854:	40011400 	.word	0x40011400
 8002858:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800285c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002860:	2200      	movs	r2, #0
 8002862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002866:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800286a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800286e:	4642      	mov	r2, r8
 8002870:	464b      	mov	r3, r9
 8002872:	1891      	adds	r1, r2, r2
 8002874:	6239      	str	r1, [r7, #32]
 8002876:	415b      	adcs	r3, r3
 8002878:	627b      	str	r3, [r7, #36]	@ 0x24
 800287a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800287e:	4641      	mov	r1, r8
 8002880:	1854      	adds	r4, r2, r1
 8002882:	4649      	mov	r1, r9
 8002884:	eb43 0501 	adc.w	r5, r3, r1
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	00eb      	lsls	r3, r5, #3
 8002892:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002896:	00e2      	lsls	r2, r4, #3
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	4643      	mov	r3, r8
 800289e:	18e3      	adds	r3, r4, r3
 80028a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028a4:	464b      	mov	r3, r9
 80028a6:	eb45 0303 	adc.w	r3, r5, r3
 80028aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028ba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028be:	f04f 0200 	mov.w	r2, #0
 80028c2:	f04f 0300 	mov.w	r3, #0
 80028c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80028ca:	4629      	mov	r1, r5
 80028cc:	008b      	lsls	r3, r1, #2
 80028ce:	4621      	mov	r1, r4
 80028d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028d4:	4621      	mov	r1, r4
 80028d6:	008a      	lsls	r2, r1, #2
 80028d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80028dc:	f7fd fcd0 	bl	8000280 <__aeabi_uldivmod>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4b60      	ldr	r3, [pc, #384]	@ (8002a68 <UART_SetConfig+0x4e4>)
 80028e6:	fba3 2302 	umull	r2, r3, r3, r2
 80028ea:	095b      	lsrs	r3, r3, #5
 80028ec:	011c      	lsls	r4, r3, #4
 80028ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028f2:	2200      	movs	r2, #0
 80028f4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80028f8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80028fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002900:	4642      	mov	r2, r8
 8002902:	464b      	mov	r3, r9
 8002904:	1891      	adds	r1, r2, r2
 8002906:	61b9      	str	r1, [r7, #24]
 8002908:	415b      	adcs	r3, r3
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002910:	4641      	mov	r1, r8
 8002912:	1851      	adds	r1, r2, r1
 8002914:	6139      	str	r1, [r7, #16]
 8002916:	4649      	mov	r1, r9
 8002918:	414b      	adcs	r3, r1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002928:	4659      	mov	r1, fp
 800292a:	00cb      	lsls	r3, r1, #3
 800292c:	4651      	mov	r1, sl
 800292e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002932:	4651      	mov	r1, sl
 8002934:	00ca      	lsls	r2, r1, #3
 8002936:	4610      	mov	r0, r2
 8002938:	4619      	mov	r1, r3
 800293a:	4603      	mov	r3, r0
 800293c:	4642      	mov	r2, r8
 800293e:	189b      	adds	r3, r3, r2
 8002940:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002944:	464b      	mov	r3, r9
 8002946:	460a      	mov	r2, r1
 8002948:	eb42 0303 	adc.w	r3, r2, r3
 800294c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	67bb      	str	r3, [r7, #120]	@ 0x78
 800295a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	f04f 0300 	mov.w	r3, #0
 8002964:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002968:	4649      	mov	r1, r9
 800296a:	008b      	lsls	r3, r1, #2
 800296c:	4641      	mov	r1, r8
 800296e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002972:	4641      	mov	r1, r8
 8002974:	008a      	lsls	r2, r1, #2
 8002976:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800297a:	f7fd fc81 	bl	8000280 <__aeabi_uldivmod>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	4611      	mov	r1, r2
 8002984:	4b38      	ldr	r3, [pc, #224]	@ (8002a68 <UART_SetConfig+0x4e4>)
 8002986:	fba3 2301 	umull	r2, r3, r3, r1
 800298a:	095b      	lsrs	r3, r3, #5
 800298c:	2264      	movs	r2, #100	@ 0x64
 800298e:	fb02 f303 	mul.w	r3, r2, r3
 8002992:	1acb      	subs	r3, r1, r3
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	3332      	adds	r3, #50	@ 0x32
 8002998:	4a33      	ldr	r2, [pc, #204]	@ (8002a68 <UART_SetConfig+0x4e4>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029a4:	441c      	add	r4, r3
 80029a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029aa:	2200      	movs	r2, #0
 80029ac:	673b      	str	r3, [r7, #112]	@ 0x70
 80029ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80029b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029b4:	4642      	mov	r2, r8
 80029b6:	464b      	mov	r3, r9
 80029b8:	1891      	adds	r1, r2, r2
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	415b      	adcs	r3, r3
 80029be:	60fb      	str	r3, [r7, #12]
 80029c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029c4:	4641      	mov	r1, r8
 80029c6:	1851      	adds	r1, r2, r1
 80029c8:	6039      	str	r1, [r7, #0]
 80029ca:	4649      	mov	r1, r9
 80029cc:	414b      	adcs	r3, r1
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80029dc:	4659      	mov	r1, fp
 80029de:	00cb      	lsls	r3, r1, #3
 80029e0:	4651      	mov	r1, sl
 80029e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029e6:	4651      	mov	r1, sl
 80029e8:	00ca      	lsls	r2, r1, #3
 80029ea:	4610      	mov	r0, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	4603      	mov	r3, r0
 80029f0:	4642      	mov	r2, r8
 80029f2:	189b      	adds	r3, r3, r2
 80029f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80029f6:	464b      	mov	r3, r9
 80029f8:	460a      	mov	r2, r1
 80029fa:	eb42 0303 	adc.w	r3, r2, r3
 80029fe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a18:	4649      	mov	r1, r9
 8002a1a:	008b      	lsls	r3, r1, #2
 8002a1c:	4641      	mov	r1, r8
 8002a1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a22:	4641      	mov	r1, r8
 8002a24:	008a      	lsls	r2, r1, #2
 8002a26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a2a:	f7fd fc29 	bl	8000280 <__aeabi_uldivmod>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	4b0d      	ldr	r3, [pc, #52]	@ (8002a68 <UART_SetConfig+0x4e4>)
 8002a34:	fba3 1302 	umull	r1, r3, r3, r2
 8002a38:	095b      	lsrs	r3, r3, #5
 8002a3a:	2164      	movs	r1, #100	@ 0x64
 8002a3c:	fb01 f303 	mul.w	r3, r1, r3
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	3332      	adds	r3, #50	@ 0x32
 8002a46:	4a08      	ldr	r2, [pc, #32]	@ (8002a68 <UART_SetConfig+0x4e4>)
 8002a48:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	f003 020f 	and.w	r2, r3, #15
 8002a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4422      	add	r2, r4
 8002a5a:	609a      	str	r2, [r3, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a62:	46bd      	mov	sp, r7
 8002a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a68:	51eb851f 	.word	0x51eb851f

08002a6c <__NVIC_SetPriority>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	4603      	mov	r3, r0
 8002a74:	6039      	str	r1, [r7, #0]
 8002a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	db0a      	blt.n	8002a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	490c      	ldr	r1, [pc, #48]	@ (8002ab8 <__NVIC_SetPriority+0x4c>)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	0112      	lsls	r2, r2, #4
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	440b      	add	r3, r1
 8002a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a94:	e00a      	b.n	8002aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4908      	ldr	r1, [pc, #32]	@ (8002abc <__NVIC_SetPriority+0x50>)
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3b04      	subs	r3, #4
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	761a      	strb	r2, [r3, #24]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	e000e100 	.word	0xe000e100
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ac4:	4b05      	ldr	r3, [pc, #20]	@ (8002adc <SysTick_Handler+0x1c>)
 8002ac6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ac8:	f001 feaa 	bl	8004820 <xTaskGetSchedulerState>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d001      	beq.n	8002ad6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ad2:	f002 fca1 	bl	8005418 <xPortSysTickHandler>
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000e010 	.word	0xe000e010

08002ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	f06f 0004 	mvn.w	r0, #4
 8002aea:	f7ff ffbf 	bl	8002a6c <__NVIC_SetPriority>
#endif
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002afa:	f3ef 8305 	mrs	r3, IPSR
 8002afe:	603b      	str	r3, [r7, #0]
  return(result);
 8002b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002b06:	f06f 0305 	mvn.w	r3, #5
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	e00c      	b.n	8002b28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b38 <osKernelInitialize+0x44>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <osKernelInitialize+0x44>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	607b      	str	r3, [r7, #4]
 8002b20:	e002      	b.n	8002b28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	200001d0 	.word	0x200001d0

08002b3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b42:	f3ef 8305 	mrs	r3, IPSR
 8002b46:	603b      	str	r3, [r7, #0]
  return(result);
 8002b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002b4e:	f06f 0305 	mvn.w	r3, #5
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	e010      	b.n	8002b78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b56:	4b0b      	ldr	r3, [pc, #44]	@ (8002b84 <osKernelStart+0x48>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d109      	bne.n	8002b72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002b5e:	f7ff ffbf 	bl	8002ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002b62:	4b08      	ldr	r3, [pc, #32]	@ (8002b84 <osKernelStart+0x48>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002b68:	f001 f9e6 	bl	8003f38 <vTaskStartScheduler>
      stat = osOK;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	607b      	str	r3, [r7, #4]
 8002b70:	e002      	b.n	8002b78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295
 8002b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	200001d0 	.word	0x200001d0

08002b88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b08e      	sub	sp, #56	@ 0x38
 8002b8c:	af04      	add	r7, sp, #16
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b98:	f3ef 8305 	mrs	r3, IPSR
 8002b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8002b9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d17e      	bne.n	8002ca2 <osThreadNew+0x11a>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d07b      	beq.n	8002ca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002bae:	2318      	movs	r3, #24
 8002bb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d045      	beq.n	8002c4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d002      	beq.n	8002bd0 <osThreadNew+0x48>
        name = attr->name;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d002      	beq.n	8002bde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <osThreadNew+0x6e>
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b38      	cmp	r3, #56	@ 0x38
 8002be8:	d805      	bhi.n	8002bf6 <osThreadNew+0x6e>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <osThreadNew+0x72>
        return (NULL);
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e054      	b.n	8002ca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	695b      	ldr	r3, [r3, #20]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00e      	beq.n	8002c30 <osThreadNew+0xa8>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2ba7      	cmp	r3, #167	@ 0xa7
 8002c18:	d90a      	bls.n	8002c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d006      	beq.n	8002c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <osThreadNew+0xa8>
        mem = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
 8002c2e:	e010      	b.n	8002c52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10c      	bne.n	8002c52 <osThreadNew+0xca>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d108      	bne.n	8002c52 <osThreadNew+0xca>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d104      	bne.n	8002c52 <osThreadNew+0xca>
          mem = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e001      	b.n	8002c52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d110      	bne.n	8002c7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002c60:	9202      	str	r2, [sp, #8]
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6a3a      	ldr	r2, [r7, #32]
 8002c6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fe66 	bl	8003940 <xTaskCreateStatic>
 8002c74:	4603      	mov	r3, r0
 8002c76:	613b      	str	r3, [r7, #16]
 8002c78:	e013      	b.n	8002ca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d110      	bne.n	8002ca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	9301      	str	r3, [sp, #4]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 feb4 	bl	8003a00 <xTaskCreate>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d001      	beq.n	8002ca2 <osThreadNew+0x11a>
            hTask = NULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ca2:	693b      	ldr	r3, [r7, #16]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8002cb2:	f001 fda5 	bl	8004800 <xTaskGetCurrentTaskHandle>
 8002cb6:	6078      	str	r0, [r7, #4]

  return (id);
 8002cb8:	687b      	ldr	r3, [r7, #4]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b086      	sub	sp, #24
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cce:	f3ef 8305 	mrs	r3, IPSR
 8002cd2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8002cda:	f06f 0305 	mvn.w	r3, #5
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	e00b      	b.n	8002cfa <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d103      	bne.n	8002cf0 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8002ce8:	f06f 0303 	mvn.w	r3, #3
 8002cec:	617b      	str	r3, [r7, #20]
 8002cee:	e004      	b.n	8002cfa <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8002cf4:	6938      	ldr	r0, [r7, #16]
 8002cf6:	f001 f817 	bl	8003d28 <vTaskSuspend>
  }

  return (stat);
 8002cfa:	697b      	ldr	r3, [r7, #20]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d10:	f3ef 8305 	mrs	r3, IPSR
 8002d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d16:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d003      	beq.n	8002d24 <osThreadResume+0x20>
    stat = osErrorISR;
 8002d1c:	f06f 0305 	mvn.w	r3, #5
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	e00b      	b.n	8002d3c <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <osThreadResume+0x2e>
    stat = osErrorParameter;
 8002d2a:	f06f 0303 	mvn.w	r3, #3
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	e004      	b.n	8002d3c <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 8002d36:	6938      	ldr	r0, [r7, #16]
 8002d38:	f001 f89e 	bl	8003e78 <vTaskResume>
  }

  return (stat);
 8002d3c:	697b      	ldr	r3, [r7, #20]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d4e:	f3ef 8305 	mrs	r3, IPSR
 8002d52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <osDelay+0x1c>
    stat = osErrorISR;
 8002d5a:	f06f 0305 	mvn.w	r3, #5
 8002d5e:	60fb      	str	r3, [r7, #12]
 8002d60:	e007      	b.n	8002d72 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 ffa5 	bl	8003cbc <vTaskDelay>
    }
  }

  return (stat);
 8002d72:	68fb      	ldr	r3, [r7, #12]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a07      	ldr	r2, [pc, #28]	@ (8002da8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d8c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4a06      	ldr	r2, [pc, #24]	@ (8002dac <vApplicationGetIdleTaskMemory+0x30>)
 8002d92:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2280      	movs	r2, #128	@ 0x80
 8002d98:	601a      	str	r2, [r3, #0]
}
 8002d9a:	bf00      	nop
 8002d9c:	3714      	adds	r7, #20
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200001d4 	.word	0x200001d4
 8002dac:	2000027c 	.word	0x2000027c

08002db0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <vApplicationGetTimerTaskMemory+0x2c>)
 8002dc0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a06      	ldr	r2, [pc, #24]	@ (8002de0 <vApplicationGetTimerTaskMemory+0x30>)
 8002dc6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dce:	601a      	str	r2, [r3, #0]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	2000047c 	.word	0x2000047c
 8002de0:	20000524 	.word	0x20000524

08002de4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f103 0208 	add.w	r2, r3, #8
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f04f 32ff 	mov.w	r2, #4294967295
 8002dfc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f103 0208 	add.w	r2, r3, #8
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f103 0208 	add.w	r2, r3, #8
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b085      	sub	sp, #20
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	683a      	ldr	r2, [r7, #0]
 8002e62:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	601a      	str	r2, [r3, #0]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e86:	b480      	push	{r7}
 8002e88:	b085      	sub	sp, #20
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	6078      	str	r0, [r7, #4]
 8002e8e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	e00c      	b.n	8002ec0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	3308      	adds	r3, #8
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e002      	b.n	8002eb4 <vListInsert+0x2e>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	60fb      	str	r3, [r7, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d2f6      	bcs.n	8002eae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6892      	ldr	r2, [r2, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6852      	ldr	r2, [r2, #4]
 8002f18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d103      	bne.n	8002f2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1e5a      	subs	r2, r3, #1
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10b      	bne.n	8002f78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f64:	f383 8811 	msr	BASEPRI, r3
 8002f68:	f3bf 8f6f 	isb	sy
 8002f6c:	f3bf 8f4f 	dsb	sy
 8002f70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f72:	bf00      	nop
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002f78:	f002 f9be 	bl	80052f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f84:	68f9      	ldr	r1, [r7, #12]
 8002f86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	441a      	add	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	68f9      	ldr	r1, [r7, #12]
 8002fac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	441a      	add	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	22ff      	movs	r2, #255	@ 0xff
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d114      	bne.n	8002ff8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01a      	beq.n	800300c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	3310      	adds	r3, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fa4a 	bl	8004474 <xTaskRemoveFromEventList>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800301c <xQueueGenericReset+0xd0>)
 8002fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fec:	601a      	str	r2, [r3, #0]
 8002fee:	f3bf 8f4f 	dsb	sy
 8002ff2:	f3bf 8f6f 	isb	sy
 8002ff6:	e009      	b.n	800300c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	3310      	adds	r3, #16
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f7ff fef1 	bl	8002de4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	3324      	adds	r3, #36	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff feec 	bl	8002de4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800300c:	f002 f9a6 	bl	800535c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	e000ed04 	.word	0xe000ed04

08003020 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003020:	b580      	push	{r7, lr}
 8003022:	b08e      	sub	sp, #56	@ 0x38
 8003024:	af02      	add	r7, sp, #8
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
 800302c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10b      	bne.n	800304c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003046:	bf00      	nop
 8003048:	bf00      	nop
 800304a:	e7fd      	b.n	8003048 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10b      	bne.n	800306a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop
 8003068:	e7fd      	b.n	8003066 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d002      	beq.n	8003076 <xQueueGenericCreateStatic+0x56>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <xQueueGenericCreateStatic+0x5a>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueGenericCreateStatic+0x5c>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	623b      	str	r3, [r7, #32]
}
 8003092:	bf00      	nop
 8003094:	bf00      	nop
 8003096:	e7fd      	b.n	8003094 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d102      	bne.n	80030a4 <xQueueGenericCreateStatic+0x84>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d101      	bne.n	80030a8 <xQueueGenericCreateStatic+0x88>
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <xQueueGenericCreateStatic+0x8a>
 80030a8:	2300      	movs	r3, #0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10b      	bne.n	80030c6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80030ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b2:	f383 8811 	msr	BASEPRI, r3
 80030b6:	f3bf 8f6f 	isb	sy
 80030ba:	f3bf 8f4f 	dsb	sy
 80030be:	61fb      	str	r3, [r7, #28]
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	e7fd      	b.n	80030c2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80030c6:	2350      	movs	r3, #80	@ 0x50
 80030c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	2b50      	cmp	r3, #80	@ 0x50
 80030ce:	d00b      	beq.n	80030e8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80030d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030d4:	f383 8811 	msr	BASEPRI, r3
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	f3bf 8f4f 	dsb	sy
 80030e0:	61bb      	str	r3, [r7, #24]
}
 80030e2:	bf00      	nop
 80030e4:	bf00      	nop
 80030e6:	e7fd      	b.n	80030e4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80030e8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80030ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80030f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80030fc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	4613      	mov	r3, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	68b9      	ldr	r1, [r7, #8]
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 f805 	bl	800311a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003112:	4618      	mov	r0, r3
 8003114:	3730      	adds	r7, #48	@ 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	607a      	str	r2, [r7, #4]
 8003126:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e002      	b.n	800313c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	68ba      	ldr	r2, [r7, #8]
 8003146:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003148:	2101      	movs	r1, #1
 800314a:	69b8      	ldr	r0, [r7, #24]
 800314c:	f7ff fefe 	bl	8002f4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	78fa      	ldrb	r2, [r7, #3]
 8003154:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08e      	sub	sp, #56	@ 0x38
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800316e:	2300      	movs	r3, #0
 8003170:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10b      	bne.n	8003194 <xQueueGenericSend+0x34>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <xQueueGenericSend+0x42>
 800319a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <xQueueGenericSend+0x46>
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <xQueueGenericSend+0x48>
 80031a6:	2300      	movs	r3, #0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <xQueueGenericSend+0x64>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031be:	bf00      	nop
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d103      	bne.n	80031d2 <xQueueGenericSend+0x72>
 80031ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <xQueueGenericSend+0x76>
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <xQueueGenericSend+0x78>
 80031d6:	2300      	movs	r3, #0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10b      	bne.n	80031f4 <xQueueGenericSend+0x94>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	623b      	str	r3, [r7, #32]
}
 80031ee:	bf00      	nop
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031f4:	f001 fb14 	bl	8004820 <xTaskGetSchedulerState>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <xQueueGenericSend+0xa4>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <xQueueGenericSend+0xa8>
 8003204:	2301      	movs	r3, #1
 8003206:	e000      	b.n	800320a <xQueueGenericSend+0xaa>
 8003208:	2300      	movs	r3, #0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10b      	bne.n	8003226 <xQueueGenericSend+0xc6>
	__asm volatile
 800320e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	61fb      	str	r3, [r7, #28]
}
 8003220:	bf00      	nop
 8003222:	bf00      	nop
 8003224:	e7fd      	b.n	8003222 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003226:	f002 f867 	bl	80052f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800322e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003232:	429a      	cmp	r2, r3
 8003234:	d302      	bcc.n	800323c <xQueueGenericSend+0xdc>
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	2b02      	cmp	r3, #2
 800323a:	d129      	bne.n	8003290 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003242:	f000 fa0f 	bl	8003664 <prvCopyDataToQueue>
 8003246:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	2b00      	cmp	r3, #0
 800324e:	d010      	beq.n	8003272 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	3324      	adds	r3, #36	@ 0x24
 8003254:	4618      	mov	r0, r3
 8003256:	f001 f90d 	bl	8004474 <xTaskRemoveFromEventList>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003260:	4b3f      	ldr	r3, [pc, #252]	@ (8003360 <xQueueGenericSend+0x200>)
 8003262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	f3bf 8f4f 	dsb	sy
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	e00a      	b.n	8003288 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003278:	4b39      	ldr	r3, [pc, #228]	@ (8003360 <xQueueGenericSend+0x200>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003288:	f002 f868 	bl	800535c <vPortExitCritical>
				return pdPASS;
 800328c:	2301      	movs	r3, #1
 800328e:	e063      	b.n	8003358 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d103      	bne.n	800329e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003296:	f002 f861 	bl	800535c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800329a:	2300      	movs	r3, #0
 800329c:	e05c      	b.n	8003358 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800329e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032a4:	f107 0314 	add.w	r3, r7, #20
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f947 	bl	800453c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032ae:	2301      	movs	r3, #1
 80032b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032b2:	f002 f853 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032b6:	f000 feaf 	bl	8004018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ba:	f002 f81d 	bl	80052f8 <vPortEnterCritical>
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032c4:	b25b      	sxtb	r3, r3
 80032c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ca:	d103      	bne.n	80032d4 <xQueueGenericSend+0x174>
 80032cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032da:	b25b      	sxtb	r3, r3
 80032dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e0:	d103      	bne.n	80032ea <xQueueGenericSend+0x18a>
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032ea:	f002 f837 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	4611      	mov	r1, r2
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 f936 	bl	8004568 <xTaskCheckForTimeOut>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d124      	bne.n	800334c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003302:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003304:	f000 faa6 	bl	8003854 <prvIsQueueFull>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d018      	beq.n	8003340 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800330e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003310:	3310      	adds	r3, #16
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4611      	mov	r1, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f85a 	bl	80043d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800331c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800331e:	f000 fa31 	bl	8003784 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003322:	f000 fe87 	bl	8004034 <xTaskResumeAll>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f af7c 	bne.w	8003226 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800332e:	4b0c      	ldr	r3, [pc, #48]	@ (8003360 <xQueueGenericSend+0x200>)
 8003330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	e772      	b.n	8003226 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003342:	f000 fa1f 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003346:	f000 fe75 	bl	8004034 <xTaskResumeAll>
 800334a:	e76c      	b.n	8003226 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800334c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800334e:	f000 fa19 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003352:	f000 fe6f 	bl	8004034 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003356:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003358:	4618      	mov	r0, r3
 800335a:	3738      	adds	r7, #56	@ 0x38
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	e000ed04 	.word	0xe000ed04

08003364 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b090      	sub	sp, #64	@ 0x40
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <xQueueGenericSendFromISR+0x3e>
 800339a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericSendFromISR+0x42>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericSendFromISR+0x44>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSendFromISR+0x6e>
 80033ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <xQueueGenericSendFromISR+0x72>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <xQueueGenericSendFromISR+0x74>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033f4:	f002 f860 	bl	80054b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80033f8:	f3ef 8211 	mrs	r2, BASEPRI
 80033fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003410:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003412:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003414:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003416:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800341a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800341c:	429a      	cmp	r2, r3
 800341e:	d302      	bcc.n	8003426 <xQueueGenericSendFromISR+0xc2>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d12f      	bne.n	8003486 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003428:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800342c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003436:	683a      	ldr	r2, [r7, #0]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800343c:	f000 f912 	bl	8003664 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003440:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d112      	bne.n	8003470 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344e:	2b00      	cmp	r3, #0
 8003450:	d016      	beq.n	8003480 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003454:	3324      	adds	r3, #36	@ 0x24
 8003456:	4618      	mov	r0, r3
 8003458:	f001 f80c 	bl	8004474 <xTaskRemoveFromEventList>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d00e      	beq.n	8003480 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00b      	beq.n	8003480 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e007      	b.n	8003480 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003474:	3301      	adds	r3, #1
 8003476:	b2db      	uxtb	r3, r3
 8003478:	b25a      	sxtb	r2, r3
 800347a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003480:	2301      	movs	r3, #1
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003484:	e001      	b.n	800348a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003486:	2300      	movs	r3, #0
 8003488:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800348a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003494:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003496:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003498:	4618      	mov	r0, r3
 800349a:	3740      	adds	r7, #64	@ 0x40
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08c      	sub	sp, #48	@ 0x30
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80034b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xQueueReceive+0x32>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	623b      	str	r3, [r7, #32]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d103      	bne.n	80034e0 <xQueueReceive+0x40>
 80034d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <xQueueReceive+0x44>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <xQueueReceive+0x46>
 80034e4:	2300      	movs	r3, #0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10b      	bne.n	8003502 <xQueueReceive+0x62>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	61fb      	str	r3, [r7, #28]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003502:	f001 f98d 	bl	8004820 <xTaskGetSchedulerState>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xQueueReceive+0x72>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <xQueueReceive+0x76>
 8003512:	2301      	movs	r3, #1
 8003514:	e000      	b.n	8003518 <xQueueReceive+0x78>
 8003516:	2300      	movs	r3, #0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <xQueueReceive+0x94>
	__asm volatile
 800351c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003520:	f383 8811 	msr	BASEPRI, r3
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	61bb      	str	r3, [r7, #24]
}
 800352e:	bf00      	nop
 8003530:	bf00      	nop
 8003532:	e7fd      	b.n	8003530 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003534:	f001 fee0 	bl	80052f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800353c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d01f      	beq.n	8003584 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003548:	f000 f8f6 	bl	8003738 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00f      	beq.n	800357c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800355c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355e:	3310      	adds	r3, #16
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ff87 	bl	8004474 <xTaskRemoveFromEventList>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800356c:	4b3c      	ldr	r3, [pc, #240]	@ (8003660 <xQueueReceive+0x1c0>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800357c:	f001 feee 	bl	800535c <vPortExitCritical>
				return pdPASS;
 8003580:	2301      	movs	r3, #1
 8003582:	e069      	b.n	8003658 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d103      	bne.n	8003592 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800358a:	f001 fee7 	bl	800535c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800358e:	2300      	movs	r3, #0
 8003590:	e062      	b.n	8003658 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003598:	f107 0310 	add.w	r3, r7, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f000 ffcd 	bl	800453c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035a2:	2301      	movs	r3, #1
 80035a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80035a6:	f001 fed9 	bl	800535c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80035aa:	f000 fd35 	bl	8004018 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80035ae:	f001 fea3 	bl	80052f8 <vPortEnterCritical>
 80035b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035b8:	b25b      	sxtb	r3, r3
 80035ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035be:	d103      	bne.n	80035c8 <xQueueReceive+0x128>
 80035c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035ce:	b25b      	sxtb	r3, r3
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d103      	bne.n	80035de <xQueueReceive+0x13e>
 80035d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80035de:	f001 febd 	bl	800535c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035e2:	1d3a      	adds	r2, r7, #4
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	4611      	mov	r1, r2
 80035ea:	4618      	mov	r0, r3
 80035ec:	f000 ffbc 	bl	8004568 <xTaskCheckForTimeOut>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d123      	bne.n	800363e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035f8:	f000 f916 	bl	8003828 <prvIsQueueEmpty>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d017      	beq.n	8003632 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003604:	3324      	adds	r3, #36	@ 0x24
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f000 fee0 	bl	80043d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003610:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003612:	f000 f8b7 	bl	8003784 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003616:	f000 fd0d 	bl	8004034 <xTaskResumeAll>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d189      	bne.n	8003534 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003620:	4b0f      	ldr	r3, [pc, #60]	@ (8003660 <xQueueReceive+0x1c0>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
 8003630:	e780      	b.n	8003534 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003632:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003634:	f000 f8a6 	bl	8003784 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003638:	f000 fcfc 	bl	8004034 <xTaskResumeAll>
 800363c:	e77a      	b.n	8003534 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800363e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003640:	f000 f8a0 	bl	8003784 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003644:	f000 fcf6 	bl	8004034 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003648:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800364a:	f000 f8ed 	bl	8003828 <prvIsQueueEmpty>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f43f af6f 	beq.w	8003534 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003656:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003658:	4618      	mov	r0, r3
 800365a:	3730      	adds	r7, #48	@ 0x30
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}
 8003660:	e000ed04 	.word	0xe000ed04

08003664 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003678:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10d      	bne.n	800369e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d14d      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	4618      	mov	r0, r3
 8003690:	f001 f8e4 	bl	800485c <xTaskPriorityDisinherit>
 8003694:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	e043      	b.n	8003726 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d119      	bne.n	80036d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6858      	ldr	r0, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ac:	461a      	mov	r2, r3
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	f002 f9f0 	bl	8005a94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685a      	ldr	r2, [r3, #4]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036bc:	441a      	add	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d32b      	bcc.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	605a      	str	r2, [r3, #4]
 80036d6:	e026      	b.n	8003726 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	68d8      	ldr	r0, [r3, #12]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	461a      	mov	r2, r3
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	f002 f9d6 	bl	8005a94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	425b      	negs	r3, r3
 80036f2:	441a      	add	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	429a      	cmp	r2, r3
 8003702:	d207      	bcs.n	8003714 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	425b      	negs	r3, r3
 800370e:	441a      	add	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2b02      	cmp	r3, #2
 8003718:	d105      	bne.n	8003726 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	3b01      	subs	r3, #1
 8003724:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1c5a      	adds	r2, r3, #1
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800372e:	697b      	ldr	r3, [r7, #20]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d018      	beq.n	800377c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	441a      	add	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68da      	ldr	r2, [r3, #12]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	429a      	cmp	r2, r3
 8003762:	d303      	bcc.n	800376c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68d9      	ldr	r1, [r3, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003774:	461a      	mov	r2, r3
 8003776:	6838      	ldr	r0, [r7, #0]
 8003778:	f002 f98c 	bl	8005a94 <memcpy>
	}
}
 800377c:	bf00      	nop
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800378c:	f001 fdb4 	bl	80052f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003796:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003798:	e011      	b.n	80037be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d012      	beq.n	80037c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3324      	adds	r3, #36	@ 0x24
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fe64 	bl	8004474 <xTaskRemoveFromEventList>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037b2:	f000 ff3d 	bl	8004630 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	dce9      	bgt.n	800379a <prvUnlockQueue+0x16>
 80037c6:	e000      	b.n	80037ca <prvUnlockQueue+0x46>
					break;
 80037c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	22ff      	movs	r2, #255	@ 0xff
 80037ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037d2:	f001 fdc3 	bl	800535c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037d6:	f001 fd8f 	bl	80052f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037e2:	e011      	b.n	8003808 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d012      	beq.n	8003812 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3310      	adds	r3, #16
 80037f0:	4618      	mov	r0, r3
 80037f2:	f000 fe3f 	bl	8004474 <xTaskRemoveFromEventList>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037fc:	f000 ff18 	bl	8004630 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003800:	7bbb      	ldrb	r3, [r7, #14]
 8003802:	3b01      	subs	r3, #1
 8003804:	b2db      	uxtb	r3, r3
 8003806:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003808:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800380c:	2b00      	cmp	r3, #0
 800380e:	dce9      	bgt.n	80037e4 <prvUnlockQueue+0x60>
 8003810:	e000      	b.n	8003814 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003812:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	22ff      	movs	r2, #255	@ 0xff
 8003818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800381c:	f001 fd9e 	bl	800535c <vPortExitCritical>
}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003830:	f001 fd62 	bl	80052f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	2b00      	cmp	r3, #0
 800383a:	d102      	bne.n	8003842 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e001      	b.n	8003846 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f001 fd89 	bl	800535c <vPortExitCritical>

	return xReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800385c:	f001 fd4c 	bl	80052f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003868:	429a      	cmp	r2, r3
 800386a:	d102      	bne.n	8003872 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800386c:	2301      	movs	r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	e001      	b.n	8003876 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003876:	f001 fd71 	bl	800535c <vPortExitCritical>

	return xReturn;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e014      	b.n	80038be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003894:	4a0f      	ldr	r2, [pc, #60]	@ (80038d4 <vQueueAddToRegistry+0x50>)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a0:	490c      	ldr	r1, [pc, #48]	@ (80038d4 <vQueueAddToRegistry+0x50>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038aa:	4a0a      	ldr	r2, [pc, #40]	@ (80038d4 <vQueueAddToRegistry+0x50>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	4413      	add	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038b6:	e006      	b.n	80038c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	3301      	adds	r3, #1
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b07      	cmp	r3, #7
 80038c2:	d9e7      	bls.n	8003894 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000924 	.word	0x20000924

080038d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038e8:	f001 fd06 	bl	80052f8 <vPortEnterCritical>
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038f2:	b25b      	sxtb	r3, r3
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f8:	d103      	bne.n	8003902 <vQueueWaitForMessageRestricted+0x2a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003908:	b25b      	sxtb	r3, r3
 800390a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390e:	d103      	bne.n	8003918 <vQueueWaitForMessageRestricted+0x40>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003918:	f001 fd20 	bl	800535c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	3324      	adds	r3, #36	@ 0x24
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fd75 	bl	800441c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003932:	6978      	ldr	r0, [r7, #20]
 8003934:	f7ff ff26 	bl	8003784 <prvUnlockQueue>
	}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003940:	b580      	push	{r7, lr}
 8003942:	b08e      	sub	sp, #56	@ 0x38
 8003944:	af04      	add	r7, sp, #16
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
 800394c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800394e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003958:	f383 8811 	msr	BASEPRI, r3
 800395c:	f3bf 8f6f 	isb	sy
 8003960:	f3bf 8f4f 	dsb	sy
 8003964:	623b      	str	r3, [r7, #32]
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	e7fd      	b.n	8003968 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800396c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10b      	bne.n	800398a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	f3bf 8f4f 	dsb	sy
 8003982:	61fb      	str	r3, [r7, #28]
}
 8003984:	bf00      	nop
 8003986:	bf00      	nop
 8003988:	e7fd      	b.n	8003986 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800398a:	23a8      	movs	r3, #168	@ 0xa8
 800398c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	2ba8      	cmp	r3, #168	@ 0xa8
 8003992:	d00b      	beq.n	80039ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8003994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003998:	f383 8811 	msr	BASEPRI, r3
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	f3bf 8f4f 	dsb	sy
 80039a4:	61bb      	str	r3, [r7, #24]
}
 80039a6:	bf00      	nop
 80039a8:	bf00      	nop
 80039aa:	e7fd      	b.n	80039a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80039ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01e      	beq.n	80039f2 <xTaskCreateStatic+0xb2>
 80039b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01b      	beq.n	80039f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039cc:	2300      	movs	r3, #0
 80039ce:	9303      	str	r3, [sp, #12]
 80039d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d2:	9302      	str	r3, [sp, #8]
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	9301      	str	r3, [sp, #4]
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 f851 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ec:	f000 f8f6 	bl	8003bdc <prvAddNewTaskToReadyList>
 80039f0:	e001      	b.n	80039f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039f6:	697b      	ldr	r3, [r7, #20]
	}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3728      	adds	r7, #40	@ 0x28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b08c      	sub	sp, #48	@ 0x30
 8003a04:	af04      	add	r7, sp, #16
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	603b      	str	r3, [r7, #0]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f001 fd91 	bl	800553c <pvPortMalloc>
 8003a1a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00e      	beq.n	8003a40 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003a22:	20a8      	movs	r0, #168	@ 0xa8
 8003a24:	f001 fd8a 	bl	800553c <pvPortMalloc>
 8003a28:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a36:	e005      	b.n	8003a44 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a38:	6978      	ldr	r0, [r7, #20]
 8003a3a:	f001 fe4d 	bl	80056d8 <vPortFree>
 8003a3e:	e001      	b.n	8003a44 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d017      	beq.n	8003a7a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	2300      	movs	r3, #0
 8003a56:	9303      	str	r3, [sp, #12]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	9302      	str	r3, [sp, #8]
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	9301      	str	r3, [sp, #4]
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68b9      	ldr	r1, [r7, #8]
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f80f 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a6e:	69f8      	ldr	r0, [r7, #28]
 8003a70:	f000 f8b4 	bl	8003bdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61bb      	str	r3, [r7, #24]
 8003a78:	e002      	b.n	8003a80 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a80:	69bb      	ldr	r3, [r7, #24]
	}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3720      	adds	r7, #32
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
	...

08003a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	21a5      	movs	r1, #165	@ 0xa5
 8003aa6:	f001 ff6b 	bl	8005980 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	f023 0307 	bic.w	r3, r3, #7
 8003ac2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad2:	f383 8811 	msr	BASEPRI, r3
 8003ad6:	f3bf 8f6f 	isb	sy
 8003ada:	f3bf 8f4f 	dsb	sy
 8003ade:	617b      	str	r3, [r7, #20]
}
 8003ae0:	bf00      	nop
 8003ae2:	bf00      	nop
 8003ae4:	e7fd      	b.n	8003ae2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01f      	beq.n	8003b2c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aec:	2300      	movs	r3, #0
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	e012      	b.n	8003b18 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	4413      	add	r3, r2
 8003af8:	7819      	ldrb	r1, [r3, #0]
 8003afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	4413      	add	r3, r2
 8003b00:	3334      	adds	r3, #52	@ 0x34
 8003b02:	460a      	mov	r2, r1
 8003b04:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	3301      	adds	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	2b0f      	cmp	r3, #15
 8003b1c:	d9e9      	bls.n	8003af2 <prvInitialiseNewTask+0x66>
 8003b1e:	e000      	b.n	8003b22 <prvInitialiseNewTask+0x96>
			{
				break;
 8003b20:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2a:	e003      	b.n	8003b34 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	2b37      	cmp	r3, #55	@ 0x37
 8003b38:	d901      	bls.n	8003b3e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b3a:	2337      	movs	r3, #55	@ 0x37
 8003b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b42:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b48:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7ff f965 	bl	8002e24 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	3318      	adds	r3, #24
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff f960 	bl	8002e24 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b68:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b72:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b78:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8c:	3354      	adds	r3, #84	@ 0x54
 8003b8e:	224c      	movs	r2, #76	@ 0x4c
 8003b90:	2100      	movs	r1, #0
 8003b92:	4618      	mov	r0, r3
 8003b94:	f001 fef4 	bl	8005980 <memset>
 8003b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd0 <prvInitialiseNewTask+0x144>)
 8003b9c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd4 <prvInitialiseNewTask+0x148>)
 8003ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd8 <prvInitialiseNewTask+0x14c>)
 8003ba8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003baa:	683a      	ldr	r2, [r7, #0]
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	69b8      	ldr	r0, [r7, #24]
 8003bb0:	f001 fa72 	bl	8005098 <pxPortInitialiseStack>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bc6:	bf00      	nop
 8003bc8:	3720      	adds	r7, #32
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20004bb8 	.word	0x20004bb8
 8003bd4:	20004c20 	.word	0x20004c20
 8003bd8:	20004c88 	.word	0x20004c88

08003bdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be4:	f001 fb88 	bl	80052f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003be8:	4b2d      	ldr	r3, [pc, #180]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3301      	adds	r3, #1
 8003bee:	4a2c      	ldr	r2, [pc, #176]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003bf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c00:	4b27      	ldr	r3, [pc, #156]	@ (8003ca0 <prvAddNewTaskToReadyList+0xc4>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d110      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c08:	f000 fd36 	bl	8004678 <prvInitialiseTaskLists>
 8003c0c:	e00d      	b.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c0e:	4b26      	ldr	r3, [pc, #152]	@ (8003ca8 <prvAddNewTaskToReadyList+0xcc>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d109      	bne.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c16:	4b23      	ldr	r3, [pc, #140]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d802      	bhi.n	8003c2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c24:	4a1f      	ldr	r2, [pc, #124]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2a:	4b20      	ldr	r3, [pc, #128]	@ (8003cac <prvAddNewTaskToReadyList+0xd0>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3301      	adds	r3, #1
 8003c30:	4a1e      	ldr	r2, [pc, #120]	@ (8003cac <prvAddNewTaskToReadyList+0xd0>)
 8003c32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	@ (8003cac <prvAddNewTaskToReadyList+0xd0>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb0 <prvAddNewTaskToReadyList+0xd4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d903      	bls.n	8003c50 <prvAddNewTaskToReadyList+0x74>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	4a18      	ldr	r2, [pc, #96]	@ (8003cb0 <prvAddNewTaskToReadyList+0xd4>)
 8003c4e:	6013      	str	r3, [r2, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4a15      	ldr	r2, [pc, #84]	@ (8003cb4 <prvAddNewTaskToReadyList+0xd8>)
 8003c5e:	441a      	add	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	3304      	adds	r3, #4
 8003c64:	4619      	mov	r1, r3
 8003c66:	4610      	mov	r0, r2
 8003c68:	f7ff f8e9 	bl	8002e3e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c6c:	f001 fb76 	bl	800535c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c70:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca8 <prvAddNewTaskToReadyList+0xcc>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c78:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <prvAddNewTaskToReadyList+0xc8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d207      	bcs.n	8003c96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c86:	4b0c      	ldr	r3, [pc, #48]	@ (8003cb8 <prvAddNewTaskToReadyList+0xdc>)
 8003c88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000e38 	.word	0x20000e38
 8003ca4:	20000964 	.word	0x20000964
 8003ca8:	20000e44 	.word	0x20000e44
 8003cac:	20000e54 	.word	0x20000e54
 8003cb0:	20000e40 	.word	0x20000e40
 8003cb4:	20000968 	.word	0x20000968
 8003cb8:	e000ed04 	.word	0xe000ed04

08003cbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d018      	beq.n	8003d00 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cce:	4b14      	ldr	r3, [pc, #80]	@ (8003d20 <vTaskDelay+0x64>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <vTaskDelay+0x32>
	__asm volatile
 8003cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cda:	f383 8811 	msr	BASEPRI, r3
 8003cde:	f3bf 8f6f 	isb	sy
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	60bb      	str	r3, [r7, #8]
}
 8003ce8:	bf00      	nop
 8003cea:	bf00      	nop
 8003cec:	e7fd      	b.n	8003cea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003cee:	f000 f993 	bl	8004018 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fe21 	bl	800493c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cfa:	f000 f99b 	bl	8004034 <xTaskResumeAll>
 8003cfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003d06:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <vTaskDelay+0x68>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000e60 	.word	0x20000e60
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d30:	f001 fae2 	bl	80052f8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <vTaskSuspend+0x18>
 8003d3a:	4b30      	ldr	r3, [pc, #192]	@ (8003dfc <vTaskSuspend+0xd4>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e000      	b.n	8003d42 <vTaskSuspend+0x1a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f8d5 	bl	8002ef8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3318      	adds	r3, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f8cc 	bl	8002ef8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4826      	ldr	r0, [pc, #152]	@ (8003e00 <vTaskSuspend+0xd8>)
 8003d68:	f7ff f869 	bl	8002e3e <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d103      	bne.n	8003d80 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003d80:	f001 faec 	bl	800535c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003d84:	4b1f      	ldr	r3, [pc, #124]	@ (8003e04 <vTaskSuspend+0xdc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003d8c:	f001 fab4 	bl	80052f8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003d90:	f000 fd16 	bl	80047c0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003d94:	f001 fae2 	bl	800535c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003d98:	4b18      	ldr	r3, [pc, #96]	@ (8003dfc <vTaskSuspend+0xd4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d128      	bne.n	8003df4 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 8003da2:	4b18      	ldr	r3, [pc, #96]	@ (8003e04 <vTaskSuspend+0xdc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d018      	beq.n	8003ddc <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003daa:	4b17      	ldr	r3, [pc, #92]	@ (8003e08 <vTaskSuspend+0xe0>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d00b      	beq.n	8003dca <vTaskSuspend+0xa2>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	e7fd      	b.n	8003dc6 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8003dca:	4b10      	ldr	r3, [pc, #64]	@ (8003e0c <vTaskSuspend+0xe4>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dda:	e00b      	b.n	8003df4 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8003ddc:	4b08      	ldr	r3, [pc, #32]	@ (8003e00 <vTaskSuspend+0xd8>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	4b0b      	ldr	r3, [pc, #44]	@ (8003e10 <vTaskSuspend+0xe8>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d103      	bne.n	8003df0 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 8003de8:	4b04      	ldr	r3, [pc, #16]	@ (8003dfc <vTaskSuspend+0xd4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]
	}
 8003dee:	e001      	b.n	8003df4 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 8003df0:	f000 fa88 	bl	8004304 <vTaskSwitchContext>
	}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000964 	.word	0x20000964
 8003e00:	20000e24 	.word	0x20000e24
 8003e04:	20000e44 	.word	0x20000e44
 8003e08:	20000e60 	.word	0x20000e60
 8003e0c:	e000ed04 	.word	0xe000ed04
 8003e10:	20000e38 	.word	0x20000e38

08003e14 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10b      	bne.n	8003e42 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	60fb      	str	r3, [r7, #12]
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	e7fd      	b.n	8003e3e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	4a0a      	ldr	r2, [pc, #40]	@ (8003e70 <prvTaskIsTaskSuspended+0x5c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d10a      	bne.n	8003e62 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e50:	4a08      	ldr	r2, [pc, #32]	@ (8003e74 <prvTaskIsTaskSuspended+0x60>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d005      	beq.n	8003e62 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e62:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003e64:	4618      	mov	r0, r3
 8003e66:	371c      	adds	r7, #28
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	20000e24 	.word	0x20000e24
 8003e74:	20000df8 	.word	0x20000df8

08003e78 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <vTaskResume+0x2a>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	60bb      	str	r3, [r7, #8]
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	e7fd      	b.n	8003e9e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003ea2:	4b21      	ldr	r3, [pc, #132]	@ (8003f28 <vTaskResume+0xb0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	68fa      	ldr	r2, [r7, #12]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d038      	beq.n	8003f1e <vTaskResume+0xa6>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d035      	beq.n	8003f1e <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 8003eb2:	f001 fa21 	bl	80052f8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff ffac 	bl	8003e14 <prvTaskIsTaskSuspended>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d02b      	beq.n	8003f1a <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f816 	bl	8002ef8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed0:	4b16      	ldr	r3, [pc, #88]	@ (8003f2c <vTaskResume+0xb4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d903      	bls.n	8003ee0 <vTaskResume+0x68>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	4a13      	ldr	r2, [pc, #76]	@ (8003f2c <vTaskResume+0xb4>)
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4a10      	ldr	r2, [pc, #64]	@ (8003f30 <vTaskResume+0xb8>)
 8003eee:	441a      	add	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	4610      	mov	r0, r2
 8003ef8:	f7fe ffa1 	bl	8002e3e <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f00:	4b09      	ldr	r3, [pc, #36]	@ (8003f28 <vTaskResume+0xb0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d307      	bcc.n	8003f1a <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003f34 <vTaskResume+0xbc>)
 8003f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003f1a:	f001 fa1f 	bl	800535c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f1e:	bf00      	nop
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000964 	.word	0x20000964
 8003f2c:	20000e40 	.word	0x20000e40
 8003f30:	20000968 	.word	0x20000968
 8003f34:	e000ed04 	.word	0xe000ed04

08003f38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f46:	463a      	mov	r2, r7
 8003f48:	1d39      	adds	r1, r7, #4
 8003f4a:	f107 0308 	add.w	r3, r7, #8
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe ff14 	bl	8002d7c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f54:	6839      	ldr	r1, [r7, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68ba      	ldr	r2, [r7, #8]
 8003f5a:	9202      	str	r2, [sp, #8]
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2300      	movs	r3, #0
 8003f64:	460a      	mov	r2, r1
 8003f66:	4924      	ldr	r1, [pc, #144]	@ (8003ff8 <vTaskStartScheduler+0xc0>)
 8003f68:	4824      	ldr	r0, [pc, #144]	@ (8003ffc <vTaskStartScheduler+0xc4>)
 8003f6a:	f7ff fce9 	bl	8003940 <xTaskCreateStatic>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a23      	ldr	r2, [pc, #140]	@ (8004000 <vTaskStartScheduler+0xc8>)
 8003f72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f74:	4b22      	ldr	r3, [pc, #136]	@ (8004000 <vTaskStartScheduler+0xc8>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	617b      	str	r3, [r7, #20]
 8003f80:	e001      	b.n	8003f86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f8c:	f000 fd2a 	bl	80049e4 <xTimerCreateTimerTask>
 8003f90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d11b      	bne.n	8003fd0 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	613b      	str	r3, [r7, #16]
}
 8003faa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fac:	4b15      	ldr	r3, [pc, #84]	@ (8004004 <vTaskStartScheduler+0xcc>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3354      	adds	r3, #84	@ 0x54
 8003fb2:	4a15      	ldr	r2, [pc, #84]	@ (8004008 <vTaskStartScheduler+0xd0>)
 8003fb4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <vTaskStartScheduler+0xd4>)
 8003fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fbe:	4b14      	ldr	r3, [pc, #80]	@ (8004010 <vTaskStartScheduler+0xd8>)
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003fc4:	4b13      	ldr	r3, [pc, #76]	@ (8004014 <vTaskStartScheduler+0xdc>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fca:	f001 f8f1 	bl	80051b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fce:	e00f      	b.n	8003ff0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd6:	d10b      	bne.n	8003ff0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	60fb      	str	r3, [r7, #12]
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	e7fd      	b.n	8003fec <vTaskStartScheduler+0xb4>
}
 8003ff0:	bf00      	nop
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	080063d8 	.word	0x080063d8
 8003ffc:	08004649 	.word	0x08004649
 8004000:	20000e5c 	.word	0x20000e5c
 8004004:	20000964 	.word	0x20000964
 8004008:	20000040 	.word	0x20000040
 800400c:	20000e58 	.word	0x20000e58
 8004010:	20000e44 	.word	0x20000e44
 8004014:	20000e3c 	.word	0x20000e3c

08004018 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004018:	b480      	push	{r7}
 800401a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800401c:	4b04      	ldr	r3, [pc, #16]	@ (8004030 <vTaskSuspendAll+0x18>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	3301      	adds	r3, #1
 8004022:	4a03      	ldr	r2, [pc, #12]	@ (8004030 <vTaskSuspendAll+0x18>)
 8004024:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	20000e60 	.word	0x20000e60

08004034 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800403e:	2300      	movs	r3, #0
 8004040:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004042:	4b42      	ldr	r3, [pc, #264]	@ (800414c <xTaskResumeAll+0x118>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <xTaskResumeAll+0x2e>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	603b      	str	r3, [r7, #0]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004062:	f001 f949 	bl	80052f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004066:	4b39      	ldr	r3, [pc, #228]	@ (800414c <xTaskResumeAll+0x118>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	4a37      	ldr	r2, [pc, #220]	@ (800414c <xTaskResumeAll+0x118>)
 800406e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004070:	4b36      	ldr	r3, [pc, #216]	@ (800414c <xTaskResumeAll+0x118>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d162      	bne.n	800413e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004078:	4b35      	ldr	r3, [pc, #212]	@ (8004150 <xTaskResumeAll+0x11c>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d05e      	beq.n	800413e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004080:	e02f      	b.n	80040e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004082:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <xTaskResumeAll+0x120>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3318      	adds	r3, #24
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe ff32 	bl	8002ef8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3304      	adds	r3, #4
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe ff2d 	bl	8002ef8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004158 <xTaskResumeAll+0x124>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d903      	bls.n	80040b2 <xTaskResumeAll+0x7e>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004158 <xTaskResumeAll+0x124>)
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040b6:	4613      	mov	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	4a27      	ldr	r2, [pc, #156]	@ (800415c <xTaskResumeAll+0x128>)
 80040c0:	441a      	add	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4619      	mov	r1, r3
 80040c8:	4610      	mov	r0, r2
 80040ca:	f7fe feb8 	bl	8002e3e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d2:	4b23      	ldr	r3, [pc, #140]	@ (8004160 <xTaskResumeAll+0x12c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	429a      	cmp	r2, r3
 80040da:	d302      	bcc.n	80040e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80040dc:	4b21      	ldr	r3, [pc, #132]	@ (8004164 <xTaskResumeAll+0x130>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004154 <xTaskResumeAll+0x120>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1cb      	bne.n	8004082 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040f0:	f000 fb66 	bl	80047c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004168 <xTaskResumeAll+0x134>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d010      	beq.n	8004122 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004100:	f000 f846 	bl	8004190 <xTaskIncrementTick>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800410a:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <xTaskResumeAll+0x130>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3b01      	subs	r3, #1
 8004114:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1f1      	bne.n	8004100 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800411c:	4b12      	ldr	r3, [pc, #72]	@ (8004168 <xTaskResumeAll+0x134>)
 800411e:	2200      	movs	r2, #0
 8004120:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <xTaskResumeAll+0x130>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d009      	beq.n	800413e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800412a:	2301      	movs	r3, #1
 800412c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800412e:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <xTaskResumeAll+0x138>)
 8004130:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f3bf 8f4f 	dsb	sy
 800413a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800413e:	f001 f90d 	bl	800535c <vPortExitCritical>

	return xAlreadyYielded;
 8004142:	68bb      	ldr	r3, [r7, #8]
}
 8004144:	4618      	mov	r0, r3
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	20000e60 	.word	0x20000e60
 8004150:	20000e38 	.word	0x20000e38
 8004154:	20000df8 	.word	0x20000df8
 8004158:	20000e40 	.word	0x20000e40
 800415c:	20000968 	.word	0x20000968
 8004160:	20000964 	.word	0x20000964
 8004164:	20000e4c 	.word	0x20000e4c
 8004168:	20000e48 	.word	0x20000e48
 800416c:	e000ed04 	.word	0xe000ed04

08004170 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004176:	4b05      	ldr	r3, [pc, #20]	@ (800418c <xTaskGetTickCount+0x1c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800417c:	687b      	ldr	r3, [r7, #4]
}
 800417e:	4618      	mov	r0, r3
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000e3c 	.word	0x20000e3c

08004190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800419a:	4b4f      	ldr	r3, [pc, #316]	@ (80042d8 <xTaskIncrementTick+0x148>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 8090 	bne.w	80042c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041a4:	4b4d      	ldr	r3, [pc, #308]	@ (80042dc <xTaskIncrementTick+0x14c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041ac:	4a4b      	ldr	r2, [pc, #300]	@ (80042dc <xTaskIncrementTick+0x14c>)
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d121      	bne.n	80041fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80041b8:	4b49      	ldr	r3, [pc, #292]	@ (80042e0 <xTaskIncrementTick+0x150>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00b      	beq.n	80041da <xTaskIncrementTick+0x4a>
	__asm volatile
 80041c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c6:	f383 8811 	msr	BASEPRI, r3
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	f3bf 8f4f 	dsb	sy
 80041d2:	603b      	str	r3, [r7, #0]
}
 80041d4:	bf00      	nop
 80041d6:	bf00      	nop
 80041d8:	e7fd      	b.n	80041d6 <xTaskIncrementTick+0x46>
 80041da:	4b41      	ldr	r3, [pc, #260]	@ (80042e0 <xTaskIncrementTick+0x150>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	4b40      	ldr	r3, [pc, #256]	@ (80042e4 <xTaskIncrementTick+0x154>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a3e      	ldr	r2, [pc, #248]	@ (80042e0 <xTaskIncrementTick+0x150>)
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4a3e      	ldr	r2, [pc, #248]	@ (80042e4 <xTaskIncrementTick+0x154>)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b3e      	ldr	r3, [pc, #248]	@ (80042e8 <xTaskIncrementTick+0x158>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	3301      	adds	r3, #1
 80041f4:	4a3c      	ldr	r2, [pc, #240]	@ (80042e8 <xTaskIncrementTick+0x158>)
 80041f6:	6013      	str	r3, [r2, #0]
 80041f8:	f000 fae2 	bl	80047c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041fc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ec <xTaskIncrementTick+0x15c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	693a      	ldr	r2, [r7, #16]
 8004202:	429a      	cmp	r2, r3
 8004204:	d349      	bcc.n	800429a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004206:	4b36      	ldr	r3, [pc, #216]	@ (80042e0 <xTaskIncrementTick+0x150>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d104      	bne.n	800421a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004210:	4b36      	ldr	r3, [pc, #216]	@ (80042ec <xTaskIncrementTick+0x15c>)
 8004212:	f04f 32ff 	mov.w	r2, #4294967295
 8004216:	601a      	str	r2, [r3, #0]
					break;
 8004218:	e03f      	b.n	800429a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800421a:	4b31      	ldr	r3, [pc, #196]	@ (80042e0 <xTaskIncrementTick+0x150>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	429a      	cmp	r2, r3
 8004230:	d203      	bcs.n	800423a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004232:	4a2e      	ldr	r2, [pc, #184]	@ (80042ec <xTaskIncrementTick+0x15c>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004238:	e02f      	b.n	800429a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3304      	adds	r3, #4
 800423e:	4618      	mov	r0, r3
 8004240:	f7fe fe5a 	bl	8002ef8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3318      	adds	r3, #24
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fe51 	bl	8002ef8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425a:	4b25      	ldr	r3, [pc, #148]	@ (80042f0 <xTaskIncrementTick+0x160>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d903      	bls.n	800426a <xTaskIncrementTick+0xda>
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004266:	4a22      	ldr	r2, [pc, #136]	@ (80042f0 <xTaskIncrementTick+0x160>)
 8004268:	6013      	str	r3, [r2, #0]
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4a1f      	ldr	r2, [pc, #124]	@ (80042f4 <xTaskIncrementTick+0x164>)
 8004278:	441a      	add	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fe fddc 	bl	8002e3e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428a:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <xTaskIncrementTick+0x168>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d3b8      	bcc.n	8004206 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004294:	2301      	movs	r3, #1
 8004296:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004298:	e7b5      	b.n	8004206 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800429a:	4b17      	ldr	r3, [pc, #92]	@ (80042f8 <xTaskIncrementTick+0x168>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042a0:	4914      	ldr	r1, [pc, #80]	@ (80042f4 <xTaskIncrementTick+0x164>)
 80042a2:	4613      	mov	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d901      	bls.n	80042b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80042b2:	2301      	movs	r3, #1
 80042b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80042b6:	4b11      	ldr	r3, [pc, #68]	@ (80042fc <xTaskIncrementTick+0x16c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
 80042c2:	e004      	b.n	80042ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80042c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <xTaskIncrementTick+0x170>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	3301      	adds	r3, #1
 80042ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004300 <xTaskIncrementTick+0x170>)
 80042cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80042ce:	697b      	ldr	r3, [r7, #20]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20000e60 	.word	0x20000e60
 80042dc:	20000e3c 	.word	0x20000e3c
 80042e0:	20000df0 	.word	0x20000df0
 80042e4:	20000df4 	.word	0x20000df4
 80042e8:	20000e50 	.word	0x20000e50
 80042ec:	20000e58 	.word	0x20000e58
 80042f0:	20000e40 	.word	0x20000e40
 80042f4:	20000968 	.word	0x20000968
 80042f8:	20000964 	.word	0x20000964
 80042fc:	20000e4c 	.word	0x20000e4c
 8004300:	20000e48 	.word	0x20000e48

08004304 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800430a:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <vTaskSwitchContext+0xb4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004312:	4b2a      	ldr	r3, [pc, #168]	@ (80043bc <vTaskSwitchContext+0xb8>)
 8004314:	2201      	movs	r2, #1
 8004316:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004318:	e047      	b.n	80043aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800431a:	4b28      	ldr	r3, [pc, #160]	@ (80043bc <vTaskSwitchContext+0xb8>)
 800431c:	2200      	movs	r2, #0
 800431e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004320:	4b27      	ldr	r3, [pc, #156]	@ (80043c0 <vTaskSwitchContext+0xbc>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	e011      	b.n	800434c <vTaskSwitchContext+0x48>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10b      	bne.n	8004346 <vTaskSwitchContext+0x42>
	__asm volatile
 800432e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004332:	f383 8811 	msr	BASEPRI, r3
 8004336:	f3bf 8f6f 	isb	sy
 800433a:	f3bf 8f4f 	dsb	sy
 800433e:	607b      	str	r3, [r7, #4]
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	e7fd      	b.n	8004342 <vTaskSwitchContext+0x3e>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	3b01      	subs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	491d      	ldr	r1, [pc, #116]	@ (80043c4 <vTaskSwitchContext+0xc0>)
 800434e:	68fa      	ldr	r2, [r7, #12]
 8004350:	4613      	mov	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	4413      	add	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	440b      	add	r3, r1
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0e3      	beq.n	8004328 <vTaskSwitchContext+0x24>
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a16      	ldr	r2, [pc, #88]	@ (80043c4 <vTaskSwitchContext+0xc0>)
 800436c:	4413      	add	r3, r2
 800436e:	60bb      	str	r3, [r7, #8]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	685a      	ldr	r2, [r3, #4]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	3308      	adds	r3, #8
 8004382:	429a      	cmp	r2, r3
 8004384:	d104      	bne.n	8004390 <vTaskSwitchContext+0x8c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	605a      	str	r2, [r3, #4]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	4a0c      	ldr	r2, [pc, #48]	@ (80043c8 <vTaskSwitchContext+0xc4>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4a09      	ldr	r2, [pc, #36]	@ (80043c0 <vTaskSwitchContext+0xbc>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80043a0:	4b09      	ldr	r3, [pc, #36]	@ (80043c8 <vTaskSwitchContext+0xc4>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3354      	adds	r3, #84	@ 0x54
 80043a6:	4a09      	ldr	r2, [pc, #36]	@ (80043cc <vTaskSwitchContext+0xc8>)
 80043a8:	6013      	str	r3, [r2, #0]
}
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000e60 	.word	0x20000e60
 80043bc:	20000e4c 	.word	0x20000e4c
 80043c0:	20000e40 	.word	0x20000e40
 80043c4:	20000968 	.word	0x20000968
 80043c8:	20000964 	.word	0x20000964
 80043cc:	20000040 	.word	0x20000040

080043d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d10b      	bne.n	80043f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
}
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f8:	4b07      	ldr	r3, [pc, #28]	@ (8004418 <vTaskPlaceOnEventList+0x48>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	3318      	adds	r3, #24
 80043fe:	4619      	mov	r1, r3
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe fd40 	bl	8002e86 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004406:	2101      	movs	r1, #1
 8004408:	6838      	ldr	r0, [r7, #0]
 800440a:	f000 fa97 	bl	800493c <prvAddCurrentTaskToDelayedList>
}
 800440e:	bf00      	nop
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000964 	.word	0x20000964

0800441c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	617b      	str	r3, [r7, #20]
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <vTaskPlaceOnEventListRestricted+0x54>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3318      	adds	r3, #24
 800444c:	4619      	mov	r1, r3
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f7fe fcf5 	bl	8002e3e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d002      	beq.n	8004460 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800445a:	f04f 33ff 	mov.w	r3, #4294967295
 800445e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004460:	6879      	ldr	r1, [r7, #4]
 8004462:	68b8      	ldr	r0, [r7, #8]
 8004464:	f000 fa6a 	bl	800493c <prvAddCurrentTaskToDelayedList>
	}
 8004468:	bf00      	nop
 800446a:	3718      	adds	r7, #24
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000964 	.word	0x20000964

08004474 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68db      	ldr	r3, [r3, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60fb      	str	r3, [r7, #12]
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	e7fd      	b.n	800449e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	3318      	adds	r3, #24
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fe fd26 	bl	8002ef8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004524 <xTaskRemoveFromEventList+0xb0>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d11d      	bne.n	80044f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe fd1d 	bl	8002ef8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c2:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <xTaskRemoveFromEventList+0xb4>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d903      	bls.n	80044d2 <xTaskRemoveFromEventList+0x5e>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ce:	4a16      	ldr	r2, [pc, #88]	@ (8004528 <xTaskRemoveFromEventList+0xb4>)
 80044d0:	6013      	str	r3, [r2, #0]
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4a13      	ldr	r2, [pc, #76]	@ (800452c <xTaskRemoveFromEventList+0xb8>)
 80044e0:	441a      	add	r2, r3
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	3304      	adds	r3, #4
 80044e6:	4619      	mov	r1, r3
 80044e8:	4610      	mov	r0, r2
 80044ea:	f7fe fca8 	bl	8002e3e <vListInsertEnd>
 80044ee:	e005      	b.n	80044fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	3318      	adds	r3, #24
 80044f4:	4619      	mov	r1, r3
 80044f6:	480e      	ldr	r0, [pc, #56]	@ (8004530 <xTaskRemoveFromEventList+0xbc>)
 80044f8:	f7fe fca1 	bl	8002e3e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004500:	4b0c      	ldr	r3, [pc, #48]	@ (8004534 <xTaskRemoveFromEventList+0xc0>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004506:	429a      	cmp	r2, r3
 8004508:	d905      	bls.n	8004516 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800450a:	2301      	movs	r3, #1
 800450c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800450e:	4b0a      	ldr	r3, [pc, #40]	@ (8004538 <xTaskRemoveFromEventList+0xc4>)
 8004510:	2201      	movs	r2, #1
 8004512:	601a      	str	r2, [r3, #0]
 8004514:	e001      	b.n	800451a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004516:	2300      	movs	r3, #0
 8004518:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800451a:	697b      	ldr	r3, [r7, #20]
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000e60 	.word	0x20000e60
 8004528:	20000e40 	.word	0x20000e40
 800452c:	20000968 	.word	0x20000968
 8004530:	20000df8 	.word	0x20000df8
 8004534:	20000964 	.word	0x20000964
 8004538:	20000e4c 	.word	0x20000e4c

0800453c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004544:	4b06      	ldr	r3, [pc, #24]	@ (8004560 <vTaskInternalSetTimeOutState+0x24>)
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800454c:	4b05      	ldr	r3, [pc, #20]	@ (8004564 <vTaskInternalSetTimeOutState+0x28>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	605a      	str	r2, [r3, #4]
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	20000e50 	.word	0x20000e50
 8004564:	20000e3c 	.word	0x20000e3c

08004568 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	613b      	str	r3, [r7, #16]
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	60fb      	str	r3, [r7, #12]
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80045ae:	f000 fea3 	bl	80052f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004628 <xTaskCheckForTimeOut+0xc0>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ca:	d102      	bne.n	80045d2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	61fb      	str	r3, [r7, #28]
 80045d0:	e023      	b.n	800461a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	4b15      	ldr	r3, [pc, #84]	@ (800462c <xTaskCheckForTimeOut+0xc4>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d007      	beq.n	80045ee <xTaskCheckForTimeOut+0x86>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d302      	bcc.n	80045ee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e015      	b.n	800461a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d20b      	bcs.n	8004610 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	1ad2      	subs	r2, r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ff99 	bl	800453c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800460a:	2300      	movs	r3, #0
 800460c:	61fb      	str	r3, [r7, #28]
 800460e:	e004      	b.n	800461a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800461a:	f000 fe9f 	bl	800535c <vPortExitCritical>

	return xReturn;
 800461e:	69fb      	ldr	r3, [r7, #28]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3720      	adds	r7, #32
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}
 8004628:	20000e3c 	.word	0x20000e3c
 800462c:	20000e50 	.word	0x20000e50

08004630 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004630:	b480      	push	{r7}
 8004632:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004634:	4b03      	ldr	r3, [pc, #12]	@ (8004644 <vTaskMissedYield+0x14>)
 8004636:	2201      	movs	r2, #1
 8004638:	601a      	str	r2, [r3, #0]
}
 800463a:	bf00      	nop
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	20000e4c 	.word	0x20000e4c

08004648 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004650:	f000 f852 	bl	80046f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004654:	4b06      	ldr	r3, [pc, #24]	@ (8004670 <prvIdleTask+0x28>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d9f9      	bls.n	8004650 <prvIdleTask+0x8>
			{
				taskYIELD();
 800465c:	4b05      	ldr	r3, [pc, #20]	@ (8004674 <prvIdleTask+0x2c>)
 800465e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800466c:	e7f0      	b.n	8004650 <prvIdleTask+0x8>
 800466e:	bf00      	nop
 8004670:	20000968 	.word	0x20000968
 8004674:	e000ed04 	.word	0xe000ed04

08004678 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
 8004682:	e00c      	b.n	800469e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4613      	mov	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4413      	add	r3, r2
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4a12      	ldr	r2, [pc, #72]	@ (80046d8 <prvInitialiseTaskLists+0x60>)
 8004690:	4413      	add	r3, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f7fe fba6 	bl	8002de4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	3301      	adds	r3, #1
 800469c:	607b      	str	r3, [r7, #4]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b37      	cmp	r3, #55	@ 0x37
 80046a2:	d9ef      	bls.n	8004684 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046a4:	480d      	ldr	r0, [pc, #52]	@ (80046dc <prvInitialiseTaskLists+0x64>)
 80046a6:	f7fe fb9d 	bl	8002de4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046aa:	480d      	ldr	r0, [pc, #52]	@ (80046e0 <prvInitialiseTaskLists+0x68>)
 80046ac:	f7fe fb9a 	bl	8002de4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046b0:	480c      	ldr	r0, [pc, #48]	@ (80046e4 <prvInitialiseTaskLists+0x6c>)
 80046b2:	f7fe fb97 	bl	8002de4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046b6:	480c      	ldr	r0, [pc, #48]	@ (80046e8 <prvInitialiseTaskLists+0x70>)
 80046b8:	f7fe fb94 	bl	8002de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046bc:	480b      	ldr	r0, [pc, #44]	@ (80046ec <prvInitialiseTaskLists+0x74>)
 80046be:	f7fe fb91 	bl	8002de4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046c2:	4b0b      	ldr	r3, [pc, #44]	@ (80046f0 <prvInitialiseTaskLists+0x78>)
 80046c4:	4a05      	ldr	r2, [pc, #20]	@ (80046dc <prvInitialiseTaskLists+0x64>)
 80046c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <prvInitialiseTaskLists+0x7c>)
 80046ca:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <prvInitialiseTaskLists+0x68>)
 80046cc:	601a      	str	r2, [r3, #0]
}
 80046ce:	bf00      	nop
 80046d0:	3708      	adds	r7, #8
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	20000968 	.word	0x20000968
 80046dc:	20000dc8 	.word	0x20000dc8
 80046e0:	20000ddc 	.word	0x20000ddc
 80046e4:	20000df8 	.word	0x20000df8
 80046e8:	20000e0c 	.word	0x20000e0c
 80046ec:	20000e24 	.word	0x20000e24
 80046f0:	20000df0 	.word	0x20000df0
 80046f4:	20000df4 	.word	0x20000df4

080046f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046fe:	e019      	b.n	8004734 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004700:	f000 fdfa 	bl	80052f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004704:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <prvCheckTasksWaitingTermination+0x50>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	3304      	adds	r3, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f7fe fbf1 	bl	8002ef8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <prvCheckTasksWaitingTermination+0x54>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3b01      	subs	r3, #1
 800471c:	4a0b      	ldr	r2, [pc, #44]	@ (800474c <prvCheckTasksWaitingTermination+0x54>)
 800471e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3b01      	subs	r3, #1
 8004726:	4a0a      	ldr	r2, [pc, #40]	@ (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004728:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800472a:	f000 fe17 	bl	800535c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f810 	bl	8004754 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004734:	4b06      	ldr	r3, [pc, #24]	@ (8004750 <prvCheckTasksWaitingTermination+0x58>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1e1      	bne.n	8004700 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
 8004746:	bf00      	nop
 8004748:	20000e0c 	.word	0x20000e0c
 800474c:	20000e38 	.word	0x20000e38
 8004750:	20000e20 	.word	0x20000e20

08004754 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	3354      	adds	r3, #84	@ 0x54
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f915 	bl	8005990 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800476c:	2b00      	cmp	r3, #0
 800476e:	d108      	bne.n	8004782 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004774:	4618      	mov	r0, r3
 8004776:	f000 ffaf 	bl	80056d8 <vPortFree>
				vPortFree( pxTCB );
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f000 ffac 	bl	80056d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004780:	e019      	b.n	80047b6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004788:	2b01      	cmp	r3, #1
 800478a:	d103      	bne.n	8004794 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 ffa3 	bl	80056d8 <vPortFree>
	}
 8004792:	e010      	b.n	80047b6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800479a:	2b02      	cmp	r3, #2
 800479c:	d00b      	beq.n	80047b6 <prvDeleteTCB+0x62>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	bf00      	nop
 80047b4:	e7fd      	b.n	80047b2 <prvDeleteTCB+0x5e>
	}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047c6:	4b0c      	ldr	r3, [pc, #48]	@ (80047f8 <prvResetNextTaskUnblockTime+0x38>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047d0:	4b0a      	ldr	r3, [pc, #40]	@ (80047fc <prvResetNextTaskUnblockTime+0x3c>)
 80047d2:	f04f 32ff 	mov.w	r2, #4294967295
 80047d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047d8:	e008      	b.n	80047ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047da:	4b07      	ldr	r3, [pc, #28]	@ (80047f8 <prvResetNextTaskUnblockTime+0x38>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	4a04      	ldr	r2, [pc, #16]	@ (80047fc <prvResetNextTaskUnblockTime+0x3c>)
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	20000df0 	.word	0x20000df0
 80047fc:	20000e58 	.word	0x20000e58

08004800 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004806:	4b05      	ldr	r3, [pc, #20]	@ (800481c <xTaskGetCurrentTaskHandle+0x1c>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800480c:	687b      	ldr	r3, [r7, #4]
	}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000964 	.word	0x20000964

08004820 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004826:	4b0b      	ldr	r3, [pc, #44]	@ (8004854 <xTaskGetSchedulerState+0x34>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800482e:	2301      	movs	r3, #1
 8004830:	607b      	str	r3, [r7, #4]
 8004832:	e008      	b.n	8004846 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004834:	4b08      	ldr	r3, [pc, #32]	@ (8004858 <xTaskGetSchedulerState+0x38>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d102      	bne.n	8004842 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800483c:	2302      	movs	r3, #2
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	e001      	b.n	8004846 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004846:	687b      	ldr	r3, [r7, #4]
	}
 8004848:	4618      	mov	r0, r3
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	20000e44 	.word	0x20000e44
 8004858:	20000e60 	.word	0x20000e60

0800485c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d058      	beq.n	8004924 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004872:	4b2f      	ldr	r3, [pc, #188]	@ (8004930 <xTaskPriorityDisinherit+0xd4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d00b      	beq.n	8004894 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	60fb      	str	r3, [r7, #12]
}
 800488e:	bf00      	nop
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60bb      	str	r3, [r7, #8]
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b8:	1e5a      	subs	r2, r3, #1
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d02c      	beq.n	8004924 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d128      	bne.n	8004924 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	3304      	adds	r3, #4
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fb0e 	bl	8002ef8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f4:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <xTaskPriorityDisinherit+0xd8>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d903      	bls.n	8004904 <xTaskPriorityDisinherit+0xa8>
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <xTaskPriorityDisinherit+0xd8>)
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <xTaskPriorityDisinherit+0xdc>)
 8004912:	441a      	add	r2, r3
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3304      	adds	r3, #4
 8004918:	4619      	mov	r1, r3
 800491a:	4610      	mov	r0, r2
 800491c:	f7fe fa8f 	bl	8002e3e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004924:	697b      	ldr	r3, [r7, #20]
	}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000964 	.word	0x20000964
 8004934:	20000e40 	.word	0x20000e40
 8004938:	20000968 	.word	0x20000968

0800493c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004946:	4b21      	ldr	r3, [pc, #132]	@ (80049cc <prvAddCurrentTaskToDelayedList+0x90>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800494c:	4b20      	ldr	r3, [pc, #128]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3304      	adds	r3, #4
 8004952:	4618      	mov	r0, r3
 8004954:	f7fe fad0 	bl	8002ef8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d10a      	bne.n	8004976 <prvAddCurrentTaskToDelayedList+0x3a>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004966:	4b1a      	ldr	r3, [pc, #104]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	3304      	adds	r3, #4
 800496c:	4619      	mov	r1, r3
 800496e:	4819      	ldr	r0, [pc, #100]	@ (80049d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004970:	f7fe fa65 	bl	8002e3e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004974:	e026      	b.n	80049c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4413      	add	r3, r2
 800497c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800497e:	4b14      	ldr	r3, [pc, #80]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	429a      	cmp	r2, r3
 800498c:	d209      	bcs.n	80049a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800498e:	4b12      	ldr	r3, [pc, #72]	@ (80049d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	4b0f      	ldr	r3, [pc, #60]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f7fe fa73 	bl	8002e86 <vListInsert>
}
 80049a0:	e010      	b.n	80049c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80049a2:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	4b0a      	ldr	r3, [pc, #40]	@ (80049d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f7fe fa69 	bl	8002e86 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049b4:	4b0a      	ldr	r3, [pc, #40]	@ (80049e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d202      	bcs.n	80049c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80049be:	4a08      	ldr	r2, [pc, #32]	@ (80049e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	6013      	str	r3, [r2, #0]
}
 80049c4:	bf00      	nop
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000e3c 	.word	0x20000e3c
 80049d0:	20000964 	.word	0x20000964
 80049d4:	20000e24 	.word	0x20000e24
 80049d8:	20000df4 	.word	0x20000df4
 80049dc:	20000df0 	.word	0x20000df0
 80049e0:	20000e58 	.word	0x20000e58

080049e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b08a      	sub	sp, #40	@ 0x28
 80049e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049ee:	f000 fb13 	bl	8005018 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a68 <xTimerCreateTimerTask+0x84>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d021      	beq.n	8004a3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004a02:	1d3a      	adds	r2, r7, #4
 8004a04:	f107 0108 	add.w	r1, r7, #8
 8004a08:	f107 030c 	add.w	r3, r7, #12
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fe f9cf 	bl	8002db0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	9202      	str	r2, [sp, #8]
 8004a1a:	9301      	str	r3, [sp, #4]
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2300      	movs	r3, #0
 8004a22:	460a      	mov	r2, r1
 8004a24:	4911      	ldr	r1, [pc, #68]	@ (8004a6c <xTimerCreateTimerTask+0x88>)
 8004a26:	4812      	ldr	r0, [pc, #72]	@ (8004a70 <xTimerCreateTimerTask+0x8c>)
 8004a28:	f7fe ff8a 	bl	8003940 <xTaskCreateStatic>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	4a11      	ldr	r2, [pc, #68]	@ (8004a74 <xTimerCreateTimerTask+0x90>)
 8004a30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a32:	4b10      	ldr	r3, [pc, #64]	@ (8004a74 <xTimerCreateTimerTask+0x90>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10b      	bne.n	8004a5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
}
 8004a56:	bf00      	nop
 8004a58:	bf00      	nop
 8004a5a:	e7fd      	b.n	8004a58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004a5c:	697b      	ldr	r3, [r7, #20]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	20000e94 	.word	0x20000e94
 8004a6c:	080063e0 	.word	0x080063e0
 8004a70:	08004bb1 	.word	0x08004bb1
 8004a74:	20000e98 	.word	0x20000e98

08004a78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	@ 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <xTimerGenericCommand+0x98>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d02a      	beq.n	8004b06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	dc18      	bgt.n	8004af4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004ac2:	f7ff fead 	bl	8004820 <xTaskGetSchedulerState>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d109      	bne.n	8004ae0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004acc:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <xTimerGenericCommand+0x98>)
 8004ace:	6818      	ldr	r0, [r3, #0]
 8004ad0:	f107 0110 	add.w	r1, r7, #16
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad8:	f7fe fb42 	bl	8003160 <xQueueGenericSend>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ade:	e012      	b.n	8004b06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <xTimerGenericCommand+0x98>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	f107 0110 	add.w	r1, r7, #16
 8004ae8:	2300      	movs	r3, #0
 8004aea:	2200      	movs	r2, #0
 8004aec:	f7fe fb38 	bl	8003160 <xQueueGenericSend>
 8004af0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004af2:	e008      	b.n	8004b06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004af4:	4b06      	ldr	r3, [pc, #24]	@ (8004b10 <xTimerGenericCommand+0x98>)
 8004af6:	6818      	ldr	r0, [r3, #0]
 8004af8:	f107 0110 	add.w	r1, r7, #16
 8004afc:	2300      	movs	r3, #0
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	f7fe fc30 	bl	8003364 <xQueueGenericSendFromISR>
 8004b04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	@ 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000e94 	.word	0x20000e94

08004b14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b1e:	4b23      	ldr	r3, [pc, #140]	@ (8004bac <prvProcessExpiredTimer+0x98>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fe f9e3 	bl	8002ef8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d023      	beq.n	8004b88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	699a      	ldr	r2, [r3, #24]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	18d1      	adds	r1, r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	6978      	ldr	r0, [r7, #20]
 8004b4e:	f000 f8d5 	bl	8004cfc <prvInsertTimerInActiveList>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d020      	beq.n	8004b9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	2100      	movs	r1, #0
 8004b62:	6978      	ldr	r0, [r7, #20]
 8004b64:	f7ff ff88 	bl	8004a78 <xTimerGenericCommand>
 8004b68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d114      	bne.n	8004b9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	6978      	ldr	r0, [r7, #20]
 8004ba0:	4798      	blx	r3
}
 8004ba2:	bf00      	nop
 8004ba4:	3718      	adds	r7, #24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000e8c 	.word	0x20000e8c

08004bb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb8:	f107 0308 	add.w	r3, r7, #8
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 f859 	bl	8004c74 <prvGetNextExpireTime>
 8004bc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 f805 	bl	8004bd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bce:	f000 f8d7 	bl	8004d80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bd2:	bf00      	nop
 8004bd4:	e7f0      	b.n	8004bb8 <prvTimerTask+0x8>
	...

08004bd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004be2:	f7ff fa19 	bl	8004018 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004be6:	f107 0308 	add.w	r3, r7, #8
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f866 	bl	8004cbc <prvSampleTimeNow>
 8004bf0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d130      	bne.n	8004c5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <prvProcessTimerOrBlockTask+0x3c>
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d806      	bhi.n	8004c14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004c06:	f7ff fa15 	bl	8004034 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f7ff ff81 	bl	8004b14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004c12:	e024      	b.n	8004c5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d008      	beq.n	8004c2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004c1a:	4b13      	ldr	r3, [pc, #76]	@ (8004c68 <prvProcessTimerOrBlockTask+0x90>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <prvProcessTimerOrBlockTask+0x50>
 8004c24:	2301      	movs	r3, #1
 8004c26:	e000      	b.n	8004c2a <prvProcessTimerOrBlockTask+0x52>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c6c <prvProcessTimerOrBlockTask+0x94>)
 8004c2e:	6818      	ldr	r0, [r3, #0]
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f7fe fe4d 	bl	80038d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c3e:	f7ff f9f9 	bl	8004034 <xTaskResumeAll>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10a      	bne.n	8004c5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c48:	4b09      	ldr	r3, [pc, #36]	@ (8004c70 <prvProcessTimerOrBlockTask+0x98>)
 8004c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	f3bf 8f6f 	isb	sy
}
 8004c58:	e001      	b.n	8004c5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c5a:	f7ff f9eb 	bl	8004034 <xTaskResumeAll>
}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000e90 	.word	0x20000e90
 8004c6c:	20000e94 	.word	0x20000e94
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c7c:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <prvGetNextExpireTime+0x44>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <prvGetNextExpireTime+0x16>
 8004c86:	2201      	movs	r2, #1
 8004c88:	e000      	b.n	8004c8c <prvGetNextExpireTime+0x18>
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d105      	bne.n	8004ca4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c98:	4b07      	ldr	r3, [pc, #28]	@ (8004cb8 <prvGetNextExpireTime+0x44>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	e001      	b.n	8004ca8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3714      	adds	r7, #20
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	20000e8c 	.word	0x20000e8c

08004cbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004cc4:	f7ff fa54 	bl	8004170 <xTaskGetTickCount>
 8004cc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cca:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <prvSampleTimeNow+0x3c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d205      	bcs.n	8004ce0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cd4:	f000 f93a 	bl	8004f4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	601a      	str	r2, [r3, #0]
 8004cde:	e002      	b.n	8004ce6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004ce6:	4a04      	ldr	r2, [pc, #16]	@ (8004cf8 <prvSampleTimeNow+0x3c>)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cec:	68fb      	ldr	r3, [r7, #12]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000e9c 	.word	0x20000e9c

08004cfc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d812      	bhi.n	8004d48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	1ad2      	subs	r2, r2, r3
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d302      	bcc.n	8004d36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
 8004d34:	e01b      	b.n	8004d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d36:	4b10      	ldr	r3, [pc, #64]	@ (8004d78 <prvInsertTimerInActiveList+0x7c>)
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3304      	adds	r3, #4
 8004d3e:	4619      	mov	r1, r3
 8004d40:	4610      	mov	r0, r2
 8004d42:	f7fe f8a0 	bl	8002e86 <vListInsert>
 8004d46:	e012      	b.n	8004d6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d206      	bcs.n	8004d5e <prvInsertTimerInActiveList+0x62>
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d302      	bcc.n	8004d5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	617b      	str	r3, [r7, #20]
 8004d5c:	e007      	b.n	8004d6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d5e:	4b07      	ldr	r3, [pc, #28]	@ (8004d7c <prvInsertTimerInActiveList+0x80>)
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	3304      	adds	r3, #4
 8004d66:	4619      	mov	r1, r3
 8004d68:	4610      	mov	r0, r2
 8004d6a:	f7fe f88c 	bl	8002e86 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d6e:	697b      	ldr	r3, [r7, #20]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	20000e90 	.word	0x20000e90
 8004d7c:	20000e8c 	.word	0x20000e8c

08004d80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08e      	sub	sp, #56	@ 0x38
 8004d84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d86:	e0ce      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	da19      	bge.n	8004dc2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d8e:	1d3b      	adds	r3, r7, #4
 8004d90:	3304      	adds	r3, #4
 8004d92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10b      	bne.n	8004db2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	61fb      	str	r3, [r7, #28]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004db8:	6850      	ldr	r0, [r2, #4]
 8004dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dbc:	6892      	ldr	r2, [r2, #8]
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f2c0 80ae 	blt.w	8004f26 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d004      	beq.n	8004de0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd8:	3304      	adds	r3, #4
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f7fe f88c 	bl	8002ef8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004de0:	463b      	mov	r3, r7
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff ff6a 	bl	8004cbc <prvSampleTimeNow>
 8004de8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2b09      	cmp	r3, #9
 8004dee:	f200 8097 	bhi.w	8004f20 <prvProcessReceivedCommands+0x1a0>
 8004df2:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <prvProcessReceivedCommands+0x78>)
 8004df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df8:	08004e21 	.word	0x08004e21
 8004dfc:	08004e21 	.word	0x08004e21
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e97 	.word	0x08004e97
 8004e08:	08004eab 	.word	0x08004eab
 8004e0c:	08004ef7 	.word	0x08004ef7
 8004e10:	08004e21 	.word	0x08004e21
 8004e14:	08004e21 	.word	0x08004e21
 8004e18:	08004e97 	.word	0x08004e97
 8004e1c:	08004eab 	.word	0x08004eab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e26:	f043 0301 	orr.w	r3, r3, #1
 8004e2a:	b2da      	uxtb	r2, r3
 8004e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	18d1      	adds	r1, r2, r3
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e40:	f7ff ff5c 	bl	8004cfc <prvInsertTimerInActiveList>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06c      	beq.n	8004f24 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e50:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d061      	beq.n	8004f24 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	441a      	add	r2, r3
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9300      	str	r3, [sp, #0]
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e72:	f7ff fe01 	bl	8004a78 <xTimerGenericCommand>
 8004e76:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d152      	bne.n	8004f24 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	61bb      	str	r3, [r7, #24]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e9c:	f023 0301 	bic.w	r3, r3, #1
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ea8:	e03d      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	617b      	str	r3, [r7, #20]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee4:	699a      	ldr	r2, [r3, #24]
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	18d1      	adds	r1, r2, r3
 8004eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ef0:	f7ff ff04 	bl	8004cfc <prvInsertTimerInActiveList>
					break;
 8004ef4:	e017      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004efc:	f003 0302 	and.w	r3, r3, #2
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d103      	bne.n	8004f0c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004f04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f06:	f000 fbe7 	bl	80056d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004f0a:	e00c      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f12:	f023 0301 	bic.w	r3, r3, #1
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f1e:	e002      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f20:	bf00      	nop
 8004f22:	e000      	b.n	8004f26 <prvProcessReceivedCommands+0x1a6>
					break;
 8004f24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f26:	4b08      	ldr	r3, [pc, #32]	@ (8004f48 <prvProcessReceivedCommands+0x1c8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1d39      	adds	r1, r7, #4
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fe fab6 	bl	80034a0 <xQueueReceive>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	f47f af26 	bne.w	8004d88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3730      	adds	r7, #48	@ 0x30
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	20000e94 	.word	0x20000e94

08004f4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b088      	sub	sp, #32
 8004f50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f52:	e049      	b.n	8004fe8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f54:	4b2e      	ldr	r3, [pc, #184]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f5e:	4b2c      	ldr	r3, [pc, #176]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3304      	adds	r3, #4
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f7fd ffc3 	bl	8002ef8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d02f      	beq.n	8004fe8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4413      	add	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d90e      	bls.n	8004fb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3304      	adds	r3, #4
 8004fae:	4619      	mov	r1, r3
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	f7fd ff68 	bl	8002e86 <vListInsert>
 8004fb6:	e017      	b.n	8004fe8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fb8:	2300      	movs	r3, #0
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	68f8      	ldr	r0, [r7, #12]
 8004fc4:	f7ff fd58 	bl	8004a78 <xTimerGenericCommand>
 8004fc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	603b      	str	r3, [r7, #0]
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fe8:	4b09      	ldr	r3, [pc, #36]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1b0      	bne.n	8004f54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004ff2:	4b07      	ldr	r3, [pc, #28]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	@ (8005014 <prvSwitchTimerLists+0xc8>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	@ (8005010 <prvSwitchTimerLists+0xc4>)
 8004ffe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005000:	4a04      	ldr	r2, [pc, #16]	@ (8005014 <prvSwitchTimerLists+0xc8>)
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	6013      	str	r3, [r2, #0]
}
 8005006:	bf00      	nop
 8005008:	3718      	adds	r7, #24
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	20000e8c 	.word	0x20000e8c
 8005014:	20000e90 	.word	0x20000e90

08005018 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800501e:	f000 f96b 	bl	80052f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005022:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d120      	bne.n	800506c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800502a:	4814      	ldr	r0, [pc, #80]	@ (800507c <prvCheckForValidListAndQueue+0x64>)
 800502c:	f7fd feda 	bl	8002de4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005030:	4813      	ldr	r0, [pc, #76]	@ (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005032:	f7fd fed7 	bl	8002de4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005036:	4b13      	ldr	r3, [pc, #76]	@ (8005084 <prvCheckForValidListAndQueue+0x6c>)
 8005038:	4a10      	ldr	r2, [pc, #64]	@ (800507c <prvCheckForValidListAndQueue+0x64>)
 800503a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800503c:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <prvCheckForValidListAndQueue+0x70>)
 800503e:	4a10      	ldr	r2, [pc, #64]	@ (8005080 <prvCheckForValidListAndQueue+0x68>)
 8005040:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005042:	2300      	movs	r3, #0
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4b11      	ldr	r3, [pc, #68]	@ (800508c <prvCheckForValidListAndQueue+0x74>)
 8005048:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <prvCheckForValidListAndQueue+0x78>)
 800504a:	2110      	movs	r1, #16
 800504c:	200a      	movs	r0, #10
 800504e:	f7fd ffe7 	bl	8003020 <xQueueGenericCreateStatic>
 8005052:	4603      	mov	r3, r0
 8005054:	4a08      	ldr	r2, [pc, #32]	@ (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005056:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005058:	4b07      	ldr	r3, [pc, #28]	@ (8005078 <prvCheckForValidListAndQueue+0x60>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <prvCheckForValidListAndQueue+0x60>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	490b      	ldr	r1, [pc, #44]	@ (8005094 <prvCheckForValidListAndQueue+0x7c>)
 8005066:	4618      	mov	r0, r3
 8005068:	f7fe fc0c 	bl	8003884 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800506c:	f000 f976 	bl	800535c <vPortExitCritical>
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	20000e94 	.word	0x20000e94
 800507c:	20000e64 	.word	0x20000e64
 8005080:	20000e78 	.word	0x20000e78
 8005084:	20000e8c 	.word	0x20000e8c
 8005088:	20000e90 	.word	0x20000e90
 800508c:	20000f40 	.word	0x20000f40
 8005090:	20000ea0 	.word	0x20000ea0
 8005094:	080063e8 	.word	0x080063e8

08005098 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3b04      	subs	r3, #4
 80050a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3b04      	subs	r3, #4
 80050b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3b04      	subs	r3, #4
 80050c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050c8:	4a0c      	ldr	r2, [pc, #48]	@ (80050fc <pxPortInitialiseStack+0x64>)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b14      	subs	r3, #20
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b04      	subs	r3, #4
 80050de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f06f 0202 	mvn.w	r2, #2
 80050e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3b20      	subs	r3, #32
 80050ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050ee:	68fb      	ldr	r3, [r7, #12]
}
 80050f0:	4618      	mov	r0, r3
 80050f2:	3714      	adds	r7, #20
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	08005101 	.word	0x08005101

08005100 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800510a:	4b13      	ldr	r3, [pc, #76]	@ (8005158 <prvTaskExitError+0x58>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d00b      	beq.n	800512c <prvTaskExitError+0x2c>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	60fb      	str	r3, [r7, #12]
}
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <prvTaskExitError+0x28>
	__asm volatile
 800512c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005130:	f383 8811 	msr	BASEPRI, r3
 8005134:	f3bf 8f6f 	isb	sy
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	60bb      	str	r3, [r7, #8]
}
 800513e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005140:	bf00      	nop
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0fc      	beq.n	8005142 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
 8005156:	bf00      	nop
 8005158:	2000003c 	.word	0x2000003c
 800515c:	00000000 	.word	0x00000000

08005160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	@ (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005188:	4808      	ldr	r0, [pc, #32]	@ (80051ac <prvPortStartFirstTask+0x24>)
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f380 8808 	msr	MSP, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8814 	msr	CONTROL, r0
 800519a:	b662      	cpsie	i
 800519c:	b661      	cpsie	f
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	df00      	svc	0
 80051a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051aa:	bf00      	nop
 80051ac:	e000ed08 	.word	0xe000ed08

080051b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051b6:	4b47      	ldr	r3, [pc, #284]	@ (80052d4 <xPortStartScheduler+0x124>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a47      	ldr	r2, [pc, #284]	@ (80052d8 <xPortStartScheduler+0x128>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d10b      	bne.n	80051d8 <xPortStartScheduler+0x28>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	e7fd      	b.n	80051d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051d8:	4b3e      	ldr	r3, [pc, #248]	@ (80052d4 <xPortStartScheduler+0x124>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3f      	ldr	r2, [pc, #252]	@ (80052dc <xPortStartScheduler+0x12c>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d10b      	bne.n	80051fa <xPortStartScheduler+0x4a>
	__asm volatile
 80051e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e6:	f383 8811 	msr	BASEPRI, r3
 80051ea:	f3bf 8f6f 	isb	sy
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	60fb      	str	r3, [r7, #12]
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	e7fd      	b.n	80051f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051fa:	4b39      	ldr	r3, [pc, #228]	@ (80052e0 <xPortStartScheduler+0x130>)
 80051fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	22ff      	movs	r2, #255	@ 0xff
 800520a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005214:	78fb      	ldrb	r3, [r7, #3]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4b31      	ldr	r3, [pc, #196]	@ (80052e4 <xPortStartScheduler+0x134>)
 8005220:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005222:	4b31      	ldr	r3, [pc, #196]	@ (80052e8 <xPortStartScheduler+0x138>)
 8005224:	2207      	movs	r2, #7
 8005226:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005228:	e009      	b.n	800523e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800522a:	4b2f      	ldr	r3, [pc, #188]	@ (80052e8 <xPortStartScheduler+0x138>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b01      	subs	r3, #1
 8005230:	4a2d      	ldr	r2, [pc, #180]	@ (80052e8 <xPortStartScheduler+0x138>)
 8005232:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005234:	78fb      	ldrb	r3, [r7, #3]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	005b      	lsls	r3, r3, #1
 800523a:	b2db      	uxtb	r3, r3
 800523c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005246:	2b80      	cmp	r3, #128	@ 0x80
 8005248:	d0ef      	beq.n	800522a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800524a:	4b27      	ldr	r3, [pc, #156]	@ (80052e8 <xPortStartScheduler+0x138>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f1c3 0307 	rsb	r3, r3, #7
 8005252:	2b04      	cmp	r3, #4
 8005254:	d00b      	beq.n	800526e <xPortStartScheduler+0xbe>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	60bb      	str	r3, [r7, #8]
}
 8005268:	bf00      	nop
 800526a:	bf00      	nop
 800526c:	e7fd      	b.n	800526a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800526e:	4b1e      	ldr	r3, [pc, #120]	@ (80052e8 <xPortStartScheduler+0x138>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	021b      	lsls	r3, r3, #8
 8005274:	4a1c      	ldr	r2, [pc, #112]	@ (80052e8 <xPortStartScheduler+0x138>)
 8005276:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005278:	4b1b      	ldr	r3, [pc, #108]	@ (80052e8 <xPortStartScheduler+0x138>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005280:	4a19      	ldr	r2, [pc, #100]	@ (80052e8 <xPortStartScheduler+0x138>)
 8005282:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800528c:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <xPortStartScheduler+0x13c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a16      	ldr	r2, [pc, #88]	@ (80052ec <xPortStartScheduler+0x13c>)
 8005292:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005296:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005298:	4b14      	ldr	r3, [pc, #80]	@ (80052ec <xPortStartScheduler+0x13c>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a13      	ldr	r2, [pc, #76]	@ (80052ec <xPortStartScheduler+0x13c>)
 800529e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80052a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80052a4:	f000 f8da 	bl	800545c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80052a8:	4b11      	ldr	r3, [pc, #68]	@ (80052f0 <xPortStartScheduler+0x140>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052ae:	f000 f8f9 	bl	80054a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052b2:	4b10      	ldr	r3, [pc, #64]	@ (80052f4 <xPortStartScheduler+0x144>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a0f      	ldr	r2, [pc, #60]	@ (80052f4 <xPortStartScheduler+0x144>)
 80052b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052be:	f7ff ff63 	bl	8005188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052c2:	f7ff f81f 	bl	8004304 <vTaskSwitchContext>
	prvTaskExitError();
 80052c6:	f7ff ff1b 	bl	8005100 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	e000ed00 	.word	0xe000ed00
 80052d8:	410fc271 	.word	0x410fc271
 80052dc:	410fc270 	.word	0x410fc270
 80052e0:	e000e400 	.word	0xe000e400
 80052e4:	20000f90 	.word	0x20000f90
 80052e8:	20000f94 	.word	0x20000f94
 80052ec:	e000ed20 	.word	0xe000ed20
 80052f0:	2000003c 	.word	0x2000003c
 80052f4:	e000ef34 	.word	0xe000ef34

080052f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	607b      	str	r3, [r7, #4]
}
 8005310:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005312:	4b10      	ldr	r3, [pc, #64]	@ (8005354 <vPortEnterCritical+0x5c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	3301      	adds	r3, #1
 8005318:	4a0e      	ldr	r2, [pc, #56]	@ (8005354 <vPortEnterCritical+0x5c>)
 800531a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800531c:	4b0d      	ldr	r3, [pc, #52]	@ (8005354 <vPortEnterCritical+0x5c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b01      	cmp	r3, #1
 8005322:	d110      	bne.n	8005346 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <vPortEnterCritical+0x60>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <vPortEnterCritical+0x4e>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	603b      	str	r3, [r7, #0]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <vPortEnterCritical+0x4a>
	}
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	2000003c 	.word	0x2000003c
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <vPortExitCritical+0x50>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d10b      	bne.n	8005382 <vPortExitCritical+0x26>
	__asm volatile
 800536a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536e:	f383 8811 	msr	BASEPRI, r3
 8005372:	f3bf 8f6f 	isb	sy
 8005376:	f3bf 8f4f 	dsb	sy
 800537a:	607b      	str	r3, [r7, #4]
}
 800537c:	bf00      	nop
 800537e:	bf00      	nop
 8005380:	e7fd      	b.n	800537e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005382:	4b0a      	ldr	r3, [pc, #40]	@ (80053ac <vPortExitCritical+0x50>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3b01      	subs	r3, #1
 8005388:	4a08      	ldr	r2, [pc, #32]	@ (80053ac <vPortExitCritical+0x50>)
 800538a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800538c:	4b07      	ldr	r3, [pc, #28]	@ (80053ac <vPortExitCritical+0x50>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <vPortExitCritical+0x44>
 8005394:	2300      	movs	r3, #0
 8005396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	f383 8811 	msr	BASEPRI, r3
}
 800539e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr
 80053ac:	2000003c 	.word	0x2000003c

080053b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053b0:	f3ef 8009 	mrs	r0, PSP
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4b15      	ldr	r3, [pc, #84]	@ (8005410 <pxCurrentTCBConst>)
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	f01e 0f10 	tst.w	lr, #16
 80053c0:	bf08      	it	eq
 80053c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ca:	6010      	str	r0, [r2, #0]
 80053cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053d4:	f380 8811 	msr	BASEPRI, r0
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f7fe ff90 	bl	8004304 <vTaskSwitchContext>
 80053e4:	f04f 0000 	mov.w	r0, #0
 80053e8:	f380 8811 	msr	BASEPRI, r0
 80053ec:	bc09      	pop	{r0, r3}
 80053ee:	6819      	ldr	r1, [r3, #0]
 80053f0:	6808      	ldr	r0, [r1, #0]
 80053f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f6:	f01e 0f10 	tst.w	lr, #16
 80053fa:	bf08      	it	eq
 80053fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005400:	f380 8809 	msr	PSP, r0
 8005404:	f3bf 8f6f 	isb	sy
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	f3af 8000 	nop.w

08005410 <pxCurrentTCBConst>:
 8005410:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005414:	bf00      	nop
 8005416:	bf00      	nop

08005418 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
	__asm volatile
 800541e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005422:	f383 8811 	msr	BASEPRI, r3
 8005426:	f3bf 8f6f 	isb	sy
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	607b      	str	r3, [r7, #4]
}
 8005430:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005432:	f7fe fead 	bl	8004190 <xTaskIncrementTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <xPortSysTickHandler+0x40>)
 800543e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	2300      	movs	r3, #0
 8005446:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	f383 8811 	msr	BASEPRI, r3
}
 800544e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005450:	bf00      	nop
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	e000ed04 	.word	0xe000ed04

0800545c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800545c:	b480      	push	{r7}
 800545e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005460:	4b0b      	ldr	r3, [pc, #44]	@ (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005466:	4b0b      	ldr	r3, [pc, #44]	@ (8005494 <vPortSetupTimerInterrupt+0x38>)
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800546c:	4b0a      	ldr	r3, [pc, #40]	@ (8005498 <vPortSetupTimerInterrupt+0x3c>)
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a0a      	ldr	r2, [pc, #40]	@ (800549c <vPortSetupTimerInterrupt+0x40>)
 8005472:	fba2 2303 	umull	r2, r3, r2, r3
 8005476:	099b      	lsrs	r3, r3, #6
 8005478:	4a09      	ldr	r2, [pc, #36]	@ (80054a0 <vPortSetupTimerInterrupt+0x44>)
 800547a:	3b01      	subs	r3, #1
 800547c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800547e:	4b04      	ldr	r3, [pc, #16]	@ (8005490 <vPortSetupTimerInterrupt+0x34>)
 8005480:	2207      	movs	r2, #7
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e010 	.word	0xe000e010
 8005494:	e000e018 	.word	0xe000e018
 8005498:	20000030 	.word	0x20000030
 800549c:	10624dd3 	.word	0x10624dd3
 80054a0:	e000e014 	.word	0xe000e014

080054a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80054a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054b4 <vPortEnableVFP+0x10>
 80054a8:	6801      	ldr	r1, [r0, #0]
 80054aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ae:	6001      	str	r1, [r0, #0]
 80054b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80054b2:	bf00      	nop
 80054b4:	e000ed88 	.word	0xe000ed88

080054b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054b8:	b480      	push	{r7}
 80054ba:	b085      	sub	sp, #20
 80054bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054be:	f3ef 8305 	mrs	r3, IPSR
 80054c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b0f      	cmp	r3, #15
 80054c8:	d915      	bls.n	80054f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ca:	4a18      	ldr	r2, [pc, #96]	@ (800552c <vPortValidateInterruptPriority+0x74>)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	4413      	add	r3, r2
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054d4:	4b16      	ldr	r3, [pc, #88]	@ (8005530 <vPortValidateInterruptPriority+0x78>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	7afa      	ldrb	r2, [r7, #11]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d20b      	bcs.n	80054f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	607b      	str	r3, [r7, #4]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005534 <vPortValidateInterruptPriority+0x7c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005538 <vPortValidateInterruptPriority+0x80>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	429a      	cmp	r2, r3
 8005504:	d90b      	bls.n	800551e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	603b      	str	r3, [r7, #0]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <vPortValidateInterruptPriority+0x62>
	}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	e000e3f0 	.word	0xe000e3f0
 8005530:	20000f90 	.word	0x20000f90
 8005534:	e000ed0c 	.word	0xe000ed0c
 8005538:	20000f94 	.word	0x20000f94

0800553c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b08a      	sub	sp, #40	@ 0x28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005544:	2300      	movs	r3, #0
 8005546:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005548:	f7fe fd66 	bl	8004018 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800554c:	4b5c      	ldr	r3, [pc, #368]	@ (80056c0 <pvPortMalloc+0x184>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005554:	f000 f924 	bl	80057a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005558:	4b5a      	ldr	r3, [pc, #360]	@ (80056c4 <pvPortMalloc+0x188>)
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	f040 8095 	bne.w	8005690 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01e      	beq.n	80055aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800556c:	2208      	movs	r2, #8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4413      	add	r3, r2
 8005572:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f003 0307 	and.w	r3, r3, #7
 800557a:	2b00      	cmp	r3, #0
 800557c:	d015      	beq.n	80055aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f023 0307 	bic.w	r3, r3, #7
 8005584:	3308      	adds	r3, #8
 8005586:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f003 0307 	and.w	r3, r3, #7
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <pvPortMalloc+0x6e>
	__asm volatile
 8005592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005596:	f383 8811 	msr	BASEPRI, r3
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	f3bf 8f4f 	dsb	sy
 80055a2:	617b      	str	r3, [r7, #20]
}
 80055a4:	bf00      	nop
 80055a6:	bf00      	nop
 80055a8:	e7fd      	b.n	80055a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d06f      	beq.n	8005690 <pvPortMalloc+0x154>
 80055b0:	4b45      	ldr	r3, [pc, #276]	@ (80056c8 <pvPortMalloc+0x18c>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d86a      	bhi.n	8005690 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80055ba:	4b44      	ldr	r3, [pc, #272]	@ (80056cc <pvPortMalloc+0x190>)
 80055bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80055be:	4b43      	ldr	r3, [pc, #268]	@ (80056cc <pvPortMalloc+0x190>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055c4:	e004      	b.n	80055d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <pvPortMalloc+0xa6>
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d1f1      	bne.n	80055c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055e2:	4b37      	ldr	r3, [pc, #220]	@ (80056c0 <pvPortMalloc+0x184>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d051      	beq.n	8005690 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2208      	movs	r2, #8
 80055f2:	4413      	add	r3, r2
 80055f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	1ad2      	subs	r2, r2, r3
 8005606:	2308      	movs	r3, #8
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	429a      	cmp	r2, r3
 800560c:	d920      	bls.n	8005650 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800560e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4413      	add	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00b      	beq.n	8005638 <pvPortMalloc+0xfc>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	613b      	str	r3, [r7, #16]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	1ad2      	subs	r2, r2, r3
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800564a:	69b8      	ldr	r0, [r7, #24]
 800564c:	f000 f90a 	bl	8005864 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005650:	4b1d      	ldr	r3, [pc, #116]	@ (80056c8 <pvPortMalloc+0x18c>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	4a1b      	ldr	r2, [pc, #108]	@ (80056c8 <pvPortMalloc+0x18c>)
 800565c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800565e:	4b1a      	ldr	r3, [pc, #104]	@ (80056c8 <pvPortMalloc+0x18c>)
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b1b      	ldr	r3, [pc, #108]	@ (80056d0 <pvPortMalloc+0x194>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d203      	bcs.n	8005672 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800566a:	4b17      	ldr	r3, [pc, #92]	@ (80056c8 <pvPortMalloc+0x18c>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a18      	ldr	r2, [pc, #96]	@ (80056d0 <pvPortMalloc+0x194>)
 8005670:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005674:	685a      	ldr	r2, [r3, #4]
 8005676:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <pvPortMalloc+0x188>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	431a      	orrs	r2, r3
 800567c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005682:	2200      	movs	r2, #0
 8005684:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005686:	4b13      	ldr	r3, [pc, #76]	@ (80056d4 <pvPortMalloc+0x198>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	3301      	adds	r3, #1
 800568c:	4a11      	ldr	r2, [pc, #68]	@ (80056d4 <pvPortMalloc+0x198>)
 800568e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005690:	f7fe fcd0 	bl	8004034 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	2b00      	cmp	r3, #0
 800569c:	d00b      	beq.n	80056b6 <pvPortMalloc+0x17a>
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	60fb      	str	r3, [r7, #12]
}
 80056b0:	bf00      	nop
 80056b2:	bf00      	nop
 80056b4:	e7fd      	b.n	80056b2 <pvPortMalloc+0x176>
	return pvReturn;
 80056b6:	69fb      	ldr	r3, [r7, #28]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3728      	adds	r7, #40	@ 0x28
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20004ba0 	.word	0x20004ba0
 80056c4:	20004bb4 	.word	0x20004bb4
 80056c8:	20004ba4 	.word	0x20004ba4
 80056cc:	20004b98 	.word	0x20004b98
 80056d0:	20004ba8 	.word	0x20004ba8
 80056d4:	20004bac 	.word	0x20004bac

080056d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04f      	beq.n	800578a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056ea:	2308      	movs	r3, #8
 80056ec:	425b      	negs	r3, r3
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4413      	add	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	685a      	ldr	r2, [r3, #4]
 80056fc:	4b25      	ldr	r3, [pc, #148]	@ (8005794 <vPortFree+0xbc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4013      	ands	r3, r2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <vPortFree+0x46>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60fb      	str	r3, [r7, #12]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <vPortFree+0x66>
	__asm volatile
 8005726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800572a:	f383 8811 	msr	BASEPRI, r3
 800572e:	f3bf 8f6f 	isb	sy
 8005732:	f3bf 8f4f 	dsb	sy
 8005736:	60bb      	str	r3, [r7, #8]
}
 8005738:	bf00      	nop
 800573a:	bf00      	nop
 800573c:	e7fd      	b.n	800573a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	685a      	ldr	r2, [r3, #4]
 8005742:	4b14      	ldr	r3, [pc, #80]	@ (8005794 <vPortFree+0xbc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4013      	ands	r3, r2
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01e      	beq.n	800578a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d11a      	bne.n	800578a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4b0e      	ldr	r3, [pc, #56]	@ (8005794 <vPortFree+0xbc>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	43db      	mvns	r3, r3
 800575e:	401a      	ands	r2, r3
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005764:	f7fe fc58 	bl	8004018 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	4b0a      	ldr	r3, [pc, #40]	@ (8005798 <vPortFree+0xc0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4413      	add	r3, r2
 8005772:	4a09      	ldr	r2, [pc, #36]	@ (8005798 <vPortFree+0xc0>)
 8005774:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005776:	6938      	ldr	r0, [r7, #16]
 8005778:	f000 f874 	bl	8005864 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800577c:	4b07      	ldr	r3, [pc, #28]	@ (800579c <vPortFree+0xc4>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3301      	adds	r3, #1
 8005782:	4a06      	ldr	r2, [pc, #24]	@ (800579c <vPortFree+0xc4>)
 8005784:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005786:	f7fe fc55 	bl	8004034 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800578a:	bf00      	nop
 800578c:	3718      	adds	r7, #24
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20004bb4 	.word	0x20004bb4
 8005798:	20004ba4 	.word	0x20004ba4
 800579c:	20004bb0 	.word	0x20004bb0

080057a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80057a6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80057aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80057ac:	4b27      	ldr	r3, [pc, #156]	@ (800584c <prvHeapInit+0xac>)
 80057ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f003 0307 	and.w	r3, r3, #7
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00c      	beq.n	80057d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3307      	adds	r3, #7
 80057be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f023 0307 	bic.w	r3, r3, #7
 80057c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	4a1f      	ldr	r2, [pc, #124]	@ (800584c <prvHeapInit+0xac>)
 80057d0:	4413      	add	r3, r2
 80057d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80057d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005850 <prvHeapInit+0xb0>)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80057de:	4b1c      	ldr	r3, [pc, #112]	@ (8005850 <prvHeapInit+0xb0>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057ec:	2208      	movs	r2, #8
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 0307 	bic.w	r3, r3, #7
 80057fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a15      	ldr	r2, [pc, #84]	@ (8005854 <prvHeapInit+0xb4>)
 8005800:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005802:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <prvHeapInit+0xb4>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2200      	movs	r2, #0
 8005808:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800580a:	4b12      	ldr	r3, [pc, #72]	@ (8005854 <prvHeapInit+0xb4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005820:	4b0c      	ldr	r3, [pc, #48]	@ (8005854 <prvHeapInit+0xb4>)
 8005822:	681a      	ldr	r2, [r3, #0]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4a0a      	ldr	r2, [pc, #40]	@ (8005858 <prvHeapInit+0xb8>)
 800582e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	4a09      	ldr	r2, [pc, #36]	@ (800585c <prvHeapInit+0xbc>)
 8005836:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005838:	4b09      	ldr	r3, [pc, #36]	@ (8005860 <prvHeapInit+0xc0>)
 800583a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800583e:	601a      	str	r2, [r3, #0]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr
 800584c:	20000f98 	.word	0x20000f98
 8005850:	20004b98 	.word	0x20004b98
 8005854:	20004ba0 	.word	0x20004ba0
 8005858:	20004ba8 	.word	0x20004ba8
 800585c:	20004ba4 	.word	0x20004ba4
 8005860:	20004bb4 	.word	0x20004bb4

08005864 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800586c:	4b28      	ldr	r3, [pc, #160]	@ (8005910 <prvInsertBlockIntoFreeList+0xac>)
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	e002      	b.n	8005878 <prvInsertBlockIntoFreeList+0x14>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60fb      	str	r3, [r7, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d8f7      	bhi.n	8005872 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	68ba      	ldr	r2, [r7, #8]
 800588c:	4413      	add	r3, r2
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	429a      	cmp	r2, r3
 8005892:	d108      	bne.n	80058a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	441a      	add	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	68ba      	ldr	r2, [r7, #8]
 80058b0:	441a      	add	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d118      	bne.n	80058ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b15      	ldr	r3, [pc, #84]	@ (8005914 <prvInsertBlockIntoFreeList+0xb0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d00d      	beq.n	80058e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	e008      	b.n	80058f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80058e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005914 <prvInsertBlockIntoFreeList+0xb0>)
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e003      	b.n	80058f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d002      	beq.n	8005902 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005902:	bf00      	nop
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	20004b98 	.word	0x20004b98
 8005914:	20004ba0 	.word	0x20004ba0

08005918 <sniprintf>:
 8005918:	b40c      	push	{r2, r3}
 800591a:	b530      	push	{r4, r5, lr}
 800591c:	4b17      	ldr	r3, [pc, #92]	@ (800597c <sniprintf+0x64>)
 800591e:	1e0c      	subs	r4, r1, #0
 8005920:	681d      	ldr	r5, [r3, #0]
 8005922:	b09d      	sub	sp, #116	@ 0x74
 8005924:	da08      	bge.n	8005938 <sniprintf+0x20>
 8005926:	238b      	movs	r3, #139	@ 0x8b
 8005928:	602b      	str	r3, [r5, #0]
 800592a:	f04f 30ff 	mov.w	r0, #4294967295
 800592e:	b01d      	add	sp, #116	@ 0x74
 8005930:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005934:	b002      	add	sp, #8
 8005936:	4770      	bx	lr
 8005938:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800593c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005940:	bf14      	ite	ne
 8005942:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005946:	4623      	moveq	r3, r4
 8005948:	9304      	str	r3, [sp, #16]
 800594a:	9307      	str	r3, [sp, #28]
 800594c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005950:	9002      	str	r0, [sp, #8]
 8005952:	9006      	str	r0, [sp, #24]
 8005954:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005958:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800595a:	ab21      	add	r3, sp, #132	@ 0x84
 800595c:	a902      	add	r1, sp, #8
 800595e:	4628      	mov	r0, r5
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	f000 f9f9 	bl	8005d58 <_svfiprintf_r>
 8005966:	1c43      	adds	r3, r0, #1
 8005968:	bfbc      	itt	lt
 800596a:	238b      	movlt	r3, #139	@ 0x8b
 800596c:	602b      	strlt	r3, [r5, #0]
 800596e:	2c00      	cmp	r4, #0
 8005970:	d0dd      	beq.n	800592e <sniprintf+0x16>
 8005972:	9b02      	ldr	r3, [sp, #8]
 8005974:	2200      	movs	r2, #0
 8005976:	701a      	strb	r2, [r3, #0]
 8005978:	e7d9      	b.n	800592e <sniprintf+0x16>
 800597a:	bf00      	nop
 800597c:	20000040 	.word	0x20000040

08005980 <memset>:
 8005980:	4402      	add	r2, r0
 8005982:	4603      	mov	r3, r0
 8005984:	4293      	cmp	r3, r2
 8005986:	d100      	bne.n	800598a <memset+0xa>
 8005988:	4770      	bx	lr
 800598a:	f803 1b01 	strb.w	r1, [r3], #1
 800598e:	e7f9      	b.n	8005984 <memset+0x4>

08005990 <_reclaim_reent>:
 8005990:	4b29      	ldr	r3, [pc, #164]	@ (8005a38 <_reclaim_reent+0xa8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4283      	cmp	r3, r0
 8005996:	b570      	push	{r4, r5, r6, lr}
 8005998:	4604      	mov	r4, r0
 800599a:	d04b      	beq.n	8005a34 <_reclaim_reent+0xa4>
 800599c:	69c3      	ldr	r3, [r0, #28]
 800599e:	b1ab      	cbz	r3, 80059cc <_reclaim_reent+0x3c>
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	b16b      	cbz	r3, 80059c0 <_reclaim_reent+0x30>
 80059a4:	2500      	movs	r5, #0
 80059a6:	69e3      	ldr	r3, [r4, #28]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	5959      	ldr	r1, [r3, r5]
 80059ac:	2900      	cmp	r1, #0
 80059ae:	d13b      	bne.n	8005a28 <_reclaim_reent+0x98>
 80059b0:	3504      	adds	r5, #4
 80059b2:	2d80      	cmp	r5, #128	@ 0x80
 80059b4:	d1f7      	bne.n	80059a6 <_reclaim_reent+0x16>
 80059b6:	69e3      	ldr	r3, [r4, #28]
 80059b8:	4620      	mov	r0, r4
 80059ba:	68d9      	ldr	r1, [r3, #12]
 80059bc:	f000 f878 	bl	8005ab0 <_free_r>
 80059c0:	69e3      	ldr	r3, [r4, #28]
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	b111      	cbz	r1, 80059cc <_reclaim_reent+0x3c>
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f872 	bl	8005ab0 <_free_r>
 80059cc:	6961      	ldr	r1, [r4, #20]
 80059ce:	b111      	cbz	r1, 80059d6 <_reclaim_reent+0x46>
 80059d0:	4620      	mov	r0, r4
 80059d2:	f000 f86d 	bl	8005ab0 <_free_r>
 80059d6:	69e1      	ldr	r1, [r4, #28]
 80059d8:	b111      	cbz	r1, 80059e0 <_reclaim_reent+0x50>
 80059da:	4620      	mov	r0, r4
 80059dc:	f000 f868 	bl	8005ab0 <_free_r>
 80059e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80059e2:	b111      	cbz	r1, 80059ea <_reclaim_reent+0x5a>
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 f863 	bl	8005ab0 <_free_r>
 80059ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ec:	b111      	cbz	r1, 80059f4 <_reclaim_reent+0x64>
 80059ee:	4620      	mov	r0, r4
 80059f0:	f000 f85e 	bl	8005ab0 <_free_r>
 80059f4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80059f6:	b111      	cbz	r1, 80059fe <_reclaim_reent+0x6e>
 80059f8:	4620      	mov	r0, r4
 80059fa:	f000 f859 	bl	8005ab0 <_free_r>
 80059fe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a00:	b111      	cbz	r1, 8005a08 <_reclaim_reent+0x78>
 8005a02:	4620      	mov	r0, r4
 8005a04:	f000 f854 	bl	8005ab0 <_free_r>
 8005a08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a0a:	b111      	cbz	r1, 8005a12 <_reclaim_reent+0x82>
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f000 f84f 	bl	8005ab0 <_free_r>
 8005a12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005a14:	b111      	cbz	r1, 8005a1c <_reclaim_reent+0x8c>
 8005a16:	4620      	mov	r0, r4
 8005a18:	f000 f84a 	bl	8005ab0 <_free_r>
 8005a1c:	6a23      	ldr	r3, [r4, #32]
 8005a1e:	b14b      	cbz	r3, 8005a34 <_reclaim_reent+0xa4>
 8005a20:	4620      	mov	r0, r4
 8005a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a26:	4718      	bx	r3
 8005a28:	680e      	ldr	r6, [r1, #0]
 8005a2a:	4620      	mov	r0, r4
 8005a2c:	f000 f840 	bl	8005ab0 <_free_r>
 8005a30:	4631      	mov	r1, r6
 8005a32:	e7bb      	b.n	80059ac <_reclaim_reent+0x1c>
 8005a34:	bd70      	pop	{r4, r5, r6, pc}
 8005a36:	bf00      	nop
 8005a38:	20000040 	.word	0x20000040

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	@ (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	20000040 	.word	0x20000040

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005a80 <__libc_init_array+0x38>)
 8005a4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005a84 <__libc_init_array+0x3c>)
 8005a4e:	1b64      	subs	r4, r4, r5
 8005a50:	10a4      	asrs	r4, r4, #2
 8005a52:	2600      	movs	r6, #0
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	4d0b      	ldr	r5, [pc, #44]	@ (8005a88 <__libc_init_array+0x40>)
 8005a5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005a8c <__libc_init_array+0x44>)
 8005a5c:	f000 fc66 	bl	800632c <_init>
 8005a60:	1b64      	subs	r4, r4, r5
 8005a62:	10a4      	asrs	r4, r4, #2
 8005a64:	2600      	movs	r6, #0
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	0800651c 	.word	0x0800651c
 8005a84:	0800651c 	.word	0x0800651c
 8005a88:	0800651c 	.word	0x0800651c
 8005a8c:	08006520 	.word	0x08006520

08005a90 <__retarget_lock_acquire_recursive>:
 8005a90:	4770      	bx	lr

08005a92 <__retarget_lock_release_recursive>:
 8005a92:	4770      	bx	lr

08005a94 <memcpy>:
 8005a94:	440a      	add	r2, r1
 8005a96:	4291      	cmp	r1, r2
 8005a98:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a9c:	d100      	bne.n	8005aa0 <memcpy+0xc>
 8005a9e:	4770      	bx	lr
 8005aa0:	b510      	push	{r4, lr}
 8005aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aaa:	4291      	cmp	r1, r2
 8005aac:	d1f9      	bne.n	8005aa2 <memcpy+0xe>
 8005aae:	bd10      	pop	{r4, pc}

08005ab0 <_free_r>:
 8005ab0:	b538      	push	{r3, r4, r5, lr}
 8005ab2:	4605      	mov	r5, r0
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d041      	beq.n	8005b3c <_free_r+0x8c>
 8005ab8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005abc:	1f0c      	subs	r4, r1, #4
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bfb8      	it	lt
 8005ac2:	18e4      	addlt	r4, r4, r3
 8005ac4:	f000 f8e0 	bl	8005c88 <__malloc_lock>
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <_free_r+0x90>)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	b933      	cbnz	r3, 8005adc <_free_r+0x2c>
 8005ace:	6063      	str	r3, [r4, #4]
 8005ad0:	6014      	str	r4, [r2, #0]
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad8:	f000 b8dc 	b.w	8005c94 <__malloc_unlock>
 8005adc:	42a3      	cmp	r3, r4
 8005ade:	d908      	bls.n	8005af2 <_free_r+0x42>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	1821      	adds	r1, r4, r0
 8005ae4:	428b      	cmp	r3, r1
 8005ae6:	bf01      	itttt	eq
 8005ae8:	6819      	ldreq	r1, [r3, #0]
 8005aea:	685b      	ldreq	r3, [r3, #4]
 8005aec:	1809      	addeq	r1, r1, r0
 8005aee:	6021      	streq	r1, [r4, #0]
 8005af0:	e7ed      	b.n	8005ace <_free_r+0x1e>
 8005af2:	461a      	mov	r2, r3
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	b10b      	cbz	r3, 8005afc <_free_r+0x4c>
 8005af8:	42a3      	cmp	r3, r4
 8005afa:	d9fa      	bls.n	8005af2 <_free_r+0x42>
 8005afc:	6811      	ldr	r1, [r2, #0]
 8005afe:	1850      	adds	r0, r2, r1
 8005b00:	42a0      	cmp	r0, r4
 8005b02:	d10b      	bne.n	8005b1c <_free_r+0x6c>
 8005b04:	6820      	ldr	r0, [r4, #0]
 8005b06:	4401      	add	r1, r0
 8005b08:	1850      	adds	r0, r2, r1
 8005b0a:	4283      	cmp	r3, r0
 8005b0c:	6011      	str	r1, [r2, #0]
 8005b0e:	d1e0      	bne.n	8005ad2 <_free_r+0x22>
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	4408      	add	r0, r1
 8005b18:	6010      	str	r0, [r2, #0]
 8005b1a:	e7da      	b.n	8005ad2 <_free_r+0x22>
 8005b1c:	d902      	bls.n	8005b24 <_free_r+0x74>
 8005b1e:	230c      	movs	r3, #12
 8005b20:	602b      	str	r3, [r5, #0]
 8005b22:	e7d6      	b.n	8005ad2 <_free_r+0x22>
 8005b24:	6820      	ldr	r0, [r4, #0]
 8005b26:	1821      	adds	r1, r4, r0
 8005b28:	428b      	cmp	r3, r1
 8005b2a:	bf04      	itt	eq
 8005b2c:	6819      	ldreq	r1, [r3, #0]
 8005b2e:	685b      	ldreq	r3, [r3, #4]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	bf04      	itt	eq
 8005b34:	1809      	addeq	r1, r1, r0
 8005b36:	6021      	streq	r1, [r4, #0]
 8005b38:	6054      	str	r4, [r2, #4]
 8005b3a:	e7ca      	b.n	8005ad2 <_free_r+0x22>
 8005b3c:	bd38      	pop	{r3, r4, r5, pc}
 8005b3e:	bf00      	nop
 8005b40:	20004cfc 	.word	0x20004cfc

08005b44 <sbrk_aligned>:
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	4e0f      	ldr	r6, [pc, #60]	@ (8005b84 <sbrk_aligned+0x40>)
 8005b48:	460c      	mov	r4, r1
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	b911      	cbnz	r1, 8005b56 <sbrk_aligned+0x12>
 8005b50:	f000 fba6 	bl	80062a0 <_sbrk_r>
 8005b54:	6030      	str	r0, [r6, #0]
 8005b56:	4621      	mov	r1, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 fba1 	bl	80062a0 <_sbrk_r>
 8005b5e:	1c43      	adds	r3, r0, #1
 8005b60:	d103      	bne.n	8005b6a <sbrk_aligned+0x26>
 8005b62:	f04f 34ff 	mov.w	r4, #4294967295
 8005b66:	4620      	mov	r0, r4
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	1cc4      	adds	r4, r0, #3
 8005b6c:	f024 0403 	bic.w	r4, r4, #3
 8005b70:	42a0      	cmp	r0, r4
 8005b72:	d0f8      	beq.n	8005b66 <sbrk_aligned+0x22>
 8005b74:	1a21      	subs	r1, r4, r0
 8005b76:	4628      	mov	r0, r5
 8005b78:	f000 fb92 	bl	80062a0 <_sbrk_r>
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	d1f2      	bne.n	8005b66 <sbrk_aligned+0x22>
 8005b80:	e7ef      	b.n	8005b62 <sbrk_aligned+0x1e>
 8005b82:	bf00      	nop
 8005b84:	20004cf8 	.word	0x20004cf8

08005b88 <_malloc_r>:
 8005b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	1ccd      	adds	r5, r1, #3
 8005b8e:	f025 0503 	bic.w	r5, r5, #3
 8005b92:	3508      	adds	r5, #8
 8005b94:	2d0c      	cmp	r5, #12
 8005b96:	bf38      	it	cc
 8005b98:	250c      	movcc	r5, #12
 8005b9a:	2d00      	cmp	r5, #0
 8005b9c:	4606      	mov	r6, r0
 8005b9e:	db01      	blt.n	8005ba4 <_malloc_r+0x1c>
 8005ba0:	42a9      	cmp	r1, r5
 8005ba2:	d904      	bls.n	8005bae <_malloc_r+0x26>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	6033      	str	r3, [r6, #0]
 8005ba8:	2000      	movs	r0, #0
 8005baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c84 <_malloc_r+0xfc>
 8005bb2:	f000 f869 	bl	8005c88 <__malloc_lock>
 8005bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8005bba:	461c      	mov	r4, r3
 8005bbc:	bb44      	cbnz	r4, 8005c10 <_malloc_r+0x88>
 8005bbe:	4629      	mov	r1, r5
 8005bc0:	4630      	mov	r0, r6
 8005bc2:	f7ff ffbf 	bl	8005b44 <sbrk_aligned>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	4604      	mov	r4, r0
 8005bca:	d158      	bne.n	8005c7e <_malloc_r+0xf6>
 8005bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8005bd0:	4627      	mov	r7, r4
 8005bd2:	2f00      	cmp	r7, #0
 8005bd4:	d143      	bne.n	8005c5e <_malloc_r+0xd6>
 8005bd6:	2c00      	cmp	r4, #0
 8005bd8:	d04b      	beq.n	8005c72 <_malloc_r+0xea>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	4639      	mov	r1, r7
 8005bde:	4630      	mov	r0, r6
 8005be0:	eb04 0903 	add.w	r9, r4, r3
 8005be4:	f000 fb5c 	bl	80062a0 <_sbrk_r>
 8005be8:	4581      	cmp	r9, r0
 8005bea:	d142      	bne.n	8005c72 <_malloc_r+0xea>
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	1a6d      	subs	r5, r5, r1
 8005bf0:	4629      	mov	r1, r5
 8005bf2:	4630      	mov	r0, r6
 8005bf4:	f7ff ffa6 	bl	8005b44 <sbrk_aligned>
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d03a      	beq.n	8005c72 <_malloc_r+0xea>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	442b      	add	r3, r5
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	f8d8 3000 	ldr.w	r3, [r8]
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	bb62      	cbnz	r2, 8005c64 <_malloc_r+0xdc>
 8005c0a:	f8c8 7000 	str.w	r7, [r8]
 8005c0e:	e00f      	b.n	8005c30 <_malloc_r+0xa8>
 8005c10:	6822      	ldr	r2, [r4, #0]
 8005c12:	1b52      	subs	r2, r2, r5
 8005c14:	d420      	bmi.n	8005c58 <_malloc_r+0xd0>
 8005c16:	2a0b      	cmp	r2, #11
 8005c18:	d917      	bls.n	8005c4a <_malloc_r+0xc2>
 8005c1a:	1961      	adds	r1, r4, r5
 8005c1c:	42a3      	cmp	r3, r4
 8005c1e:	6025      	str	r5, [r4, #0]
 8005c20:	bf18      	it	ne
 8005c22:	6059      	strne	r1, [r3, #4]
 8005c24:	6863      	ldr	r3, [r4, #4]
 8005c26:	bf08      	it	eq
 8005c28:	f8c8 1000 	streq.w	r1, [r8]
 8005c2c:	5162      	str	r2, [r4, r5]
 8005c2e:	604b      	str	r3, [r1, #4]
 8005c30:	4630      	mov	r0, r6
 8005c32:	f000 f82f 	bl	8005c94 <__malloc_unlock>
 8005c36:	f104 000b 	add.w	r0, r4, #11
 8005c3a:	1d23      	adds	r3, r4, #4
 8005c3c:	f020 0007 	bic.w	r0, r0, #7
 8005c40:	1ac2      	subs	r2, r0, r3
 8005c42:	bf1c      	itt	ne
 8005c44:	1a1b      	subne	r3, r3, r0
 8005c46:	50a3      	strne	r3, [r4, r2]
 8005c48:	e7af      	b.n	8005baa <_malloc_r+0x22>
 8005c4a:	6862      	ldr	r2, [r4, #4]
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	bf0c      	ite	eq
 8005c50:	f8c8 2000 	streq.w	r2, [r8]
 8005c54:	605a      	strne	r2, [r3, #4]
 8005c56:	e7eb      	b.n	8005c30 <_malloc_r+0xa8>
 8005c58:	4623      	mov	r3, r4
 8005c5a:	6864      	ldr	r4, [r4, #4]
 8005c5c:	e7ae      	b.n	8005bbc <_malloc_r+0x34>
 8005c5e:	463c      	mov	r4, r7
 8005c60:	687f      	ldr	r7, [r7, #4]
 8005c62:	e7b6      	b.n	8005bd2 <_malloc_r+0x4a>
 8005c64:	461a      	mov	r2, r3
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	42a3      	cmp	r3, r4
 8005c6a:	d1fb      	bne.n	8005c64 <_malloc_r+0xdc>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6053      	str	r3, [r2, #4]
 8005c70:	e7de      	b.n	8005c30 <_malloc_r+0xa8>
 8005c72:	230c      	movs	r3, #12
 8005c74:	6033      	str	r3, [r6, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	f000 f80c 	bl	8005c94 <__malloc_unlock>
 8005c7c:	e794      	b.n	8005ba8 <_malloc_r+0x20>
 8005c7e:	6005      	str	r5, [r0, #0]
 8005c80:	e7d6      	b.n	8005c30 <_malloc_r+0xa8>
 8005c82:	bf00      	nop
 8005c84:	20004cfc 	.word	0x20004cfc

08005c88 <__malloc_lock>:
 8005c88:	4801      	ldr	r0, [pc, #4]	@ (8005c90 <__malloc_lock+0x8>)
 8005c8a:	f7ff bf01 	b.w	8005a90 <__retarget_lock_acquire_recursive>
 8005c8e:	bf00      	nop
 8005c90:	20004cf4 	.word	0x20004cf4

08005c94 <__malloc_unlock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_unlock+0x8>)
 8005c96:	f7ff befc 	b.w	8005a92 <__retarget_lock_release_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	20004cf4 	.word	0x20004cf4

08005ca0 <__ssputs_r>:
 8005ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ca4:	688e      	ldr	r6, [r1, #8]
 8005ca6:	461f      	mov	r7, r3
 8005ca8:	42be      	cmp	r6, r7
 8005caa:	680b      	ldr	r3, [r1, #0]
 8005cac:	4682      	mov	sl, r0
 8005cae:	460c      	mov	r4, r1
 8005cb0:	4690      	mov	r8, r2
 8005cb2:	d82d      	bhi.n	8005d10 <__ssputs_r+0x70>
 8005cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005cb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005cbc:	d026      	beq.n	8005d0c <__ssputs_r+0x6c>
 8005cbe:	6965      	ldr	r5, [r4, #20]
 8005cc0:	6909      	ldr	r1, [r1, #16]
 8005cc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005cc6:	eba3 0901 	sub.w	r9, r3, r1
 8005cca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005cce:	1c7b      	adds	r3, r7, #1
 8005cd0:	444b      	add	r3, r9
 8005cd2:	106d      	asrs	r5, r5, #1
 8005cd4:	429d      	cmp	r5, r3
 8005cd6:	bf38      	it	cc
 8005cd8:	461d      	movcc	r5, r3
 8005cda:	0553      	lsls	r3, r2, #21
 8005cdc:	d527      	bpl.n	8005d2e <__ssputs_r+0x8e>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	f7ff ff52 	bl	8005b88 <_malloc_r>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	b360      	cbz	r0, 8005d42 <__ssputs_r+0xa2>
 8005ce8:	6921      	ldr	r1, [r4, #16]
 8005cea:	464a      	mov	r2, r9
 8005cec:	f7ff fed2 	bl	8005a94 <memcpy>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005cf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cfa:	81a3      	strh	r3, [r4, #12]
 8005cfc:	6126      	str	r6, [r4, #16]
 8005cfe:	6165      	str	r5, [r4, #20]
 8005d00:	444e      	add	r6, r9
 8005d02:	eba5 0509 	sub.w	r5, r5, r9
 8005d06:	6026      	str	r6, [r4, #0]
 8005d08:	60a5      	str	r5, [r4, #8]
 8005d0a:	463e      	mov	r6, r7
 8005d0c:	42be      	cmp	r6, r7
 8005d0e:	d900      	bls.n	8005d12 <__ssputs_r+0x72>
 8005d10:	463e      	mov	r6, r7
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	4632      	mov	r2, r6
 8005d16:	4641      	mov	r1, r8
 8005d18:	f000 faa8 	bl	800626c <memmove>
 8005d1c:	68a3      	ldr	r3, [r4, #8]
 8005d1e:	1b9b      	subs	r3, r3, r6
 8005d20:	60a3      	str	r3, [r4, #8]
 8005d22:	6823      	ldr	r3, [r4, #0]
 8005d24:	4433      	add	r3, r6
 8005d26:	6023      	str	r3, [r4, #0]
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2e:	462a      	mov	r2, r5
 8005d30:	f000 fac6 	bl	80062c0 <_realloc_r>
 8005d34:	4606      	mov	r6, r0
 8005d36:	2800      	cmp	r0, #0
 8005d38:	d1e0      	bne.n	8005cfc <__ssputs_r+0x5c>
 8005d3a:	6921      	ldr	r1, [r4, #16]
 8005d3c:	4650      	mov	r0, sl
 8005d3e:	f7ff feb7 	bl	8005ab0 <_free_r>
 8005d42:	230c      	movs	r3, #12
 8005d44:	f8ca 3000 	str.w	r3, [sl]
 8005d48:	89a3      	ldrh	r3, [r4, #12]
 8005d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d4e:	81a3      	strh	r3, [r4, #12]
 8005d50:	f04f 30ff 	mov.w	r0, #4294967295
 8005d54:	e7e9      	b.n	8005d2a <__ssputs_r+0x8a>
	...

08005d58 <_svfiprintf_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	4698      	mov	r8, r3
 8005d5e:	898b      	ldrh	r3, [r1, #12]
 8005d60:	061b      	lsls	r3, r3, #24
 8005d62:	b09d      	sub	sp, #116	@ 0x74
 8005d64:	4607      	mov	r7, r0
 8005d66:	460d      	mov	r5, r1
 8005d68:	4614      	mov	r4, r2
 8005d6a:	d510      	bpl.n	8005d8e <_svfiprintf_r+0x36>
 8005d6c:	690b      	ldr	r3, [r1, #16]
 8005d6e:	b973      	cbnz	r3, 8005d8e <_svfiprintf_r+0x36>
 8005d70:	2140      	movs	r1, #64	@ 0x40
 8005d72:	f7ff ff09 	bl	8005b88 <_malloc_r>
 8005d76:	6028      	str	r0, [r5, #0]
 8005d78:	6128      	str	r0, [r5, #16]
 8005d7a:	b930      	cbnz	r0, 8005d8a <_svfiprintf_r+0x32>
 8005d7c:	230c      	movs	r3, #12
 8005d7e:	603b      	str	r3, [r7, #0]
 8005d80:	f04f 30ff 	mov.w	r0, #4294967295
 8005d84:	b01d      	add	sp, #116	@ 0x74
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	2340      	movs	r3, #64	@ 0x40
 8005d8c:	616b      	str	r3, [r5, #20]
 8005d8e:	2300      	movs	r3, #0
 8005d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d92:	2320      	movs	r3, #32
 8005d94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d98:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d9c:	2330      	movs	r3, #48	@ 0x30
 8005d9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005f3c <_svfiprintf_r+0x1e4>
 8005da2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005da6:	f04f 0901 	mov.w	r9, #1
 8005daa:	4623      	mov	r3, r4
 8005dac:	469a      	mov	sl, r3
 8005dae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005db2:	b10a      	cbz	r2, 8005db8 <_svfiprintf_r+0x60>
 8005db4:	2a25      	cmp	r2, #37	@ 0x25
 8005db6:	d1f9      	bne.n	8005dac <_svfiprintf_r+0x54>
 8005db8:	ebba 0b04 	subs.w	fp, sl, r4
 8005dbc:	d00b      	beq.n	8005dd6 <_svfiprintf_r+0x7e>
 8005dbe:	465b      	mov	r3, fp
 8005dc0:	4622      	mov	r2, r4
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	4638      	mov	r0, r7
 8005dc6:	f7ff ff6b 	bl	8005ca0 <__ssputs_r>
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f000 80a7 	beq.w	8005f1e <_svfiprintf_r+0x1c6>
 8005dd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dd2:	445a      	add	r2, fp
 8005dd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005dd6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 809f 	beq.w	8005f1e <_svfiprintf_r+0x1c6>
 8005de0:	2300      	movs	r3, #0
 8005de2:	f04f 32ff 	mov.w	r2, #4294967295
 8005de6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005dea:	f10a 0a01 	add.w	sl, sl, #1
 8005dee:	9304      	str	r3, [sp, #16]
 8005df0:	9307      	str	r3, [sp, #28]
 8005df2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005df8:	4654      	mov	r4, sl
 8005dfa:	2205      	movs	r2, #5
 8005dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e00:	484e      	ldr	r0, [pc, #312]	@ (8005f3c <_svfiprintf_r+0x1e4>)
 8005e02:	f7fa f9ed 	bl	80001e0 <memchr>
 8005e06:	9a04      	ldr	r2, [sp, #16]
 8005e08:	b9d8      	cbnz	r0, 8005e42 <_svfiprintf_r+0xea>
 8005e0a:	06d0      	lsls	r0, r2, #27
 8005e0c:	bf44      	itt	mi
 8005e0e:	2320      	movmi	r3, #32
 8005e10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e14:	0711      	lsls	r1, r2, #28
 8005e16:	bf44      	itt	mi
 8005e18:	232b      	movmi	r3, #43	@ 0x2b
 8005e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005e1e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e22:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e24:	d015      	beq.n	8005e52 <_svfiprintf_r+0xfa>
 8005e26:	9a07      	ldr	r2, [sp, #28]
 8005e28:	4654      	mov	r4, sl
 8005e2a:	2000      	movs	r0, #0
 8005e2c:	f04f 0c0a 	mov.w	ip, #10
 8005e30:	4621      	mov	r1, r4
 8005e32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e36:	3b30      	subs	r3, #48	@ 0x30
 8005e38:	2b09      	cmp	r3, #9
 8005e3a:	d94b      	bls.n	8005ed4 <_svfiprintf_r+0x17c>
 8005e3c:	b1b0      	cbz	r0, 8005e6c <_svfiprintf_r+0x114>
 8005e3e:	9207      	str	r2, [sp, #28]
 8005e40:	e014      	b.n	8005e6c <_svfiprintf_r+0x114>
 8005e42:	eba0 0308 	sub.w	r3, r0, r8
 8005e46:	fa09 f303 	lsl.w	r3, r9, r3
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	9304      	str	r3, [sp, #16]
 8005e4e:	46a2      	mov	sl, r4
 8005e50:	e7d2      	b.n	8005df8 <_svfiprintf_r+0xa0>
 8005e52:	9b03      	ldr	r3, [sp, #12]
 8005e54:	1d19      	adds	r1, r3, #4
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	9103      	str	r1, [sp, #12]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	bfbb      	ittet	lt
 8005e5e:	425b      	neglt	r3, r3
 8005e60:	f042 0202 	orrlt.w	r2, r2, #2
 8005e64:	9307      	strge	r3, [sp, #28]
 8005e66:	9307      	strlt	r3, [sp, #28]
 8005e68:	bfb8      	it	lt
 8005e6a:	9204      	strlt	r2, [sp, #16]
 8005e6c:	7823      	ldrb	r3, [r4, #0]
 8005e6e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e70:	d10a      	bne.n	8005e88 <_svfiprintf_r+0x130>
 8005e72:	7863      	ldrb	r3, [r4, #1]
 8005e74:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e76:	d132      	bne.n	8005ede <_svfiprintf_r+0x186>
 8005e78:	9b03      	ldr	r3, [sp, #12]
 8005e7a:	1d1a      	adds	r2, r3, #4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	9203      	str	r2, [sp, #12]
 8005e80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e84:	3402      	adds	r4, #2
 8005e86:	9305      	str	r3, [sp, #20]
 8005e88:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005f4c <_svfiprintf_r+0x1f4>
 8005e8c:	7821      	ldrb	r1, [r4, #0]
 8005e8e:	2203      	movs	r2, #3
 8005e90:	4650      	mov	r0, sl
 8005e92:	f7fa f9a5 	bl	80001e0 <memchr>
 8005e96:	b138      	cbz	r0, 8005ea8 <_svfiprintf_r+0x150>
 8005e98:	9b04      	ldr	r3, [sp, #16]
 8005e9a:	eba0 000a 	sub.w	r0, r0, sl
 8005e9e:	2240      	movs	r2, #64	@ 0x40
 8005ea0:	4082      	lsls	r2, r0
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	3401      	adds	r4, #1
 8005ea6:	9304      	str	r3, [sp, #16]
 8005ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005eac:	4824      	ldr	r0, [pc, #144]	@ (8005f40 <_svfiprintf_r+0x1e8>)
 8005eae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005eb2:	2206      	movs	r2, #6
 8005eb4:	f7fa f994 	bl	80001e0 <memchr>
 8005eb8:	2800      	cmp	r0, #0
 8005eba:	d036      	beq.n	8005f2a <_svfiprintf_r+0x1d2>
 8005ebc:	4b21      	ldr	r3, [pc, #132]	@ (8005f44 <_svfiprintf_r+0x1ec>)
 8005ebe:	bb1b      	cbnz	r3, 8005f08 <_svfiprintf_r+0x1b0>
 8005ec0:	9b03      	ldr	r3, [sp, #12]
 8005ec2:	3307      	adds	r3, #7
 8005ec4:	f023 0307 	bic.w	r3, r3, #7
 8005ec8:	3308      	adds	r3, #8
 8005eca:	9303      	str	r3, [sp, #12]
 8005ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ece:	4433      	add	r3, r6
 8005ed0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ed2:	e76a      	b.n	8005daa <_svfiprintf_r+0x52>
 8005ed4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ed8:	460c      	mov	r4, r1
 8005eda:	2001      	movs	r0, #1
 8005edc:	e7a8      	b.n	8005e30 <_svfiprintf_r+0xd8>
 8005ede:	2300      	movs	r3, #0
 8005ee0:	3401      	adds	r4, #1
 8005ee2:	9305      	str	r3, [sp, #20]
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f04f 0c0a 	mov.w	ip, #10
 8005eea:	4620      	mov	r0, r4
 8005eec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ef0:	3a30      	subs	r2, #48	@ 0x30
 8005ef2:	2a09      	cmp	r2, #9
 8005ef4:	d903      	bls.n	8005efe <_svfiprintf_r+0x1a6>
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d0c6      	beq.n	8005e88 <_svfiprintf_r+0x130>
 8005efa:	9105      	str	r1, [sp, #20]
 8005efc:	e7c4      	b.n	8005e88 <_svfiprintf_r+0x130>
 8005efe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f02:	4604      	mov	r4, r0
 8005f04:	2301      	movs	r3, #1
 8005f06:	e7f0      	b.n	8005eea <_svfiprintf_r+0x192>
 8005f08:	ab03      	add	r3, sp, #12
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	462a      	mov	r2, r5
 8005f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005f48 <_svfiprintf_r+0x1f0>)
 8005f10:	a904      	add	r1, sp, #16
 8005f12:	4638      	mov	r0, r7
 8005f14:	f3af 8000 	nop.w
 8005f18:	1c42      	adds	r2, r0, #1
 8005f1a:	4606      	mov	r6, r0
 8005f1c:	d1d6      	bne.n	8005ecc <_svfiprintf_r+0x174>
 8005f1e:	89ab      	ldrh	r3, [r5, #12]
 8005f20:	065b      	lsls	r3, r3, #25
 8005f22:	f53f af2d 	bmi.w	8005d80 <_svfiprintf_r+0x28>
 8005f26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f28:	e72c      	b.n	8005d84 <_svfiprintf_r+0x2c>
 8005f2a:	ab03      	add	r3, sp, #12
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	462a      	mov	r2, r5
 8005f30:	4b05      	ldr	r3, [pc, #20]	@ (8005f48 <_svfiprintf_r+0x1f0>)
 8005f32:	a904      	add	r1, sp, #16
 8005f34:	4638      	mov	r0, r7
 8005f36:	f000 f879 	bl	800602c <_printf_i>
 8005f3a:	e7ed      	b.n	8005f18 <_svfiprintf_r+0x1c0>
 8005f3c:	080064e0 	.word	0x080064e0
 8005f40:	080064ea 	.word	0x080064ea
 8005f44:	00000000 	.word	0x00000000
 8005f48:	08005ca1 	.word	0x08005ca1
 8005f4c:	080064e6 	.word	0x080064e6

08005f50 <_printf_common>:
 8005f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f54:	4616      	mov	r6, r2
 8005f56:	4698      	mov	r8, r3
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfb8      	it	lt
 8005f64:	4613      	movlt	r3, r2
 8005f66:	6033      	str	r3, [r6, #0]
 8005f68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f6c:	4607      	mov	r7, r0
 8005f6e:	460c      	mov	r4, r1
 8005f70:	b10a      	cbz	r2, 8005f76 <_printf_common+0x26>
 8005f72:	3301      	adds	r3, #1
 8005f74:	6033      	str	r3, [r6, #0]
 8005f76:	6823      	ldr	r3, [r4, #0]
 8005f78:	0699      	lsls	r1, r3, #26
 8005f7a:	bf42      	ittt	mi
 8005f7c:	6833      	ldrmi	r3, [r6, #0]
 8005f7e:	3302      	addmi	r3, #2
 8005f80:	6033      	strmi	r3, [r6, #0]
 8005f82:	6825      	ldr	r5, [r4, #0]
 8005f84:	f015 0506 	ands.w	r5, r5, #6
 8005f88:	d106      	bne.n	8005f98 <_printf_common+0x48>
 8005f8a:	f104 0a19 	add.w	sl, r4, #25
 8005f8e:	68e3      	ldr	r3, [r4, #12]
 8005f90:	6832      	ldr	r2, [r6, #0]
 8005f92:	1a9b      	subs	r3, r3, r2
 8005f94:	42ab      	cmp	r3, r5
 8005f96:	dc26      	bgt.n	8005fe6 <_printf_common+0x96>
 8005f98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f9c:	6822      	ldr	r2, [r4, #0]
 8005f9e:	3b00      	subs	r3, #0
 8005fa0:	bf18      	it	ne
 8005fa2:	2301      	movne	r3, #1
 8005fa4:	0692      	lsls	r2, r2, #26
 8005fa6:	d42b      	bmi.n	8006000 <_printf_common+0xb0>
 8005fa8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005fac:	4641      	mov	r1, r8
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c8      	blx	r9
 8005fb2:	3001      	adds	r0, #1
 8005fb4:	d01e      	beq.n	8005ff4 <_printf_common+0xa4>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	6922      	ldr	r2, [r4, #16]
 8005fba:	f003 0306 	and.w	r3, r3, #6
 8005fbe:	2b04      	cmp	r3, #4
 8005fc0:	bf02      	ittt	eq
 8005fc2:	68e5      	ldreq	r5, [r4, #12]
 8005fc4:	6833      	ldreq	r3, [r6, #0]
 8005fc6:	1aed      	subeq	r5, r5, r3
 8005fc8:	68a3      	ldr	r3, [r4, #8]
 8005fca:	bf0c      	ite	eq
 8005fcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fd0:	2500      	movne	r5, #0
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	bfc4      	itt	gt
 8005fd6:	1a9b      	subgt	r3, r3, r2
 8005fd8:	18ed      	addgt	r5, r5, r3
 8005fda:	2600      	movs	r6, #0
 8005fdc:	341a      	adds	r4, #26
 8005fde:	42b5      	cmp	r5, r6
 8005fe0:	d11a      	bne.n	8006018 <_printf_common+0xc8>
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	e008      	b.n	8005ff8 <_printf_common+0xa8>
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	4641      	mov	r1, r8
 8005fec:	4638      	mov	r0, r7
 8005fee:	47c8      	blx	r9
 8005ff0:	3001      	adds	r0, #1
 8005ff2:	d103      	bne.n	8005ffc <_printf_common+0xac>
 8005ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ffc:	3501      	adds	r5, #1
 8005ffe:	e7c6      	b.n	8005f8e <_printf_common+0x3e>
 8006000:	18e1      	adds	r1, r4, r3
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	2030      	movs	r0, #48	@ 0x30
 8006006:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800600a:	4422      	add	r2, r4
 800600c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006010:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006014:	3302      	adds	r3, #2
 8006016:	e7c7      	b.n	8005fa8 <_printf_common+0x58>
 8006018:	2301      	movs	r3, #1
 800601a:	4622      	mov	r2, r4
 800601c:	4641      	mov	r1, r8
 800601e:	4638      	mov	r0, r7
 8006020:	47c8      	blx	r9
 8006022:	3001      	adds	r0, #1
 8006024:	d0e6      	beq.n	8005ff4 <_printf_common+0xa4>
 8006026:	3601      	adds	r6, #1
 8006028:	e7d9      	b.n	8005fde <_printf_common+0x8e>
	...

0800602c <_printf_i>:
 800602c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	7e0f      	ldrb	r7, [r1, #24]
 8006032:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006034:	2f78      	cmp	r7, #120	@ 0x78
 8006036:	4691      	mov	r9, r2
 8006038:	4680      	mov	r8, r0
 800603a:	460c      	mov	r4, r1
 800603c:	469a      	mov	sl, r3
 800603e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006042:	d807      	bhi.n	8006054 <_printf_i+0x28>
 8006044:	2f62      	cmp	r7, #98	@ 0x62
 8006046:	d80a      	bhi.n	800605e <_printf_i+0x32>
 8006048:	2f00      	cmp	r7, #0
 800604a:	f000 80d2 	beq.w	80061f2 <_printf_i+0x1c6>
 800604e:	2f58      	cmp	r7, #88	@ 0x58
 8006050:	f000 80b9 	beq.w	80061c6 <_printf_i+0x19a>
 8006054:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006058:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800605c:	e03a      	b.n	80060d4 <_printf_i+0xa8>
 800605e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006062:	2b15      	cmp	r3, #21
 8006064:	d8f6      	bhi.n	8006054 <_printf_i+0x28>
 8006066:	a101      	add	r1, pc, #4	@ (adr r1, 800606c <_printf_i+0x40>)
 8006068:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800606c:	080060c5 	.word	0x080060c5
 8006070:	080060d9 	.word	0x080060d9
 8006074:	08006055 	.word	0x08006055
 8006078:	08006055 	.word	0x08006055
 800607c:	08006055 	.word	0x08006055
 8006080:	08006055 	.word	0x08006055
 8006084:	080060d9 	.word	0x080060d9
 8006088:	08006055 	.word	0x08006055
 800608c:	08006055 	.word	0x08006055
 8006090:	08006055 	.word	0x08006055
 8006094:	08006055 	.word	0x08006055
 8006098:	080061d9 	.word	0x080061d9
 800609c:	08006103 	.word	0x08006103
 80060a0:	08006193 	.word	0x08006193
 80060a4:	08006055 	.word	0x08006055
 80060a8:	08006055 	.word	0x08006055
 80060ac:	080061fb 	.word	0x080061fb
 80060b0:	08006055 	.word	0x08006055
 80060b4:	08006103 	.word	0x08006103
 80060b8:	08006055 	.word	0x08006055
 80060bc:	08006055 	.word	0x08006055
 80060c0:	0800619b 	.word	0x0800619b
 80060c4:	6833      	ldr	r3, [r6, #0]
 80060c6:	1d1a      	adds	r2, r3, #4
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	6032      	str	r2, [r6, #0]
 80060cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060d4:	2301      	movs	r3, #1
 80060d6:	e09d      	b.n	8006214 <_printf_i+0x1e8>
 80060d8:	6833      	ldr	r3, [r6, #0]
 80060da:	6820      	ldr	r0, [r4, #0]
 80060dc:	1d19      	adds	r1, r3, #4
 80060de:	6031      	str	r1, [r6, #0]
 80060e0:	0606      	lsls	r6, r0, #24
 80060e2:	d501      	bpl.n	80060e8 <_printf_i+0xbc>
 80060e4:	681d      	ldr	r5, [r3, #0]
 80060e6:	e003      	b.n	80060f0 <_printf_i+0xc4>
 80060e8:	0645      	lsls	r5, r0, #25
 80060ea:	d5fb      	bpl.n	80060e4 <_printf_i+0xb8>
 80060ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060f0:	2d00      	cmp	r5, #0
 80060f2:	da03      	bge.n	80060fc <_printf_i+0xd0>
 80060f4:	232d      	movs	r3, #45	@ 0x2d
 80060f6:	426d      	negs	r5, r5
 80060f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060fc:	4859      	ldr	r0, [pc, #356]	@ (8006264 <_printf_i+0x238>)
 80060fe:	230a      	movs	r3, #10
 8006100:	e011      	b.n	8006126 <_printf_i+0xfa>
 8006102:	6821      	ldr	r1, [r4, #0]
 8006104:	6833      	ldr	r3, [r6, #0]
 8006106:	0608      	lsls	r0, r1, #24
 8006108:	f853 5b04 	ldr.w	r5, [r3], #4
 800610c:	d402      	bmi.n	8006114 <_printf_i+0xe8>
 800610e:	0649      	lsls	r1, r1, #25
 8006110:	bf48      	it	mi
 8006112:	b2ad      	uxthmi	r5, r5
 8006114:	2f6f      	cmp	r7, #111	@ 0x6f
 8006116:	4853      	ldr	r0, [pc, #332]	@ (8006264 <_printf_i+0x238>)
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	bf14      	ite	ne
 800611c:	230a      	movne	r3, #10
 800611e:	2308      	moveq	r3, #8
 8006120:	2100      	movs	r1, #0
 8006122:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006126:	6866      	ldr	r6, [r4, #4]
 8006128:	60a6      	str	r6, [r4, #8]
 800612a:	2e00      	cmp	r6, #0
 800612c:	bfa2      	ittt	ge
 800612e:	6821      	ldrge	r1, [r4, #0]
 8006130:	f021 0104 	bicge.w	r1, r1, #4
 8006134:	6021      	strge	r1, [r4, #0]
 8006136:	b90d      	cbnz	r5, 800613c <_printf_i+0x110>
 8006138:	2e00      	cmp	r6, #0
 800613a:	d04b      	beq.n	80061d4 <_printf_i+0x1a8>
 800613c:	4616      	mov	r6, r2
 800613e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006142:	fb03 5711 	mls	r7, r3, r1, r5
 8006146:	5dc7      	ldrb	r7, [r0, r7]
 8006148:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800614c:	462f      	mov	r7, r5
 800614e:	42bb      	cmp	r3, r7
 8006150:	460d      	mov	r5, r1
 8006152:	d9f4      	bls.n	800613e <_printf_i+0x112>
 8006154:	2b08      	cmp	r3, #8
 8006156:	d10b      	bne.n	8006170 <_printf_i+0x144>
 8006158:	6823      	ldr	r3, [r4, #0]
 800615a:	07df      	lsls	r7, r3, #31
 800615c:	d508      	bpl.n	8006170 <_printf_i+0x144>
 800615e:	6923      	ldr	r3, [r4, #16]
 8006160:	6861      	ldr	r1, [r4, #4]
 8006162:	4299      	cmp	r1, r3
 8006164:	bfde      	ittt	le
 8006166:	2330      	movle	r3, #48	@ 0x30
 8006168:	f806 3c01 	strble.w	r3, [r6, #-1]
 800616c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006170:	1b92      	subs	r2, r2, r6
 8006172:	6122      	str	r2, [r4, #16]
 8006174:	f8cd a000 	str.w	sl, [sp]
 8006178:	464b      	mov	r3, r9
 800617a:	aa03      	add	r2, sp, #12
 800617c:	4621      	mov	r1, r4
 800617e:	4640      	mov	r0, r8
 8006180:	f7ff fee6 	bl	8005f50 <_printf_common>
 8006184:	3001      	adds	r0, #1
 8006186:	d14a      	bne.n	800621e <_printf_i+0x1f2>
 8006188:	f04f 30ff 	mov.w	r0, #4294967295
 800618c:	b004      	add	sp, #16
 800618e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	f043 0320 	orr.w	r3, r3, #32
 8006198:	6023      	str	r3, [r4, #0]
 800619a:	4833      	ldr	r0, [pc, #204]	@ (8006268 <_printf_i+0x23c>)
 800619c:	2778      	movs	r7, #120	@ 0x78
 800619e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	6831      	ldr	r1, [r6, #0]
 80061a6:	061f      	lsls	r7, r3, #24
 80061a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80061ac:	d402      	bmi.n	80061b4 <_printf_i+0x188>
 80061ae:	065f      	lsls	r7, r3, #25
 80061b0:	bf48      	it	mi
 80061b2:	b2ad      	uxthmi	r5, r5
 80061b4:	6031      	str	r1, [r6, #0]
 80061b6:	07d9      	lsls	r1, r3, #31
 80061b8:	bf44      	itt	mi
 80061ba:	f043 0320 	orrmi.w	r3, r3, #32
 80061be:	6023      	strmi	r3, [r4, #0]
 80061c0:	b11d      	cbz	r5, 80061ca <_printf_i+0x19e>
 80061c2:	2310      	movs	r3, #16
 80061c4:	e7ac      	b.n	8006120 <_printf_i+0xf4>
 80061c6:	4827      	ldr	r0, [pc, #156]	@ (8006264 <_printf_i+0x238>)
 80061c8:	e7e9      	b.n	800619e <_printf_i+0x172>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	f023 0320 	bic.w	r3, r3, #32
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	e7f6      	b.n	80061c2 <_printf_i+0x196>
 80061d4:	4616      	mov	r6, r2
 80061d6:	e7bd      	b.n	8006154 <_printf_i+0x128>
 80061d8:	6833      	ldr	r3, [r6, #0]
 80061da:	6825      	ldr	r5, [r4, #0]
 80061dc:	6961      	ldr	r1, [r4, #20]
 80061de:	1d18      	adds	r0, r3, #4
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	062e      	lsls	r6, r5, #24
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0x1c0>
 80061e8:	6019      	str	r1, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0x1c6>
 80061ec:	0668      	lsls	r0, r5, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0x1bc>
 80061f0:	8019      	strh	r1, [r3, #0]
 80061f2:	2300      	movs	r3, #0
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	4616      	mov	r6, r2
 80061f8:	e7bc      	b.n	8006174 <_printf_i+0x148>
 80061fa:	6833      	ldr	r3, [r6, #0]
 80061fc:	1d1a      	adds	r2, r3, #4
 80061fe:	6032      	str	r2, [r6, #0]
 8006200:	681e      	ldr	r6, [r3, #0]
 8006202:	6862      	ldr	r2, [r4, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	4630      	mov	r0, r6
 8006208:	f7f9 ffea 	bl	80001e0 <memchr>
 800620c:	b108      	cbz	r0, 8006212 <_printf_i+0x1e6>
 800620e:	1b80      	subs	r0, r0, r6
 8006210:	6060      	str	r0, [r4, #4]
 8006212:	6863      	ldr	r3, [r4, #4]
 8006214:	6123      	str	r3, [r4, #16]
 8006216:	2300      	movs	r3, #0
 8006218:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621c:	e7aa      	b.n	8006174 <_printf_i+0x148>
 800621e:	6923      	ldr	r3, [r4, #16]
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d0ad      	beq.n	8006188 <_printf_i+0x15c>
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	079b      	lsls	r3, r3, #30
 8006230:	d413      	bmi.n	800625a <_printf_i+0x22e>
 8006232:	68e0      	ldr	r0, [r4, #12]
 8006234:	9b03      	ldr	r3, [sp, #12]
 8006236:	4298      	cmp	r0, r3
 8006238:	bfb8      	it	lt
 800623a:	4618      	movlt	r0, r3
 800623c:	e7a6      	b.n	800618c <_printf_i+0x160>
 800623e:	2301      	movs	r3, #1
 8006240:	4632      	mov	r2, r6
 8006242:	4649      	mov	r1, r9
 8006244:	4640      	mov	r0, r8
 8006246:	47d0      	blx	sl
 8006248:	3001      	adds	r0, #1
 800624a:	d09d      	beq.n	8006188 <_printf_i+0x15c>
 800624c:	3501      	adds	r5, #1
 800624e:	68e3      	ldr	r3, [r4, #12]
 8006250:	9903      	ldr	r1, [sp, #12]
 8006252:	1a5b      	subs	r3, r3, r1
 8006254:	42ab      	cmp	r3, r5
 8006256:	dcf2      	bgt.n	800623e <_printf_i+0x212>
 8006258:	e7eb      	b.n	8006232 <_printf_i+0x206>
 800625a:	2500      	movs	r5, #0
 800625c:	f104 0619 	add.w	r6, r4, #25
 8006260:	e7f5      	b.n	800624e <_printf_i+0x222>
 8006262:	bf00      	nop
 8006264:	080064f1 	.word	0x080064f1
 8006268:	08006502 	.word	0x08006502

0800626c <memmove>:
 800626c:	4288      	cmp	r0, r1
 800626e:	b510      	push	{r4, lr}
 8006270:	eb01 0402 	add.w	r4, r1, r2
 8006274:	d902      	bls.n	800627c <memmove+0x10>
 8006276:	4284      	cmp	r4, r0
 8006278:	4623      	mov	r3, r4
 800627a:	d807      	bhi.n	800628c <memmove+0x20>
 800627c:	1e43      	subs	r3, r0, #1
 800627e:	42a1      	cmp	r1, r4
 8006280:	d008      	beq.n	8006294 <memmove+0x28>
 8006282:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006286:	f803 2f01 	strb.w	r2, [r3, #1]!
 800628a:	e7f8      	b.n	800627e <memmove+0x12>
 800628c:	4402      	add	r2, r0
 800628e:	4601      	mov	r1, r0
 8006290:	428a      	cmp	r2, r1
 8006292:	d100      	bne.n	8006296 <memmove+0x2a>
 8006294:	bd10      	pop	{r4, pc}
 8006296:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800629a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800629e:	e7f7      	b.n	8006290 <memmove+0x24>

080062a0 <_sbrk_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	4d06      	ldr	r5, [pc, #24]	@ (80062bc <_sbrk_r+0x1c>)
 80062a4:	2300      	movs	r3, #0
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fa fd06 	bl	8000cbc <_sbrk>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_sbrk_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_sbrk_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	20004cf0 	.word	0x20004cf0

080062c0 <_realloc_r>:
 80062c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062c4:	4680      	mov	r8, r0
 80062c6:	4615      	mov	r5, r2
 80062c8:	460c      	mov	r4, r1
 80062ca:	b921      	cbnz	r1, 80062d6 <_realloc_r+0x16>
 80062cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d0:	4611      	mov	r1, r2
 80062d2:	f7ff bc59 	b.w	8005b88 <_malloc_r>
 80062d6:	b92a      	cbnz	r2, 80062e4 <_realloc_r+0x24>
 80062d8:	f7ff fbea 	bl	8005ab0 <_free_r>
 80062dc:	2400      	movs	r4, #0
 80062de:	4620      	mov	r0, r4
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	f000 f81a 	bl	800631c <_malloc_usable_size_r>
 80062e8:	4285      	cmp	r5, r0
 80062ea:	4606      	mov	r6, r0
 80062ec:	d802      	bhi.n	80062f4 <_realloc_r+0x34>
 80062ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80062f2:	d8f4      	bhi.n	80062de <_realloc_r+0x1e>
 80062f4:	4629      	mov	r1, r5
 80062f6:	4640      	mov	r0, r8
 80062f8:	f7ff fc46 	bl	8005b88 <_malloc_r>
 80062fc:	4607      	mov	r7, r0
 80062fe:	2800      	cmp	r0, #0
 8006300:	d0ec      	beq.n	80062dc <_realloc_r+0x1c>
 8006302:	42b5      	cmp	r5, r6
 8006304:	462a      	mov	r2, r5
 8006306:	4621      	mov	r1, r4
 8006308:	bf28      	it	cs
 800630a:	4632      	movcs	r2, r6
 800630c:	f7ff fbc2 	bl	8005a94 <memcpy>
 8006310:	4621      	mov	r1, r4
 8006312:	4640      	mov	r0, r8
 8006314:	f7ff fbcc 	bl	8005ab0 <_free_r>
 8006318:	463c      	mov	r4, r7
 800631a:	e7e0      	b.n	80062de <_realloc_r+0x1e>

0800631c <_malloc_usable_size_r>:
 800631c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006320:	1f18      	subs	r0, r3, #4
 8006322:	2b00      	cmp	r3, #0
 8006324:	bfbc      	itt	lt
 8006326:	580b      	ldrlt	r3, [r1, r0]
 8006328:	18c0      	addlt	r0, r0, r3
 800632a:	4770      	bx	lr

0800632c <_init>:
 800632c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800632e:	bf00      	nop
 8006330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006332:	bc08      	pop	{r3}
 8006334:	469e      	mov	lr, r3
 8006336:	4770      	bx	lr

08006338 <_fini>:
 8006338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800633a:	bf00      	nop
 800633c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800633e:	bc08      	pop	{r3}
 8006340:	469e      	mov	lr, r3
 8006342:	4770      	bx	lr
