
LAB_10_BINARY_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000882c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080089c0  080089c0  000099c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e10  08008e10  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e10  08008e10  00009e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e18  08008e18  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e18  08008e18  00009e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e1c  08008e1c  00009e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008e20  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          00004bb0  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d88  20004d88  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001477e  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f71  00000000  00000000  0001e986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000218f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e19  00000000  00000000  00022b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004299  00000000  00000000  00023971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d4b  00000000  00000000  00027c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5164  00000000  00000000  0003b955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110ab9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005c64  00000000  00000000  00110afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00116760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080089a4 	.word	0x080089a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	080089a4 	.word	0x080089a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fb24 	bl	80014e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f83e 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f8a6 	bl	8000ff4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ea8:	f001 fda8 	bl	80029fc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 0, &myBinarySem_attributes);
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <main+0x5c>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f001 fe9a 	bl	8002bea <osSemaphoreNew>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <main+0x60>)
 8000eba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <main+0x64>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <main+0x68>)
 8000ec2:	f001 fde5 	bl	8002a90 <osThreadNew>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <main+0x6c>)
 8000eca:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <main+0x70>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <main+0x74>)
 8000ed2:	f001 fddd 	bl	8002a90 <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <main+0x78>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <main+0x7c>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <main+0x80>)
 8000ee2:	f001 fdd5 	bl	8002a90 <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <main+0x84>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eec:	f001 fdaa 	bl	8002a44 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <main+0x58>
 8000ef4:	08008a74 	.word	0x08008a74
 8000ef8:	20000200 	.word	0x20000200
 8000efc:	08008a08 	.word	0x08008a08
 8000f00:	080010b5 	.word	0x080010b5
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	08008a2c 	.word	0x08008a2c
 8000f0c:	080010c5 	.word	0x080010c5
 8000f10:	200001f8 	.word	0x200001f8
 8000f14:	08008a50 	.word	0x08008a50
 8000f18:	080010f9 	.word	0x080010f9
 8000f1c:	200001fc 	.word	0x200001fc

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	@ 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	@ 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fdbf 	bl	8006ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fd92 	bl	8001ad0 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fb2:	f000 f8cb 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f000 fff3 	bl	8001fc0 <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fe0:	f000 f8b4 	bl	800114c <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a25      	ldr	r2, [pc, #148]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a1e      	ldr	r2, [pc, #120]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a17      	ldr	r2, [pc, #92]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <MX_GPIO_Init+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001064:	4811      	ldr	r0, [pc, #68]	@ (80010ac <MX_GPIO_Init+0xb8>)
 8001066:	f000 fcff 	bl	8001a68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 800106a:	2301      	movs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	4619      	mov	r1, r3
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <MX_GPIO_Init+0xbc>)
 800107e:	f000 fb57 	bl	8001730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001082:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001088:	2301      	movs	r3, #1
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	4619      	mov	r1, r3
 800109a:	4804      	ldr	r0, [pc, #16]	@ (80010ac <MX_GPIO_Init+0xb8>)
 800109c:	f000 fb48 	bl	8001730 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40020000 	.word	0x40020000

080010b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80010bc:	200a      	movs	r0, #10
 80010be:	f001 fd79 	bl	8002bb4 <osDelay>
 80010c2:	e7fb      	b.n	80010bc <StartDefaultTask+0x8>

080010c4 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myBinarySemHandle, osWaitForever); // Wait for the semaphore
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <StartLED1_Task+0x2c>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f04f 31ff 	mov.w	r1, #4294967295
 80010d4:	4618      	mov	r0, r3
 80010d6:	f001 fe11 	bl	8002cfc <osSemaphoreAcquire>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12); // Toggle green LED
 80010da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <StartLED1_Task+0x30>)
 80010e0:	f000 fcdb 	bl	8001a9a <HAL_GPIO_TogglePin>
	osDelay(1000); // Delay for 1s
 80010e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010e8:	f001 fd64 	bl	8002bb4 <osDelay>
	osSemaphoreAcquire(myBinarySemHandle, osWaitForever); // Wait for the semaphore
 80010ec:	bf00      	nop
 80010ee:	e7ed      	b.n	80010cc <StartLED1_Task+0x8>
 80010f0:	20000200 	.word	0x20000200
 80010f4:	40020c00 	.word	0x40020c00

080010f8 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Toggle orange LED
 8001100:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001104:	4806      	ldr	r0, [pc, #24]	@ (8001120 <StartLED2_Task+0x28>)
 8001106:	f000 fcc8 	bl	8001a9a <HAL_GPIO_TogglePin>
	osDelay(1000); // Delay for 1s
 800110a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110e:	f001 fd51 	bl	8002bb4 <osDelay>
	osSemaphoreRelease(myBinarySemHandle); // Release the semaphore
 8001112:	4b04      	ldr	r3, [pc, #16]	@ (8001124 <StartLED2_Task+0x2c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fe42 	bl	8002da0 <osSemaphoreRelease>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13); // Toggle orange LED
 800111c:	bf00      	nop
 800111e:	e7ef      	b.n	8001100 <StartLED2_Task+0x8>
 8001120:	40020c00 	.word	0x40020c00
 8001124:	20000200 	.word	0x20000200

08001128 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d101      	bne.n	800113e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800113a:	f000 f9f7 	bl	800152c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40010000 	.word	0x40010000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	bf00      	nop
 8001156:	e7fd      	b.n	8001154 <Error_Handler+0x8>

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_MspInit+0x54>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001166:	4a11      	ldr	r2, [pc, #68]	@ (80011ac <HAL_MspInit+0x54>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116c:	6453      	str	r3, [r2, #68]	@ 0x44
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_MspInit+0x54>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b0b      	ldr	r3, [pc, #44]	@ (80011ac <HAL_MspInit+0x54>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <HAL_MspInit+0x54>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	@ 0x40
 800118a:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <HAL_MspInit+0x54>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	210f      	movs	r1, #15
 800119a:	f06f 0001 	mvn.w	r0, #1
 800119e:	f000 fa9d 	bl	80016dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08c      	sub	sp, #48	@ 0x30
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011c0:	2300      	movs	r3, #0
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_InitTick+0xd4>)
 80011c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001284 <HAL_InitTick+0xd4>)
 80011ca:	f043 0301 	orr.w	r3, r3, #1
 80011ce:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001284 <HAL_InitTick+0xd4>)
 80011d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011dc:	f107 020c 	add.w	r2, r7, #12
 80011e0:	f107 0310 	add.w	r3, r7, #16
 80011e4:	4611      	mov	r1, r2
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 f8f6 	bl	80023d8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80011ec:	f001 f8e0 	bl	80023b0 <HAL_RCC_GetPCLK2Freq>
 80011f0:	4603      	mov	r3, r0
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_InitTick+0xd8>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9b      	lsrs	r3, r3, #18
 8001200:	3b01      	subs	r3, #1
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_InitTick+0xdc>)
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <HAL_InitTick+0xe0>)
 8001208:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_InitTick+0xdc>)
 800120c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001210:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001212:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <HAL_InitTick+0xdc>)
 8001214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001216:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_InitTick+0xdc>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_InitTick+0xdc>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_InitTick+0xdc>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800122a:	4818      	ldr	r0, [pc, #96]	@ (800128c <HAL_InitTick+0xdc>)
 800122c:	f001 f906 	bl	800243c <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11b      	bne.n	8001276 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <HAL_InitTick+0xdc>)
 8001240:	f001 f956 	bl	80024f0 <HAL_TIM_Base_Start_IT>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001252:	2019      	movs	r0, #25
 8001254:	f000 fa5e 	bl	8001714 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d808      	bhi.n	8001270 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800125e:	2200      	movs	r2, #0
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	2019      	movs	r0, #25
 8001264:	f000 fa3a 	bl	80016dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_InitTick+0xe4>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e002      	b.n	8001276 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001276:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800127a:	4618      	mov	r0, r3
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	431bde83 	.word	0x431bde83
 800128c:	20000204 	.word	0x20000204
 8001290:	40010000 	.word	0x40010000
 8001294:	20000004 	.word	0x20000004

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012d6:	f001 f97b 	bl	80025d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000204 	.word	0x20000204

080012e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return 1;
 80012e8:	2301      	movs	r3, #1
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <_kill>:

int _kill(int pid, int sig)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012fe:	f005 fc81 	bl	8006c04 <__errno>
 8001302:	4603      	mov	r3, r0
 8001304:	2216      	movs	r2, #22
 8001306:	601a      	str	r2, [r3, #0]
  return -1;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <_exit>:

void _exit (int status)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f7ff ffe7 	bl	80012f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001326:	bf00      	nop
 8001328:	e7fd      	b.n	8001326 <_exit+0x12>

0800132a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e00a      	b.n	8001352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800133c:	f3af 8000 	nop.w
 8001340:	4601      	mov	r1, r0
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	1c5a      	adds	r2, r3, #1
 8001346:	60ba      	str	r2, [r7, #8]
 8001348:	b2ca      	uxtb	r2, r1
 800134a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	3301      	adds	r3, #1
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	697a      	ldr	r2, [r7, #20]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	429a      	cmp	r2, r3
 8001358:	dbf0      	blt.n	800133c <_read+0x12>
  }

  return len;
 800135a:	687b      	ldr	r3, [r7, #4]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	e009      	b.n	800138a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	1c5a      	adds	r2, r3, #1
 800137a:	60ba      	str	r2, [r7, #8]
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf1      	blt.n	8001376 <_write+0x12>
  }
  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_close>:

int _close(int file)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013c4:	605a      	str	r2, [r3, #4]
  return 0;
 80013c6:	2300      	movs	r3, #0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <_isatty>:

int _isatty(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013dc:	2301      	movs	r3, #1
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b085      	sub	sp, #20
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	60f8      	str	r0, [r7, #12]
 80013f2:	60b9      	str	r1, [r7, #8]
 80013f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800140c:	4a14      	ldr	r2, [pc, #80]	@ (8001460 <_sbrk+0x5c>)
 800140e:	4b15      	ldr	r3, [pc, #84]	@ (8001464 <_sbrk+0x60>)
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001418:	4b13      	ldr	r3, [pc, #76]	@ (8001468 <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <_sbrk+0x64>)
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <_sbrk+0x68>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001426:	4b10      	ldr	r3, [pc, #64]	@ (8001468 <_sbrk+0x64>)
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4413      	add	r3, r2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	429a      	cmp	r2, r3
 8001432:	d207      	bcs.n	8001444 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001434:	f005 fbe6 	bl	8006c04 <__errno>
 8001438:	4603      	mov	r3, r0
 800143a:	220c      	movs	r2, #12
 800143c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	e009      	b.n	8001458 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <_sbrk+0x64>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800144a:	4b07      	ldr	r3, [pc, #28]	@ (8001468 <_sbrk+0x64>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4413      	add	r3, r2
 8001452:	4a05      	ldr	r2, [pc, #20]	@ (8001468 <_sbrk+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001456:	68fb      	ldr	r3, [r7, #12]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20020000 	.word	0x20020000
 8001464:	00000400 	.word	0x00000400
 8001468:	2000024c 	.word	0x2000024c
 800146c:	20004d88 	.word	0x20004d88

08001470 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001474:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <SystemInit+0x20>)
 8001476:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800147a:	4a05      	ldr	r2, [pc, #20]	@ (8001490 <SystemInit+0x20>)
 800147c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001480:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001484:	bf00      	nop
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	e000ed00 	.word	0xe000ed00

08001494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001494:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001498:	f7ff ffea 	bl	8001470 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800149c:	480c      	ldr	r0, [pc, #48]	@ (80014d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800149e:	490d      	ldr	r1, [pc, #52]	@ (80014d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014a0:	4a0d      	ldr	r2, [pc, #52]	@ (80014d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a4:	e002      	b.n	80014ac <LoopCopyDataInit>

080014a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014aa:	3304      	adds	r3, #4

080014ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b0:	d3f9      	bcc.n	80014a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b2:	4a0a      	ldr	r2, [pc, #40]	@ (80014dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014b4:	4c0a      	ldr	r4, [pc, #40]	@ (80014e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014b8:	e001      	b.n	80014be <LoopFillZerobss>

080014ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014bc:	3204      	adds	r2, #4

080014be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c0:	d3fb      	bcc.n	80014ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014c2:	f005 fba5 	bl	8006c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014c6:	f7ff fce7 	bl	8000e98 <main>
  bx  lr    
 80014ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014d4:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80014d8:	08008e20 	.word	0x08008e20
  ldr r2, =_sbss
 80014dc:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80014e0:	20004d88 	.word	0x20004d88

080014e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014e4:	e7fe      	b.n	80014e4 <ADC_IRQHandler>
	...

080014e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001528 <HAL_Init+0x40>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001528 <HAL_Init+0x40>)
 80014f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001528 <HAL_Init+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <HAL_Init+0x40>)
 80014fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x40>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x40>)
 800150a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f000 f8d8 	bl	80016c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f7ff fe4a 	bl	80011b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fe1c 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40023c00 	.word	0x40023c00

0800152c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001530:	4b06      	ldr	r3, [pc, #24]	@ (800154c <HAL_IncTick+0x20>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	461a      	mov	r2, r3
 8001536:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <HAL_IncTick+0x24>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4413      	add	r3, r2
 800153c:	4a04      	ldr	r2, [pc, #16]	@ (8001550 <HAL_IncTick+0x24>)
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	20000008 	.word	0x20000008
 8001550:	20000250 	.word	0x20000250

08001554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return uwTick;
 8001558:	4b03      	ldr	r3, [pc, #12]	@ (8001568 <HAL_GetTick+0x14>)
 800155a:	681b      	ldr	r3, [r3, #0]
}
 800155c:	4618      	mov	r0, r3
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000250 	.word	0x20000250

0800156c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001588:	4013      	ands	r3, r2
 800158a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001594:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800159e:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <__NVIC_SetPriorityGrouping+0x44>)
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	60d3      	str	r3, [r2, #12]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b8:	4b04      	ldr	r3, [pc, #16]	@ (80015cc <__NVIC_GetPriorityGrouping+0x18>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	0a1b      	lsrs	r3, r3, #8
 80015be:	f003 0307 	and.w	r3, r3, #7
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b083      	sub	sp, #12
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	db0b      	blt.n	80015fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	f003 021f 	and.w	r2, r3, #31
 80015e8:	4907      	ldr	r1, [pc, #28]	@ (8001608 <__NVIC_EnableIRQ+0x38>)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	2001      	movs	r0, #1
 80015f2:	fa00 f202 	lsl.w	r2, r0, r2
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
         );
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b082      	sub	sp, #8
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff ff4c 	bl	800156c <__NVIC_SetPriorityGrouping>
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	60b9      	str	r1, [r7, #8]
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ee:	f7ff ff61 	bl	80015b4 <__NVIC_GetPriorityGrouping>
 80016f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	68b9      	ldr	r1, [r7, #8]
 80016f8:	6978      	ldr	r0, [r7, #20]
 80016fa:	f7ff ffb1 	bl	8001660 <NVIC_EncodePriority>
 80016fe:	4602      	mov	r2, r0
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	4611      	mov	r1, r2
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff ff80 	bl	800160c <__NVIC_SetPriority>
}
 800170c:	bf00      	nop
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff54 	bl	80015d0 <__NVIC_EnableIRQ>
}
 8001728:	bf00      	nop
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001730:	b480      	push	{r7}
 8001732:	b089      	sub	sp, #36	@ 0x24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
 800174a:	e16b      	b.n	8001a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800174c:	2201      	movs	r2, #1
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	429a      	cmp	r2, r3
 8001766:	f040 815a 	bne.w	8001a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
 8001772:	2b01      	cmp	r3, #1
 8001774:	d005      	beq.n	8001782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177e:	2b02      	cmp	r3, #2
 8001780:	d130      	bne.n	80017e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	2203      	movs	r2, #3
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	43db      	mvns	r3, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4013      	ands	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	68da      	ldr	r2, [r3, #12]
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b8:	2201      	movs	r2, #1
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	091b      	lsrs	r3, r3, #4
 80017ce:	f003 0201 	and.w	r2, r3, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b03      	cmp	r3, #3
 80017ee:	d017      	beq.n	8001820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d123      	bne.n	8001874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	08da      	lsrs	r2, r3, #3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3208      	adds	r2, #8
 8001834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	220f      	movs	r2, #15
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	691a      	ldr	r2, [r3, #16]
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	08da      	lsrs	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	3208      	adds	r2, #8
 800186e:	69b9      	ldr	r1, [r7, #24]
 8001870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	2203      	movs	r2, #3
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f003 0203 	and.w	r2, r3, #3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 80b4 	beq.w	8001a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b60      	ldr	r3, [pc, #384]	@ (8001a3c <HAL_GPIO_Init+0x30c>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018be:	4a5f      	ldr	r2, [pc, #380]	@ (8001a3c <HAL_GPIO_Init+0x30c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a3c <HAL_GPIO_Init+0x30c>)
 80018c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001a40 <HAL_GPIO_Init+0x310>)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	3302      	adds	r3, #2
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	220f      	movs	r2, #15
 80018ea:	fa02 f303 	lsl.w	r3, r2, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	4013      	ands	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_GPIO_Init+0x314>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d02b      	beq.n	8001956 <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a51      	ldr	r2, [pc, #324]	@ (8001a48 <HAL_GPIO_Init+0x318>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d025      	beq.n	8001952 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a50      	ldr	r2, [pc, #320]	@ (8001a4c <HAL_GPIO_Init+0x31c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d01f      	beq.n	800194e <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <HAL_GPIO_Init+0x320>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d019      	beq.n	800194a <HAL_GPIO_Init+0x21a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a4e      	ldr	r2, [pc, #312]	@ (8001a54 <HAL_GPIO_Init+0x324>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_GPIO_Init+0x216>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a4d      	ldr	r2, [pc, #308]	@ (8001a58 <HAL_GPIO_Init+0x328>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d00d      	beq.n	8001942 <HAL_GPIO_Init+0x212>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a4c      	ldr	r2, [pc, #304]	@ (8001a5c <HAL_GPIO_Init+0x32c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d007      	beq.n	800193e <HAL_GPIO_Init+0x20e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a4b      	ldr	r2, [pc, #300]	@ (8001a60 <HAL_GPIO_Init+0x330>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d101      	bne.n	800193a <HAL_GPIO_Init+0x20a>
 8001936:	2307      	movs	r3, #7
 8001938:	e00e      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800193a:	2308      	movs	r3, #8
 800193c:	e00c      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800193e:	2306      	movs	r3, #6
 8001940:	e00a      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001942:	2305      	movs	r3, #5
 8001944:	e008      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001946:	2304      	movs	r3, #4
 8001948:	e006      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800194a:	2303      	movs	r3, #3
 800194c:	e004      	b.n	8001958 <HAL_GPIO_Init+0x228>
 800194e:	2302      	movs	r3, #2
 8001950:	e002      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <HAL_GPIO_Init+0x228>
 8001956:	2300      	movs	r3, #0
 8001958:	69fa      	ldr	r2, [r7, #28]
 800195a:	f002 0203 	and.w	r2, r2, #3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4093      	lsls	r3, r2
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001968:	4935      	ldr	r1, [pc, #212]	@ (8001a40 <HAL_GPIO_Init+0x310>)
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	089b      	lsrs	r3, r3, #2
 800196e:	3302      	adds	r3, #2
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001976:	4b3b      	ldr	r3, [pc, #236]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800199a:	4a32      	ldr	r2, [pc, #200]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019a0:	4b30      	ldr	r3, [pc, #192]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019c4:	4a27      	ldr	r2, [pc, #156]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ca:	4b26      	ldr	r3, [pc, #152]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	43db      	mvns	r3, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4013      	ands	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <HAL_GPIO_Init+0x334>)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3301      	adds	r3, #1
 8001a22:	61fb      	str	r3, [r7, #28]
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	2b0f      	cmp	r3, #15
 8001a28:	f67f ae90 	bls.w	800174c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3724      	adds	r7, #36	@ 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	40013800 	.word	0x40013800
 8001a44:	40020000 	.word	0x40020000
 8001a48:	40020400 	.word	0x40020400
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40021400 	.word	0x40021400
 8001a5c:	40021800 	.word	0x40021800
 8001a60:	40021c00 	.word	0x40021c00
 8001a64:	40013c00 	.word	0x40013c00

08001a68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	460b      	mov	r3, r1
 8001a72:	807b      	strh	r3, [r7, #2]
 8001a74:	4613      	mov	r3, r2
 8001a76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a78:	787b      	ldrb	r3, [r7, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a7e:	887a      	ldrh	r2, [r7, #2]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a84:	e003      	b.n	8001a8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a86:	887b      	ldrh	r3, [r7, #2]
 8001a88:	041a      	lsls	r2, r3, #16
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b085      	sub	sp, #20
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	400b      	ands	r3, r1
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	619a      	str	r2, [r3, #24]
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001acc:	4770      	bx	lr
	...

08001ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e267      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d075      	beq.n	8001bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001aee:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	d00c      	beq.n	8001b14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b85      	ldr	r3, [pc, #532]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	d112      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b06:	4b82      	ldr	r3, [pc, #520]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b12:	d10b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b14:	4b7e      	ldr	r3, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d05b      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x108>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d157      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e242      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x74>
 8001b36:	4b76      	ldr	r3, [pc, #472]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a75      	ldr	r2, [pc, #468]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e01d      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b4c:	d10c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x98>
 8001b4e:	4b70      	ldr	r3, [pc, #448]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6f      	ldr	r2, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b64:	6013      	str	r3, [r2, #0]
 8001b66:	e00b      	b.n	8001b80 <HAL_RCC_OscConfig+0xb0>
 8001b68:	4b69      	ldr	r3, [pc, #420]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a68      	ldr	r2, [pc, #416]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d013      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7ff fce4 	bl	8001554 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b90:	f7ff fce0 	bl	8001554 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e207      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0xc0>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb0:	f7ff fcd0 	bl	8001554 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bb6:	e008      	b.n	8001bca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb8:	f7ff fccc 	bl	8001554 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	@ 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e1f3      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	4b51      	ldr	r3, [pc, #324]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1f0      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xe8>
 8001bd6:	e000      	b.n	8001bda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d063      	beq.n	8001cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001be6:	4b4a      	ldr	r3, [pc, #296]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b47      	ldr	r3, [pc, #284]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d11c      	bne.n	8001c38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bfe:	4b44      	ldr	r3, [pc, #272]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d116      	bne.n	8001c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c0a:	4b41      	ldr	r3, [pc, #260]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d005      	beq.n	8001c22 <HAL_RCC_OscConfig+0x152>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e1c7      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c22:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4937      	ldr	r1, [pc, #220]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	e03a      	b.n	8001cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c40:	4b34      	ldr	r3, [pc, #208]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c42:	2201      	movs	r2, #1
 8001c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c46:	f7ff fc85 	bl	8001554 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fc81 	bl	8001554 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e1a8      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	4b2b      	ldr	r3, [pc, #172]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0f0      	beq.n	8001c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6c:	4b28      	ldr	r3, [pc, #160]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4925      	ldr	r1, [pc, #148]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]
 8001c80:	e015      	b.n	8001cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c82:	4b24      	ldr	r3, [pc, #144]	@ (8001d14 <HAL_RCC_OscConfig+0x244>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c88:	f7ff fc64 	bl	8001554 <HAL_GetTick>
 8001c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c8e:	e008      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff fc60 	bl	8001554 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	693b      	ldr	r3, [r7, #16]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e187      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d1f0      	bne.n	8001c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0308 	and.w	r3, r3, #8
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d036      	beq.n	8001d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	4b15      	ldr	r3, [pc, #84]	@ (8001d18 <HAL_RCC_OscConfig+0x248>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fc44 	bl	8001554 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fc40 	bl	8001554 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e167      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_RCC_OscConfig+0x240>)
 8001ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0f0      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x200>
 8001cee:	e01b      	b.n	8001d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_OscConfig+0x248>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7ff fc2d 	bl	8001554 <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfc:	e00e      	b.n	8001d1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfe:	f7ff fc29 	bl	8001554 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d907      	bls.n	8001d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e150      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	42470000 	.word	0x42470000
 8001d18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	4b88      	ldr	r3, [pc, #544]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1ea      	bne.n	8001cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 8097 	beq.w	8001e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3a:	4b81      	ldr	r3, [pc, #516]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10f      	bne.n	8001d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d56:	4b7a      	ldr	r3, [pc, #488]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5e:	60bb      	str	r3, [r7, #8]
 8001d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d62:	2301      	movs	r3, #1
 8001d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d66:	4b77      	ldr	r3, [pc, #476]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d118      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d72:	4b74      	ldr	r3, [pc, #464]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a73      	ldr	r2, [pc, #460]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fbe9 	bl	8001554 <HAL_GetTick>
 8001d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d86:	f7ff fbe5 	bl	8001554 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e10c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	4b6a      	ldr	r3, [pc, #424]	@ (8001f44 <HAL_RCC_OscConfig+0x474>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0f0      	beq.n	8001d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x2ea>
 8001dac:	4b64      	ldr	r3, [pc, #400]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db0:	4a63      	ldr	r2, [pc, #396]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db8:	e01c      	b.n	8001df4 <HAL_RCC_OscConfig+0x324>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0x30c>
 8001dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	4b5c      	ldr	r3, [pc, #368]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0x324>
 8001ddc:	4b58      	ldr	r3, [pc, #352]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a57      	ldr	r2, [pc, #348]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f023 0301 	bic.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de8:	4b55      	ldr	r3, [pc, #340]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dec:	4a54      	ldr	r2, [pc, #336]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001dee:	f023 0304 	bic.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d015      	beq.n	8001e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fbaa 	bl	8001554 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	e00a      	b.n	8001e1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e04:	f7ff fba6 	bl	8001554 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e0cb      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e1a:	4b49      	ldr	r3, [pc, #292]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0ee      	beq.n	8001e04 <HAL_RCC_OscConfig+0x334>
 8001e26:	e014      	b.n	8001e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7ff fb94 	bl	8001554 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e2e:	e00a      	b.n	8001e46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e30:	f7ff fb90 	bl	8001554 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e0b5      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e46:	4b3e      	ldr	r3, [pc, #248]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ee      	bne.n	8001e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b39      	ldr	r3, [pc, #228]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5c:	4a38      	ldr	r2, [pc, #224]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80a1 	beq.w	8001fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e6e:	4b34      	ldr	r3, [pc, #208]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d05c      	beq.n	8001f34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d141      	bne.n	8001f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e88:	f7ff fb64 	bl	8001554 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e90:	f7ff fb60 	bl	8001554 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e087      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ea2:	4b27      	ldr	r3, [pc, #156]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ebc:	019b      	lsls	r3, r3, #6
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	041b      	lsls	r3, r3, #16
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed0:	061b      	lsls	r3, r3, #24
 8001ed2:	491b      	ldr	r1, [pc, #108]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7ff fb39 	bl	8001554 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff fb35 	bl	8001554 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e05c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x416>
 8001f04:	e054      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0x478>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fb22 	bl	8001554 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff fb1e 	bl	8001554 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e045      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x470>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x444>
 8001f32:	e03d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e038      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fbc <HAL_RCC_OscConfig+0x4ec>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d028      	beq.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d121      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d11a      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d111      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0cc      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b68      	ldr	r3, [pc, #416]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d90c      	bls.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b65      	ldr	r3, [pc, #404]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fea:	4b63      	ldr	r3, [pc, #396]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d001      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e0b8      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d020      	beq.n	800204a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002014:	4b59      	ldr	r3, [pc, #356]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4a58      	ldr	r2, [pc, #352]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800201e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d005      	beq.n	8002038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800202c:	4b53      	ldr	r3, [pc, #332]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4a52      	ldr	r2, [pc, #328]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002038:	4b50      	ldr	r3, [pc, #320]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	494d      	ldr	r1, [pc, #308]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d044      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d119      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e07f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b02      	cmp	r3, #2
 8002074:	d003      	beq.n	800207e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207a:	2b03      	cmp	r3, #3
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b3f      	ldr	r3, [pc, #252]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e06f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e067      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b37      	ldr	r3, [pc, #220]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4934      	ldr	r1, [pc, #208]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020b0:	f7ff fa50 	bl	8001554 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff fa4c 	bl	8001554 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e04f      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b25      	ldr	r3, [pc, #148]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d20c      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b22      	ldr	r3, [pc, #136]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f6:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_RCC_ClockConfig+0x1b8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	429a      	cmp	r2, r3
 8002102:	d001      	beq.n	8002108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e032      	b.n	800216e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d008      	beq.n	8002126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002114:	4b19      	ldr	r3, [pc, #100]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4916      	ldr	r1, [pc, #88]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d009      	beq.n	8002146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002132:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	490e      	ldr	r1, [pc, #56]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002146:	f000 f821 	bl	800218c <HAL_RCC_GetSysClockFreq>
 800214a:	4602      	mov	r2, r0
 800214c:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_ClockConfig+0x1bc>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 030f 	and.w	r3, r3, #15
 8002156:	490a      	ldr	r1, [pc, #40]	@ (8002180 <HAL_RCC_ClockConfig+0x1c0>)
 8002158:	5ccb      	ldrb	r3, [r1, r3]
 800215a:	fa22 f303 	lsr.w	r3, r2, r3
 800215e:	4a09      	ldr	r2, [pc, #36]	@ (8002184 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <HAL_RCC_ClockConfig+0x1c8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff f822 	bl	80011b0 <HAL_InitTick>

  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	40023c00 	.word	0x40023c00
 800217c:	40023800 	.word	0x40023800
 8002180:	08008a84 	.word	0x08008a84
 8002184:	20000000 	.word	0x20000000
 8002188:	20000004 	.word	0x20000004

0800218c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800218c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002190:	b094      	sub	sp, #80	@ 0x50
 8002192:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800219c:	2300      	movs	r3, #0
 800219e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a4:	4b79      	ldr	r3, [pc, #484]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d00d      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x40>
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	f200 80e1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x1ec>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d002      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x34>
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d003      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80021be:	e0db      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b73      	ldr	r3, [pc, #460]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x204>)
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021c4:	e0db      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c6:	4b73      	ldr	r3, [pc, #460]	@ (8002394 <HAL_RCC_GetSysClockFreq+0x208>)
 80021c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ca:	e0d8      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b6f      	ldr	r3, [pc, #444]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021d6:	4b6d      	ldr	r3, [pc, #436]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b6a      	ldr	r3, [pc, #424]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	2200      	movs	r2, #0
 80021ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80021ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80021fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80021fe:	4622      	mov	r2, r4
 8002200:	462b      	mov	r3, r5
 8002202:	f04f 0000 	mov.w	r0, #0
 8002206:	f04f 0100 	mov.w	r1, #0
 800220a:	0159      	lsls	r1, r3, #5
 800220c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002210:	0150      	lsls	r0, r2, #5
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4621      	mov	r1, r4
 8002218:	1a51      	subs	r1, r2, r1
 800221a:	6139      	str	r1, [r7, #16]
 800221c:	4629      	mov	r1, r5
 800221e:	eb63 0301 	sbc.w	r3, r3, r1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002230:	4659      	mov	r1, fp
 8002232:	018b      	lsls	r3, r1, #6
 8002234:	4651      	mov	r1, sl
 8002236:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800223a:	4651      	mov	r1, sl
 800223c:	018a      	lsls	r2, r1, #6
 800223e:	4651      	mov	r1, sl
 8002240:	ebb2 0801 	subs.w	r8, r2, r1
 8002244:	4659      	mov	r1, fp
 8002246:	eb63 0901 	sbc.w	r9, r3, r1
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	f04f 0300 	mov.w	r3, #0
 8002252:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002256:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800225a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800225e:	4690      	mov	r8, r2
 8002260:	4699      	mov	r9, r3
 8002262:	4623      	mov	r3, r4
 8002264:	eb18 0303 	adds.w	r3, r8, r3
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	462b      	mov	r3, r5
 800226c:	eb49 0303 	adc.w	r3, r9, r3
 8002270:	60fb      	str	r3, [r7, #12]
 8002272:	f04f 0200 	mov.w	r2, #0
 8002276:	f04f 0300 	mov.w	r3, #0
 800227a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800227e:	4629      	mov	r1, r5
 8002280:	024b      	lsls	r3, r1, #9
 8002282:	4621      	mov	r1, r4
 8002284:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002288:	4621      	mov	r1, r4
 800228a:	024a      	lsls	r2, r1, #9
 800228c:	4610      	mov	r0, r2
 800228e:	4619      	mov	r1, r3
 8002290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002292:	2200      	movs	r2, #0
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002298:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800229c:	f7fe fc84 	bl	8000ba8 <__aeabi_uldivmod>
 80022a0:	4602      	mov	r2, r0
 80022a2:	460b      	mov	r3, r1
 80022a4:	4613      	mov	r3, r2
 80022a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80022a8:	e058      	b.n	800235c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022aa:	4b38      	ldr	r3, [pc, #224]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	099b      	lsrs	r3, r3, #6
 80022b0:	2200      	movs	r2, #0
 80022b2:	4618      	mov	r0, r3
 80022b4:	4611      	mov	r1, r2
 80022b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80022ba:	623b      	str	r3, [r7, #32]
 80022bc:	2300      	movs	r3, #0
 80022be:	627b      	str	r3, [r7, #36]	@ 0x24
 80022c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80022c4:	4642      	mov	r2, r8
 80022c6:	464b      	mov	r3, r9
 80022c8:	f04f 0000 	mov.w	r0, #0
 80022cc:	f04f 0100 	mov.w	r1, #0
 80022d0:	0159      	lsls	r1, r3, #5
 80022d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022d6:	0150      	lsls	r0, r2, #5
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4641      	mov	r1, r8
 80022de:	ebb2 0a01 	subs.w	sl, r2, r1
 80022e2:	4649      	mov	r1, r9
 80022e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80022f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80022f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80022fc:	ebb2 040a 	subs.w	r4, r2, sl
 8002300:	eb63 050b 	sbc.w	r5, r3, fp
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	00eb      	lsls	r3, r5, #3
 800230e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002312:	00e2      	lsls	r2, r4, #3
 8002314:	4614      	mov	r4, r2
 8002316:	461d      	mov	r5, r3
 8002318:	4643      	mov	r3, r8
 800231a:	18e3      	adds	r3, r4, r3
 800231c:	603b      	str	r3, [r7, #0]
 800231e:	464b      	mov	r3, r9
 8002320:	eb45 0303 	adc.w	r3, r5, r3
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002332:	4629      	mov	r1, r5
 8002334:	028b      	lsls	r3, r1, #10
 8002336:	4621      	mov	r1, r4
 8002338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800233c:	4621      	mov	r1, r4
 800233e:	028a      	lsls	r2, r1, #10
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002346:	2200      	movs	r2, #0
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	61fa      	str	r2, [r7, #28]
 800234c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002350:	f7fe fc2a 	bl	8000ba8 <__aeabi_uldivmod>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4613      	mov	r3, r2
 800235a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <HAL_RCC_GetSysClockFreq+0x200>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	0c1b      	lsrs	r3, r3, #16
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	3301      	adds	r3, #1
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800236c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800236e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b05      	ldr	r3, [pc, #20]	@ (8002390 <HAL_RCC_GetSysClockFreq+0x204>)
 800237a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002380:	4618      	mov	r0, r3
 8002382:	3750      	adds	r7, #80	@ 0x50
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800238a:	bf00      	nop
 800238c:	40023800 	.word	0x40023800
 8002390:	00f42400 	.word	0x00f42400
 8002394:	007a1200 	.word	0x007a1200

08002398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800239c:	4b03      	ldr	r3, [pc, #12]	@ (80023ac <HAL_RCC_GetHCLKFreq+0x14>)
 800239e:	681b      	ldr	r3, [r3, #0]
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	20000000 	.word	0x20000000

080023b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023b4:	f7ff fff0 	bl	8002398 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	0b5b      	lsrs	r3, r3, #13
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4903      	ldr	r1, [pc, #12]	@ (80023d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	40023800 	.word	0x40023800
 80023d4:	08008a94 	.word	0x08008a94

080023d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	220f      	movs	r2, #15
 80023e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023e8:	4b12      	ldr	r3, [pc, #72]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 0203 	and.w	r2, r3, #3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023f4:	4b0f      	ldr	r3, [pc, #60]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002400:	4b0c      	ldr	r3, [pc, #48]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800240c:	4b09      	ldr	r3, [pc, #36]	@ (8002434 <HAL_RCC_GetClockConfig+0x5c>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	08db      	lsrs	r3, r3, #3
 8002412:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800241a:	4b07      	ldr	r3, [pc, #28]	@ (8002438 <HAL_RCC_GetClockConfig+0x60>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0207 	and.w	r2, r3, #7
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	601a      	str	r2, [r3, #0]
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40023c00 	.word	0x40023c00

0800243c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f839 	bl	80024da <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 f9c0 	bl	8002800 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
	...

080024f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d001      	beq.n	8002508 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e04e      	b.n	80025a6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0201 	orr.w	r2, r2, #1
 800251e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a23      	ldr	r2, [pc, #140]	@ (80025b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d022      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002532:	d01d      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1f      	ldr	r2, [pc, #124]	@ (80025b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d018      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1e      	ldr	r2, [pc, #120]	@ (80025bc <HAL_TIM_Base_Start_IT+0xcc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1c      	ldr	r2, [pc, #112]	@ (80025c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d00e      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a19      	ldr	r2, [pc, #100]	@ (80025c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d004      	beq.n	8002570 <HAL_TIM_Base_Start_IT+0x80>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a18      	ldr	r2, [pc, #96]	@ (80025cc <HAL_TIM_Base_Start_IT+0xdc>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d111      	bne.n	8002594 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2b06      	cmp	r3, #6
 8002580:	d010      	beq.n	80025a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002592:	e007      	b.n	80025a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0201 	orr.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40000400 	.word	0x40000400
 80025bc:	40000800 	.word	0x40000800
 80025c0:	40000c00 	.word	0x40000c00
 80025c4:	40010400 	.word	0x40010400
 80025c8:	40014000 	.word	0x40014000
 80025cc:	40001800 	.word	0x40001800

080025d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d020      	beq.n	8002634 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d01b      	beq.n	8002634 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0202 	mvn.w	r2, #2
 8002604:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8d2 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8c4 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8d5 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d020      	beq.n	8002680 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d01b      	beq.n	8002680 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0204 	mvn.w	r2, #4
 8002650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2202      	movs	r2, #2
 8002656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f8ac 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 800266c:	e005      	b.n	800267a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f89e 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8af 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d020      	beq.n	80026cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d01b      	beq.n	80026cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f06f 0208 	mvn.w	r2, #8
 800269c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2204      	movs	r2, #4
 80026a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d003      	beq.n	80026ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f886 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 80026b8:	e005      	b.n	80026c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 f878 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f889 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d020      	beq.n	8002718 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0310 	and.w	r3, r3, #16
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d01b      	beq.n	8002718 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0210 	mvn.w	r2, #16
 80026e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2208      	movs	r2, #8
 80026ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f860 	bl	80027c4 <HAL_TIM_IC_CaptureCallback>
 8002704:	e005      	b.n	8002712 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f852 	bl	80027b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 f863 	bl	80027d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00c      	beq.n	800273c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f06f 0201 	mvn.w	r2, #1
 8002734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fcf6 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f900 	bl	8002960 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f834 	bl	80027ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0220 	mvn.w	r2, #32
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8d2 	bl	800294c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027a8:	bf00      	nop
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a43      	ldr	r2, [pc, #268]	@ (8002920 <TIM_Base_SetConfig+0x120>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d013      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800281e:	d00f      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a40      	ldr	r2, [pc, #256]	@ (8002924 <TIM_Base_SetConfig+0x124>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d00b      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a3f      	ldr	r2, [pc, #252]	@ (8002928 <TIM_Base_SetConfig+0x128>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d007      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a3e      	ldr	r2, [pc, #248]	@ (800292c <TIM_Base_SetConfig+0x12c>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d003      	beq.n	8002840 <TIM_Base_SetConfig+0x40>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a3d      	ldr	r2, [pc, #244]	@ (8002930 <TIM_Base_SetConfig+0x130>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d108      	bne.n	8002852 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002846:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <TIM_Base_SetConfig+0x120>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d02b      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002860:	d027      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a2f      	ldr	r2, [pc, #188]	@ (8002924 <TIM_Base_SetConfig+0x124>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d023      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a2e      	ldr	r2, [pc, #184]	@ (8002928 <TIM_Base_SetConfig+0x128>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a2d      	ldr	r2, [pc, #180]	@ (800292c <TIM_Base_SetConfig+0x12c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d01b      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a2c      	ldr	r2, [pc, #176]	@ (8002930 <TIM_Base_SetConfig+0x130>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d017      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a2b      	ldr	r2, [pc, #172]	@ (8002934 <TIM_Base_SetConfig+0x134>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d013      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a2a      	ldr	r2, [pc, #168]	@ (8002938 <TIM_Base_SetConfig+0x138>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d00f      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a29      	ldr	r2, [pc, #164]	@ (800293c <TIM_Base_SetConfig+0x13c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00b      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a28      	ldr	r2, [pc, #160]	@ (8002940 <TIM_Base_SetConfig+0x140>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a27      	ldr	r2, [pc, #156]	@ (8002944 <TIM_Base_SetConfig+0x144>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0xb2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a26      	ldr	r2, [pc, #152]	@ (8002948 <TIM_Base_SetConfig+0x148>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d108      	bne.n	80028c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002920 <TIM_Base_SetConfig+0x120>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d003      	beq.n	80028f2 <TIM_Base_SetConfig+0xf2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <TIM_Base_SetConfig+0x130>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d103      	bne.n	80028fa <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	691a      	ldr	r2, [r3, #16]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f043 0204 	orr.w	r2, r3, #4
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40010000 	.word	0x40010000
 8002924:	40000400 	.word	0x40000400
 8002928:	40000800 	.word	0x40000800
 800292c:	40000c00 	.word	0x40000c00
 8002930:	40010400 	.word	0x40010400
 8002934:	40014000 	.word	0x40014000
 8002938:	40014400 	.word	0x40014400
 800293c:	40014800 	.word	0x40014800
 8002940:	40001800 	.word	0x40001800
 8002944:	40001c00 	.word	0x40001c00
 8002948:	40002000 	.word	0x40002000

0800294c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <__NVIC_SetPriority>:
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	@ (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	@ (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029cc:	4b05      	ldr	r3, [pc, #20]	@ (80029e4 <SysTick_Handler+0x1c>)
 80029ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029d0:	f002 f996 	bl	8004d00 <xTaskGetSchedulerState>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d001      	beq.n	80029de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80029da:	f003 f88d 	bl	8005af8 <xPortSysTickHandler>
  }
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	e000e010 	.word	0xe000e010

080029e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80029ec:	2100      	movs	r1, #0
 80029ee:	f06f 0004 	mvn.w	r0, #4
 80029f2:	f7ff ffbf 	bl	8002974 <__NVIC_SetPriority>
#endif
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a02:	f3ef 8305 	mrs	r3, IPSR
 8002a06:	603b      	str	r3, [r7, #0]
  return(result);
 8002a08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a0e:	f06f 0305 	mvn.w	r3, #5
 8002a12:	607b      	str	r3, [r7, #4]
 8002a14:	e00c      	b.n	8002a30 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a16:	4b0a      	ldr	r3, [pc, #40]	@ (8002a40 <osKernelInitialize+0x44>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d105      	bne.n	8002a2a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a1e:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <osKernelInitialize+0x44>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	e002      	b.n	8002a30 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	20000254 	.word	0x20000254

08002a44 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a4a:	f3ef 8305 	mrs	r3, IPSR
 8002a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8002a50:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a56:	f06f 0305 	mvn.w	r3, #5
 8002a5a:	607b      	str	r3, [r7, #4]
 8002a5c:	e010      	b.n	8002a80 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <osKernelStart+0x48>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d109      	bne.n	8002a7a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a66:	f7ff ffbf 	bl	80029e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	@ (8002a8c <osKernelStart+0x48>)
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a70:	f001 fce2 	bl	8004438 <vTaskStartScheduler>
      stat = osOK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	e002      	b.n	8002a80 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a7e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a80:	687b      	ldr	r3, [r7, #4]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000254 	.word	0x20000254

08002a90 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08e      	sub	sp, #56	@ 0x38
 8002a94:	af04      	add	r7, sp, #16
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002aa0:	f3ef 8305 	mrs	r3, IPSR
 8002aa4:	617b      	str	r3, [r7, #20]
  return(result);
 8002aa6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d17e      	bne.n	8002baa <osThreadNew+0x11a>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d07b      	beq.n	8002baa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002ab6:	2318      	movs	r3, #24
 8002ab8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002abe:	f04f 33ff 	mov.w	r3, #4294967295
 8002ac2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d045      	beq.n	8002b56 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <osThreadNew+0x48>
        name = attr->name;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <osThreadNew+0x6e>
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	2b38      	cmp	r3, #56	@ 0x38
 8002af0:	d805      	bhi.n	8002afe <osThreadNew+0x6e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <osThreadNew+0x72>
        return (NULL);
 8002afe:	2300      	movs	r3, #0
 8002b00:	e054      	b.n	8002bac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	089b      	lsrs	r3, r3, #2
 8002b10:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00e      	beq.n	8002b38 <osThreadNew+0xa8>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002b20:	d90a      	bls.n	8002b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d002      	beq.n	8002b38 <osThreadNew+0xa8>
        mem = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	61bb      	str	r3, [r7, #24]
 8002b36:	e010      	b.n	8002b5a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10c      	bne.n	8002b5a <osThreadNew+0xca>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d108      	bne.n	8002b5a <osThreadNew+0xca>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691b      	ldr	r3, [r3, #16]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d104      	bne.n	8002b5a <osThreadNew+0xca>
          mem = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	e001      	b.n	8002b5a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b68:	9202      	str	r2, [sp, #8]
 8002b6a:	9301      	str	r3, [sp, #4]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6a3a      	ldr	r2, [r7, #32]
 8002b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b76:	68f8      	ldr	r0, [r7, #12]
 8002b78:	f001 fa6a 	bl	8004050 <xTaskCreateStatic>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	e013      	b.n	8002baa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d110      	bne.n	8002baa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f001 fab8 	bl	8004110 <xTaskCreate>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d001      	beq.n	8002baa <osThreadNew+0x11a>
            hTask = NULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002baa:	693b      	ldr	r3, [r7, #16]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3728      	adds	r7, #40	@ 0x28
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bbc:	f3ef 8305 	mrs	r3, IPSR
 8002bc0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bc2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <osDelay+0x1c>
    stat = osErrorISR;
 8002bc8:	f06f 0305 	mvn.w	r3, #5
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e007      	b.n	8002be0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d002      	beq.n	8002be0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f001 fbf6 	bl	80043cc <vTaskDelay>
    }
  }

  return (stat);
 8002be0:	68fb      	ldr	r3, [r7, #12]
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b08a      	sub	sp, #40	@ 0x28
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	60f8      	str	r0, [r7, #12]
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bfa:	f3ef 8305 	mrs	r3, IPSR
 8002bfe:	613b      	str	r3, [r7, #16]
  return(result);
 8002c00:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d175      	bne.n	8002cf2 <osSemaphoreNew+0x108>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d072      	beq.n	8002cf2 <osSemaphoreNew+0x108>
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d86e      	bhi.n	8002cf2 <osSemaphoreNew+0x108>
    mem = -1;
 8002c14:	f04f 33ff 	mov.w	r3, #4294967295
 8002c18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d015      	beq.n	8002c4c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d006      	beq.n	8002c36 <osSemaphoreNew+0x4c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c2e:	d902      	bls.n	8002c36 <osSemaphoreNew+0x4c>
        mem = 1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	61bb      	str	r3, [r7, #24]
 8002c34:	e00c      	b.n	8002c50 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d108      	bne.n	8002c50 <osSemaphoreNew+0x66>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d104      	bne.n	8002c50 <osSemaphoreNew+0x66>
          mem = 0;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	e001      	b.n	8002c50 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c56:	d04c      	beq.n	8002cf2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d128      	bne.n	8002cb0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10a      	bne.n	8002c7a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	9200      	str	r2, [sp, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2100      	movs	r1, #0
 8002c70:	2001      	movs	r0, #1
 8002c72:	f000 fa2b 	bl	80030cc <xQueueGenericCreateStatic>
 8002c76:	61f8      	str	r0, [r7, #28]
 8002c78:	e005      	b.n	8002c86 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f000 faa1 	bl	80031c6 <xQueueGenericCreate>
 8002c84:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d022      	beq.n	8002cd2 <osSemaphoreNew+0xe8>
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01f      	beq.n	8002cd2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002c92:	2300      	movs	r3, #0
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	69f8      	ldr	r0, [r7, #28]
 8002c9a:	f000 fb61 	bl	8003360 <xQueueGenericSend>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d016      	beq.n	8002cd2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002ca4:	69f8      	ldr	r0, [r7, #28]
 8002ca6:	f000 ffff 	bl	8003ca8 <vQueueDelete>
            hSemaphore = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e010      	b.n	8002cd2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d108      	bne.n	8002cc8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68b9      	ldr	r1, [r7, #8]
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fadf 	bl	8003282 <xQueueCreateCountingSemaphoreStatic>
 8002cc4:	61f8      	str	r0, [r7, #28]
 8002cc6:	e004      	b.n	8002cd2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 fb12 	bl	80032f4 <xQueueCreateCountingSemaphore>
 8002cd0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d00c      	beq.n	8002cf2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e001      	b.n	8002cea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	69f8      	ldr	r0, [r7, #28]
 8002cee:	f001 f927 	bl	8003f40 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002cf2:	69fb      	ldr	r3, [r7, #28]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d103      	bne.n	8002d1c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002d14:	f06f 0303 	mvn.w	r3, #3
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	e039      	b.n	8002d90 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1c:	f3ef 8305 	mrs	r3, IPSR
 8002d20:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d22:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d022      	beq.n	8002d6e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002d2e:	f06f 0303 	mvn.w	r3, #3
 8002d32:	617b      	str	r3, [r7, #20]
 8002d34:	e02c      	b.n	8002d90 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002d36:	2300      	movs	r3, #0
 8002d38:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002d3a:	f107 0308 	add.w	r3, r7, #8
 8002d3e:	461a      	mov	r2, r3
 8002d40:	2100      	movs	r1, #0
 8002d42:	6938      	ldr	r0, [r7, #16]
 8002d44:	f000 ff2e 	bl	8003ba4 <xQueueReceiveFromISR>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d003      	beq.n	8002d56 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002d4e:	f06f 0302 	mvn.w	r3, #2
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	e01c      	b.n	8002d90 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d019      	beq.n	8002d90 <osSemaphoreAcquire+0x94>
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d9c <osSemaphoreAcquire+0xa0>)
 8002d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	e010      	b.n	8002d90 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002d6e:	6839      	ldr	r1, [r7, #0]
 8002d70:	6938      	ldr	r0, [r7, #16]
 8002d72:	f000 fe07 	bl	8003984 <xQueueSemaphoreTake>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d009      	beq.n	8002d90 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002d82:	f06f 0301 	mvn.w	r3, #1
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	e002      	b.n	8002d90 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002d8a:	f06f 0302 	mvn.w	r3, #2
 8002d8e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002d90:	697b      	ldr	r3, [r7, #20]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3718      	adds	r7, #24
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	e000ed04 	.word	0xe000ed04

08002da0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d103      	bne.n	8002dbe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002db6:	f06f 0303 	mvn.w	r3, #3
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e02c      	b.n	8002e18 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dbe:	f3ef 8305 	mrs	r3, IPSR
 8002dc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d01a      	beq.n	8002e00 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002dce:	f107 0308 	add.w	r3, r7, #8
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	6938      	ldr	r0, [r7, #16]
 8002dd6:	f000 fc63 	bl	80036a0 <xQueueGiveFromISR>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d003      	beq.n	8002de8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002de0:	f06f 0302 	mvn.w	r3, #2
 8002de4:	617b      	str	r3, [r7, #20]
 8002de6:	e017      	b.n	8002e18 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <osSemaphoreRelease+0x78>
 8002dee:	4b0d      	ldr	r3, [pc, #52]	@ (8002e24 <osSemaphoreRelease+0x84>)
 8002df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df4:	601a      	str	r2, [r3, #0]
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	e00b      	b.n	8002e18 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	6938      	ldr	r0, [r7, #16]
 8002e08:	f000 faaa 	bl	8003360 <xQueueGenericSend>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d002      	beq.n	8002e18 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002e12:	f06f 0302 	mvn.w	r3, #2
 8002e16:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002e18:	697b      	ldr	r3, [r7, #20]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed04 	.word	0xe000ed04

08002e28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4a07      	ldr	r2, [pc, #28]	@ (8002e54 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4a06      	ldr	r2, [pc, #24]	@ (8002e58 <vApplicationGetIdleTaskMemory+0x30>)
 8002e3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2280      	movs	r2, #128	@ 0x80
 8002e44:	601a      	str	r2, [r3, #0]
}
 8002e46:	bf00      	nop
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	20000258 	.word	0x20000258
 8002e58:	20000300 	.word	0x20000300

08002e5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	@ (8002e88 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4a06      	ldr	r2, [pc, #24]	@ (8002e8c <vApplicationGetTimerTaskMemory+0x30>)
 8002e72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr
 8002e88:	20000500 	.word	0x20000500
 8002e8c:	200005a8 	.word	0x200005a8

08002e90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0208 	add.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2200      	movs	r2, #0
 8002edc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002eea:	b480      	push	{r7}
 8002eec:	b085      	sub	sp, #20
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	683a      	ldr	r2, [r7, #0]
 8002f14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	1c5a      	adds	r2, r3, #1
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
}
 8002f26:	bf00      	nop
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr

08002f32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f32:	b480      	push	{r7}
 8002f34:	b085      	sub	sp, #20
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f48:	d103      	bne.n	8002f52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e00c      	b.n	8002f6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3308      	adds	r3, #8
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e002      	b.n	8002f60 <vListInsert+0x2e>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d2f6      	bcs.n	8002f5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	601a      	str	r2, [r3, #0]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	6892      	ldr	r2, [r2, #8]
 8002fba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6852      	ldr	r2, [r2, #4]
 8002fc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d103      	bne.n	8002fd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689a      	ldr	r2, [r3, #8]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10b      	bne.n	8003024 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800300c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003010:	f383 8811 	msr	BASEPRI, r3
 8003014:	f3bf 8f6f 	isb	sy
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800301e:	bf00      	nop
 8003020:	bf00      	nop
 8003022:	e7fd      	b.n	8003020 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003024:	f002 fcd8 	bl	80059d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	68f9      	ldr	r1, [r7, #12]
 8003032:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003034:	fb01 f303 	mul.w	r3, r1, r3
 8003038:	441a      	add	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003054:	3b01      	subs	r3, #1
 8003056:	68f9      	ldr	r1, [r7, #12]
 8003058:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	441a      	add	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	22ff      	movs	r2, #255	@ 0xff
 8003068:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	22ff      	movs	r2, #255	@ 0xff
 8003070:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d114      	bne.n	80030a4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d01a      	beq.n	80030b8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3310      	adds	r3, #16
 8003086:	4618      	mov	r0, r3
 8003088:	f001 fc74 	bl	8004974 <xTaskRemoveFromEventList>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d012      	beq.n	80030b8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <xQueueGenericReset+0xd0>)
 8003094:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003098:	601a      	str	r2, [r3, #0]
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	e009      	b.n	80030b8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff fef1 	bl	8002e90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	3324      	adds	r3, #36	@ 0x24
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff feec 	bl	8002e90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030b8:	f002 fcc0 	bl	8005a3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030bc:	2301      	movs	r3, #1
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	e000ed04 	.word	0xe000ed04

080030cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08e      	sub	sp, #56	@ 0x38
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003102:	f383 8811 	msr	BASEPRI, r3
 8003106:	f3bf 8f6f 	isb	sy
 800310a:	f3bf 8f4f 	dsb	sy
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	e7fd      	b.n	8003112 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d002      	beq.n	8003122 <xQueueGenericCreateStatic+0x56>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <xQueueGenericCreateStatic+0x5a>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <xQueueGenericCreateStatic+0x5c>
 8003126:	2300      	movs	r3, #0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	623b      	str	r3, [r7, #32]
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d102      	bne.n	8003150 <xQueueGenericCreateStatic+0x84>
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <xQueueGenericCreateStatic+0x88>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <xQueueGenericCreateStatic+0x8a>
 8003154:	2300      	movs	r3, #0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10b      	bne.n	8003172 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800315a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800315e:	f383 8811 	msr	BASEPRI, r3
 8003162:	f3bf 8f6f 	isb	sy
 8003166:	f3bf 8f4f 	dsb	sy
 800316a:	61fb      	str	r3, [r7, #28]
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	e7fd      	b.n	800316e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003172:	2350      	movs	r3, #80	@ 0x50
 8003174:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	2b50      	cmp	r3, #80	@ 0x50
 800317a:	d00b      	beq.n	8003194 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	61bb      	str	r3, [r7, #24]
}
 800318e:	bf00      	nop
 8003190:	bf00      	nop
 8003192:	e7fd      	b.n	8003190 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003194:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031a8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80031ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	4613      	mov	r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f840 	bl	800323c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80031be:	4618      	mov	r0, r3
 80031c0:	3730      	adds	r7, #48	@ 0x30
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b08a      	sub	sp, #40	@ 0x28
 80031ca:	af02      	add	r7, sp, #8
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	4613      	mov	r3, r2
 80031d2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <xQueueGenericCreate+0x2c>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	613b      	str	r3, [r7, #16]
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	e7fd      	b.n	80031ee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	68ba      	ldr	r2, [r7, #8]
 80031f6:	fb02 f303 	mul.w	r3, r2, r3
 80031fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3350      	adds	r3, #80	@ 0x50
 8003200:	4618      	mov	r0, r3
 8003202:	f002 fd0b 	bl	8005c1c <pvPortMalloc>
 8003206:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d011      	beq.n	8003232 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	3350      	adds	r3, #80	@ 0x50
 8003216:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003220:	79fa      	ldrb	r2, [r7, #7]
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f805 	bl	800323c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003232:	69bb      	ldr	r3, [r7, #24]
	}
 8003234:	4618      	mov	r0, r3
 8003236:	3720      	adds	r7, #32
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d103      	bne.n	8003258 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	601a      	str	r2, [r3, #0]
 8003256:	e002      	b.n	800325e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800326a:	2101      	movs	r1, #1
 800326c:	69b8      	ldr	r0, [r7, #24]
 800326e:	f7ff fec3 	bl	8002ff8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}

08003282 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003282:	b580      	push	{r7, lr}
 8003284:	b08a      	sub	sp, #40	@ 0x28
 8003286:	af02      	add	r7, sp, #8
 8003288:	60f8      	str	r0, [r7, #12]
 800328a:	60b9      	str	r1, [r7, #8]
 800328c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10b      	bne.n	80032ac <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	61bb      	str	r3, [r7, #24]
}
 80032a6:	bf00      	nop
 80032a8:	bf00      	nop
 80032aa:	e7fd      	b.n	80032a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d90b      	bls.n	80032cc <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	617b      	str	r3, [r7, #20]
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80032cc:	2302      	movs	r3, #2
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2100      	movs	r1, #0
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fef8 	bl	80030cc <xQueueGenericCreateStatic>
 80032dc:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80032ea:	69fb      	ldr	r3, [r7, #28]
	}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3720      	adds	r7, #32
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10b      	bne.n	800331c <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	613b      	str	r3, [r7, #16]
}
 8003316:	bf00      	nop
 8003318:	bf00      	nop
 800331a:	e7fd      	b.n	8003318 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d90b      	bls.n	800333c <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003328:	f383 8811 	msr	BASEPRI, r3
 800332c:	f3bf 8f6f 	isb	sy
 8003330:	f3bf 8f4f 	dsb	sy
 8003334:	60fb      	str	r3, [r7, #12]
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800333c:	2202      	movs	r2, #2
 800333e:	2100      	movs	r1, #0
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff ff40 	bl	80031c6 <xQueueGenericCreate>
 8003346:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003354:	697b      	ldr	r3, [r7, #20]
	}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08e      	sub	sp, #56	@ 0x38
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
 800336c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800336e:	2300      	movs	r3, #0
 8003370:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10b      	bne.n	8003394 <xQueueGenericSend+0x34>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800338e:	bf00      	nop
 8003390:	bf00      	nop
 8003392:	e7fd      	b.n	8003390 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <xQueueGenericSend+0x42>
 800339a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <xQueueGenericSend+0x46>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <xQueueGenericSend+0x48>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d10b      	bne.n	80033c4 <xQueueGenericSend+0x64>
	__asm volatile
 80033ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033b0:	f383 8811 	msr	BASEPRI, r3
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	f3bf 8f4f 	dsb	sy
 80033bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	e7fd      	b.n	80033c0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d103      	bne.n	80033d2 <xQueueGenericSend+0x72>
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d101      	bne.n	80033d6 <xQueueGenericSend+0x76>
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <xQueueGenericSend+0x78>
 80033d6:	2300      	movs	r3, #0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d10b      	bne.n	80033f4 <xQueueGenericSend+0x94>
	__asm volatile
 80033dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e0:	f383 8811 	msr	BASEPRI, r3
 80033e4:	f3bf 8f6f 	isb	sy
 80033e8:	f3bf 8f4f 	dsb	sy
 80033ec:	623b      	str	r3, [r7, #32]
}
 80033ee:	bf00      	nop
 80033f0:	bf00      	nop
 80033f2:	e7fd      	b.n	80033f0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f4:	f001 fc84 	bl	8004d00 <xTaskGetSchedulerState>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <xQueueGenericSend+0xa4>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <xQueueGenericSend+0xa8>
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <xQueueGenericSend+0xaa>
 8003408:	2300      	movs	r3, #0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10b      	bne.n	8003426 <xQueueGenericSend+0xc6>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	61fb      	str	r3, [r7, #28]
}
 8003420:	bf00      	nop
 8003422:	bf00      	nop
 8003424:	e7fd      	b.n	8003422 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003426:	f002 fad7 	bl	80059d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800342a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800342c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <xQueueGenericSend+0xdc>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d129      	bne.n	8003490 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003442:	f000 fc6d 	bl	8003d20 <prvCopyDataToQueue>
 8003446:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	2b00      	cmp	r3, #0
 800344e:	d010      	beq.n	8003472 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003452:	3324      	adds	r3, #36	@ 0x24
 8003454:	4618      	mov	r0, r3
 8003456:	f001 fa8d 	bl	8004974 <xTaskRemoveFromEventList>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d013      	beq.n	8003488 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003460:	4b3f      	ldr	r3, [pc, #252]	@ (8003560 <xQueueGenericSend+0x200>)
 8003462:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	f3bf 8f4f 	dsb	sy
 800346c:	f3bf 8f6f 	isb	sy
 8003470:	e00a      	b.n	8003488 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003478:	4b39      	ldr	r3, [pc, #228]	@ (8003560 <xQueueGenericSend+0x200>)
 800347a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	f3bf 8f4f 	dsb	sy
 8003484:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003488:	f002 fad8 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 800348c:	2301      	movs	r3, #1
 800348e:	e063      	b.n	8003558 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d103      	bne.n	800349e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003496:	f002 fad1 	bl	8005a3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800349a:	2300      	movs	r3, #0
 800349c:	e05c      	b.n	8003558 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800349e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034a4:	f107 0314 	add.w	r3, r7, #20
 80034a8:	4618      	mov	r0, r3
 80034aa:	f001 fac7 	bl	8004a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034ae:	2301      	movs	r3, #1
 80034b0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034b2:	f002 fac3 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034b6:	f001 f82f 	bl	8004518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034ba:	f002 fa8d 	bl	80059d8 <vPortEnterCritical>
 80034be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c4:	b25b      	sxtb	r3, r3
 80034c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ca:	d103      	bne.n	80034d4 <xQueueGenericSend+0x174>
 80034cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d103      	bne.n	80034ea <xQueueGenericSend+0x18a>
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ea:	f002 faa7 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034ee:	1d3a      	adds	r2, r7, #4
 80034f0:	f107 0314 	add.w	r3, r7, #20
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 fab6 	bl	8004a68 <xTaskCheckForTimeOut>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d124      	bne.n	800354c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003502:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003504:	f000 fd04 	bl	8003f10 <prvIsQueueFull>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d018      	beq.n	8003540 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	3310      	adds	r3, #16
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	4611      	mov	r1, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f001 f9da 	bl	80048d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800351c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800351e:	f000 fc8f 	bl	8003e40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003522:	f001 f807 	bl	8004534 <xTaskResumeAll>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	f47f af7c 	bne.w	8003426 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800352e:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <xQueueGenericSend+0x200>)
 8003530:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	f3bf 8f4f 	dsb	sy
 800353a:	f3bf 8f6f 	isb	sy
 800353e:	e772      	b.n	8003426 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003540:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003542:	f000 fc7d 	bl	8003e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003546:	f000 fff5 	bl	8004534 <xTaskResumeAll>
 800354a:	e76c      	b.n	8003426 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800354c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800354e:	f000 fc77 	bl	8003e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003552:	f000 ffef 	bl	8004534 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003556:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003558:	4618      	mov	r0, r3
 800355a:	3738      	adds	r7, #56	@ 0x38
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	e000ed04 	.word	0xe000ed04

08003564 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b090      	sub	sp, #64	@ 0x40
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
 8003570:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10b      	bne.n	8003594 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800357c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800358e:	bf00      	nop
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d103      	bne.n	80035a2 <xQueueGenericSendFromISR+0x3e>
 800359a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <xQueueGenericSendFromISR+0x42>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <xQueueGenericSendFromISR+0x44>
 80035a6:	2300      	movs	r3, #0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d103      	bne.n	80035d2 <xQueueGenericSendFromISR+0x6e>
 80035ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <xQueueGenericSendFromISR+0x72>
 80035d2:	2301      	movs	r3, #1
 80035d4:	e000      	b.n	80035d8 <xQueueGenericSendFromISR+0x74>
 80035d6:	2300      	movs	r3, #0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035f4:	f002 fad0 	bl	8005b98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80035f8:	f3ef 8211 	mrs	r2, BASEPRI
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	61fa      	str	r2, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003610:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003612:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003616:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800361a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361c:	429a      	cmp	r2, r3
 800361e:	d302      	bcc.n	8003626 <xQueueGenericSendFromISR+0xc2>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	d12f      	bne.n	8003686 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003628:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800362c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003634:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800363c:	f000 fb70 	bl	8003d20 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003640:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003648:	d112      	bne.n	8003670 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800364a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d016      	beq.n	8003680 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003654:	3324      	adds	r3, #36	@ 0x24
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f98c 	bl	8004974 <xTaskRemoveFromEventList>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00e      	beq.n	8003680 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00b      	beq.n	8003680 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003674:	3301      	adds	r3, #1
 8003676:	b2db      	uxtb	r3, r3
 8003678:	b25a      	sxtb	r2, r3
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003680:	2301      	movs	r3, #1
 8003682:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003684:	e001      	b.n	800368a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003686:	2300      	movs	r3, #0
 8003688:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003696:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003698:	4618      	mov	r0, r3
 800369a:	3740      	adds	r7, #64	@ 0x40
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b08e      	sub	sp, #56	@ 0x38
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10b      	bne.n	80036cc <xQueueGiveFromISR+0x2c>
	__asm volatile
 80036b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b8:	f383 8811 	msr	BASEPRI, r3
 80036bc:	f3bf 8f6f 	isb	sy
 80036c0:	f3bf 8f4f 	dsb	sy
 80036c4:	623b      	str	r3, [r7, #32]
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	e7fd      	b.n	80036c8 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80036cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <xQueueGiveFromISR+0x4c>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	61fb      	str	r3, [r7, #28]
}
 80036e6:	bf00      	nop
 80036e8:	bf00      	nop
 80036ea:	e7fd      	b.n	80036e8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80036ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <xQueueGiveFromISR+0x5c>
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <xQueueGiveFromISR+0x60>
 80036fc:	2301      	movs	r3, #1
 80036fe:	e000      	b.n	8003702 <xQueueGiveFromISR+0x62>
 8003700:	2300      	movs	r3, #0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10b      	bne.n	800371e <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	61bb      	str	r3, [r7, #24]
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	e7fd      	b.n	800371a <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800371e:	f002 fa3b 	bl	8005b98 <vPortValidateInterruptPriority>
	__asm volatile
 8003722:	f3ef 8211 	mrs	r2, BASEPRI
 8003726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372a:	f383 8811 	msr	BASEPRI, r3
 800372e:	f3bf 8f6f 	isb	sy
 8003732:	f3bf 8f4f 	dsb	sy
 8003736:	617a      	str	r2, [r7, #20]
 8003738:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800373a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003742:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800374a:	429a      	cmp	r2, r3
 800374c:	d22b      	bcs.n	80037a6 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003754:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003760:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d112      	bne.n	8003790 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800376a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003774:	3324      	adds	r3, #36	@ 0x24
 8003776:	4618      	mov	r0, r3
 8003778:	f001 f8fc 	bl	8004974 <xTaskRemoveFromEventList>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00e      	beq.n	80037a0 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00b      	beq.n	80037a0 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	e007      	b.n	80037a0 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003794:	3301      	adds	r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	b25a      	sxtb	r2, r3
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80037a0:	2301      	movs	r3, #1
 80037a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80037a4:	e001      	b.n	80037aa <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80037aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f383 8811 	msr	BASEPRI, r3
}
 80037b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80037b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3738      	adds	r7, #56	@ 0x38
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08c      	sub	sp, #48	@ 0x30
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80037d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <xQueueReceive+0x32>
	__asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	623b      	str	r3, [r7, #32]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <xQueueReceive+0x40>
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d101      	bne.n	8003804 <xQueueReceive+0x44>
 8003800:	2301      	movs	r3, #1
 8003802:	e000      	b.n	8003806 <xQueueReceive+0x46>
 8003804:	2300      	movs	r3, #0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <xQueueReceive+0x62>
	__asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	61fb      	str	r3, [r7, #28]
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003822:	f001 fa6d 	bl	8004d00 <xTaskGetSchedulerState>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d102      	bne.n	8003832 <xQueueReceive+0x72>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <xQueueReceive+0x76>
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <xQueueReceive+0x78>
 8003836:	2300      	movs	r3, #0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10b      	bne.n	8003854 <xQueueReceive+0x94>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	61bb      	str	r3, [r7, #24]
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	e7fd      	b.n	8003850 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003854:	f002 f8c0 	bl	80059d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800385e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01f      	beq.n	80038a4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003868:	f000 fac4 	bl	8003df4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	1e5a      	subs	r2, r3, #1
 8003870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d00f      	beq.n	800389c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800387c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800387e:	3310      	adds	r3, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f877 	bl	8004974 <xTaskRemoveFromEventList>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d007      	beq.n	800389c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800388c:	4b3c      	ldr	r3, [pc, #240]	@ (8003980 <xQueueReceive+0x1c0>)
 800388e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800389c:	f002 f8ce 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e069      	b.n	8003978 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d103      	bne.n	80038b2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80038aa:	f002 f8c7 	bl	8005a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80038ae:	2300      	movs	r3, #0
 80038b0:	e062      	b.n	8003978 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80038b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 f8bd 	bl	8004a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038c6:	f002 f8b9 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038ca:	f000 fe25 	bl	8004518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ce:	f002 f883 	bl	80059d8 <vPortEnterCritical>
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d103      	bne.n	80038e8 <xQueueReceive+0x128>
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038ee:	b25b      	sxtb	r3, r3
 80038f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f4:	d103      	bne.n	80038fe <xQueueReceive+0x13e>
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80038fe:	f002 f89d 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003902:	1d3a      	adds	r2, r7, #4
 8003904:	f107 0310 	add.w	r3, r7, #16
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f8ac 	bl	8004a68 <xTaskCheckForTimeOut>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d123      	bne.n	800395e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003918:	f000 fae4 	bl	8003ee4 <prvIsQueueEmpty>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d017      	beq.n	8003952 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003924:	3324      	adds	r3, #36	@ 0x24
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f000 ffd0 	bl	80048d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003930:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003932:	f000 fa85 	bl	8003e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003936:	f000 fdfd 	bl	8004534 <xTaskResumeAll>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d189      	bne.n	8003854 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <xQueueReceive+0x1c0>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	e780      	b.n	8003854 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003952:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003954:	f000 fa74 	bl	8003e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003958:	f000 fdec 	bl	8004534 <xTaskResumeAll>
 800395c:	e77a      	b.n	8003854 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800395e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003960:	f000 fa6e 	bl	8003e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003964:	f000 fde6 	bl	8004534 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003968:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800396a:	f000 fabb 	bl	8003ee4 <prvIsQueueEmpty>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	f43f af6f 	beq.w	8003854 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003976:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003978:	4618      	mov	r0, r3
 800397a:	3730      	adds	r7, #48	@ 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	e000ed04 	.word	0xe000ed04

08003984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08e      	sub	sp, #56	@ 0x38
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800398e:	2300      	movs	r3, #0
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003996:	2300      	movs	r3, #0
 8003998:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10b      	bne.n	80039b8 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
 80039b0:	623b      	str	r3, [r7, #32]
}
 80039b2:	bf00      	nop
 80039b4:	bf00      	nop
 80039b6:	e7fd      	b.n	80039b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00b      	beq.n	80039d8 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	61fb      	str	r3, [r7, #28]
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039d8:	f001 f992 	bl	8004d00 <xTaskGetSchedulerState>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <xQueueSemaphoreTake+0x64>
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <xQueueSemaphoreTake+0x68>
 80039e8:	2301      	movs	r3, #1
 80039ea:	e000      	b.n	80039ee <xQueueSemaphoreTake+0x6a>
 80039ec:	2300      	movs	r3, #0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <xQueueSemaphoreTake+0x86>
	__asm volatile
 80039f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f6:	f383 8811 	msr	BASEPRI, r3
 80039fa:	f3bf 8f6f 	isb	sy
 80039fe:	f3bf 8f4f 	dsb	sy
 8003a02:	61bb      	str	r3, [r7, #24]
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	e7fd      	b.n	8003a06 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a0a:	f001 ffe5 	bl	80059d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a12:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d024      	beq.n	8003a64 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	1e5a      	subs	r2, r3, #1
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a2a:	f001 fae3 	bl	8004ff4 <pvTaskIncrementMutexHeldCount>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a32:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00f      	beq.n	8003a5c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a3e:	3310      	adds	r3, #16
 8003a40:	4618      	mov	r0, r3
 8003a42:	f000 ff97 	bl	8004974 <xTaskRemoveFromEventList>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b54      	ldr	r3, [pc, #336]	@ (8003ba0 <xQueueSemaphoreTake+0x21c>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a5c:	f001 ffee 	bl	8005a3c <vPortExitCritical>
				return pdPASS;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e098      	b.n	8003b96 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d112      	bne.n	8003a90 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	617b      	str	r3, [r7, #20]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003a88:	f001 ffd8 	bl	8005a3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e082      	b.n	8003b96 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d106      	bne.n	8003aa4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a96:	f107 030c 	add.w	r3, r7, #12
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f000 ffce 	bl	8004a3c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003aa4:	f001 ffca 	bl	8005a3c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aa8:	f000 fd36 	bl	8004518 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003aac:	f001 ff94 	bl	80059d8 <vPortEnterCritical>
 8003ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ab6:	b25b      	sxtb	r3, r3
 8003ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003abc:	d103      	bne.n	8003ac6 <xQueueSemaphoreTake+0x142>
 8003abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ac6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003acc:	b25b      	sxtb	r3, r3
 8003ace:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad2:	d103      	bne.n	8003adc <xQueueSemaphoreTake+0x158>
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003adc:	f001 ffae 	bl	8005a3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ae0:	463a      	mov	r2, r7
 8003ae2:	f107 030c 	add.w	r3, r7, #12
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 ffbd 	bl	8004a68 <xTaskCheckForTimeOut>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d132      	bne.n	8003b5a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003af4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003af6:	f000 f9f5 	bl	8003ee4 <prvIsQueueEmpty>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d026      	beq.n	8003b4e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003b08:	f001 ff66 	bl	80059d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f913 	bl	8004d3c <xTaskPriorityInherit>
 8003b16:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003b18:	f001 ff90 	bl	8005a3c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	3324      	adds	r3, #36	@ 0x24
 8003b20:	683a      	ldr	r2, [r7, #0]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fed3 	bl	80048d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b2c:	f000 f988 	bl	8003e40 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b30:	f000 fd00 	bl	8004534 <xTaskResumeAll>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f47f af67 	bne.w	8003a0a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003b3c:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <xQueueSemaphoreTake+0x21c>)
 8003b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	f3bf 8f6f 	isb	sy
 8003b4c:	e75d      	b.n	8003a0a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003b4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b50:	f000 f976 	bl	8003e40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b54:	f000 fcee 	bl	8004534 <xTaskResumeAll>
 8003b58:	e757      	b.n	8003a0a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003b5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b5c:	f000 f970 	bl	8003e40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b60:	f000 fce8 	bl	8004534 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b66:	f000 f9bd 	bl	8003ee4 <prvIsQueueEmpty>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f43f af4c 	beq.w	8003a0a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003b78:	f001 ff2e 	bl	80059d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003b7c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b7e:	f000 f8b7 	bl	8003cf0 <prvGetDisinheritPriorityAfterTimeout>
 8003b82:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f001 f9ae 	bl	8004eec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003b90:	f001 ff54 	bl	8005a3c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3738      	adds	r7, #56	@ 0x38
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08e      	sub	sp, #56	@ 0x38
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d10b      	bne.n	8003bd2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bbe:	f383 8811 	msr	BASEPRI, r3
 8003bc2:	f3bf 8f6f 	isb	sy
 8003bc6:	f3bf 8f4f 	dsb	sy
 8003bca:	623b      	str	r3, [r7, #32]
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	e7fd      	b.n	8003bce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d103      	bne.n	8003be0 <xQueueReceiveFromISR+0x3c>
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <xQueueReceiveFromISR+0x40>
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <xQueueReceiveFromISR+0x42>
 8003be4:	2300      	movs	r3, #0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	61fb      	str	r3, [r7, #28]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c02:	f001 ffc9 	bl	8005b98 <vPortValidateInterruptPriority>
	__asm volatile
 8003c06:	f3ef 8211 	mrs	r2, BASEPRI
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	61ba      	str	r2, [r7, #24]
 8003c1c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c1e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c26:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d02f      	beq.n	8003c8e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c38:	68b9      	ldr	r1, [r7, #8]
 8003c3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c3c:	f000 f8da 	bl	8003df4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003c48:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d112      	bne.n	8003c78 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d016      	beq.n	8003c88 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	3310      	adds	r3, #16
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fe88 	bl	8004974 <xTaskRemoveFromEventList>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00e      	beq.n	8003c88 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	e007      	b.n	8003c88 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003c78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	b25a      	sxtb	r2, r3
 8003c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c8c:	e001      	b.n	8003c92 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c94:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f383 8811 	msr	BASEPRI, r3
}
 8003c9c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3738      	adds	r7, #56	@ 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <vQueueDelete+0x2a>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f95e 	bl	8003f94 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d102      	bne.n	8003ce8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f002 f868 	bl	8005db8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d006      	beq.n	8003d0e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e001      	b.n	8003d12 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d12:	68fb      	ldr	r3, [r7, #12]
	}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d10d      	bne.n	8003d5a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d14d      	bne.n	8003de2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f85e 	bl	8004e0c <xTaskPriorityDisinherit>
 8003d50:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	609a      	str	r2, [r3, #8]
 8003d58:	e043      	b.n	8003de2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d119      	bne.n	8003d94 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6858      	ldr	r0, [r3, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	461a      	mov	r2, r3
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	f002 ff77 	bl	8006c5e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	441a      	add	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d32b      	bcc.n	8003de2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	e026      	b.n	8003de2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	68d8      	ldr	r0, [r3, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	f002 ff5d 	bl	8006c5e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	68da      	ldr	r2, [r3, #12]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	425b      	negs	r3, r3
 8003dae:	441a      	add	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d207      	bcs.n	8003dd0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	425b      	negs	r3, r3
 8003dca:	441a      	add	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d105      	bne.n	8003de2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d002      	beq.n	8003de2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003dea:	697b      	ldr	r3, [r7, #20]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b082      	sub	sp, #8
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d018      	beq.n	8003e38 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68da      	ldr	r2, [r3, #12]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	441a      	add	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68da      	ldr	r2, [r3, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d303      	bcc.n	8003e28 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68d9      	ldr	r1, [r3, #12]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e30:	461a      	mov	r2, r3
 8003e32:	6838      	ldr	r0, [r7, #0]
 8003e34:	f002 ff13 	bl	8006c5e <memcpy>
	}
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003e48:	f001 fdc6 	bl	80059d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e54:	e011      	b.n	8003e7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d012      	beq.n	8003e84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3324      	adds	r3, #36	@ 0x24
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fd86 	bl	8004974 <xTaskRemoveFromEventList>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d001      	beq.n	8003e72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e6e:	f000 fe5f 	bl	8004b30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e72:	7bfb      	ldrb	r3, [r7, #15]
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	dce9      	bgt.n	8003e56 <prvUnlockQueue+0x16>
 8003e82:	e000      	b.n	8003e86 <prvUnlockQueue+0x46>
					break;
 8003e84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	22ff      	movs	r2, #255	@ 0xff
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003e8e:	f001 fdd5 	bl	8005a3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e92:	f001 fda1 	bl	80059d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e9e:	e011      	b.n	8003ec4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d012      	beq.n	8003ece <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3310      	adds	r3, #16
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fd61 	bl	8004974 <xTaskRemoveFromEventList>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003eb8:	f000 fe3a 	bl	8004b30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003ebc:	7bbb      	ldrb	r3, [r7, #14]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	dce9      	bgt.n	8003ea0 <prvUnlockQueue+0x60>
 8003ecc:	e000      	b.n	8003ed0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003ece:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	22ff      	movs	r2, #255	@ 0xff
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003ed8:	f001 fdb0 	bl	8005a3c <vPortExitCritical>
}
 8003edc:	bf00      	nop
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003eec:	f001 fd74 	bl	80059d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	e001      	b.n	8003f02 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f02:	f001 fd9b 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8003f06:	68fb      	ldr	r3, [r7, #12]
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f18:	f001 fd5e 	bl	80059d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d102      	bne.n	8003f2e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e001      	b.n	8003f32 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f32:	f001 fd83 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8003f36:	68fb      	ldr	r3, [r7, #12]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	e014      	b.n	8003f7a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f50:	4a0f      	ldr	r2, [pc, #60]	@ (8003f90 <vQueueAddToRegistry+0x50>)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f5c:	490c      	ldr	r1, [pc, #48]	@ (8003f90 <vQueueAddToRegistry+0x50>)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f66:	4a0a      	ldr	r2, [pc, #40]	@ (8003f90 <vQueueAddToRegistry+0x50>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4413      	add	r3, r2
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f72:	e006      	b.n	8003f82 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	3301      	adds	r3, #1
 8003f78:	60fb      	str	r3, [r7, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b07      	cmp	r3, #7
 8003f7e:	d9e7      	bls.n	8003f50 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	200009a8 	.word	0x200009a8

08003f94 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	e016      	b.n	8003fd0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003fa2:	4a10      	ldr	r2, [pc, #64]	@ (8003fe4 <vQueueUnregisterQueue+0x50>)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4413      	add	r3, r2
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d10b      	bne.n	8003fca <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe4 <vQueueUnregisterQueue+0x50>)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2100      	movs	r1, #0
 8003fb8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003fbc:	4a09      	ldr	r2, [pc, #36]	@ (8003fe4 <vQueueUnregisterQueue+0x50>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	00db      	lsls	r3, r3, #3
 8003fc2:	4413      	add	r3, r2
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
				break;
 8003fc8:	e006      	b.n	8003fd8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	3301      	adds	r3, #1
 8003fce:	60fb      	str	r3, [r7, #12]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	d9e5      	bls.n	8003fa2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	200009a8 	.word	0x200009a8

08003fe8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ff8:	f001 fcee 	bl	80059d8 <vPortEnterCritical>
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004002:	b25b      	sxtb	r3, r3
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d103      	bne.n	8004012 <vQueueWaitForMessageRestricted+0x2a>
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004018:	b25b      	sxtb	r3, r3
 800401a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800401e:	d103      	bne.n	8004028 <vQueueWaitForMessageRestricted+0x40>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004028:	f001 fd08 	bl	8005a3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004030:	2b00      	cmp	r3, #0
 8004032:	d106      	bne.n	8004042 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	3324      	adds	r3, #36	@ 0x24
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68b9      	ldr	r1, [r7, #8]
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fc6d 	bl	800491c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004042:	6978      	ldr	r0, [r7, #20]
 8004044:	f7ff fefc 	bl	8003e40 <prvUnlockQueue>
	}
 8004048:	bf00      	nop
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	@ 0x38
 8004054:	af04      	add	r7, sp, #16
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10b      	bne.n	800407c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	623b      	str	r3, [r7, #32]
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	e7fd      	b.n	8004078 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800407c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	61fb      	str	r3, [r7, #28]
}
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800409a:	23a8      	movs	r3, #168	@ 0xa8
 800409c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	2ba8      	cmp	r3, #168	@ 0xa8
 80040a2:	d00b      	beq.n	80040bc <xTaskCreateStatic+0x6c>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	61bb      	str	r3, [r7, #24]
}
 80040b6:	bf00      	nop
 80040b8:	bf00      	nop
 80040ba:	e7fd      	b.n	80040b8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80040bc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01e      	beq.n	8004102 <xTaskCreateStatic+0xb2>
 80040c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01b      	beq.n	8004102 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040d2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80040dc:	2300      	movs	r3, #0
 80040de:	9303      	str	r3, [sp, #12]
 80040e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e2:	9302      	str	r3, [sp, #8]
 80040e4:	f107 0314 	add.w	r3, r7, #20
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f000 f851 	bl	800419c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040fa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040fc:	f000 f8f6 	bl	80042ec <prvAddNewTaskToReadyList>
 8004100:	e001      	b.n	8004106 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004106:	697b      	ldr	r3, [r7, #20]
	}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	@ 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08c      	sub	sp, #48	@ 0x30
 8004114:	af04      	add	r7, sp, #16
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004120:	88fb      	ldrh	r3, [r7, #6]
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4618      	mov	r0, r3
 8004126:	f001 fd79 	bl	8005c1c <pvPortMalloc>
 800412a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00e      	beq.n	8004150 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004132:	20a8      	movs	r0, #168	@ 0xa8
 8004134:	f001 fd72 	bl	8005c1c <pvPortMalloc>
 8004138:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
 8004146:	e005      	b.n	8004154 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f001 fe35 	bl	8005db8 <vPortFree>
 800414e:	e001      	b.n	8004154 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004150:	2300      	movs	r3, #0
 8004152:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d017      	beq.n	800418a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004162:	88fa      	ldrh	r2, [r7, #6]
 8004164:	2300      	movs	r3, #0
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	9302      	str	r3, [sp, #8]
 800416c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800416e:	9301      	str	r3, [sp, #4]
 8004170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f80f 	bl	800419c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800417e:	69f8      	ldr	r0, [r7, #28]
 8004180:	f000 f8b4 	bl	80042ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004184:	2301      	movs	r3, #1
 8004186:	61bb      	str	r3, [r7, #24]
 8004188:	e002      	b.n	8004190 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295
 800418e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004190:	69bb      	ldr	r3, [r7, #24]
	}
 8004192:	4618      	mov	r0, r3
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
	...

0800419c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ac:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	461a      	mov	r2, r3
 80041b4:	21a5      	movs	r1, #165	@ 0xa5
 80041b6:	f002 fc7c 	bl	8006ab2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80041c4:	3b01      	subs	r3, #1
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	f023 0307 	bic.w	r3, r3, #7
 80041d2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	617b      	str	r3, [r7, #20]
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01f      	beq.n	800423c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e012      	b.n	8004228 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	7819      	ldrb	r1, [r3, #0]
 800420a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	4413      	add	r3, r2
 8004210:	3334      	adds	r3, #52	@ 0x34
 8004212:	460a      	mov	r2, r1
 8004214:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d006      	beq.n	8004230 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	3301      	adds	r3, #1
 8004226:	61fb      	str	r3, [r7, #28]
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	d9e9      	bls.n	8004202 <prvInitialiseNewTask+0x66>
 800422e:	e000      	b.n	8004232 <prvInitialiseNewTask+0x96>
			{
				break;
 8004230:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800423a:	e003      	b.n	8004244 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800423c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004246:	2b37      	cmp	r3, #55	@ 0x37
 8004248:	d901      	bls.n	800424e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800424a:	2337      	movs	r3, #55	@ 0x37
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800424e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004252:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004254:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004258:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800425a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425c:	2200      	movs	r2, #0
 800425e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	3304      	adds	r3, #4
 8004264:	4618      	mov	r0, r3
 8004266:	f7fe fe33 	bl	8002ed0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800426a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426c:	3318      	adds	r3, #24
 800426e:	4618      	mov	r0, r3
 8004270:	f7fe fe2e 	bl	8002ed0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800427a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800427c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004282:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004288:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800428a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800428c:	2200      	movs	r2, #0
 800428e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	2200      	movs	r2, #0
 8004296:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800429a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800429c:	3354      	adds	r3, #84	@ 0x54
 800429e:	224c      	movs	r2, #76	@ 0x4c
 80042a0:	2100      	movs	r1, #0
 80042a2:	4618      	mov	r0, r3
 80042a4:	f002 fc05 	bl	8006ab2 <memset>
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	4a0d      	ldr	r2, [pc, #52]	@ (80042e0 <prvInitialiseNewTask+0x144>)
 80042ac:	659a      	str	r2, [r3, #88]	@ 0x58
 80042ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b0:	4a0c      	ldr	r2, [pc, #48]	@ (80042e4 <prvInitialiseNewTask+0x148>)
 80042b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80042b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042b6:	4a0c      	ldr	r2, [pc, #48]	@ (80042e8 <prvInitialiseNewTask+0x14c>)
 80042b8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ba:	683a      	ldr	r2, [r7, #0]
 80042bc:	68f9      	ldr	r1, [r7, #12]
 80042be:	69b8      	ldr	r0, [r7, #24]
 80042c0:	f001 fa5a 	bl	8005778 <pxPortInitialiseStack>
 80042c4:	4602      	mov	r2, r0
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80042ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042d6:	bf00      	nop
 80042d8:	3720      	adds	r7, #32
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20004c3c 	.word	0x20004c3c
 80042e4:	20004ca4 	.word	0x20004ca4
 80042e8:	20004d0c 	.word	0x20004d0c

080042ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042f4:	f001 fb70 	bl	80059d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042f8:	4b2d      	ldr	r3, [pc, #180]	@ (80043b0 <prvAddNewTaskToReadyList+0xc4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <prvAddNewTaskToReadyList+0xc4>)
 8004300:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004302:	4b2c      	ldr	r3, [pc, #176]	@ (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800430a:	4a2a      	ldr	r2, [pc, #168]	@ (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004310:	4b27      	ldr	r3, [pc, #156]	@ (80043b0 <prvAddNewTaskToReadyList+0xc4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d110      	bne.n	800433a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004318:	f000 fc2e 	bl	8004b78 <prvInitialiseTaskLists>
 800431c:	e00d      	b.n	800433a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800431e:	4b26      	ldr	r3, [pc, #152]	@ (80043b8 <prvAddNewTaskToReadyList+0xcc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004326:	4b23      	ldr	r3, [pc, #140]	@ (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004330:	429a      	cmp	r2, r3
 8004332:	d802      	bhi.n	800433a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004334:	4a1f      	ldr	r2, [pc, #124]	@ (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800433a:	4b20      	ldr	r3, [pc, #128]	@ (80043bc <prvAddNewTaskToReadyList+0xd0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	3301      	adds	r3, #1
 8004340:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <prvAddNewTaskToReadyList+0xd0>)
 8004342:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004344:	4b1d      	ldr	r3, [pc, #116]	@ (80043bc <prvAddNewTaskToReadyList+0xd0>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004350:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <prvAddNewTaskToReadyList+0xd4>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	429a      	cmp	r2, r3
 8004356:	d903      	bls.n	8004360 <prvAddNewTaskToReadyList+0x74>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	4a18      	ldr	r2, [pc, #96]	@ (80043c0 <prvAddNewTaskToReadyList+0xd4>)
 800435e:	6013      	str	r3, [r2, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004364:	4613      	mov	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	4a15      	ldr	r2, [pc, #84]	@ (80043c4 <prvAddNewTaskToReadyList+0xd8>)
 800436e:	441a      	add	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	3304      	adds	r3, #4
 8004374:	4619      	mov	r1, r3
 8004376:	4610      	mov	r0, r2
 8004378:	f7fe fdb7 	bl	8002eea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800437c:	f001 fb5e 	bl	8005a3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004380:	4b0d      	ldr	r3, [pc, #52]	@ (80043b8 <prvAddNewTaskToReadyList+0xcc>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00e      	beq.n	80043a6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004388:	4b0a      	ldr	r3, [pc, #40]	@ (80043b4 <prvAddNewTaskToReadyList+0xc8>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004392:	429a      	cmp	r2, r3
 8004394:	d207      	bcs.n	80043a6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004396:	4b0c      	ldr	r3, [pc, #48]	@ (80043c8 <prvAddNewTaskToReadyList+0xdc>)
 8004398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043a6:	bf00      	nop
 80043a8:	3708      	adds	r7, #8
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	20000ebc 	.word	0x20000ebc
 80043b4:	200009e8 	.word	0x200009e8
 80043b8:	20000ec8 	.word	0x20000ec8
 80043bc:	20000ed8 	.word	0x20000ed8
 80043c0:	20000ec4 	.word	0x20000ec4
 80043c4:	200009ec 	.word	0x200009ec
 80043c8:	e000ed04 	.word	0xe000ed04

080043cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d018      	beq.n	8004410 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043de:	4b14      	ldr	r3, [pc, #80]	@ (8004430 <vTaskDelay+0x64>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00b      	beq.n	80043fe <vTaskDelay+0x32>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60bb      	str	r3, [r7, #8]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043fe:	f000 f88b 	bl	8004518 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004402:	2100      	movs	r1, #0
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fe09 	bl	800501c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800440a:	f000 f893 	bl	8004534 <xTaskResumeAll>
 800440e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d107      	bne.n	8004426 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <vTaskDelay+0x68>)
 8004418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000ee4 	.word	0x20000ee4
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b08a      	sub	sp, #40	@ 0x28
 800443c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004442:	2300      	movs	r3, #0
 8004444:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004446:	463a      	mov	r2, r7
 8004448:	1d39      	adds	r1, r7, #4
 800444a:	f107 0308 	add.w	r3, r7, #8
 800444e:	4618      	mov	r0, r3
 8004450:	f7fe fcea 	bl	8002e28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004454:	6839      	ldr	r1, [r7, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	9202      	str	r2, [sp, #8]
 800445c:	9301      	str	r3, [sp, #4]
 800445e:	2300      	movs	r3, #0
 8004460:	9300      	str	r3, [sp, #0]
 8004462:	2300      	movs	r3, #0
 8004464:	460a      	mov	r2, r1
 8004466:	4924      	ldr	r1, [pc, #144]	@ (80044f8 <vTaskStartScheduler+0xc0>)
 8004468:	4824      	ldr	r0, [pc, #144]	@ (80044fc <vTaskStartScheduler+0xc4>)
 800446a:	f7ff fdf1 	bl	8004050 <xTaskCreateStatic>
 800446e:	4603      	mov	r3, r0
 8004470:	4a23      	ldr	r2, [pc, #140]	@ (8004500 <vTaskStartScheduler+0xc8>)
 8004472:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004474:	4b22      	ldr	r3, [pc, #136]	@ (8004500 <vTaskStartScheduler+0xc8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800447c:	2301      	movs	r3, #1
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	e001      	b.n	8004486 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004482:	2300      	movs	r3, #0
 8004484:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d102      	bne.n	8004492 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800448c:	f000 fe1a 	bl	80050c4 <xTimerCreateTimerTask>
 8004490:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d11b      	bne.n	80044d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	613b      	str	r3, [r7, #16]
}
 80044aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80044ac:	4b15      	ldr	r3, [pc, #84]	@ (8004504 <vTaskStartScheduler+0xcc>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3354      	adds	r3, #84	@ 0x54
 80044b2:	4a15      	ldr	r2, [pc, #84]	@ (8004508 <vTaskStartScheduler+0xd0>)
 80044b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044b6:	4b15      	ldr	r3, [pc, #84]	@ (800450c <vTaskStartScheduler+0xd4>)
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044be:	4b14      	ldr	r3, [pc, #80]	@ (8004510 <vTaskStartScheduler+0xd8>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c4:	4b13      	ldr	r3, [pc, #76]	@ (8004514 <vTaskStartScheduler+0xdc>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ca:	f001 f9e1 	bl	8005890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044ce:	e00f      	b.n	80044f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d10b      	bne.n	80044f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80044d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044dc:	f383 8811 	msr	BASEPRI, r3
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	f3bf 8f4f 	dsb	sy
 80044e8:	60fb      	str	r3, [r7, #12]
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	e7fd      	b.n	80044ec <vTaskStartScheduler+0xb4>
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	080089f0 	.word	0x080089f0
 80044fc:	08004b49 	.word	0x08004b49
 8004500:	20000ee0 	.word	0x20000ee0
 8004504:	200009e8 	.word	0x200009e8
 8004508:	2000001c 	.word	0x2000001c
 800450c:	20000edc 	.word	0x20000edc
 8004510:	20000ec8 	.word	0x20000ec8
 8004514:	20000ec0 	.word	0x20000ec0

08004518 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800451c:	4b04      	ldr	r3, [pc, #16]	@ (8004530 <vTaskSuspendAll+0x18>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a03      	ldr	r2, [pc, #12]	@ (8004530 <vTaskSuspendAll+0x18>)
 8004524:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004526:	bf00      	nop
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	20000ee4 	.word	0x20000ee4

08004534 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800453e:	2300      	movs	r3, #0
 8004540:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004542:	4b42      	ldr	r3, [pc, #264]	@ (800464c <xTaskResumeAll+0x118>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10b      	bne.n	8004562 <xTaskResumeAll+0x2e>
	__asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	603b      	str	r3, [r7, #0]
}
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004562:	f001 fa39 	bl	80059d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004566:	4b39      	ldr	r3, [pc, #228]	@ (800464c <xTaskResumeAll+0x118>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a37      	ldr	r2, [pc, #220]	@ (800464c <xTaskResumeAll+0x118>)
 800456e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004570:	4b36      	ldr	r3, [pc, #216]	@ (800464c <xTaskResumeAll+0x118>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d162      	bne.n	800463e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004578:	4b35      	ldr	r3, [pc, #212]	@ (8004650 <xTaskResumeAll+0x11c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d05e      	beq.n	800463e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004580:	e02f      	b.n	80045e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004582:	4b34      	ldr	r3, [pc, #208]	@ (8004654 <xTaskResumeAll+0x120>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3318      	adds	r3, #24
 800458e:	4618      	mov	r0, r3
 8004590:	f7fe fd08 	bl	8002fa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe fd03 	bl	8002fa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a2:	4b2d      	ldr	r3, [pc, #180]	@ (8004658 <xTaskResumeAll+0x124>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d903      	bls.n	80045b2 <xTaskResumeAll+0x7e>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004658 <xTaskResumeAll+0x124>)
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4a27      	ldr	r2, [pc, #156]	@ (800465c <xTaskResumeAll+0x128>)
 80045c0:	441a      	add	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3304      	adds	r3, #4
 80045c6:	4619      	mov	r1, r3
 80045c8:	4610      	mov	r0, r2
 80045ca:	f7fe fc8e 	bl	8002eea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045d2:	4b23      	ldr	r3, [pc, #140]	@ (8004660 <xTaskResumeAll+0x12c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d8:	429a      	cmp	r2, r3
 80045da:	d302      	bcc.n	80045e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80045dc:	4b21      	ldr	r3, [pc, #132]	@ (8004664 <xTaskResumeAll+0x130>)
 80045de:	2201      	movs	r2, #1
 80045e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004654 <xTaskResumeAll+0x120>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cb      	bne.n	8004582 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045f0:	f000 fb66 	bl	8004cc0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045f4:	4b1c      	ldr	r3, [pc, #112]	@ (8004668 <xTaskResumeAll+0x134>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d010      	beq.n	8004622 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004600:	f000 f846 	bl	8004690 <xTaskIncrementTick>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800460a:	4b16      	ldr	r3, [pc, #88]	@ (8004664 <xTaskResumeAll+0x130>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3b01      	subs	r3, #1
 8004614:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f1      	bne.n	8004600 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800461c:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <xTaskResumeAll+0x134>)
 800461e:	2200      	movs	r2, #0
 8004620:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004622:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <xTaskResumeAll+0x130>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d009      	beq.n	800463e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800462e:	4b0f      	ldr	r3, [pc, #60]	@ (800466c <xTaskResumeAll+0x138>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800463e:	f001 f9fd 	bl	8005a3c <vPortExitCritical>

	return xAlreadyYielded;
 8004642:	68bb      	ldr	r3, [r7, #8]
}
 8004644:	4618      	mov	r0, r3
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	20000ee4 	.word	0x20000ee4
 8004650:	20000ebc 	.word	0x20000ebc
 8004654:	20000e7c 	.word	0x20000e7c
 8004658:	20000ec4 	.word	0x20000ec4
 800465c:	200009ec 	.word	0x200009ec
 8004660:	200009e8 	.word	0x200009e8
 8004664:	20000ed0 	.word	0x20000ed0
 8004668:	20000ecc 	.word	0x20000ecc
 800466c:	e000ed04 	.word	0xe000ed04

08004670 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <xTaskGetTickCount+0x1c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800467c:	687b      	ldr	r3, [r7, #4]
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000ec0 	.word	0x20000ec0

08004690 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800469a:	4b4f      	ldr	r3, [pc, #316]	@ (80047d8 <xTaskIncrementTick+0x148>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f040 8090 	bne.w	80047c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046a4:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <xTaskIncrementTick+0x14c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3301      	adds	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80046ac:	4a4b      	ldr	r2, [pc, #300]	@ (80047dc <xTaskIncrementTick+0x14c>)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d121      	bne.n	80046fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80046b8:	4b49      	ldr	r3, [pc, #292]	@ (80047e0 <xTaskIncrementTick+0x150>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00b      	beq.n	80046da <xTaskIncrementTick+0x4a>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	603b      	str	r3, [r7, #0]
}
 80046d4:	bf00      	nop
 80046d6:	bf00      	nop
 80046d8:	e7fd      	b.n	80046d6 <xTaskIncrementTick+0x46>
 80046da:	4b41      	ldr	r3, [pc, #260]	@ (80047e0 <xTaskIncrementTick+0x150>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]
 80046e0:	4b40      	ldr	r3, [pc, #256]	@ (80047e4 <xTaskIncrementTick+0x154>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3e      	ldr	r2, [pc, #248]	@ (80047e0 <xTaskIncrementTick+0x150>)
 80046e6:	6013      	str	r3, [r2, #0]
 80046e8:	4a3e      	ldr	r2, [pc, #248]	@ (80047e4 <xTaskIncrementTick+0x154>)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6013      	str	r3, [r2, #0]
 80046ee:	4b3e      	ldr	r3, [pc, #248]	@ (80047e8 <xTaskIncrementTick+0x158>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	4a3c      	ldr	r2, [pc, #240]	@ (80047e8 <xTaskIncrementTick+0x158>)
 80046f6:	6013      	str	r3, [r2, #0]
 80046f8:	f000 fae2 	bl	8004cc0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046fc:	4b3b      	ldr	r3, [pc, #236]	@ (80047ec <xTaskIncrementTick+0x15c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	429a      	cmp	r2, r3
 8004704:	d349      	bcc.n	800479a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004706:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <xTaskIncrementTick+0x150>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d104      	bne.n	800471a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004710:	4b36      	ldr	r3, [pc, #216]	@ (80047ec <xTaskIncrementTick+0x15c>)
 8004712:	f04f 32ff 	mov.w	r2, #4294967295
 8004716:	601a      	str	r2, [r3, #0]
					break;
 8004718:	e03f      	b.n	800479a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	4b31      	ldr	r3, [pc, #196]	@ (80047e0 <xTaskIncrementTick+0x150>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d203      	bcs.n	800473a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004732:	4a2e      	ldr	r2, [pc, #184]	@ (80047ec <xTaskIncrementTick+0x15c>)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004738:	e02f      	b.n	800479a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	3304      	adds	r3, #4
 800473e:	4618      	mov	r0, r3
 8004740:	f7fe fc30 	bl	8002fa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	3318      	adds	r3, #24
 8004750:	4618      	mov	r0, r3
 8004752:	f7fe fc27 	bl	8002fa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	4b25      	ldr	r3, [pc, #148]	@ (80047f0 <xTaskIncrementTick+0x160>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	429a      	cmp	r2, r3
 8004760:	d903      	bls.n	800476a <xTaskIncrementTick+0xda>
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	4a22      	ldr	r2, [pc, #136]	@ (80047f0 <xTaskIncrementTick+0x160>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <xTaskIncrementTick+0x164>)
 8004778:	441a      	add	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	3304      	adds	r3, #4
 800477e:	4619      	mov	r1, r3
 8004780:	4610      	mov	r0, r2
 8004782:	f7fe fbb2 	bl	8002eea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800478a:	4b1b      	ldr	r3, [pc, #108]	@ (80047f8 <xTaskIncrementTick+0x168>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	429a      	cmp	r2, r3
 8004792:	d3b8      	bcc.n	8004706 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004798:	e7b5      	b.n	8004706 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800479a:	4b17      	ldr	r3, [pc, #92]	@ (80047f8 <xTaskIncrementTick+0x168>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047a0:	4914      	ldr	r1, [pc, #80]	@ (80047f4 <xTaskIncrementTick+0x164>)
 80047a2:	4613      	mov	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4413      	add	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	440b      	add	r3, r1
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d901      	bls.n	80047b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80047b6:	4b11      	ldr	r3, [pc, #68]	@ (80047fc <xTaskIncrementTick+0x16c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d007      	beq.n	80047ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80047be:	2301      	movs	r3, #1
 80047c0:	617b      	str	r3, [r7, #20]
 80047c2:	e004      	b.n	80047ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80047c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004800 <xTaskIncrementTick+0x170>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004800 <xTaskIncrementTick+0x170>)
 80047cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80047ce:	697b      	ldr	r3, [r7, #20]
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3718      	adds	r7, #24
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	20000ee4 	.word	0x20000ee4
 80047dc:	20000ec0 	.word	0x20000ec0
 80047e0:	20000e74 	.word	0x20000e74
 80047e4:	20000e78 	.word	0x20000e78
 80047e8:	20000ed4 	.word	0x20000ed4
 80047ec:	20000edc 	.word	0x20000edc
 80047f0:	20000ec4 	.word	0x20000ec4
 80047f4:	200009ec 	.word	0x200009ec
 80047f8:	200009e8 	.word	0x200009e8
 80047fc:	20000ed0 	.word	0x20000ed0
 8004800:	20000ecc 	.word	0x20000ecc

08004804 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800480a:	4b2b      	ldr	r3, [pc, #172]	@ (80048b8 <vTaskSwitchContext+0xb4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004812:	4b2a      	ldr	r3, [pc, #168]	@ (80048bc <vTaskSwitchContext+0xb8>)
 8004814:	2201      	movs	r2, #1
 8004816:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004818:	e047      	b.n	80048aa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800481a:	4b28      	ldr	r3, [pc, #160]	@ (80048bc <vTaskSwitchContext+0xb8>)
 800481c:	2200      	movs	r2, #0
 800481e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004820:	4b27      	ldr	r3, [pc, #156]	@ (80048c0 <vTaskSwitchContext+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e011      	b.n	800484c <vTaskSwitchContext+0x48>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <vTaskSwitchContext+0x42>
	__asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vTaskSwitchContext+0x3e>
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	3b01      	subs	r3, #1
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	491d      	ldr	r1, [pc, #116]	@ (80048c4 <vTaskSwitchContext+0xc0>)
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d0e3      	beq.n	8004828 <vTaskSwitchContext+0x24>
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4613      	mov	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4a16      	ldr	r2, [pc, #88]	@ (80048c4 <vTaskSwitchContext+0xc0>)
 800486c:	4413      	add	r3, r2
 800486e:	60bb      	str	r3, [r7, #8]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	685a      	ldr	r2, [r3, #4]
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	605a      	str	r2, [r3, #4]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	3308      	adds	r3, #8
 8004882:	429a      	cmp	r2, r3
 8004884:	d104      	bne.n	8004890 <vTaskSwitchContext+0x8c>
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	605a      	str	r2, [r3, #4]
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	4a0c      	ldr	r2, [pc, #48]	@ (80048c8 <vTaskSwitchContext+0xc4>)
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <vTaskSwitchContext+0xbc>)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80048a0:	4b09      	ldr	r3, [pc, #36]	@ (80048c8 <vTaskSwitchContext+0xc4>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3354      	adds	r3, #84	@ 0x54
 80048a6:	4a09      	ldr	r2, [pc, #36]	@ (80048cc <vTaskSwitchContext+0xc8>)
 80048a8:	6013      	str	r3, [r2, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	20000ee4 	.word	0x20000ee4
 80048bc:	20000ed0 	.word	0x20000ed0
 80048c0:	20000ec4 	.word	0x20000ec4
 80048c4:	200009ec 	.word	0x200009ec
 80048c8:	200009e8 	.word	0x200009e8
 80048cc:	2000001c 	.word	0x2000001c

080048d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10b      	bne.n	80048f8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80048e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e4:	f383 8811 	msr	BASEPRI, r3
 80048e8:	f3bf 8f6f 	isb	sy
 80048ec:	f3bf 8f4f 	dsb	sy
 80048f0:	60fb      	str	r3, [r7, #12]
}
 80048f2:	bf00      	nop
 80048f4:	bf00      	nop
 80048f6:	e7fd      	b.n	80048f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048f8:	4b07      	ldr	r3, [pc, #28]	@ (8004918 <vTaskPlaceOnEventList+0x48>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3318      	adds	r3, #24
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7fe fb16 	bl	8002f32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004906:	2101      	movs	r1, #1
 8004908:	6838      	ldr	r0, [r7, #0]
 800490a:	f000 fb87 	bl	800501c <prvAddCurrentTaskToDelayedList>
}
 800490e:	bf00      	nop
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	200009e8 	.word	0x200009e8

0800491c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800491c:	b580      	push	{r7, lr}
 800491e:	b086      	sub	sp, #24
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10b      	bne.n	8004946 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	617b      	str	r3, [r7, #20]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004946:	4b0a      	ldr	r3, [pc, #40]	@ (8004970 <vTaskPlaceOnEventListRestricted+0x54>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	3318      	adds	r3, #24
 800494c:	4619      	mov	r1, r3
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f7fe facb 	bl	8002eea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800495a:	f04f 33ff 	mov.w	r3, #4294967295
 800495e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	68b8      	ldr	r0, [r7, #8]
 8004964:	f000 fb5a 	bl	800501c <prvAddCurrentTaskToDelayedList>
	}
 8004968:	bf00      	nop
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	200009e8 	.word	0x200009e8

08004974 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	60fb      	str	r3, [r7, #12]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	3318      	adds	r3, #24
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fe fafc 	bl	8002fa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004a24 <xTaskRemoveFromEventList+0xb0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d11d      	bne.n	80049f0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe faf3 	bl	8002fa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049c2:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <xTaskRemoveFromEventList+0xb4>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d903      	bls.n	80049d2 <xTaskRemoveFromEventList+0x5e>
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ce:	4a16      	ldr	r2, [pc, #88]	@ (8004a28 <xTaskRemoveFromEventList+0xb4>)
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4a13      	ldr	r2, [pc, #76]	@ (8004a2c <xTaskRemoveFromEventList+0xb8>)
 80049e0:	441a      	add	r2, r3
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4619      	mov	r1, r3
 80049e8:	4610      	mov	r0, r2
 80049ea:	f7fe fa7e 	bl	8002eea <vListInsertEnd>
 80049ee:	e005      	b.n	80049fc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	3318      	adds	r3, #24
 80049f4:	4619      	mov	r1, r3
 80049f6:	480e      	ldr	r0, [pc, #56]	@ (8004a30 <xTaskRemoveFromEventList+0xbc>)
 80049f8:	f7fe fa77 	bl	8002eea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a00:	4b0c      	ldr	r3, [pc, #48]	@ (8004a34 <xTaskRemoveFromEventList+0xc0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d905      	bls.n	8004a16 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <xTaskRemoveFromEventList+0xc4>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e001      	b.n	8004a1a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a1a:	697b      	ldr	r3, [r7, #20]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000ee4 	.word	0x20000ee4
 8004a28:	20000ec4 	.word	0x20000ec4
 8004a2c:	200009ec 	.word	0x200009ec
 8004a30:	20000e7c 	.word	0x20000e7c
 8004a34:	200009e8 	.word	0x200009e8
 8004a38:	20000ed0 	.word	0x20000ed0

08004a3c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a44:	4b06      	ldr	r3, [pc, #24]	@ (8004a60 <vTaskInternalSetTimeOutState+0x24>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a4c:	4b05      	ldr	r3, [pc, #20]	@ (8004a64 <vTaskInternalSetTimeOutState+0x28>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	605a      	str	r2, [r3, #4]
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	20000ed4 	.word	0x20000ed4
 8004a64:	20000ec0 	.word	0x20000ec0

08004a68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	613b      	str	r3, [r7, #16]
}
 8004a8a:	bf00      	nop
 8004a8c:	bf00      	nop
 8004a8e:	e7fd      	b.n	8004a8c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	60fb      	str	r3, [r7, #12]
}
 8004aa8:	bf00      	nop
 8004aaa:	bf00      	nop
 8004aac:	e7fd      	b.n	8004aaa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004aae:	f000 ff93 	bl	80059d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b28 <xTaskCheckForTimeOut+0xc0>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	1ad3      	subs	r3, r2, r3
 8004ac0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aca:	d102      	bne.n	8004ad2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
 8004ad0:	e023      	b.n	8004b1a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b15      	ldr	r3, [pc, #84]	@ (8004b2c <xTaskCheckForTimeOut+0xc4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d007      	beq.n	8004aee <xTaskCheckForTimeOut+0x86>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	e015      	b.n	8004b1a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d20b      	bcs.n	8004b10 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff99 	bl	8004a3c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e004      	b.n	8004b1a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b1a:	f000 ff8f 	bl	8005a3c <vPortExitCritical>

	return xReturn;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3720      	adds	r7, #32
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	20000ec0 	.word	0x20000ec0
 8004b2c:	20000ed4 	.word	0x20000ed4

08004b30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004b34:	4b03      	ldr	r3, [pc, #12]	@ (8004b44 <vTaskMissedYield+0x14>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	601a      	str	r2, [r3, #0]
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000ed0 	.word	0x20000ed0

08004b48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b50:	f000 f852 	bl	8004bf8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <prvIdleTask+0x28>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d9f9      	bls.n	8004b50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b5c:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <prvIdleTask+0x2c>)
 8004b5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b6c:	e7f0      	b.n	8004b50 <prvIdleTask+0x8>
 8004b6e:	bf00      	nop
 8004b70:	200009ec 	.word	0x200009ec
 8004b74:	e000ed04 	.word	0xe000ed04

08004b78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b7e:	2300      	movs	r3, #0
 8004b80:	607b      	str	r3, [r7, #4]
 8004b82:	e00c      	b.n	8004b9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	4613      	mov	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	4413      	add	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4a12      	ldr	r2, [pc, #72]	@ (8004bd8 <prvInitialiseTaskLists+0x60>)
 8004b90:	4413      	add	r3, r2
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe f97c 	bl	8002e90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	607b      	str	r3, [r7, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b37      	cmp	r3, #55	@ 0x37
 8004ba2:	d9ef      	bls.n	8004b84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ba4:	480d      	ldr	r0, [pc, #52]	@ (8004bdc <prvInitialiseTaskLists+0x64>)
 8004ba6:	f7fe f973 	bl	8002e90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004baa:	480d      	ldr	r0, [pc, #52]	@ (8004be0 <prvInitialiseTaskLists+0x68>)
 8004bac:	f7fe f970 	bl	8002e90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004bb0:	480c      	ldr	r0, [pc, #48]	@ (8004be4 <prvInitialiseTaskLists+0x6c>)
 8004bb2:	f7fe f96d 	bl	8002e90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004bb6:	480c      	ldr	r0, [pc, #48]	@ (8004be8 <prvInitialiseTaskLists+0x70>)
 8004bb8:	f7fe f96a 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004bbc:	480b      	ldr	r0, [pc, #44]	@ (8004bec <prvInitialiseTaskLists+0x74>)
 8004bbe:	f7fe f967 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf0 <prvInitialiseTaskLists+0x78>)
 8004bc4:	4a05      	ldr	r2, [pc, #20]	@ (8004bdc <prvInitialiseTaskLists+0x64>)
 8004bc6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf4 <prvInitialiseTaskLists+0x7c>)
 8004bca:	4a05      	ldr	r2, [pc, #20]	@ (8004be0 <prvInitialiseTaskLists+0x68>)
 8004bcc:	601a      	str	r2, [r3, #0]
}
 8004bce:	bf00      	nop
 8004bd0:	3708      	adds	r7, #8
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	200009ec 	.word	0x200009ec
 8004bdc:	20000e4c 	.word	0x20000e4c
 8004be0:	20000e60 	.word	0x20000e60
 8004be4:	20000e7c 	.word	0x20000e7c
 8004be8:	20000e90 	.word	0x20000e90
 8004bec:	20000ea8 	.word	0x20000ea8
 8004bf0:	20000e74 	.word	0x20000e74
 8004bf4:	20000e78 	.word	0x20000e78

08004bf8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bfe:	e019      	b.n	8004c34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c00:	f000 feea 	bl	80059d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c04:	4b10      	ldr	r3, [pc, #64]	@ (8004c48 <prvCheckTasksWaitingTermination+0x50>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe f9c7 	bl	8002fa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c16:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <prvCheckTasksWaitingTermination+0x54>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8004c4c <prvCheckTasksWaitingTermination+0x54>)
 8004c1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c20:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	4a0a      	ldr	r2, [pc, #40]	@ (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c2a:	f000 ff07 	bl	8005a3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f810 	bl	8004c54 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <prvCheckTasksWaitingTermination+0x58>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1e1      	bne.n	8004c00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004c3c:	bf00      	nop
 8004c3e:	bf00      	nop
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000e90 	.word	0x20000e90
 8004c4c:	20000ebc 	.word	0x20000ebc
 8004c50:	20000ea4 	.word	0x20000ea4

08004c54 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3354      	adds	r3, #84	@ 0x54
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 ff43 	bl	8006aec <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d108      	bne.n	8004c82 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c74:	4618      	mov	r0, r3
 8004c76:	f001 f89f 	bl	8005db8 <vPortFree>
				vPortFree( pxTCB );
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f001 f89c 	bl	8005db8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c80:	e019      	b.n	8004cb6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d103      	bne.n	8004c94 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 f893 	bl	8005db8 <vPortFree>
	}
 8004c92:	e010      	b.n	8004cb6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d00b      	beq.n	8004cb6 <prvDeleteTCB+0x62>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	60fb      	str	r3, [r7, #12]
}
 8004cb0:	bf00      	nop
 8004cb2:	bf00      	nop
 8004cb4:	e7fd      	b.n	8004cb2 <prvDeleteTCB+0x5e>
	}
 8004cb6:	bf00      	nop
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004cf8 <prvResetNextTaskUnblockTime+0x38>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d104      	bne.n	8004cda <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8004cfc <prvResetNextTaskUnblockTime+0x3c>)
 8004cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cd8:	e008      	b.n	8004cec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cda:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <prvResetNextTaskUnblockTime+0x38>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	4a04      	ldr	r2, [pc, #16]	@ (8004cfc <prvResetNextTaskUnblockTime+0x3c>)
 8004cea:	6013      	str	r3, [r2, #0]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	20000e74 	.word	0x20000e74
 8004cfc:	20000edc 	.word	0x20000edc

08004d00 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d06:	4b0b      	ldr	r3, [pc, #44]	@ (8004d34 <xTaskGetSchedulerState+0x34>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d102      	bne.n	8004d14 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	607b      	str	r3, [r7, #4]
 8004d12:	e008      	b.n	8004d26 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d14:	4b08      	ldr	r3, [pc, #32]	@ (8004d38 <xTaskGetSchedulerState+0x38>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d102      	bne.n	8004d22 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	607b      	str	r3, [r7, #4]
 8004d20:	e001      	b.n	8004d26 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d22:	2300      	movs	r3, #0
 8004d24:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d26:	687b      	ldr	r3, [r7, #4]
	}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr
 8004d34:	20000ec8 	.word	0x20000ec8
 8004d38:	20000ee4 	.word	0x20000ee4

08004d3c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d051      	beq.n	8004df6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d56:	4b2a      	ldr	r3, [pc, #168]	@ (8004e00 <xTaskPriorityInherit+0xc4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d241      	bcs.n	8004de4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	699b      	ldr	r3, [r3, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	db06      	blt.n	8004d76 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d68:	4b25      	ldr	r3, [pc, #148]	@ (8004e00 <xTaskPriorityInherit+0xc4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6959      	ldr	r1, [r3, #20]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a1f      	ldr	r2, [pc, #124]	@ (8004e04 <xTaskPriorityInherit+0xc8>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	d122      	bne.n	8004dd4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fe f906 	bl	8002fa4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <xTaskPriorityInherit+0xc4>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004da6:	4b18      	ldr	r3, [pc, #96]	@ (8004e08 <xTaskPriorityInherit+0xcc>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d903      	bls.n	8004db6 <xTaskPriorityInherit+0x7a>
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4a15      	ldr	r2, [pc, #84]	@ (8004e08 <xTaskPriorityInherit+0xcc>)
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	4a10      	ldr	r2, [pc, #64]	@ (8004e04 <xTaskPriorityInherit+0xc8>)
 8004dc4:	441a      	add	r2, r3
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4619      	mov	r1, r3
 8004dcc:	4610      	mov	r0, r2
 8004dce:	f7fe f88c 	bl	8002eea <vListInsertEnd>
 8004dd2:	e004      	b.n	8004dde <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <xTaskPriorityInherit+0xc4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004dde:	2301      	movs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e008      	b.n	8004df6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004de8:	4b05      	ldr	r3, [pc, #20]	@ (8004e00 <xTaskPriorityInherit+0xc4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d201      	bcs.n	8004df6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004df6:	68fb      	ldr	r3, [r7, #12]
	}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	200009e8 	.word	0x200009e8
 8004e04:	200009ec 	.word	0x200009ec
 8004e08:	20000ec4 	.word	0x20000ec4

08004e0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d058      	beq.n	8004ed4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e22:	4b2f      	ldr	r3, [pc, #188]	@ (8004ee0 <xTaskPriorityDisinherit+0xd4>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d00b      	beq.n	8004e44 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	60fb      	str	r3, [r7, #12]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	60bb      	str	r3, [r7, #8]
}
 8004e5e:	bf00      	nop
 8004e60:	bf00      	nop
 8004e62:	e7fd      	b.n	8004e60 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d02c      	beq.n	8004ed4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d128      	bne.n	8004ed4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	3304      	adds	r3, #4
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe f88c 	bl	8002fa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e98:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ee4 <xTaskPriorityDisinherit+0xd8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d903      	bls.n	8004eb4 <xTaskPriorityDisinherit+0xa8>
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ee4 <xTaskPriorityDisinherit+0xd8>)
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	4a09      	ldr	r2, [pc, #36]	@ (8004ee8 <xTaskPriorityDisinherit+0xdc>)
 8004ec2:	441a      	add	r2, r3
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f7fe f80d 	bl	8002eea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004ed4:	697b      	ldr	r3, [r7, #20]
	}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	200009e8 	.word	0x200009e8
 8004ee4:	20000ec4 	.word	0x20000ec4
 8004ee8:	200009ec 	.word	0x200009ec

08004eec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004efa:	2301      	movs	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d06c      	beq.n	8004fde <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10b      	bne.n	8004f24 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60fb      	str	r3, [r7, #12]
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	e7fd      	b.n	8004f20 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d902      	bls.n	8004f34 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	61fb      	str	r3, [r7, #28]
 8004f32:	e002      	b.n	8004f3a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f38:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	69fa      	ldr	r2, [r7, #28]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d04c      	beq.n	8004fde <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d147      	bne.n	8004fde <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004f4e:	4b26      	ldr	r3, [pc, #152]	@ (8004fe8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d10b      	bne.n	8004f70 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60bb      	str	r3, [r7, #8]
}
 8004f6a:	bf00      	nop
 8004f6c:	bf00      	nop
 8004f6e:	e7fd      	b.n	8004f6c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	69fa      	ldr	r2, [r7, #28]
 8004f7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	db04      	blt.n	8004f8e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	6959      	ldr	r1, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4a13      	ldr	r2, [pc, #76]	@ (8004fec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004f9e:	4413      	add	r3, r2
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	d11c      	bne.n	8004fde <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f7fd fffb 	bl	8002fa4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d903      	bls.n	8004fc2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4a07      	ldr	r2, [pc, #28]	@ (8004fec <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004fd0:	441a      	add	r2, r3
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	4610      	mov	r0, r2
 8004fda:	f7fd ff86 	bl	8002eea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200009e8 	.word	0x200009e8
 8004fec:	200009ec 	.word	0x200009ec
 8004ff0:	20000ec4 	.word	0x20000ec4

08004ff4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004ff8:	4b07      	ldr	r3, [pc, #28]	@ (8005018 <pvTaskIncrementMutexHeldCount+0x24>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d004      	beq.n	800500a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <pvTaskIncrementMutexHeldCount+0x24>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005006:	3201      	adds	r2, #1
 8005008:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800500a:	4b03      	ldr	r3, [pc, #12]	@ (8005018 <pvTaskIncrementMutexHeldCount+0x24>)
 800500c:	681b      	ldr	r3, [r3, #0]
	}
 800500e:	4618      	mov	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr
 8005018:	200009e8 	.word	0x200009e8

0800501c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005026:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <prvAddCurrentTaskToDelayedList+0x90>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800502c:	4b20      	ldr	r3, [pc, #128]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7fd ffb6 	bl	8002fa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d10a      	bne.n	8005056 <prvAddCurrentTaskToDelayedList+0x3a>
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005046:	4b1a      	ldr	r3, [pc, #104]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3304      	adds	r3, #4
 800504c:	4619      	mov	r1, r3
 800504e:	4819      	ldr	r0, [pc, #100]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005050:	f7fd ff4b 	bl	8002eea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005054:	e026      	b.n	80050a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4413      	add	r3, r2
 800505c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800505e:	4b14      	ldr	r3, [pc, #80]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	429a      	cmp	r2, r3
 800506c:	d209      	bcs.n	8005082 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506e:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b0f      	ldr	r3, [pc, #60]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	3304      	adds	r3, #4
 8005078:	4619      	mov	r1, r3
 800507a:	4610      	mov	r0, r2
 800507c:	f7fd ff59 	bl	8002f32 <vListInsert>
}
 8005080:	e010      	b.n	80050a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005082:	4b0e      	ldr	r3, [pc, #56]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b0a      	ldr	r3, [pc, #40]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3304      	adds	r3, #4
 800508c:	4619      	mov	r1, r3
 800508e:	4610      	mov	r0, r2
 8005090:	f7fd ff4f 	bl	8002f32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005094:	4b0a      	ldr	r3, [pc, #40]	@ (80050c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d202      	bcs.n	80050a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800509e:	4a08      	ldr	r2, [pc, #32]	@ (80050c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6013      	str	r3, [r2, #0]
}
 80050a4:	bf00      	nop
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	20000ec0 	.word	0x20000ec0
 80050b0:	200009e8 	.word	0x200009e8
 80050b4:	20000ea8 	.word	0x20000ea8
 80050b8:	20000e78 	.word	0x20000e78
 80050bc:	20000e74 	.word	0x20000e74
 80050c0:	20000edc 	.word	0x20000edc

080050c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	@ 0x28
 80050c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050ca:	2300      	movs	r3, #0
 80050cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050ce:	f000 fb13 	bl	80056f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005148 <xTimerCreateTimerTask+0x84>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d021      	beq.n	800511e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050e2:	1d3a      	adds	r2, r7, #4
 80050e4:	f107 0108 	add.w	r1, r7, #8
 80050e8:	f107 030c 	add.w	r3, r7, #12
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fd feb5 	bl	8002e5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050f2:	6879      	ldr	r1, [r7, #4]
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	9202      	str	r2, [sp, #8]
 80050fa:	9301      	str	r3, [sp, #4]
 80050fc:	2302      	movs	r3, #2
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	2300      	movs	r3, #0
 8005102:	460a      	mov	r2, r1
 8005104:	4911      	ldr	r1, [pc, #68]	@ (800514c <xTimerCreateTimerTask+0x88>)
 8005106:	4812      	ldr	r0, [pc, #72]	@ (8005150 <xTimerCreateTimerTask+0x8c>)
 8005108:	f7fe ffa2 	bl	8004050 <xTaskCreateStatic>
 800510c:	4603      	mov	r3, r0
 800510e:	4a11      	ldr	r2, [pc, #68]	@ (8005154 <xTimerCreateTimerTask+0x90>)
 8005110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005112:	4b10      	ldr	r3, [pc, #64]	@ (8005154 <xTimerCreateTimerTask+0x90>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800511a:	2301      	movs	r3, #1
 800511c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10b      	bne.n	800513c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	613b      	str	r3, [r7, #16]
}
 8005136:	bf00      	nop
 8005138:	bf00      	nop
 800513a:	e7fd      	b.n	8005138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800513c:	697b      	ldr	r3, [r7, #20]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000f18 	.word	0x20000f18
 800514c:	080089f8 	.word	0x080089f8
 8005150:	08005291 	.word	0x08005291
 8005154:	20000f1c 	.word	0x20000f1c

08005158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	@ 0x28
 800515c:	af00      	add	r7, sp, #0
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
 8005164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10b      	bne.n	8005188 <xTimerGenericCommand+0x30>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	623b      	str	r3, [r7, #32]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005188:	4b19      	ldr	r3, [pc, #100]	@ (80051f0 <xTimerGenericCommand+0x98>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d02a      	beq.n	80051e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2b05      	cmp	r3, #5
 80051a0:	dc18      	bgt.n	80051d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051a2:	f7ff fdad 	bl	8004d00 <xTaskGetSchedulerState>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d109      	bne.n	80051c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051ac:	4b10      	ldr	r3, [pc, #64]	@ (80051f0 <xTimerGenericCommand+0x98>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	f107 0110 	add.w	r1, r7, #16
 80051b4:	2300      	movs	r3, #0
 80051b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051b8:	f7fe f8d2 	bl	8003360 <xQueueGenericSend>
 80051bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80051be:	e012      	b.n	80051e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051c0:	4b0b      	ldr	r3, [pc, #44]	@ (80051f0 <xTimerGenericCommand+0x98>)
 80051c2:	6818      	ldr	r0, [r3, #0]
 80051c4:	f107 0110 	add.w	r1, r7, #16
 80051c8:	2300      	movs	r3, #0
 80051ca:	2200      	movs	r2, #0
 80051cc:	f7fe f8c8 	bl	8003360 <xQueueGenericSend>
 80051d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80051d2:	e008      	b.n	80051e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051d4:	4b06      	ldr	r3, [pc, #24]	@ (80051f0 <xTimerGenericCommand+0x98>)
 80051d6:	6818      	ldr	r0, [r3, #0]
 80051d8:	f107 0110 	add.w	r1, r7, #16
 80051dc:	2300      	movs	r3, #0
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	f7fe f9c0 	bl	8003564 <xQueueGenericSendFromISR>
 80051e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3728      	adds	r7, #40	@ 0x28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000f18 	.word	0x20000f18

080051f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b088      	sub	sp, #32
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051fe:	4b23      	ldr	r3, [pc, #140]	@ (800528c <prvProcessExpiredTimer+0x98>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	3304      	adds	r3, #4
 800520c:	4618      	mov	r0, r3
 800520e:	f7fd fec9 	bl	8002fa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005218:	f003 0304 	and.w	r3, r3, #4
 800521c:	2b00      	cmp	r3, #0
 800521e:	d023      	beq.n	8005268 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	699a      	ldr	r2, [r3, #24]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	18d1      	adds	r1, r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	683a      	ldr	r2, [r7, #0]
 800522c:	6978      	ldr	r0, [r7, #20]
 800522e:	f000 f8d5 	bl	80053dc <prvInsertTimerInActiveList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d020      	beq.n	800527a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005238:	2300      	movs	r3, #0
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2300      	movs	r3, #0
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	2100      	movs	r1, #0
 8005242:	6978      	ldr	r0, [r7, #20]
 8005244:	f7ff ff88 	bl	8005158 <xTimerGenericCommand>
 8005248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d114      	bne.n	800527a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800526e:	f023 0301 	bic.w	r3, r3, #1
 8005272:	b2da      	uxtb	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	6978      	ldr	r0, [r7, #20]
 8005280:	4798      	blx	r3
}
 8005282:	bf00      	nop
 8005284:	3718      	adds	r7, #24
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	20000f10 	.word	0x20000f10

08005290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f859 	bl	8005354 <prvGetNextExpireTime>
 80052a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	4619      	mov	r1, r3
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f805 	bl	80052b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052ae:	f000 f8d7 	bl	8005460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052b2:	bf00      	nop
 80052b4:	e7f0      	b.n	8005298 <prvTimerTask+0x8>
	...

080052b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052c2:	f7ff f929 	bl	8004518 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052c6:	f107 0308 	add.w	r3, r7, #8
 80052ca:	4618      	mov	r0, r3
 80052cc:	f000 f866 	bl	800539c <prvSampleTimeNow>
 80052d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d130      	bne.n	800533a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <prvProcessTimerOrBlockTask+0x3c>
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d806      	bhi.n	80052f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052e6:	f7ff f925 	bl	8004534 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f7ff ff81 	bl	80051f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052f2:	e024      	b.n	800533e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d008      	beq.n	800530c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052fa:	4b13      	ldr	r3, [pc, #76]	@ (8005348 <prvProcessTimerOrBlockTask+0x90>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <prvProcessTimerOrBlockTask+0x50>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <prvProcessTimerOrBlockTask+0x52>
 8005308:	2300      	movs	r3, #0
 800530a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800530c:	4b0f      	ldr	r3, [pc, #60]	@ (800534c <prvProcessTimerOrBlockTask+0x94>)
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	687a      	ldr	r2, [r7, #4]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	683a      	ldr	r2, [r7, #0]
 8005318:	4619      	mov	r1, r3
 800531a:	f7fe fe65 	bl	8003fe8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800531e:	f7ff f909 	bl	8004534 <xTaskResumeAll>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10a      	bne.n	800533e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005328:	4b09      	ldr	r3, [pc, #36]	@ (8005350 <prvProcessTimerOrBlockTask+0x98>)
 800532a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800532e:	601a      	str	r2, [r3, #0]
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	f3bf 8f6f 	isb	sy
}
 8005338:	e001      	b.n	800533e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800533a:	f7ff f8fb 	bl	8004534 <xTaskResumeAll>
}
 800533e:	bf00      	nop
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	20000f14 	.word	0x20000f14
 800534c:	20000f18 	.word	0x20000f18
 8005350:	e000ed04 	.word	0xe000ed04

08005354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005354:	b480      	push	{r7}
 8005356:	b085      	sub	sp, #20
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800535c:	4b0e      	ldr	r3, [pc, #56]	@ (8005398 <prvGetNextExpireTime+0x44>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d101      	bne.n	800536a <prvGetNextExpireTime+0x16>
 8005366:	2201      	movs	r2, #1
 8005368:	e000      	b.n	800536c <prvGetNextExpireTime+0x18>
 800536a:	2200      	movs	r2, #0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d105      	bne.n	8005384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005378:	4b07      	ldr	r3, [pc, #28]	@ (8005398 <prvGetNextExpireTime+0x44>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]
 8005382:	e001      	b.n	8005388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005384:	2300      	movs	r3, #0
 8005386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005388:	68fb      	ldr	r3, [r7, #12]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	20000f10 	.word	0x20000f10

0800539c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053a4:	f7ff f964 	bl	8004670 <xTaskGetTickCount>
 80053a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053aa:	4b0b      	ldr	r3, [pc, #44]	@ (80053d8 <prvSampleTimeNow+0x3c>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d205      	bcs.n	80053c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053b4:	f000 f93a 	bl	800562c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	e002      	b.n	80053c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053c6:	4a04      	ldr	r2, [pc, #16]	@ (80053d8 <prvSampleTimeNow+0x3c>)
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053cc:	68fb      	ldr	r3, [r7, #12]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3710      	adds	r7, #16
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	20000f20 	.word	0x20000f20

080053dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053ea:	2300      	movs	r3, #0
 80053ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d812      	bhi.n	8005428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	1ad2      	subs	r2, r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	429a      	cmp	r2, r3
 800540e:	d302      	bcc.n	8005416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005410:	2301      	movs	r3, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e01b      	b.n	800544e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005416:	4b10      	ldr	r3, [pc, #64]	@ (8005458 <prvInsertTimerInActiveList+0x7c>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3304      	adds	r3, #4
 800541e:	4619      	mov	r1, r3
 8005420:	4610      	mov	r0, r2
 8005422:	f7fd fd86 	bl	8002f32 <vListInsert>
 8005426:	e012      	b.n	800544e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d206      	bcs.n	800543e <prvInsertTimerInActiveList+0x62>
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	429a      	cmp	r2, r3
 8005436:	d302      	bcc.n	800543e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
 800543c:	e007      	b.n	800544e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800543e:	4b07      	ldr	r3, [pc, #28]	@ (800545c <prvInsertTimerInActiveList+0x80>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3304      	adds	r3, #4
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fd fd72 	bl	8002f32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800544e:	697b      	ldr	r3, [r7, #20]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}
 8005458:	20000f14 	.word	0x20000f14
 800545c:	20000f10 	.word	0x20000f10

08005460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08e      	sub	sp, #56	@ 0x38
 8005464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005466:	e0ce      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	da19      	bge.n	80054a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800546e:	1d3b      	adds	r3, r7, #4
 8005470:	3304      	adds	r3, #4
 8005472:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005476:	2b00      	cmp	r3, #0
 8005478:	d10b      	bne.n	8005492 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800547a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547e:	f383 8811 	msr	BASEPRI, r3
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	f3bf 8f4f 	dsb	sy
 800548a:	61fb      	str	r3, [r7, #28]
}
 800548c:	bf00      	nop
 800548e:	bf00      	nop
 8005490:	e7fd      	b.n	800548e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005498:	6850      	ldr	r0, [r2, #4]
 800549a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800549c:	6892      	ldr	r2, [r2, #8]
 800549e:	4611      	mov	r1, r2
 80054a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f2c0 80ae 	blt.w	8005606 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d004      	beq.n	80054c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b8:	3304      	adds	r3, #4
 80054ba:	4618      	mov	r0, r3
 80054bc:	f7fd fd72 	bl	8002fa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054c0:	463b      	mov	r3, r7
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff6a 	bl	800539c <prvSampleTimeNow>
 80054c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b09      	cmp	r3, #9
 80054ce:	f200 8097 	bhi.w	8005600 <prvProcessReceivedCommands+0x1a0>
 80054d2:	a201      	add	r2, pc, #4	@ (adr r2, 80054d8 <prvProcessReceivedCommands+0x78>)
 80054d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d8:	08005501 	.word	0x08005501
 80054dc:	08005501 	.word	0x08005501
 80054e0:	08005501 	.word	0x08005501
 80054e4:	08005577 	.word	0x08005577
 80054e8:	0800558b 	.word	0x0800558b
 80054ec:	080055d7 	.word	0x080055d7
 80054f0:	08005501 	.word	0x08005501
 80054f4:	08005501 	.word	0x08005501
 80054f8:	08005577 	.word	0x08005577
 80054fc:	0800558b 	.word	0x0800558b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005506:	f043 0301 	orr.w	r3, r3, #1
 800550a:	b2da      	uxtb	r2, r3
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	18d1      	adds	r1, r2, r3
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005520:	f7ff ff5c 	bl	80053dc <prvInsertTimerInActiveList>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d06c      	beq.n	8005604 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b00      	cmp	r3, #0
 800553e:	d061      	beq.n	8005604 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005540:	68ba      	ldr	r2, [r7, #8]
 8005542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	441a      	add	r2, r3
 8005548:	2300      	movs	r3, #0
 800554a:	9300      	str	r3, [sp, #0]
 800554c:	2300      	movs	r3, #0
 800554e:	2100      	movs	r1, #0
 8005550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005552:	f7ff fe01 	bl	8005158 <xTimerGenericCommand>
 8005556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d152      	bne.n	8005604 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	61bb      	str	r3, [r7, #24]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005588:	e03d      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	b2da      	uxtb	r2, r3
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	617b      	str	r3, [r7, #20]
}
 80055bc:	bf00      	nop
 80055be:	bf00      	nop
 80055c0:	e7fd      	b.n	80055be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	18d1      	adds	r1, r2, r3
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055d0:	f7ff ff04 	bl	80053dc <prvInsertTimerInActiveList>
					break;
 80055d4:	e017      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055dc:	f003 0302 	and.w	r3, r3, #2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d103      	bne.n	80055ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80055e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055e6:	f000 fbe7 	bl	8005db8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055ea:	e00c      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055f2:	f023 0301 	bic.w	r3, r3, #1
 80055f6:	b2da      	uxtb	r2, r3
 80055f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055fe:	e002      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005600:	bf00      	nop
 8005602:	e000      	b.n	8005606 <prvProcessReceivedCommands+0x1a6>
					break;
 8005604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005606:	4b08      	ldr	r3, [pc, #32]	@ (8005628 <prvProcessReceivedCommands+0x1c8>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	1d39      	adds	r1, r7, #4
 800560c:	2200      	movs	r2, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe f8d6 	bl	80037c0 <xQueueReceive>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	f47f af26 	bne.w	8005468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800561c:	bf00      	nop
 800561e:	bf00      	nop
 8005620:	3730      	adds	r7, #48	@ 0x30
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000f18 	.word	0x20000f18

0800562c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b088      	sub	sp, #32
 8005630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005632:	e049      	b.n	80056c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005634:	4b2e      	ldr	r3, [pc, #184]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800563e:	4b2c      	ldr	r3, [pc, #176]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	3304      	adds	r3, #4
 800564c:	4618      	mov	r0, r3
 800564e:	f7fd fca9 	bl	8002fa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d02f      	beq.n	80056c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4413      	add	r3, r2
 8005670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	429a      	cmp	r2, r3
 8005678:	d90e      	bls.n	8005698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005686:	4b1a      	ldr	r3, [pc, #104]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3304      	adds	r3, #4
 800568e:	4619      	mov	r1, r3
 8005690:	4610      	mov	r0, r2
 8005692:	f7fd fc4e 	bl	8002f32 <vListInsert>
 8005696:	e017      	b.n	80056c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005698:	2300      	movs	r3, #0
 800569a:	9300      	str	r3, [sp, #0]
 800569c:	2300      	movs	r3, #0
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	2100      	movs	r1, #0
 80056a2:	68f8      	ldr	r0, [r7, #12]
 80056a4:	f7ff fd58 	bl	8005158 <xTimerGenericCommand>
 80056a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10b      	bne.n	80056c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	603b      	str	r3, [r7, #0]
}
 80056c2:	bf00      	nop
 80056c4:	bf00      	nop
 80056c6:	e7fd      	b.n	80056c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056c8:	4b09      	ldr	r3, [pc, #36]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1b0      	bne.n	8005634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056d2:	4b07      	ldr	r3, [pc, #28]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056d8:	4b06      	ldr	r3, [pc, #24]	@ (80056f4 <prvSwitchTimerLists+0xc8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a04      	ldr	r2, [pc, #16]	@ (80056f0 <prvSwitchTimerLists+0xc4>)
 80056de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056e0:	4a04      	ldr	r2, [pc, #16]	@ (80056f4 <prvSwitchTimerLists+0xc8>)
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	6013      	str	r3, [r2, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000f10 	.word	0x20000f10
 80056f4:	20000f14 	.word	0x20000f14

080056f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056fe:	f000 f96b 	bl	80059d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005702:	4b15      	ldr	r3, [pc, #84]	@ (8005758 <prvCheckForValidListAndQueue+0x60>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d120      	bne.n	800574c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800570a:	4814      	ldr	r0, [pc, #80]	@ (800575c <prvCheckForValidListAndQueue+0x64>)
 800570c:	f7fd fbc0 	bl	8002e90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005710:	4813      	ldr	r0, [pc, #76]	@ (8005760 <prvCheckForValidListAndQueue+0x68>)
 8005712:	f7fd fbbd 	bl	8002e90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005716:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <prvCheckForValidListAndQueue+0x6c>)
 8005718:	4a10      	ldr	r2, [pc, #64]	@ (800575c <prvCheckForValidListAndQueue+0x64>)
 800571a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800571c:	4b12      	ldr	r3, [pc, #72]	@ (8005768 <prvCheckForValidListAndQueue+0x70>)
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <prvCheckForValidListAndQueue+0x68>)
 8005720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005722:	2300      	movs	r3, #0
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	4b11      	ldr	r3, [pc, #68]	@ (800576c <prvCheckForValidListAndQueue+0x74>)
 8005728:	4a11      	ldr	r2, [pc, #68]	@ (8005770 <prvCheckForValidListAndQueue+0x78>)
 800572a:	2110      	movs	r1, #16
 800572c:	200a      	movs	r0, #10
 800572e:	f7fd fccd 	bl	80030cc <xQueueGenericCreateStatic>
 8005732:	4603      	mov	r3, r0
 8005734:	4a08      	ldr	r2, [pc, #32]	@ (8005758 <prvCheckForValidListAndQueue+0x60>)
 8005736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005738:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <prvCheckForValidListAndQueue+0x60>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d005      	beq.n	800574c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <prvCheckForValidListAndQueue+0x60>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	490b      	ldr	r1, [pc, #44]	@ (8005774 <prvCheckForValidListAndQueue+0x7c>)
 8005746:	4618      	mov	r0, r3
 8005748:	f7fe fbfa 	bl	8003f40 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800574c:	f000 f976 	bl	8005a3c <vPortExitCritical>
}
 8005750:	bf00      	nop
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000f18 	.word	0x20000f18
 800575c:	20000ee8 	.word	0x20000ee8
 8005760:	20000efc 	.word	0x20000efc
 8005764:	20000f10 	.word	0x20000f10
 8005768:	20000f14 	.word	0x20000f14
 800576c:	20000fc4 	.word	0x20000fc4
 8005770:	20000f24 	.word	0x20000f24
 8005774:	08008a00 	.word	0x08008a00

08005778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005778:	b480      	push	{r7}
 800577a:	b085      	sub	sp, #20
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3b04      	subs	r3, #4
 8005788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	3b04      	subs	r3, #4
 8005796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0201 	bic.w	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	3b04      	subs	r3, #4
 80057a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057a8:	4a0c      	ldr	r2, [pc, #48]	@ (80057dc <pxPortInitialiseStack+0x64>)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	3b14      	subs	r3, #20
 80057b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	3b04      	subs	r3, #4
 80057be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f06f 0202 	mvn.w	r2, #2
 80057c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3b20      	subs	r3, #32
 80057cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057ce:	68fb      	ldr	r3, [r7, #12]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	080057e1 	.word	0x080057e1

080057e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80057e0:	b480      	push	{r7}
 80057e2:	b085      	sub	sp, #20
 80057e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80057ea:	4b13      	ldr	r3, [pc, #76]	@ (8005838 <prvTaskExitError+0x58>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f2:	d00b      	beq.n	800580c <prvTaskExitError+0x2c>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	60fb      	str	r3, [r7, #12]
}
 8005806:	bf00      	nop
 8005808:	bf00      	nop
 800580a:	e7fd      	b.n	8005808 <prvTaskExitError+0x28>
	__asm volatile
 800580c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005810:	f383 8811 	msr	BASEPRI, r3
 8005814:	f3bf 8f6f 	isb	sy
 8005818:	f3bf 8f4f 	dsb	sy
 800581c:	60bb      	str	r3, [r7, #8]
}
 800581e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005820:	bf00      	nop
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d0fc      	beq.n	8005822 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	2000000c 	.word	0x2000000c
 800583c:	00000000 	.word	0x00000000

08005840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005840:	4b07      	ldr	r3, [pc, #28]	@ (8005860 <pxCurrentTCBConst2>)
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	6808      	ldr	r0, [r1, #0]
 8005846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800584a:	f380 8809 	msr	PSP, r0
 800584e:	f3bf 8f6f 	isb	sy
 8005852:	f04f 0000 	mov.w	r0, #0
 8005856:	f380 8811 	msr	BASEPRI, r0
 800585a:	4770      	bx	lr
 800585c:	f3af 8000 	nop.w

08005860 <pxCurrentTCBConst2>:
 8005860:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop

08005868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005868:	4808      	ldr	r0, [pc, #32]	@ (800588c <prvPortStartFirstTask+0x24>)
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	6800      	ldr	r0, [r0, #0]
 800586e:	f380 8808 	msr	MSP, r0
 8005872:	f04f 0000 	mov.w	r0, #0
 8005876:	f380 8814 	msr	CONTROL, r0
 800587a:	b662      	cpsie	i
 800587c:	b661      	cpsie	f
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	df00      	svc	0
 8005888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800588a:	bf00      	nop
 800588c:	e000ed08 	.word	0xe000ed08

08005890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005896:	4b47      	ldr	r3, [pc, #284]	@ (80059b4 <xPortStartScheduler+0x124>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a47      	ldr	r2, [pc, #284]	@ (80059b8 <xPortStartScheduler+0x128>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d10b      	bne.n	80058b8 <xPortStartScheduler+0x28>
	__asm volatile
 80058a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a4:	f383 8811 	msr	BASEPRI, r3
 80058a8:	f3bf 8f6f 	isb	sy
 80058ac:	f3bf 8f4f 	dsb	sy
 80058b0:	613b      	str	r3, [r7, #16]
}
 80058b2:	bf00      	nop
 80058b4:	bf00      	nop
 80058b6:	e7fd      	b.n	80058b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058b8:	4b3e      	ldr	r3, [pc, #248]	@ (80059b4 <xPortStartScheduler+0x124>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a3f      	ldr	r2, [pc, #252]	@ (80059bc <xPortStartScheduler+0x12c>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d10b      	bne.n	80058da <xPortStartScheduler+0x4a>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	60fb      	str	r3, [r7, #12]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80058da:	4b39      	ldr	r3, [pc, #228]	@ (80059c0 <xPortStartScheduler+0x130>)
 80058dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	b2db      	uxtb	r3, r3
 80058e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	22ff      	movs	r2, #255	@ 0xff
 80058ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058f4:	78fb      	ldrb	r3, [r7, #3]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	4b31      	ldr	r3, [pc, #196]	@ (80059c4 <xPortStartScheduler+0x134>)
 8005900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005902:	4b31      	ldr	r3, [pc, #196]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005904:	2207      	movs	r2, #7
 8005906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005908:	e009      	b.n	800591e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800590a:	4b2f      	ldr	r3, [pc, #188]	@ (80059c8 <xPortStartScheduler+0x138>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	3b01      	subs	r3, #1
 8005910:	4a2d      	ldr	r2, [pc, #180]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	b2db      	uxtb	r3, r3
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	b2db      	uxtb	r3, r3
 800591c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005926:	2b80      	cmp	r3, #128	@ 0x80
 8005928:	d0ef      	beq.n	800590a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800592a:	4b27      	ldr	r3, [pc, #156]	@ (80059c8 <xPortStartScheduler+0x138>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1c3 0307 	rsb	r3, r3, #7
 8005932:	2b04      	cmp	r3, #4
 8005934:	d00b      	beq.n	800594e <xPortStartScheduler+0xbe>
	__asm volatile
 8005936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593a:	f383 8811 	msr	BASEPRI, r3
 800593e:	f3bf 8f6f 	isb	sy
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	60bb      	str	r3, [r7, #8]
}
 8005948:	bf00      	nop
 800594a:	bf00      	nop
 800594c:	e7fd      	b.n	800594a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800594e:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	4a1c      	ldr	r2, [pc, #112]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005958:	4b1b      	ldr	r3, [pc, #108]	@ (80059c8 <xPortStartScheduler+0x138>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005960:	4a19      	ldr	r2, [pc, #100]	@ (80059c8 <xPortStartScheduler+0x138>)
 8005962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800596c:	4b17      	ldr	r3, [pc, #92]	@ (80059cc <xPortStartScheduler+0x13c>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a16      	ldr	r2, [pc, #88]	@ (80059cc <xPortStartScheduler+0x13c>)
 8005972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <xPortStartScheduler+0x13c>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4a13      	ldr	r2, [pc, #76]	@ (80059cc <xPortStartScheduler+0x13c>)
 800597e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005984:	f000 f8da 	bl	8005b3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005988:	4b11      	ldr	r3, [pc, #68]	@ (80059d0 <xPortStartScheduler+0x140>)
 800598a:	2200      	movs	r2, #0
 800598c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800598e:	f000 f8f9 	bl	8005b84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005992:	4b10      	ldr	r3, [pc, #64]	@ (80059d4 <xPortStartScheduler+0x144>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a0f      	ldr	r2, [pc, #60]	@ (80059d4 <xPortStartScheduler+0x144>)
 8005998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800599c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800599e:	f7ff ff63 	bl	8005868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059a2:	f7fe ff2f 	bl	8004804 <vTaskSwitchContext>
	prvTaskExitError();
 80059a6:	f7ff ff1b 	bl	80057e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3718      	adds	r7, #24
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	e000ed00 	.word	0xe000ed00
 80059b8:	410fc271 	.word	0x410fc271
 80059bc:	410fc270 	.word	0x410fc270
 80059c0:	e000e400 	.word	0xe000e400
 80059c4:	20001014 	.word	0x20001014
 80059c8:	20001018 	.word	0x20001018
 80059cc:	e000ed20 	.word	0xe000ed20
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	e000ef34 	.word	0xe000ef34

080059d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
	__asm volatile
 80059de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	f3bf 8f6f 	isb	sy
 80059ea:	f3bf 8f4f 	dsb	sy
 80059ee:	607b      	str	r3, [r7, #4]
}
 80059f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059f2:	4b10      	ldr	r3, [pc, #64]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3301      	adds	r3, #1
 80059f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059fc:	4b0d      	ldr	r3, [pc, #52]	@ (8005a34 <vPortEnterCritical+0x5c>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d110      	bne.n	8005a26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a04:	4b0c      	ldr	r3, [pc, #48]	@ (8005a38 <vPortEnterCritical+0x60>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d00b      	beq.n	8005a26 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	603b      	str	r3, [r7, #0]
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <vPortEnterCritical+0x4a>
	}
}
 8005a26:	bf00      	nop
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	2000000c 	.word	0x2000000c
 8005a38:	e000ed04 	.word	0xe000ed04

08005a3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a42:	4b12      	ldr	r3, [pc, #72]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <vPortExitCritical+0x26>
	__asm volatile
 8005a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a4e:	f383 8811 	msr	BASEPRI, r3
 8005a52:	f3bf 8f6f 	isb	sy
 8005a56:	f3bf 8f4f 	dsb	sy
 8005a5a:	607b      	str	r3, [r7, #4]
}
 8005a5c:	bf00      	nop
 8005a5e:	bf00      	nop
 8005a60:	e7fd      	b.n	8005a5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a62:	4b0a      	ldr	r3, [pc, #40]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	4a08      	ldr	r2, [pc, #32]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <vPortExitCritical+0x50>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d105      	bne.n	8005a80 <vPortExitCritical+0x44>
 8005a74:	2300      	movs	r3, #0
 8005a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
}
 8005a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr
 8005a8c:	2000000c 	.word	0x2000000c

08005a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a90:	f3ef 8009 	mrs	r0, PSP
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4b15      	ldr	r3, [pc, #84]	@ (8005af0 <pxCurrentTCBConst>)
 8005a9a:	681a      	ldr	r2, [r3, #0]
 8005a9c:	f01e 0f10 	tst.w	lr, #16
 8005aa0:	bf08      	it	eq
 8005aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aaa:	6010      	str	r0, [r2, #0]
 8005aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ab4:	f380 8811 	msr	BASEPRI, r0
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
 8005ac0:	f7fe fea0 	bl	8004804 <vTaskSwitchContext>
 8005ac4:	f04f 0000 	mov.w	r0, #0
 8005ac8:	f380 8811 	msr	BASEPRI, r0
 8005acc:	bc09      	pop	{r0, r3}
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	6808      	ldr	r0, [r1, #0]
 8005ad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ad6:	f01e 0f10 	tst.w	lr, #16
 8005ada:	bf08      	it	eq
 8005adc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ae0:	f380 8809 	msr	PSP, r0
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop
 8005aec:	f3af 8000 	nop.w

08005af0 <pxCurrentTCBConst>:
 8005af0:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005af4:	bf00      	nop
 8005af6:	bf00      	nop

08005af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	__asm volatile
 8005afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b02:	f383 8811 	msr	BASEPRI, r3
 8005b06:	f3bf 8f6f 	isb	sy
 8005b0a:	f3bf 8f4f 	dsb	sy
 8005b0e:	607b      	str	r3, [r7, #4]
}
 8005b10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b12:	f7fe fdbd 	bl	8004690 <xTaskIncrementTick>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d003      	beq.n	8005b24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <xPortSysTickHandler+0x40>)
 8005b1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b22:	601a      	str	r2, [r3, #0]
 8005b24:	2300      	movs	r3, #0
 8005b26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	f383 8811 	msr	BASEPRI, r3
}
 8005b2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b30:	bf00      	nop
 8005b32:	3708      	adds	r7, #8
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	e000ed04 	.word	0xe000ed04

08005b3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b40:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b46:	4b0b      	ldr	r3, [pc, #44]	@ (8005b74 <vPortSetupTimerInterrupt+0x38>)
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b78 <vPortSetupTimerInterrupt+0x3c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a0a      	ldr	r2, [pc, #40]	@ (8005b7c <vPortSetupTimerInterrupt+0x40>)
 8005b52:	fba2 2303 	umull	r2, r3, r2, r3
 8005b56:	099b      	lsrs	r3, r3, #6
 8005b58:	4a09      	ldr	r2, [pc, #36]	@ (8005b80 <vPortSetupTimerInterrupt+0x44>)
 8005b5a:	3b01      	subs	r3, #1
 8005b5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b5e:	4b04      	ldr	r3, [pc, #16]	@ (8005b70 <vPortSetupTimerInterrupt+0x34>)
 8005b60:	2207      	movs	r2, #7
 8005b62:	601a      	str	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	e000e010 	.word	0xe000e010
 8005b74:	e000e018 	.word	0xe000e018
 8005b78:	20000000 	.word	0x20000000
 8005b7c:	10624dd3 	.word	0x10624dd3
 8005b80:	e000e014 	.word	0xe000e014

08005b84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b94 <vPortEnableVFP+0x10>
 8005b88:	6801      	ldr	r1, [r0, #0]
 8005b8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b8e:	6001      	str	r1, [r0, #0]
 8005b90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b92:	bf00      	nop
 8005b94:	e000ed88 	.word	0xe000ed88

08005b98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b9e:	f3ef 8305 	mrs	r3, IPSR
 8005ba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b0f      	cmp	r3, #15
 8005ba8:	d915      	bls.n	8005bd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005baa:	4a18      	ldr	r2, [pc, #96]	@ (8005c0c <vPortValidateInterruptPriority+0x74>)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	4413      	add	r3, r2
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005bb4:	4b16      	ldr	r3, [pc, #88]	@ (8005c10 <vPortValidateInterruptPriority+0x78>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	7afa      	ldrb	r2, [r7, #11]
 8005bba:	429a      	cmp	r2, r3
 8005bbc:	d20b      	bcs.n	8005bd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	607b      	str	r3, [r7, #4]
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	e7fd      	b.n	8005bd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <vPortValidateInterruptPriority+0x7c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005bde:	4b0e      	ldr	r3, [pc, #56]	@ (8005c18 <vPortValidateInterruptPriority+0x80>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d90b      	bls.n	8005bfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <vPortValidateInterruptPriority+0x62>
	}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	e000e3f0 	.word	0xe000e3f0
 8005c10:	20001014 	.word	0x20001014
 8005c14:	e000ed0c 	.word	0xe000ed0c
 8005c18:	20001018 	.word	0x20001018

08005c1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b08a      	sub	sp, #40	@ 0x28
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c28:	f7fe fc76 	bl	8004518 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <pvPortMalloc+0x184>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d101      	bne.n	8005c38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c34:	f000 f924 	bl	8005e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c38:	4b5a      	ldr	r3, [pc, #360]	@ (8005da4 <pvPortMalloc+0x188>)
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f040 8095 	bne.w	8005d70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c4c:	2208      	movs	r2, #8
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d015      	beq.n	8005c8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	3308      	adds	r3, #8
 8005c66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f003 0307 	and.w	r3, r3, #7
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <pvPortMalloc+0x6e>
	__asm volatile
 8005c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c76:	f383 8811 	msr	BASEPRI, r3
 8005c7a:	f3bf 8f6f 	isb	sy
 8005c7e:	f3bf 8f4f 	dsb	sy
 8005c82:	617b      	str	r3, [r7, #20]
}
 8005c84:	bf00      	nop
 8005c86:	bf00      	nop
 8005c88:	e7fd      	b.n	8005c86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d06f      	beq.n	8005d70 <pvPortMalloc+0x154>
 8005c90:	4b45      	ldr	r3, [pc, #276]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d86a      	bhi.n	8005d70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c9a:	4b44      	ldr	r3, [pc, #272]	@ (8005dac <pvPortMalloc+0x190>)
 8005c9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c9e:	4b43      	ldr	r3, [pc, #268]	@ (8005dac <pvPortMalloc+0x190>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ca4:	e004      	b.n	8005cb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d903      	bls.n	8005cc2 <pvPortMalloc+0xa6>
 8005cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f1      	bne.n	8005ca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cc2:	4b37      	ldr	r3, [pc, #220]	@ (8005da0 <pvPortMalloc+0x184>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d051      	beq.n	8005d70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	685a      	ldr	r2, [r3, #4]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	2308      	movs	r3, #8
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	429a      	cmp	r2, r3
 8005cec:	d920      	bls.n	8005d30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d00b      	beq.n	8005d18 <pvPortMalloc+0xfc>
	__asm volatile
 8005d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d04:	f383 8811 	msr	BASEPRI, r3
 8005d08:	f3bf 8f6f 	isb	sy
 8005d0c:	f3bf 8f4f 	dsb	sy
 8005d10:	613b      	str	r3, [r7, #16]
}
 8005d12:	bf00      	nop
 8005d14:	bf00      	nop
 8005d16:	e7fd      	b.n	8005d14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	1ad2      	subs	r2, r2, r3
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d2a:	69b8      	ldr	r0, [r7, #24]
 8005d2c:	f000 f90a 	bl	8005f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d30:	4b1d      	ldr	r3, [pc, #116]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	4b1b      	ldr	r3, [pc, #108]	@ (8005db0 <pvPortMalloc+0x194>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d203      	bcs.n	8005d52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d4a:	4b17      	ldr	r3, [pc, #92]	@ (8005da8 <pvPortMalloc+0x18c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a18      	ldr	r2, [pc, #96]	@ (8005db0 <pvPortMalloc+0x194>)
 8005d50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	4b13      	ldr	r3, [pc, #76]	@ (8005da4 <pvPortMalloc+0x188>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d66:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <pvPortMalloc+0x198>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	4a11      	ldr	r2, [pc, #68]	@ (8005db4 <pvPortMalloc+0x198>)
 8005d6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d70:	f7fe fbe0 	bl	8004534 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	f003 0307 	and.w	r3, r3, #7
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <pvPortMalloc+0x17a>
	__asm volatile
 8005d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	60fb      	str	r3, [r7, #12]
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	e7fd      	b.n	8005d92 <pvPortMalloc+0x176>
	return pvReturn;
 8005d96:	69fb      	ldr	r3, [r7, #28]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3728      	adds	r7, #40	@ 0x28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20004c24 	.word	0x20004c24
 8005da4:	20004c38 	.word	0x20004c38
 8005da8:	20004c28 	.word	0x20004c28
 8005dac:	20004c1c 	.word	0x20004c1c
 8005db0:	20004c2c 	.word	0x20004c2c
 8005db4:	20004c30 	.word	0x20004c30

08005db8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d04f      	beq.n	8005e6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dca:	2308      	movs	r3, #8
 8005dcc:	425b      	negs	r3, r3
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	4b25      	ldr	r3, [pc, #148]	@ (8005e74 <vPortFree+0xbc>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4013      	ands	r3, r2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10b      	bne.n	8005dfe <vPortFree+0x46>
	__asm volatile
 8005de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dea:	f383 8811 	msr	BASEPRI, r3
 8005dee:	f3bf 8f6f 	isb	sy
 8005df2:	f3bf 8f4f 	dsb	sy
 8005df6:	60fb      	str	r3, [r7, #12]
}
 8005df8:	bf00      	nop
 8005dfa:	bf00      	nop
 8005dfc:	e7fd      	b.n	8005dfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00b      	beq.n	8005e1e <vPortFree+0x66>
	__asm volatile
 8005e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0a:	f383 8811 	msr	BASEPRI, r3
 8005e0e:	f3bf 8f6f 	isb	sy
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	60bb      	str	r3, [r7, #8]
}
 8005e18:	bf00      	nop
 8005e1a:	bf00      	nop
 8005e1c:	e7fd      	b.n	8005e1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	685a      	ldr	r2, [r3, #4]
 8005e22:	4b14      	ldr	r3, [pc, #80]	@ (8005e74 <vPortFree+0xbc>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4013      	ands	r3, r2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d01e      	beq.n	8005e6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11a      	bne.n	8005e6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <vPortFree+0xbc>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	43db      	mvns	r3, r3
 8005e3e:	401a      	ands	r2, r3
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e44:	f7fe fb68 	bl	8004518 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e78 <vPortFree+0xc0>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4413      	add	r3, r2
 8005e52:	4a09      	ldr	r2, [pc, #36]	@ (8005e78 <vPortFree+0xc0>)
 8005e54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e56:	6938      	ldr	r0, [r7, #16]
 8005e58:	f000 f874 	bl	8005f44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e5c:	4b07      	ldr	r3, [pc, #28]	@ (8005e7c <vPortFree+0xc4>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	3301      	adds	r3, #1
 8005e62:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <vPortFree+0xc4>)
 8005e64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e66:	f7fe fb65 	bl	8004534 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e6a:	bf00      	nop
 8005e6c:	3718      	adds	r7, #24
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20004c38 	.word	0x20004c38
 8005e78:	20004c28 	.word	0x20004c28
 8005e7c:	20004c34 	.word	0x20004c34

08005e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e8c:	4b27      	ldr	r3, [pc, #156]	@ (8005f2c <prvHeapInit+0xac>)
 8005e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	3307      	adds	r3, #7
 8005e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f023 0307 	bic.w	r3, r3, #7
 8005ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	4a1f      	ldr	r2, [pc, #124]	@ (8005f2c <prvHeapInit+0xac>)
 8005eb0:	4413      	add	r3, r2
 8005eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <prvHeapInit+0xb0>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <prvHeapInit+0xb0>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	4413      	add	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005ecc:	2208      	movs	r2, #8
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0307 	bic.w	r3, r3, #7
 8005eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	4a15      	ldr	r2, [pc, #84]	@ (8005f34 <prvHeapInit+0xb4>)
 8005ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ee2:	4b14      	ldr	r3, [pc, #80]	@ (8005f34 <prvHeapInit+0xb4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eea:	4b12      	ldr	r3, [pc, #72]	@ (8005f34 <prvHeapInit+0xb4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	1ad2      	subs	r2, r2, r3
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f00:	4b0c      	ldr	r3, [pc, #48]	@ (8005f34 <prvHeapInit+0xb4>)
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <prvHeapInit+0xb8>)
 8005f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4a09      	ldr	r2, [pc, #36]	@ (8005f3c <prvHeapInit+0xbc>)
 8005f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f18:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <prvHeapInit+0xc0>)
 8005f1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f1e:	601a      	str	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	3714      	adds	r7, #20
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	2000101c 	.word	0x2000101c
 8005f30:	20004c1c 	.word	0x20004c1c
 8005f34:	20004c24 	.word	0x20004c24
 8005f38:	20004c2c 	.word	0x20004c2c
 8005f3c:	20004c28 	.word	0x20004c28
 8005f40:	20004c38 	.word	0x20004c38

08005f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f4c:	4b28      	ldr	r3, [pc, #160]	@ (8005ff0 <prvInsertBlockIntoFreeList+0xac>)
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	e002      	b.n	8005f58 <prvInsertBlockIntoFreeList+0x14>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d8f7      	bhi.n	8005f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d108      	bne.n	8005f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685a      	ldr	r2, [r3, #4]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	441a      	add	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	441a      	add	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d118      	bne.n	8005fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	4b15      	ldr	r3, [pc, #84]	@ (8005ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d00d      	beq.n	8005fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	441a      	add	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	601a      	str	r2, [r3, #0]
 8005fc0:	e008      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ff4 <prvInsertBlockIntoFreeList+0xb0>)
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	e003      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d002      	beq.n	8005fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	20004c1c 	.word	0x20004c1c
 8005ff4:	20004c24 	.word	0x20004c24

08005ff8 <__cvt>:
 8005ff8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	ec57 6b10 	vmov	r6, r7, d0
 8006000:	2f00      	cmp	r7, #0
 8006002:	460c      	mov	r4, r1
 8006004:	4619      	mov	r1, r3
 8006006:	463b      	mov	r3, r7
 8006008:	bfbb      	ittet	lt
 800600a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800600e:	461f      	movlt	r7, r3
 8006010:	2300      	movge	r3, #0
 8006012:	232d      	movlt	r3, #45	@ 0x2d
 8006014:	700b      	strb	r3, [r1, #0]
 8006016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006018:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800601c:	4691      	mov	r9, r2
 800601e:	f023 0820 	bic.w	r8, r3, #32
 8006022:	bfbc      	itt	lt
 8006024:	4632      	movlt	r2, r6
 8006026:	4616      	movlt	r6, r2
 8006028:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800602c:	d005      	beq.n	800603a <__cvt+0x42>
 800602e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006032:	d100      	bne.n	8006036 <__cvt+0x3e>
 8006034:	3401      	adds	r4, #1
 8006036:	2102      	movs	r1, #2
 8006038:	e000      	b.n	800603c <__cvt+0x44>
 800603a:	2103      	movs	r1, #3
 800603c:	ab03      	add	r3, sp, #12
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	ab02      	add	r3, sp, #8
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	ec47 6b10 	vmov	d0, r6, r7
 8006048:	4653      	mov	r3, sl
 800604a:	4622      	mov	r2, r4
 800604c:	f000 fea0 	bl	8006d90 <_dtoa_r>
 8006050:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006054:	4605      	mov	r5, r0
 8006056:	d119      	bne.n	800608c <__cvt+0x94>
 8006058:	f019 0f01 	tst.w	r9, #1
 800605c:	d00e      	beq.n	800607c <__cvt+0x84>
 800605e:	eb00 0904 	add.w	r9, r0, r4
 8006062:	2200      	movs	r2, #0
 8006064:	2300      	movs	r3, #0
 8006066:	4630      	mov	r0, r6
 8006068:	4639      	mov	r1, r7
 800606a:	f7fa fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800606e:	b108      	cbz	r0, 8006074 <__cvt+0x7c>
 8006070:	f8cd 900c 	str.w	r9, [sp, #12]
 8006074:	2230      	movs	r2, #48	@ 0x30
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	454b      	cmp	r3, r9
 800607a:	d31e      	bcc.n	80060ba <__cvt+0xc2>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006080:	1b5b      	subs	r3, r3, r5
 8006082:	4628      	mov	r0, r5
 8006084:	6013      	str	r3, [r2, #0]
 8006086:	b004      	add	sp, #16
 8006088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800608c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006090:	eb00 0904 	add.w	r9, r0, r4
 8006094:	d1e5      	bne.n	8006062 <__cvt+0x6a>
 8006096:	7803      	ldrb	r3, [r0, #0]
 8006098:	2b30      	cmp	r3, #48	@ 0x30
 800609a:	d10a      	bne.n	80060b2 <__cvt+0xba>
 800609c:	2200      	movs	r2, #0
 800609e:	2300      	movs	r3, #0
 80060a0:	4630      	mov	r0, r6
 80060a2:	4639      	mov	r1, r7
 80060a4:	f7fa fd10 	bl	8000ac8 <__aeabi_dcmpeq>
 80060a8:	b918      	cbnz	r0, 80060b2 <__cvt+0xba>
 80060aa:	f1c4 0401 	rsb	r4, r4, #1
 80060ae:	f8ca 4000 	str.w	r4, [sl]
 80060b2:	f8da 3000 	ldr.w	r3, [sl]
 80060b6:	4499      	add	r9, r3
 80060b8:	e7d3      	b.n	8006062 <__cvt+0x6a>
 80060ba:	1c59      	adds	r1, r3, #1
 80060bc:	9103      	str	r1, [sp, #12]
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	e7d9      	b.n	8006076 <__cvt+0x7e>

080060c2 <__exponent>:
 80060c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80060c4:	2900      	cmp	r1, #0
 80060c6:	bfba      	itte	lt
 80060c8:	4249      	neglt	r1, r1
 80060ca:	232d      	movlt	r3, #45	@ 0x2d
 80060cc:	232b      	movge	r3, #43	@ 0x2b
 80060ce:	2909      	cmp	r1, #9
 80060d0:	7002      	strb	r2, [r0, #0]
 80060d2:	7043      	strb	r3, [r0, #1]
 80060d4:	dd29      	ble.n	800612a <__exponent+0x68>
 80060d6:	f10d 0307 	add.w	r3, sp, #7
 80060da:	461d      	mov	r5, r3
 80060dc:	270a      	movs	r7, #10
 80060de:	461a      	mov	r2, r3
 80060e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80060e4:	fb07 1416 	mls	r4, r7, r6, r1
 80060e8:	3430      	adds	r4, #48	@ 0x30
 80060ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80060ee:	460c      	mov	r4, r1
 80060f0:	2c63      	cmp	r4, #99	@ 0x63
 80060f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060f6:	4631      	mov	r1, r6
 80060f8:	dcf1      	bgt.n	80060de <__exponent+0x1c>
 80060fa:	3130      	adds	r1, #48	@ 0x30
 80060fc:	1e94      	subs	r4, r2, #2
 80060fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006102:	1c41      	adds	r1, r0, #1
 8006104:	4623      	mov	r3, r4
 8006106:	42ab      	cmp	r3, r5
 8006108:	d30a      	bcc.n	8006120 <__exponent+0x5e>
 800610a:	f10d 0309 	add.w	r3, sp, #9
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	42ac      	cmp	r4, r5
 8006112:	bf88      	it	hi
 8006114:	2300      	movhi	r3, #0
 8006116:	3302      	adds	r3, #2
 8006118:	4403      	add	r3, r0
 800611a:	1a18      	subs	r0, r3, r0
 800611c:	b003      	add	sp, #12
 800611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006120:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006124:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006128:	e7ed      	b.n	8006106 <__exponent+0x44>
 800612a:	2330      	movs	r3, #48	@ 0x30
 800612c:	3130      	adds	r1, #48	@ 0x30
 800612e:	7083      	strb	r3, [r0, #2]
 8006130:	70c1      	strb	r1, [r0, #3]
 8006132:	1d03      	adds	r3, r0, #4
 8006134:	e7f1      	b.n	800611a <__exponent+0x58>
	...

08006138 <_printf_float>:
 8006138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800613c:	b08d      	sub	sp, #52	@ 0x34
 800613e:	460c      	mov	r4, r1
 8006140:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006144:	4616      	mov	r6, r2
 8006146:	461f      	mov	r7, r3
 8006148:	4605      	mov	r5, r0
 800614a:	f000 fcbb 	bl	8006ac4 <_localeconv_r>
 800614e:	6803      	ldr	r3, [r0, #0]
 8006150:	9304      	str	r3, [sp, #16]
 8006152:	4618      	mov	r0, r3
 8006154:	f7fa f88c 	bl	8000270 <strlen>
 8006158:	2300      	movs	r3, #0
 800615a:	930a      	str	r3, [sp, #40]	@ 0x28
 800615c:	f8d8 3000 	ldr.w	r3, [r8]
 8006160:	9005      	str	r0, [sp, #20]
 8006162:	3307      	adds	r3, #7
 8006164:	f023 0307 	bic.w	r3, r3, #7
 8006168:	f103 0208 	add.w	r2, r3, #8
 800616c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006170:	f8d4 b000 	ldr.w	fp, [r4]
 8006174:	f8c8 2000 	str.w	r2, [r8]
 8006178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800617c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006180:	9307      	str	r3, [sp, #28]
 8006182:	f8cd 8018 	str.w	r8, [sp, #24]
 8006186:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800618a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800618e:	4b9c      	ldr	r3, [pc, #624]	@ (8006400 <_printf_float+0x2c8>)
 8006190:	f04f 32ff 	mov.w	r2, #4294967295
 8006194:	f7fa fcca 	bl	8000b2c <__aeabi_dcmpun>
 8006198:	bb70      	cbnz	r0, 80061f8 <_printf_float+0xc0>
 800619a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800619e:	4b98      	ldr	r3, [pc, #608]	@ (8006400 <_printf_float+0x2c8>)
 80061a0:	f04f 32ff 	mov.w	r2, #4294967295
 80061a4:	f7fa fca4 	bl	8000af0 <__aeabi_dcmple>
 80061a8:	bb30      	cbnz	r0, 80061f8 <_printf_float+0xc0>
 80061aa:	2200      	movs	r2, #0
 80061ac:	2300      	movs	r3, #0
 80061ae:	4640      	mov	r0, r8
 80061b0:	4649      	mov	r1, r9
 80061b2:	f7fa fc93 	bl	8000adc <__aeabi_dcmplt>
 80061b6:	b110      	cbz	r0, 80061be <_printf_float+0x86>
 80061b8:	232d      	movs	r3, #45	@ 0x2d
 80061ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061be:	4a91      	ldr	r2, [pc, #580]	@ (8006404 <_printf_float+0x2cc>)
 80061c0:	4b91      	ldr	r3, [pc, #580]	@ (8006408 <_printf_float+0x2d0>)
 80061c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80061c6:	bf94      	ite	ls
 80061c8:	4690      	movls	r8, r2
 80061ca:	4698      	movhi	r8, r3
 80061cc:	2303      	movs	r3, #3
 80061ce:	6123      	str	r3, [r4, #16]
 80061d0:	f02b 0304 	bic.w	r3, fp, #4
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	f04f 0900 	mov.w	r9, #0
 80061da:	9700      	str	r7, [sp, #0]
 80061dc:	4633      	mov	r3, r6
 80061de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80061e0:	4621      	mov	r1, r4
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f9d2 	bl	800658c <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	f040 808d 	bne.w	8006308 <_printf_float+0x1d0>
 80061ee:	f04f 30ff 	mov.w	r0, #4294967295
 80061f2:	b00d      	add	sp, #52	@ 0x34
 80061f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f8:	4642      	mov	r2, r8
 80061fa:	464b      	mov	r3, r9
 80061fc:	4640      	mov	r0, r8
 80061fe:	4649      	mov	r1, r9
 8006200:	f7fa fc94 	bl	8000b2c <__aeabi_dcmpun>
 8006204:	b140      	cbz	r0, 8006218 <_printf_float+0xe0>
 8006206:	464b      	mov	r3, r9
 8006208:	2b00      	cmp	r3, #0
 800620a:	bfbc      	itt	lt
 800620c:	232d      	movlt	r3, #45	@ 0x2d
 800620e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006212:	4a7e      	ldr	r2, [pc, #504]	@ (800640c <_printf_float+0x2d4>)
 8006214:	4b7e      	ldr	r3, [pc, #504]	@ (8006410 <_printf_float+0x2d8>)
 8006216:	e7d4      	b.n	80061c2 <_printf_float+0x8a>
 8006218:	6863      	ldr	r3, [r4, #4]
 800621a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800621e:	9206      	str	r2, [sp, #24]
 8006220:	1c5a      	adds	r2, r3, #1
 8006222:	d13b      	bne.n	800629c <_printf_float+0x164>
 8006224:	2306      	movs	r3, #6
 8006226:	6063      	str	r3, [r4, #4]
 8006228:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800622c:	2300      	movs	r3, #0
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	9303      	str	r3, [sp, #12]
 8006232:	ab0a      	add	r3, sp, #40	@ 0x28
 8006234:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006238:	ab09      	add	r3, sp, #36	@ 0x24
 800623a:	9300      	str	r3, [sp, #0]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	ec49 8b10 	vmov	d0, r8, r9
 8006242:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006246:	4628      	mov	r0, r5
 8006248:	f7ff fed6 	bl	8005ff8 <__cvt>
 800624c:	9b06      	ldr	r3, [sp, #24]
 800624e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006250:	2b47      	cmp	r3, #71	@ 0x47
 8006252:	4680      	mov	r8, r0
 8006254:	d129      	bne.n	80062aa <_printf_float+0x172>
 8006256:	1cc8      	adds	r0, r1, #3
 8006258:	db02      	blt.n	8006260 <_printf_float+0x128>
 800625a:	6863      	ldr	r3, [r4, #4]
 800625c:	4299      	cmp	r1, r3
 800625e:	dd41      	ble.n	80062e4 <_printf_float+0x1ac>
 8006260:	f1aa 0a02 	sub.w	sl, sl, #2
 8006264:	fa5f fa8a 	uxtb.w	sl, sl
 8006268:	3901      	subs	r1, #1
 800626a:	4652      	mov	r2, sl
 800626c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006270:	9109      	str	r1, [sp, #36]	@ 0x24
 8006272:	f7ff ff26 	bl	80060c2 <__exponent>
 8006276:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006278:	1813      	adds	r3, r2, r0
 800627a:	2a01      	cmp	r2, #1
 800627c:	4681      	mov	r9, r0
 800627e:	6123      	str	r3, [r4, #16]
 8006280:	dc02      	bgt.n	8006288 <_printf_float+0x150>
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	07d2      	lsls	r2, r2, #31
 8006286:	d501      	bpl.n	800628c <_printf_float+0x154>
 8006288:	3301      	adds	r3, #1
 800628a:	6123      	str	r3, [r4, #16]
 800628c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006290:	2b00      	cmp	r3, #0
 8006292:	d0a2      	beq.n	80061da <_printf_float+0xa2>
 8006294:	232d      	movs	r3, #45	@ 0x2d
 8006296:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800629a:	e79e      	b.n	80061da <_printf_float+0xa2>
 800629c:	9a06      	ldr	r2, [sp, #24]
 800629e:	2a47      	cmp	r2, #71	@ 0x47
 80062a0:	d1c2      	bne.n	8006228 <_printf_float+0xf0>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d1c0      	bne.n	8006228 <_printf_float+0xf0>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e7bd      	b.n	8006226 <_printf_float+0xee>
 80062aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062ae:	d9db      	bls.n	8006268 <_printf_float+0x130>
 80062b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80062b4:	d118      	bne.n	80062e8 <_printf_float+0x1b0>
 80062b6:	2900      	cmp	r1, #0
 80062b8:	6863      	ldr	r3, [r4, #4]
 80062ba:	dd0b      	ble.n	80062d4 <_printf_float+0x19c>
 80062bc:	6121      	str	r1, [r4, #16]
 80062be:	b913      	cbnz	r3, 80062c6 <_printf_float+0x18e>
 80062c0:	6822      	ldr	r2, [r4, #0]
 80062c2:	07d0      	lsls	r0, r2, #31
 80062c4:	d502      	bpl.n	80062cc <_printf_float+0x194>
 80062c6:	3301      	adds	r3, #1
 80062c8:	440b      	add	r3, r1
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80062ce:	f04f 0900 	mov.w	r9, #0
 80062d2:	e7db      	b.n	800628c <_printf_float+0x154>
 80062d4:	b913      	cbnz	r3, 80062dc <_printf_float+0x1a4>
 80062d6:	6822      	ldr	r2, [r4, #0]
 80062d8:	07d2      	lsls	r2, r2, #31
 80062da:	d501      	bpl.n	80062e0 <_printf_float+0x1a8>
 80062dc:	3302      	adds	r3, #2
 80062de:	e7f4      	b.n	80062ca <_printf_float+0x192>
 80062e0:	2301      	movs	r3, #1
 80062e2:	e7f2      	b.n	80062ca <_printf_float+0x192>
 80062e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80062e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062ea:	4299      	cmp	r1, r3
 80062ec:	db05      	blt.n	80062fa <_printf_float+0x1c2>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	6121      	str	r1, [r4, #16]
 80062f2:	07d8      	lsls	r0, r3, #31
 80062f4:	d5ea      	bpl.n	80062cc <_printf_float+0x194>
 80062f6:	1c4b      	adds	r3, r1, #1
 80062f8:	e7e7      	b.n	80062ca <_printf_float+0x192>
 80062fa:	2900      	cmp	r1, #0
 80062fc:	bfd4      	ite	le
 80062fe:	f1c1 0202 	rsble	r2, r1, #2
 8006302:	2201      	movgt	r2, #1
 8006304:	4413      	add	r3, r2
 8006306:	e7e0      	b.n	80062ca <_printf_float+0x192>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	055a      	lsls	r2, r3, #21
 800630c:	d407      	bmi.n	800631e <_printf_float+0x1e6>
 800630e:	6923      	ldr	r3, [r4, #16]
 8006310:	4642      	mov	r2, r8
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	d12b      	bne.n	8006374 <_printf_float+0x23c>
 800631c:	e767      	b.n	80061ee <_printf_float+0xb6>
 800631e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006322:	f240 80dd 	bls.w	80064e0 <_printf_float+0x3a8>
 8006326:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800632a:	2200      	movs	r2, #0
 800632c:	2300      	movs	r3, #0
 800632e:	f7fa fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 8006332:	2800      	cmp	r0, #0
 8006334:	d033      	beq.n	800639e <_printf_float+0x266>
 8006336:	4a37      	ldr	r2, [pc, #220]	@ (8006414 <_printf_float+0x2dc>)
 8006338:	2301      	movs	r3, #1
 800633a:	4631      	mov	r1, r6
 800633c:	4628      	mov	r0, r5
 800633e:	47b8      	blx	r7
 8006340:	3001      	adds	r0, #1
 8006342:	f43f af54 	beq.w	80061ee <_printf_float+0xb6>
 8006346:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800634a:	4543      	cmp	r3, r8
 800634c:	db02      	blt.n	8006354 <_printf_float+0x21c>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	07d8      	lsls	r0, r3, #31
 8006352:	d50f      	bpl.n	8006374 <_printf_float+0x23c>
 8006354:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f af45 	beq.w	80061ee <_printf_float+0xb6>
 8006364:	f04f 0900 	mov.w	r9, #0
 8006368:	f108 38ff 	add.w	r8, r8, #4294967295
 800636c:	f104 0a1a 	add.w	sl, r4, #26
 8006370:	45c8      	cmp	r8, r9
 8006372:	dc09      	bgt.n	8006388 <_printf_float+0x250>
 8006374:	6823      	ldr	r3, [r4, #0]
 8006376:	079b      	lsls	r3, r3, #30
 8006378:	f100 8103 	bmi.w	8006582 <_printf_float+0x44a>
 800637c:	68e0      	ldr	r0, [r4, #12]
 800637e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006380:	4298      	cmp	r0, r3
 8006382:	bfb8      	it	lt
 8006384:	4618      	movlt	r0, r3
 8006386:	e734      	b.n	80061f2 <_printf_float+0xba>
 8006388:	2301      	movs	r3, #1
 800638a:	4652      	mov	r2, sl
 800638c:	4631      	mov	r1, r6
 800638e:	4628      	mov	r0, r5
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	f43f af2b 	beq.w	80061ee <_printf_float+0xb6>
 8006398:	f109 0901 	add.w	r9, r9, #1
 800639c:	e7e8      	b.n	8006370 <_printf_float+0x238>
 800639e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	dc39      	bgt.n	8006418 <_printf_float+0x2e0>
 80063a4:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <_printf_float+0x2dc>)
 80063a6:	2301      	movs	r3, #1
 80063a8:	4631      	mov	r1, r6
 80063aa:	4628      	mov	r0, r5
 80063ac:	47b8      	blx	r7
 80063ae:	3001      	adds	r0, #1
 80063b0:	f43f af1d 	beq.w	80061ee <_printf_float+0xb6>
 80063b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80063b8:	ea59 0303 	orrs.w	r3, r9, r3
 80063bc:	d102      	bne.n	80063c4 <_printf_float+0x28c>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	07d9      	lsls	r1, r3, #31
 80063c2:	d5d7      	bpl.n	8006374 <_printf_float+0x23c>
 80063c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f af0d 	beq.w	80061ee <_printf_float+0xb6>
 80063d4:	f04f 0a00 	mov.w	sl, #0
 80063d8:	f104 0b1a 	add.w	fp, r4, #26
 80063dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063de:	425b      	negs	r3, r3
 80063e0:	4553      	cmp	r3, sl
 80063e2:	dc01      	bgt.n	80063e8 <_printf_float+0x2b0>
 80063e4:	464b      	mov	r3, r9
 80063e6:	e793      	b.n	8006310 <_printf_float+0x1d8>
 80063e8:	2301      	movs	r3, #1
 80063ea:	465a      	mov	r2, fp
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	f43f aefb 	beq.w	80061ee <_printf_float+0xb6>
 80063f8:	f10a 0a01 	add.w	sl, sl, #1
 80063fc:	e7ee      	b.n	80063dc <_printf_float+0x2a4>
 80063fe:	bf00      	nop
 8006400:	7fefffff 	.word	0x7fefffff
 8006404:	08008a9c 	.word	0x08008a9c
 8006408:	08008aa0 	.word	0x08008aa0
 800640c:	08008aa4 	.word	0x08008aa4
 8006410:	08008aa8 	.word	0x08008aa8
 8006414:	08008aac 	.word	0x08008aac
 8006418:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800641a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800641e:	4553      	cmp	r3, sl
 8006420:	bfa8      	it	ge
 8006422:	4653      	movge	r3, sl
 8006424:	2b00      	cmp	r3, #0
 8006426:	4699      	mov	r9, r3
 8006428:	dc36      	bgt.n	8006498 <_printf_float+0x360>
 800642a:	f04f 0b00 	mov.w	fp, #0
 800642e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006432:	f104 021a 	add.w	r2, r4, #26
 8006436:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006438:	9306      	str	r3, [sp, #24]
 800643a:	eba3 0309 	sub.w	r3, r3, r9
 800643e:	455b      	cmp	r3, fp
 8006440:	dc31      	bgt.n	80064a6 <_printf_float+0x36e>
 8006442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006444:	459a      	cmp	sl, r3
 8006446:	dc3a      	bgt.n	80064be <_printf_float+0x386>
 8006448:	6823      	ldr	r3, [r4, #0]
 800644a:	07da      	lsls	r2, r3, #31
 800644c:	d437      	bmi.n	80064be <_printf_float+0x386>
 800644e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006450:	ebaa 0903 	sub.w	r9, sl, r3
 8006454:	9b06      	ldr	r3, [sp, #24]
 8006456:	ebaa 0303 	sub.w	r3, sl, r3
 800645a:	4599      	cmp	r9, r3
 800645c:	bfa8      	it	ge
 800645e:	4699      	movge	r9, r3
 8006460:	f1b9 0f00 	cmp.w	r9, #0
 8006464:	dc33      	bgt.n	80064ce <_printf_float+0x396>
 8006466:	f04f 0800 	mov.w	r8, #0
 800646a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800646e:	f104 0b1a 	add.w	fp, r4, #26
 8006472:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006474:	ebaa 0303 	sub.w	r3, sl, r3
 8006478:	eba3 0309 	sub.w	r3, r3, r9
 800647c:	4543      	cmp	r3, r8
 800647e:	f77f af79 	ble.w	8006374 <_printf_float+0x23c>
 8006482:	2301      	movs	r3, #1
 8006484:	465a      	mov	r2, fp
 8006486:	4631      	mov	r1, r6
 8006488:	4628      	mov	r0, r5
 800648a:	47b8      	blx	r7
 800648c:	3001      	adds	r0, #1
 800648e:	f43f aeae 	beq.w	80061ee <_printf_float+0xb6>
 8006492:	f108 0801 	add.w	r8, r8, #1
 8006496:	e7ec      	b.n	8006472 <_printf_float+0x33a>
 8006498:	4642      	mov	r2, r8
 800649a:	4631      	mov	r1, r6
 800649c:	4628      	mov	r0, r5
 800649e:	47b8      	blx	r7
 80064a0:	3001      	adds	r0, #1
 80064a2:	d1c2      	bne.n	800642a <_printf_float+0x2f2>
 80064a4:	e6a3      	b.n	80061ee <_printf_float+0xb6>
 80064a6:	2301      	movs	r3, #1
 80064a8:	4631      	mov	r1, r6
 80064aa:	4628      	mov	r0, r5
 80064ac:	9206      	str	r2, [sp, #24]
 80064ae:	47b8      	blx	r7
 80064b0:	3001      	adds	r0, #1
 80064b2:	f43f ae9c 	beq.w	80061ee <_printf_float+0xb6>
 80064b6:	9a06      	ldr	r2, [sp, #24]
 80064b8:	f10b 0b01 	add.w	fp, fp, #1
 80064bc:	e7bb      	b.n	8006436 <_printf_float+0x2fe>
 80064be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	47b8      	blx	r7
 80064c8:	3001      	adds	r0, #1
 80064ca:	d1c0      	bne.n	800644e <_printf_float+0x316>
 80064cc:	e68f      	b.n	80061ee <_printf_float+0xb6>
 80064ce:	9a06      	ldr	r2, [sp, #24]
 80064d0:	464b      	mov	r3, r9
 80064d2:	4442      	add	r2, r8
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	d1c3      	bne.n	8006466 <_printf_float+0x32e>
 80064de:	e686      	b.n	80061ee <_printf_float+0xb6>
 80064e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80064e4:	f1ba 0f01 	cmp.w	sl, #1
 80064e8:	dc01      	bgt.n	80064ee <_printf_float+0x3b6>
 80064ea:	07db      	lsls	r3, r3, #31
 80064ec:	d536      	bpl.n	800655c <_printf_float+0x424>
 80064ee:	2301      	movs	r3, #1
 80064f0:	4642      	mov	r2, r8
 80064f2:	4631      	mov	r1, r6
 80064f4:	4628      	mov	r0, r5
 80064f6:	47b8      	blx	r7
 80064f8:	3001      	adds	r0, #1
 80064fa:	f43f ae78 	beq.w	80061ee <_printf_float+0xb6>
 80064fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f ae70 	beq.w	80061ee <_printf_float+0xb6>
 800650e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006512:	2200      	movs	r2, #0
 8006514:	2300      	movs	r3, #0
 8006516:	f10a 3aff 	add.w	sl, sl, #4294967295
 800651a:	f7fa fad5 	bl	8000ac8 <__aeabi_dcmpeq>
 800651e:	b9c0      	cbnz	r0, 8006552 <_printf_float+0x41a>
 8006520:	4653      	mov	r3, sl
 8006522:	f108 0201 	add.w	r2, r8, #1
 8006526:	4631      	mov	r1, r6
 8006528:	4628      	mov	r0, r5
 800652a:	47b8      	blx	r7
 800652c:	3001      	adds	r0, #1
 800652e:	d10c      	bne.n	800654a <_printf_float+0x412>
 8006530:	e65d      	b.n	80061ee <_printf_float+0xb6>
 8006532:	2301      	movs	r3, #1
 8006534:	465a      	mov	r2, fp
 8006536:	4631      	mov	r1, r6
 8006538:	4628      	mov	r0, r5
 800653a:	47b8      	blx	r7
 800653c:	3001      	adds	r0, #1
 800653e:	f43f ae56 	beq.w	80061ee <_printf_float+0xb6>
 8006542:	f108 0801 	add.w	r8, r8, #1
 8006546:	45d0      	cmp	r8, sl
 8006548:	dbf3      	blt.n	8006532 <_printf_float+0x3fa>
 800654a:	464b      	mov	r3, r9
 800654c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006550:	e6df      	b.n	8006312 <_printf_float+0x1da>
 8006552:	f04f 0800 	mov.w	r8, #0
 8006556:	f104 0b1a 	add.w	fp, r4, #26
 800655a:	e7f4      	b.n	8006546 <_printf_float+0x40e>
 800655c:	2301      	movs	r3, #1
 800655e:	4642      	mov	r2, r8
 8006560:	e7e1      	b.n	8006526 <_printf_float+0x3ee>
 8006562:	2301      	movs	r3, #1
 8006564:	464a      	mov	r2, r9
 8006566:	4631      	mov	r1, r6
 8006568:	4628      	mov	r0, r5
 800656a:	47b8      	blx	r7
 800656c:	3001      	adds	r0, #1
 800656e:	f43f ae3e 	beq.w	80061ee <_printf_float+0xb6>
 8006572:	f108 0801 	add.w	r8, r8, #1
 8006576:	68e3      	ldr	r3, [r4, #12]
 8006578:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800657a:	1a5b      	subs	r3, r3, r1
 800657c:	4543      	cmp	r3, r8
 800657e:	dcf0      	bgt.n	8006562 <_printf_float+0x42a>
 8006580:	e6fc      	b.n	800637c <_printf_float+0x244>
 8006582:	f04f 0800 	mov.w	r8, #0
 8006586:	f104 0919 	add.w	r9, r4, #25
 800658a:	e7f4      	b.n	8006576 <_printf_float+0x43e>

0800658c <_printf_common>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	4616      	mov	r6, r2
 8006592:	4698      	mov	r8, r3
 8006594:	688a      	ldr	r2, [r1, #8]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800659c:	4293      	cmp	r3, r2
 800659e:	bfb8      	it	lt
 80065a0:	4613      	movlt	r3, r2
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80065a8:	4607      	mov	r7, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b10a      	cbz	r2, 80065b2 <_printf_common+0x26>
 80065ae:	3301      	adds	r3, #1
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	6833      	ldrmi	r3, [r6, #0]
 80065ba:	3302      	addmi	r3, #2
 80065bc:	6033      	strmi	r3, [r6, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	f015 0506 	ands.w	r5, r5, #6
 80065c4:	d106      	bne.n	80065d4 <_printf_common+0x48>
 80065c6:	f104 0a19 	add.w	sl, r4, #25
 80065ca:	68e3      	ldr	r3, [r4, #12]
 80065cc:	6832      	ldr	r2, [r6, #0]
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc26      	bgt.n	8006622 <_printf_common+0x96>
 80065d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065d8:	6822      	ldr	r2, [r4, #0]
 80065da:	3b00      	subs	r3, #0
 80065dc:	bf18      	it	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	0692      	lsls	r2, r2, #26
 80065e2:	d42b      	bmi.n	800663c <_printf_common+0xb0>
 80065e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065e8:	4641      	mov	r1, r8
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c8      	blx	r9
 80065ee:	3001      	adds	r0, #1
 80065f0:	d01e      	beq.n	8006630 <_printf_common+0xa4>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	f003 0306 	and.w	r3, r3, #6
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	bf02      	ittt	eq
 80065fe:	68e5      	ldreq	r5, [r4, #12]
 8006600:	6833      	ldreq	r3, [r6, #0]
 8006602:	1aed      	subeq	r5, r5, r3
 8006604:	68a3      	ldr	r3, [r4, #8]
 8006606:	bf0c      	ite	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	2500      	movne	r5, #0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfc4      	itt	gt
 8006612:	1a9b      	subgt	r3, r3, r2
 8006614:	18ed      	addgt	r5, r5, r3
 8006616:	2600      	movs	r6, #0
 8006618:	341a      	adds	r4, #26
 800661a:	42b5      	cmp	r5, r6
 800661c:	d11a      	bne.n	8006654 <_printf_common+0xc8>
 800661e:	2000      	movs	r0, #0
 8006620:	e008      	b.n	8006634 <_printf_common+0xa8>
 8006622:	2301      	movs	r3, #1
 8006624:	4652      	mov	r2, sl
 8006626:	4641      	mov	r1, r8
 8006628:	4638      	mov	r0, r7
 800662a:	47c8      	blx	r9
 800662c:	3001      	adds	r0, #1
 800662e:	d103      	bne.n	8006638 <_printf_common+0xac>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	3501      	adds	r5, #1
 800663a:	e7c6      	b.n	80065ca <_printf_common+0x3e>
 800663c:	18e1      	adds	r1, r4, r3
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	2030      	movs	r0, #48	@ 0x30
 8006642:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006646:	4422      	add	r2, r4
 8006648:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800664c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006650:	3302      	adds	r3, #2
 8006652:	e7c7      	b.n	80065e4 <_printf_common+0x58>
 8006654:	2301      	movs	r3, #1
 8006656:	4622      	mov	r2, r4
 8006658:	4641      	mov	r1, r8
 800665a:	4638      	mov	r0, r7
 800665c:	47c8      	blx	r9
 800665e:	3001      	adds	r0, #1
 8006660:	d0e6      	beq.n	8006630 <_printf_common+0xa4>
 8006662:	3601      	adds	r6, #1
 8006664:	e7d9      	b.n	800661a <_printf_common+0x8e>
	...

08006668 <_printf_i>:
 8006668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	7e0f      	ldrb	r7, [r1, #24]
 800666e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006670:	2f78      	cmp	r7, #120	@ 0x78
 8006672:	4691      	mov	r9, r2
 8006674:	4680      	mov	r8, r0
 8006676:	460c      	mov	r4, r1
 8006678:	469a      	mov	sl, r3
 800667a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800667e:	d807      	bhi.n	8006690 <_printf_i+0x28>
 8006680:	2f62      	cmp	r7, #98	@ 0x62
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x32>
 8006684:	2f00      	cmp	r7, #0
 8006686:	f000 80d2 	beq.w	800682e <_printf_i+0x1c6>
 800668a:	2f58      	cmp	r7, #88	@ 0x58
 800668c:	f000 80b9 	beq.w	8006802 <_printf_i+0x19a>
 8006690:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006694:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006698:	e03a      	b.n	8006710 <_printf_i+0xa8>
 800669a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800669e:	2b15      	cmp	r3, #21
 80066a0:	d8f6      	bhi.n	8006690 <_printf_i+0x28>
 80066a2:	a101      	add	r1, pc, #4	@ (adr r1, 80066a8 <_printf_i+0x40>)
 80066a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006691 	.word	0x08006691
 80066b4:	08006691 	.word	0x08006691
 80066b8:	08006691 	.word	0x08006691
 80066bc:	08006691 	.word	0x08006691
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006691 	.word	0x08006691
 80066c8:	08006691 	.word	0x08006691
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	08006815 	.word	0x08006815
 80066d8:	0800673f 	.word	0x0800673f
 80066dc:	080067cf 	.word	0x080067cf
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	08006837 	.word	0x08006837
 80066ec:	08006691 	.word	0x08006691
 80066f0:	0800673f 	.word	0x0800673f
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	080067d7 	.word	0x080067d7
 8006700:	6833      	ldr	r3, [r6, #0]
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6032      	str	r2, [r6, #0]
 8006708:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800670c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006710:	2301      	movs	r3, #1
 8006712:	e09d      	b.n	8006850 <_printf_i+0x1e8>
 8006714:	6833      	ldr	r3, [r6, #0]
 8006716:	6820      	ldr	r0, [r4, #0]
 8006718:	1d19      	adds	r1, r3, #4
 800671a:	6031      	str	r1, [r6, #0]
 800671c:	0606      	lsls	r6, r0, #24
 800671e:	d501      	bpl.n	8006724 <_printf_i+0xbc>
 8006720:	681d      	ldr	r5, [r3, #0]
 8006722:	e003      	b.n	800672c <_printf_i+0xc4>
 8006724:	0645      	lsls	r5, r0, #25
 8006726:	d5fb      	bpl.n	8006720 <_printf_i+0xb8>
 8006728:	f9b3 5000 	ldrsh.w	r5, [r3]
 800672c:	2d00      	cmp	r5, #0
 800672e:	da03      	bge.n	8006738 <_printf_i+0xd0>
 8006730:	232d      	movs	r3, #45	@ 0x2d
 8006732:	426d      	negs	r5, r5
 8006734:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006738:	4859      	ldr	r0, [pc, #356]	@ (80068a0 <_printf_i+0x238>)
 800673a:	230a      	movs	r3, #10
 800673c:	e011      	b.n	8006762 <_printf_i+0xfa>
 800673e:	6821      	ldr	r1, [r4, #0]
 8006740:	6833      	ldr	r3, [r6, #0]
 8006742:	0608      	lsls	r0, r1, #24
 8006744:	f853 5b04 	ldr.w	r5, [r3], #4
 8006748:	d402      	bmi.n	8006750 <_printf_i+0xe8>
 800674a:	0649      	lsls	r1, r1, #25
 800674c:	bf48      	it	mi
 800674e:	b2ad      	uxthmi	r5, r5
 8006750:	2f6f      	cmp	r7, #111	@ 0x6f
 8006752:	4853      	ldr	r0, [pc, #332]	@ (80068a0 <_printf_i+0x238>)
 8006754:	6033      	str	r3, [r6, #0]
 8006756:	bf14      	ite	ne
 8006758:	230a      	movne	r3, #10
 800675a:	2308      	moveq	r3, #8
 800675c:	2100      	movs	r1, #0
 800675e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006762:	6866      	ldr	r6, [r4, #4]
 8006764:	60a6      	str	r6, [r4, #8]
 8006766:	2e00      	cmp	r6, #0
 8006768:	bfa2      	ittt	ge
 800676a:	6821      	ldrge	r1, [r4, #0]
 800676c:	f021 0104 	bicge.w	r1, r1, #4
 8006770:	6021      	strge	r1, [r4, #0]
 8006772:	b90d      	cbnz	r5, 8006778 <_printf_i+0x110>
 8006774:	2e00      	cmp	r6, #0
 8006776:	d04b      	beq.n	8006810 <_printf_i+0x1a8>
 8006778:	4616      	mov	r6, r2
 800677a:	fbb5 f1f3 	udiv	r1, r5, r3
 800677e:	fb03 5711 	mls	r7, r3, r1, r5
 8006782:	5dc7      	ldrb	r7, [r0, r7]
 8006784:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006788:	462f      	mov	r7, r5
 800678a:	42bb      	cmp	r3, r7
 800678c:	460d      	mov	r5, r1
 800678e:	d9f4      	bls.n	800677a <_printf_i+0x112>
 8006790:	2b08      	cmp	r3, #8
 8006792:	d10b      	bne.n	80067ac <_printf_i+0x144>
 8006794:	6823      	ldr	r3, [r4, #0]
 8006796:	07df      	lsls	r7, r3, #31
 8006798:	d508      	bpl.n	80067ac <_printf_i+0x144>
 800679a:	6923      	ldr	r3, [r4, #16]
 800679c:	6861      	ldr	r1, [r4, #4]
 800679e:	4299      	cmp	r1, r3
 80067a0:	bfde      	ittt	le
 80067a2:	2330      	movle	r3, #48	@ 0x30
 80067a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067ac:	1b92      	subs	r2, r2, r6
 80067ae:	6122      	str	r2, [r4, #16]
 80067b0:	f8cd a000 	str.w	sl, [sp]
 80067b4:	464b      	mov	r3, r9
 80067b6:	aa03      	add	r2, sp, #12
 80067b8:	4621      	mov	r1, r4
 80067ba:	4640      	mov	r0, r8
 80067bc:	f7ff fee6 	bl	800658c <_printf_common>
 80067c0:	3001      	adds	r0, #1
 80067c2:	d14a      	bne.n	800685a <_printf_i+0x1f2>
 80067c4:	f04f 30ff 	mov.w	r0, #4294967295
 80067c8:	b004      	add	sp, #16
 80067ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f043 0320 	orr.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	4833      	ldr	r0, [pc, #204]	@ (80068a4 <_printf_i+0x23c>)
 80067d8:	2778      	movs	r7, #120	@ 0x78
 80067da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	6831      	ldr	r1, [r6, #0]
 80067e2:	061f      	lsls	r7, r3, #24
 80067e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80067e8:	d402      	bmi.n	80067f0 <_printf_i+0x188>
 80067ea:	065f      	lsls	r7, r3, #25
 80067ec:	bf48      	it	mi
 80067ee:	b2ad      	uxthmi	r5, r5
 80067f0:	6031      	str	r1, [r6, #0]
 80067f2:	07d9      	lsls	r1, r3, #31
 80067f4:	bf44      	itt	mi
 80067f6:	f043 0320 	orrmi.w	r3, r3, #32
 80067fa:	6023      	strmi	r3, [r4, #0]
 80067fc:	b11d      	cbz	r5, 8006806 <_printf_i+0x19e>
 80067fe:	2310      	movs	r3, #16
 8006800:	e7ac      	b.n	800675c <_printf_i+0xf4>
 8006802:	4827      	ldr	r0, [pc, #156]	@ (80068a0 <_printf_i+0x238>)
 8006804:	e7e9      	b.n	80067da <_printf_i+0x172>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	f023 0320 	bic.w	r3, r3, #32
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	e7f6      	b.n	80067fe <_printf_i+0x196>
 8006810:	4616      	mov	r6, r2
 8006812:	e7bd      	b.n	8006790 <_printf_i+0x128>
 8006814:	6833      	ldr	r3, [r6, #0]
 8006816:	6825      	ldr	r5, [r4, #0]
 8006818:	6961      	ldr	r1, [r4, #20]
 800681a:	1d18      	adds	r0, r3, #4
 800681c:	6030      	str	r0, [r6, #0]
 800681e:	062e      	lsls	r6, r5, #24
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	d501      	bpl.n	8006828 <_printf_i+0x1c0>
 8006824:	6019      	str	r1, [r3, #0]
 8006826:	e002      	b.n	800682e <_printf_i+0x1c6>
 8006828:	0668      	lsls	r0, r5, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0x1bc>
 800682c:	8019      	strh	r1, [r3, #0]
 800682e:	2300      	movs	r3, #0
 8006830:	6123      	str	r3, [r4, #16]
 8006832:	4616      	mov	r6, r2
 8006834:	e7bc      	b.n	80067b0 <_printf_i+0x148>
 8006836:	6833      	ldr	r3, [r6, #0]
 8006838:	1d1a      	adds	r2, r3, #4
 800683a:	6032      	str	r2, [r6, #0]
 800683c:	681e      	ldr	r6, [r3, #0]
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	2100      	movs	r1, #0
 8006842:	4630      	mov	r0, r6
 8006844:	f7f9 fcc4 	bl	80001d0 <memchr>
 8006848:	b108      	cbz	r0, 800684e <_printf_i+0x1e6>
 800684a:	1b80      	subs	r0, r0, r6
 800684c:	6060      	str	r0, [r4, #4]
 800684e:	6863      	ldr	r3, [r4, #4]
 8006850:	6123      	str	r3, [r4, #16]
 8006852:	2300      	movs	r3, #0
 8006854:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006858:	e7aa      	b.n	80067b0 <_printf_i+0x148>
 800685a:	6923      	ldr	r3, [r4, #16]
 800685c:	4632      	mov	r2, r6
 800685e:	4649      	mov	r1, r9
 8006860:	4640      	mov	r0, r8
 8006862:	47d0      	blx	sl
 8006864:	3001      	adds	r0, #1
 8006866:	d0ad      	beq.n	80067c4 <_printf_i+0x15c>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	079b      	lsls	r3, r3, #30
 800686c:	d413      	bmi.n	8006896 <_printf_i+0x22e>
 800686e:	68e0      	ldr	r0, [r4, #12]
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	4298      	cmp	r0, r3
 8006874:	bfb8      	it	lt
 8006876:	4618      	movlt	r0, r3
 8006878:	e7a6      	b.n	80067c8 <_printf_i+0x160>
 800687a:	2301      	movs	r3, #1
 800687c:	4632      	mov	r2, r6
 800687e:	4649      	mov	r1, r9
 8006880:	4640      	mov	r0, r8
 8006882:	47d0      	blx	sl
 8006884:	3001      	adds	r0, #1
 8006886:	d09d      	beq.n	80067c4 <_printf_i+0x15c>
 8006888:	3501      	adds	r5, #1
 800688a:	68e3      	ldr	r3, [r4, #12]
 800688c:	9903      	ldr	r1, [sp, #12]
 800688e:	1a5b      	subs	r3, r3, r1
 8006890:	42ab      	cmp	r3, r5
 8006892:	dcf2      	bgt.n	800687a <_printf_i+0x212>
 8006894:	e7eb      	b.n	800686e <_printf_i+0x206>
 8006896:	2500      	movs	r5, #0
 8006898:	f104 0619 	add.w	r6, r4, #25
 800689c:	e7f5      	b.n	800688a <_printf_i+0x222>
 800689e:	bf00      	nop
 80068a0:	08008aae 	.word	0x08008aae
 80068a4:	08008abf 	.word	0x08008abf

080068a8 <std>:
 80068a8:	2300      	movs	r3, #0
 80068aa:	b510      	push	{r4, lr}
 80068ac:	4604      	mov	r4, r0
 80068ae:	e9c0 3300 	strd	r3, r3, [r0]
 80068b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068b6:	6083      	str	r3, [r0, #8]
 80068b8:	8181      	strh	r1, [r0, #12]
 80068ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80068bc:	81c2      	strh	r2, [r0, #14]
 80068be:	6183      	str	r3, [r0, #24]
 80068c0:	4619      	mov	r1, r3
 80068c2:	2208      	movs	r2, #8
 80068c4:	305c      	adds	r0, #92	@ 0x5c
 80068c6:	f000 f8f4 	bl	8006ab2 <memset>
 80068ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006900 <std+0x58>)
 80068cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80068ce:	4b0d      	ldr	r3, [pc, #52]	@ (8006904 <std+0x5c>)
 80068d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80068d2:	4b0d      	ldr	r3, [pc, #52]	@ (8006908 <std+0x60>)
 80068d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80068d6:	4b0d      	ldr	r3, [pc, #52]	@ (800690c <std+0x64>)
 80068d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80068da:	4b0d      	ldr	r3, [pc, #52]	@ (8006910 <std+0x68>)
 80068dc:	6224      	str	r4, [r4, #32]
 80068de:	429c      	cmp	r4, r3
 80068e0:	d006      	beq.n	80068f0 <std+0x48>
 80068e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80068e6:	4294      	cmp	r4, r2
 80068e8:	d002      	beq.n	80068f0 <std+0x48>
 80068ea:	33d0      	adds	r3, #208	@ 0xd0
 80068ec:	429c      	cmp	r4, r3
 80068ee:	d105      	bne.n	80068fc <std+0x54>
 80068f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068f8:	f000 b9ae 	b.w	8006c58 <__retarget_lock_init_recursive>
 80068fc:	bd10      	pop	{r4, pc}
 80068fe:	bf00      	nop
 8006900:	08006a2d 	.word	0x08006a2d
 8006904:	08006a4f 	.word	0x08006a4f
 8006908:	08006a87 	.word	0x08006a87
 800690c:	08006aab 	.word	0x08006aab
 8006910:	20004c3c 	.word	0x20004c3c

08006914 <stdio_exit_handler>:
 8006914:	4a02      	ldr	r2, [pc, #8]	@ (8006920 <stdio_exit_handler+0xc>)
 8006916:	4903      	ldr	r1, [pc, #12]	@ (8006924 <stdio_exit_handler+0x10>)
 8006918:	4803      	ldr	r0, [pc, #12]	@ (8006928 <stdio_exit_handler+0x14>)
 800691a:	f000 b869 	b.w	80069f0 <_fwalk_sglue>
 800691e:	bf00      	nop
 8006920:	20000010 	.word	0x20000010
 8006924:	08008325 	.word	0x08008325
 8006928:	20000020 	.word	0x20000020

0800692c <cleanup_stdio>:
 800692c:	6841      	ldr	r1, [r0, #4]
 800692e:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <cleanup_stdio+0x34>)
 8006930:	4299      	cmp	r1, r3
 8006932:	b510      	push	{r4, lr}
 8006934:	4604      	mov	r4, r0
 8006936:	d001      	beq.n	800693c <cleanup_stdio+0x10>
 8006938:	f001 fcf4 	bl	8008324 <_fflush_r>
 800693c:	68a1      	ldr	r1, [r4, #8]
 800693e:	4b09      	ldr	r3, [pc, #36]	@ (8006964 <cleanup_stdio+0x38>)
 8006940:	4299      	cmp	r1, r3
 8006942:	d002      	beq.n	800694a <cleanup_stdio+0x1e>
 8006944:	4620      	mov	r0, r4
 8006946:	f001 fced 	bl	8008324 <_fflush_r>
 800694a:	68e1      	ldr	r1, [r4, #12]
 800694c:	4b06      	ldr	r3, [pc, #24]	@ (8006968 <cleanup_stdio+0x3c>)
 800694e:	4299      	cmp	r1, r3
 8006950:	d004      	beq.n	800695c <cleanup_stdio+0x30>
 8006952:	4620      	mov	r0, r4
 8006954:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006958:	f001 bce4 	b.w	8008324 <_fflush_r>
 800695c:	bd10      	pop	{r4, pc}
 800695e:	bf00      	nop
 8006960:	20004c3c 	.word	0x20004c3c
 8006964:	20004ca4 	.word	0x20004ca4
 8006968:	20004d0c 	.word	0x20004d0c

0800696c <global_stdio_init.part.0>:
 800696c:	b510      	push	{r4, lr}
 800696e:	4b0b      	ldr	r3, [pc, #44]	@ (800699c <global_stdio_init.part.0+0x30>)
 8006970:	4c0b      	ldr	r4, [pc, #44]	@ (80069a0 <global_stdio_init.part.0+0x34>)
 8006972:	4a0c      	ldr	r2, [pc, #48]	@ (80069a4 <global_stdio_init.part.0+0x38>)
 8006974:	601a      	str	r2, [r3, #0]
 8006976:	4620      	mov	r0, r4
 8006978:	2200      	movs	r2, #0
 800697a:	2104      	movs	r1, #4
 800697c:	f7ff ff94 	bl	80068a8 <std>
 8006980:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006984:	2201      	movs	r2, #1
 8006986:	2109      	movs	r1, #9
 8006988:	f7ff ff8e 	bl	80068a8 <std>
 800698c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006990:	2202      	movs	r2, #2
 8006992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006996:	2112      	movs	r1, #18
 8006998:	f7ff bf86 	b.w	80068a8 <std>
 800699c:	20004d74 	.word	0x20004d74
 80069a0:	20004c3c 	.word	0x20004c3c
 80069a4:	08006915 	.word	0x08006915

080069a8 <__sfp_lock_acquire>:
 80069a8:	4801      	ldr	r0, [pc, #4]	@ (80069b0 <__sfp_lock_acquire+0x8>)
 80069aa:	f000 b956 	b.w	8006c5a <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	20004d7d 	.word	0x20004d7d

080069b4 <__sfp_lock_release>:
 80069b4:	4801      	ldr	r0, [pc, #4]	@ (80069bc <__sfp_lock_release+0x8>)
 80069b6:	f000 b951 	b.w	8006c5c <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	20004d7d 	.word	0x20004d7d

080069c0 <__sinit>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	f7ff fff0 	bl	80069a8 <__sfp_lock_acquire>
 80069c8:	6a23      	ldr	r3, [r4, #32]
 80069ca:	b11b      	cbz	r3, 80069d4 <__sinit+0x14>
 80069cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d0:	f7ff bff0 	b.w	80069b4 <__sfp_lock_release>
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <__sinit+0x28>)
 80069d6:	6223      	str	r3, [r4, #32]
 80069d8:	4b04      	ldr	r3, [pc, #16]	@ (80069ec <__sinit+0x2c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d1f5      	bne.n	80069cc <__sinit+0xc>
 80069e0:	f7ff ffc4 	bl	800696c <global_stdio_init.part.0>
 80069e4:	e7f2      	b.n	80069cc <__sinit+0xc>
 80069e6:	bf00      	nop
 80069e8:	0800692d 	.word	0x0800692d
 80069ec:	20004d74 	.word	0x20004d74

080069f0 <_fwalk_sglue>:
 80069f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069f4:	4607      	mov	r7, r0
 80069f6:	4688      	mov	r8, r1
 80069f8:	4614      	mov	r4, r2
 80069fa:	2600      	movs	r6, #0
 80069fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a00:	f1b9 0901 	subs.w	r9, r9, #1
 8006a04:	d505      	bpl.n	8006a12 <_fwalk_sglue+0x22>
 8006a06:	6824      	ldr	r4, [r4, #0]
 8006a08:	2c00      	cmp	r4, #0
 8006a0a:	d1f7      	bne.n	80069fc <_fwalk_sglue+0xc>
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a12:	89ab      	ldrh	r3, [r5, #12]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d907      	bls.n	8006a28 <_fwalk_sglue+0x38>
 8006a18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a1c:	3301      	adds	r3, #1
 8006a1e:	d003      	beq.n	8006a28 <_fwalk_sglue+0x38>
 8006a20:	4629      	mov	r1, r5
 8006a22:	4638      	mov	r0, r7
 8006a24:	47c0      	blx	r8
 8006a26:	4306      	orrs	r6, r0
 8006a28:	3568      	adds	r5, #104	@ 0x68
 8006a2a:	e7e9      	b.n	8006a00 <_fwalk_sglue+0x10>

08006a2c <__sread>:
 8006a2c:	b510      	push	{r4, lr}
 8006a2e:	460c      	mov	r4, r1
 8006a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a34:	f000 f8c2 	bl	8006bbc <_read_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	bfab      	itete	ge
 8006a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8006a40:	181b      	addge	r3, r3, r0
 8006a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a46:	bfac      	ite	ge
 8006a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a4a:	81a3      	strhlt	r3, [r4, #12]
 8006a4c:	bd10      	pop	{r4, pc}

08006a4e <__swrite>:
 8006a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a52:	461f      	mov	r7, r3
 8006a54:	898b      	ldrh	r3, [r1, #12]
 8006a56:	05db      	lsls	r3, r3, #23
 8006a58:	4605      	mov	r5, r0
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	4616      	mov	r6, r2
 8006a5e:	d505      	bpl.n	8006a6c <__swrite+0x1e>
 8006a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a64:	2302      	movs	r3, #2
 8006a66:	2200      	movs	r2, #0
 8006a68:	f000 f896 	bl	8006b98 <_lseek_r>
 8006a6c:	89a3      	ldrh	r3, [r4, #12]
 8006a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a76:	81a3      	strh	r3, [r4, #12]
 8006a78:	4632      	mov	r2, r6
 8006a7a:	463b      	mov	r3, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a82:	f000 b8ad 	b.w	8006be0 <_write_r>

08006a86 <__sseek>:
 8006a86:	b510      	push	{r4, lr}
 8006a88:	460c      	mov	r4, r1
 8006a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a8e:	f000 f883 	bl	8006b98 <_lseek_r>
 8006a92:	1c43      	adds	r3, r0, #1
 8006a94:	89a3      	ldrh	r3, [r4, #12]
 8006a96:	bf15      	itete	ne
 8006a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aa2:	81a3      	strheq	r3, [r4, #12]
 8006aa4:	bf18      	it	ne
 8006aa6:	81a3      	strhne	r3, [r4, #12]
 8006aa8:	bd10      	pop	{r4, pc}

08006aaa <__sclose>:
 8006aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aae:	f000 b80d 	b.w	8006acc <_close_r>

08006ab2 <memset>:
 8006ab2:	4402      	add	r2, r0
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d100      	bne.n	8006abc <memset+0xa>
 8006aba:	4770      	bx	lr
 8006abc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac0:	e7f9      	b.n	8006ab6 <memset+0x4>
	...

08006ac4 <_localeconv_r>:
 8006ac4:	4800      	ldr	r0, [pc, #0]	@ (8006ac8 <_localeconv_r+0x4>)
 8006ac6:	4770      	bx	lr
 8006ac8:	2000015c 	.word	0x2000015c

08006acc <_close_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	@ (8006ae8 <_close_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fa fc60 	bl	800139c <_close>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_close_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_close_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20004d78 	.word	0x20004d78

08006aec <_reclaim_reent>:
 8006aec:	4b29      	ldr	r3, [pc, #164]	@ (8006b94 <_reclaim_reent+0xa8>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4283      	cmp	r3, r0
 8006af2:	b570      	push	{r4, r5, r6, lr}
 8006af4:	4604      	mov	r4, r0
 8006af6:	d04b      	beq.n	8006b90 <_reclaim_reent+0xa4>
 8006af8:	69c3      	ldr	r3, [r0, #28]
 8006afa:	b1ab      	cbz	r3, 8006b28 <_reclaim_reent+0x3c>
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	b16b      	cbz	r3, 8006b1c <_reclaim_reent+0x30>
 8006b00:	2500      	movs	r5, #0
 8006b02:	69e3      	ldr	r3, [r4, #28]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	5959      	ldr	r1, [r3, r5]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	d13b      	bne.n	8006b84 <_reclaim_reent+0x98>
 8006b0c:	3504      	adds	r5, #4
 8006b0e:	2d80      	cmp	r5, #128	@ 0x80
 8006b10:	d1f7      	bne.n	8006b02 <_reclaim_reent+0x16>
 8006b12:	69e3      	ldr	r3, [r4, #28]
 8006b14:	4620      	mov	r0, r4
 8006b16:	68d9      	ldr	r1, [r3, #12]
 8006b18:	f000 fefe 	bl	8007918 <_free_r>
 8006b1c:	69e3      	ldr	r3, [r4, #28]
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	b111      	cbz	r1, 8006b28 <_reclaim_reent+0x3c>
 8006b22:	4620      	mov	r0, r4
 8006b24:	f000 fef8 	bl	8007918 <_free_r>
 8006b28:	6961      	ldr	r1, [r4, #20]
 8006b2a:	b111      	cbz	r1, 8006b32 <_reclaim_reent+0x46>
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	f000 fef3 	bl	8007918 <_free_r>
 8006b32:	69e1      	ldr	r1, [r4, #28]
 8006b34:	b111      	cbz	r1, 8006b3c <_reclaim_reent+0x50>
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 feee 	bl	8007918 <_free_r>
 8006b3c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b3e:	b111      	cbz	r1, 8006b46 <_reclaim_reent+0x5a>
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fee9 	bl	8007918 <_free_r>
 8006b46:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b48:	b111      	cbz	r1, 8006b50 <_reclaim_reent+0x64>
 8006b4a:	4620      	mov	r0, r4
 8006b4c:	f000 fee4 	bl	8007918 <_free_r>
 8006b50:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b52:	b111      	cbz	r1, 8006b5a <_reclaim_reent+0x6e>
 8006b54:	4620      	mov	r0, r4
 8006b56:	f000 fedf 	bl	8007918 <_free_r>
 8006b5a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b5c:	b111      	cbz	r1, 8006b64 <_reclaim_reent+0x78>
 8006b5e:	4620      	mov	r0, r4
 8006b60:	f000 feda 	bl	8007918 <_free_r>
 8006b64:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b66:	b111      	cbz	r1, 8006b6e <_reclaim_reent+0x82>
 8006b68:	4620      	mov	r0, r4
 8006b6a:	f000 fed5 	bl	8007918 <_free_r>
 8006b6e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b70:	b111      	cbz	r1, 8006b78 <_reclaim_reent+0x8c>
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fed0 	bl	8007918 <_free_r>
 8006b78:	6a23      	ldr	r3, [r4, #32]
 8006b7a:	b14b      	cbz	r3, 8006b90 <_reclaim_reent+0xa4>
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b82:	4718      	bx	r3
 8006b84:	680e      	ldr	r6, [r1, #0]
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 fec6 	bl	8007918 <_free_r>
 8006b8c:	4631      	mov	r1, r6
 8006b8e:	e7bb      	b.n	8006b08 <_reclaim_reent+0x1c>
 8006b90:	bd70      	pop	{r4, r5, r6, pc}
 8006b92:	bf00      	nop
 8006b94:	2000001c 	.word	0x2000001c

08006b98 <_lseek_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d07      	ldr	r5, [pc, #28]	@ (8006bb8 <_lseek_r+0x20>)
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	4608      	mov	r0, r1
 8006ba0:	4611      	mov	r1, r2
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	602a      	str	r2, [r5, #0]
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f7fa fc1f 	bl	80013ea <_lseek>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d102      	bne.n	8006bb6 <_lseek_r+0x1e>
 8006bb0:	682b      	ldr	r3, [r5, #0]
 8006bb2:	b103      	cbz	r3, 8006bb6 <_lseek_r+0x1e>
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	bd38      	pop	{r3, r4, r5, pc}
 8006bb8:	20004d78 	.word	0x20004d78

08006bbc <_read_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4d07      	ldr	r5, [pc, #28]	@ (8006bdc <_read_r+0x20>)
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	4608      	mov	r0, r1
 8006bc4:	4611      	mov	r1, r2
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	602a      	str	r2, [r5, #0]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f7fa fbad 	bl	800132a <_read>
 8006bd0:	1c43      	adds	r3, r0, #1
 8006bd2:	d102      	bne.n	8006bda <_read_r+0x1e>
 8006bd4:	682b      	ldr	r3, [r5, #0]
 8006bd6:	b103      	cbz	r3, 8006bda <_read_r+0x1e>
 8006bd8:	6023      	str	r3, [r4, #0]
 8006bda:	bd38      	pop	{r3, r4, r5, pc}
 8006bdc:	20004d78 	.word	0x20004d78

08006be0 <_write_r>:
 8006be0:	b538      	push	{r3, r4, r5, lr}
 8006be2:	4d07      	ldr	r5, [pc, #28]	@ (8006c00 <_write_r+0x20>)
 8006be4:	4604      	mov	r4, r0
 8006be6:	4608      	mov	r0, r1
 8006be8:	4611      	mov	r1, r2
 8006bea:	2200      	movs	r2, #0
 8006bec:	602a      	str	r2, [r5, #0]
 8006bee:	461a      	mov	r2, r3
 8006bf0:	f7fa fbb8 	bl	8001364 <_write>
 8006bf4:	1c43      	adds	r3, r0, #1
 8006bf6:	d102      	bne.n	8006bfe <_write_r+0x1e>
 8006bf8:	682b      	ldr	r3, [r5, #0]
 8006bfa:	b103      	cbz	r3, 8006bfe <_write_r+0x1e>
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	bd38      	pop	{r3, r4, r5, pc}
 8006c00:	20004d78 	.word	0x20004d78

08006c04 <__errno>:
 8006c04:	4b01      	ldr	r3, [pc, #4]	@ (8006c0c <__errno+0x8>)
 8006c06:	6818      	ldr	r0, [r3, #0]
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	2000001c 	.word	0x2000001c

08006c10 <__libc_init_array>:
 8006c10:	b570      	push	{r4, r5, r6, lr}
 8006c12:	4d0d      	ldr	r5, [pc, #52]	@ (8006c48 <__libc_init_array+0x38>)
 8006c14:	4c0d      	ldr	r4, [pc, #52]	@ (8006c4c <__libc_init_array+0x3c>)
 8006c16:	1b64      	subs	r4, r4, r5
 8006c18:	10a4      	asrs	r4, r4, #2
 8006c1a:	2600      	movs	r6, #0
 8006c1c:	42a6      	cmp	r6, r4
 8006c1e:	d109      	bne.n	8006c34 <__libc_init_array+0x24>
 8006c20:	4d0b      	ldr	r5, [pc, #44]	@ (8006c50 <__libc_init_array+0x40>)
 8006c22:	4c0c      	ldr	r4, [pc, #48]	@ (8006c54 <__libc_init_array+0x44>)
 8006c24:	f001 febe 	bl	80089a4 <_init>
 8006c28:	1b64      	subs	r4, r4, r5
 8006c2a:	10a4      	asrs	r4, r4, #2
 8006c2c:	2600      	movs	r6, #0
 8006c2e:	42a6      	cmp	r6, r4
 8006c30:	d105      	bne.n	8006c3e <__libc_init_array+0x2e>
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c38:	4798      	blx	r3
 8006c3a:	3601      	adds	r6, #1
 8006c3c:	e7ee      	b.n	8006c1c <__libc_init_array+0xc>
 8006c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c42:	4798      	blx	r3
 8006c44:	3601      	adds	r6, #1
 8006c46:	e7f2      	b.n	8006c2e <__libc_init_array+0x1e>
 8006c48:	08008e18 	.word	0x08008e18
 8006c4c:	08008e18 	.word	0x08008e18
 8006c50:	08008e18 	.word	0x08008e18
 8006c54:	08008e1c 	.word	0x08008e1c

08006c58 <__retarget_lock_init_recursive>:
 8006c58:	4770      	bx	lr

08006c5a <__retarget_lock_acquire_recursive>:
 8006c5a:	4770      	bx	lr

08006c5c <__retarget_lock_release_recursive>:
 8006c5c:	4770      	bx	lr

08006c5e <memcpy>:
 8006c5e:	440a      	add	r2, r1
 8006c60:	4291      	cmp	r1, r2
 8006c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c66:	d100      	bne.n	8006c6a <memcpy+0xc>
 8006c68:	4770      	bx	lr
 8006c6a:	b510      	push	{r4, lr}
 8006c6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c74:	4291      	cmp	r1, r2
 8006c76:	d1f9      	bne.n	8006c6c <memcpy+0xe>
 8006c78:	bd10      	pop	{r4, pc}

08006c7a <quorem>:
 8006c7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7e:	6903      	ldr	r3, [r0, #16]
 8006c80:	690c      	ldr	r4, [r1, #16]
 8006c82:	42a3      	cmp	r3, r4
 8006c84:	4607      	mov	r7, r0
 8006c86:	db7e      	blt.n	8006d86 <quorem+0x10c>
 8006c88:	3c01      	subs	r4, #1
 8006c8a:	f101 0814 	add.w	r8, r1, #20
 8006c8e:	00a3      	lsls	r3, r4, #2
 8006c90:	f100 0514 	add.w	r5, r0, #20
 8006c94:	9300      	str	r3, [sp, #0]
 8006c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ca0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cb0:	d32e      	bcc.n	8006d10 <quorem+0x96>
 8006cb2:	f04f 0a00 	mov.w	sl, #0
 8006cb6:	46c4      	mov	ip, r8
 8006cb8:	46ae      	mov	lr, r5
 8006cba:	46d3      	mov	fp, sl
 8006cbc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cc0:	b298      	uxth	r0, r3
 8006cc2:	fb06 a000 	mla	r0, r6, r0, sl
 8006cc6:	0c02      	lsrs	r2, r0, #16
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	fb06 2303 	mla	r3, r6, r3, r2
 8006cce:	f8de 2000 	ldr.w	r2, [lr]
 8006cd2:	b280      	uxth	r0, r0
 8006cd4:	b292      	uxth	r2, r2
 8006cd6:	1a12      	subs	r2, r2, r0
 8006cd8:	445a      	add	r2, fp
 8006cda:	f8de 0000 	ldr.w	r0, [lr]
 8006cde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ce8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006cec:	b292      	uxth	r2, r2
 8006cee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006cf2:	45e1      	cmp	r9, ip
 8006cf4:	f84e 2b04 	str.w	r2, [lr], #4
 8006cf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006cfc:	d2de      	bcs.n	8006cbc <quorem+0x42>
 8006cfe:	9b00      	ldr	r3, [sp, #0]
 8006d00:	58eb      	ldr	r3, [r5, r3]
 8006d02:	b92b      	cbnz	r3, 8006d10 <quorem+0x96>
 8006d04:	9b01      	ldr	r3, [sp, #4]
 8006d06:	3b04      	subs	r3, #4
 8006d08:	429d      	cmp	r5, r3
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	d32f      	bcc.n	8006d6e <quorem+0xf4>
 8006d0e:	613c      	str	r4, [r7, #16]
 8006d10:	4638      	mov	r0, r7
 8006d12:	f001 f97b 	bl	800800c <__mcmp>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	db25      	blt.n	8006d66 <quorem+0xec>
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d22:	f8d1 c000 	ldr.w	ip, [r1]
 8006d26:	fa1f fe82 	uxth.w	lr, r2
 8006d2a:	fa1f f38c 	uxth.w	r3, ip
 8006d2e:	eba3 030e 	sub.w	r3, r3, lr
 8006d32:	4403      	add	r3, r0
 8006d34:	0c12      	lsrs	r2, r2, #16
 8006d36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d44:	45c1      	cmp	r9, r8
 8006d46:	f841 3b04 	str.w	r3, [r1], #4
 8006d4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d4e:	d2e6      	bcs.n	8006d1e <quorem+0xa4>
 8006d50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d58:	b922      	cbnz	r2, 8006d64 <quorem+0xea>
 8006d5a:	3b04      	subs	r3, #4
 8006d5c:	429d      	cmp	r5, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	d30b      	bcc.n	8006d7a <quorem+0x100>
 8006d62:	613c      	str	r4, [r7, #16]
 8006d64:	3601      	adds	r6, #1
 8006d66:	4630      	mov	r0, r6
 8006d68:	b003      	add	sp, #12
 8006d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d6e:	6812      	ldr	r2, [r2, #0]
 8006d70:	3b04      	subs	r3, #4
 8006d72:	2a00      	cmp	r2, #0
 8006d74:	d1cb      	bne.n	8006d0e <quorem+0x94>
 8006d76:	3c01      	subs	r4, #1
 8006d78:	e7c6      	b.n	8006d08 <quorem+0x8e>
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	3b04      	subs	r3, #4
 8006d7e:	2a00      	cmp	r2, #0
 8006d80:	d1ef      	bne.n	8006d62 <quorem+0xe8>
 8006d82:	3c01      	subs	r4, #1
 8006d84:	e7ea      	b.n	8006d5c <quorem+0xe2>
 8006d86:	2000      	movs	r0, #0
 8006d88:	e7ee      	b.n	8006d68 <quorem+0xee>
 8006d8a:	0000      	movs	r0, r0
 8006d8c:	0000      	movs	r0, r0
	...

08006d90 <_dtoa_r>:
 8006d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d94:	69c7      	ldr	r7, [r0, #28]
 8006d96:	b099      	sub	sp, #100	@ 0x64
 8006d98:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d9c:	ec55 4b10 	vmov	r4, r5, d0
 8006da0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006da2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006da4:	4683      	mov	fp, r0
 8006da6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006da8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006daa:	b97f      	cbnz	r7, 8006dcc <_dtoa_r+0x3c>
 8006dac:	2010      	movs	r0, #16
 8006dae:	f000 fdfd 	bl	80079ac <malloc>
 8006db2:	4602      	mov	r2, r0
 8006db4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006db8:	b920      	cbnz	r0, 8006dc4 <_dtoa_r+0x34>
 8006dba:	4ba7      	ldr	r3, [pc, #668]	@ (8007058 <_dtoa_r+0x2c8>)
 8006dbc:	21ef      	movs	r1, #239	@ 0xef
 8006dbe:	48a7      	ldr	r0, [pc, #668]	@ (800705c <_dtoa_r+0x2cc>)
 8006dc0:	f001 fae8 	bl	8008394 <__assert_func>
 8006dc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006dc8:	6007      	str	r7, [r0, #0]
 8006dca:	60c7      	str	r7, [r0, #12]
 8006dcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006dd0:	6819      	ldr	r1, [r3, #0]
 8006dd2:	b159      	cbz	r1, 8006dec <_dtoa_r+0x5c>
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	604a      	str	r2, [r1, #4]
 8006dd8:	2301      	movs	r3, #1
 8006dda:	4093      	lsls	r3, r2
 8006ddc:	608b      	str	r3, [r1, #8]
 8006dde:	4658      	mov	r0, fp
 8006de0:	f000 feda 	bl	8007b98 <_Bfree>
 8006de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006de8:	2200      	movs	r2, #0
 8006dea:	601a      	str	r2, [r3, #0]
 8006dec:	1e2b      	subs	r3, r5, #0
 8006dee:	bfb9      	ittee	lt
 8006df0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006df4:	9303      	strlt	r3, [sp, #12]
 8006df6:	2300      	movge	r3, #0
 8006df8:	6033      	strge	r3, [r6, #0]
 8006dfa:	9f03      	ldr	r7, [sp, #12]
 8006dfc:	4b98      	ldr	r3, [pc, #608]	@ (8007060 <_dtoa_r+0x2d0>)
 8006dfe:	bfbc      	itt	lt
 8006e00:	2201      	movlt	r2, #1
 8006e02:	6032      	strlt	r2, [r6, #0]
 8006e04:	43bb      	bics	r3, r7
 8006e06:	d112      	bne.n	8006e2e <_dtoa_r+0x9e>
 8006e08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e0e:	6013      	str	r3, [r2, #0]
 8006e10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e14:	4323      	orrs	r3, r4
 8006e16:	f000 854d 	beq.w	80078b4 <_dtoa_r+0xb24>
 8006e1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007074 <_dtoa_r+0x2e4>
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 854f 	beq.w	80078c4 <_dtoa_r+0xb34>
 8006e26:	f10a 0303 	add.w	r3, sl, #3
 8006e2a:	f000 bd49 	b.w	80078c0 <_dtoa_r+0xb30>
 8006e2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e32:	2200      	movs	r2, #0
 8006e34:	ec51 0b17 	vmov	r0, r1, d7
 8006e38:	2300      	movs	r3, #0
 8006e3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e3e:	f7f9 fe43 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e42:	4680      	mov	r8, r0
 8006e44:	b158      	cbz	r0, 8006e5e <_dtoa_r+0xce>
 8006e46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e48:	2301      	movs	r3, #1
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e4e:	b113      	cbz	r3, 8006e56 <_dtoa_r+0xc6>
 8006e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e52:	4b84      	ldr	r3, [pc, #528]	@ (8007064 <_dtoa_r+0x2d4>)
 8006e54:	6013      	str	r3, [r2, #0]
 8006e56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007078 <_dtoa_r+0x2e8>
 8006e5a:	f000 bd33 	b.w	80078c4 <_dtoa_r+0xb34>
 8006e5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e62:	aa16      	add	r2, sp, #88	@ 0x58
 8006e64:	a917      	add	r1, sp, #92	@ 0x5c
 8006e66:	4658      	mov	r0, fp
 8006e68:	f001 f980 	bl	800816c <__d2b>
 8006e6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e70:	4681      	mov	r9, r0
 8006e72:	2e00      	cmp	r6, #0
 8006e74:	d077      	beq.n	8006f66 <_dtoa_r+0x1d6>
 8006e76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006e88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006e8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006e90:	4619      	mov	r1, r3
 8006e92:	2200      	movs	r2, #0
 8006e94:	4b74      	ldr	r3, [pc, #464]	@ (8007068 <_dtoa_r+0x2d8>)
 8006e96:	f7f9 f9f7 	bl	8000288 <__aeabi_dsub>
 8006e9a:	a369      	add	r3, pc, #420	@ (adr r3, 8007040 <_dtoa_r+0x2b0>)
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	f7f9 fbaa 	bl	80005f8 <__aeabi_dmul>
 8006ea4:	a368      	add	r3, pc, #416	@ (adr r3, 8007048 <_dtoa_r+0x2b8>)
 8006ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eaa:	f7f9 f9ef 	bl	800028c <__adddf3>
 8006eae:	4604      	mov	r4, r0
 8006eb0:	4630      	mov	r0, r6
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	f7f9 fb36 	bl	8000524 <__aeabi_i2d>
 8006eb8:	a365      	add	r3, pc, #404	@ (adr r3, 8007050 <_dtoa_r+0x2c0>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fb9b 	bl	80005f8 <__aeabi_dmul>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 f9df 	bl	800028c <__adddf3>
 8006ece:	4604      	mov	r4, r0
 8006ed0:	460d      	mov	r5, r1
 8006ed2:	f7f9 fe41 	bl	8000b58 <__aeabi_d2iz>
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	4607      	mov	r7, r0
 8006eda:	2300      	movs	r3, #0
 8006edc:	4620      	mov	r0, r4
 8006ede:	4629      	mov	r1, r5
 8006ee0:	f7f9 fdfc 	bl	8000adc <__aeabi_dcmplt>
 8006ee4:	b140      	cbz	r0, 8006ef8 <_dtoa_r+0x168>
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	f7f9 fb1c 	bl	8000524 <__aeabi_i2d>
 8006eec:	4622      	mov	r2, r4
 8006eee:	462b      	mov	r3, r5
 8006ef0:	f7f9 fdea 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ef4:	b900      	cbnz	r0, 8006ef8 <_dtoa_r+0x168>
 8006ef6:	3f01      	subs	r7, #1
 8006ef8:	2f16      	cmp	r7, #22
 8006efa:	d851      	bhi.n	8006fa0 <_dtoa_r+0x210>
 8006efc:	4b5b      	ldr	r3, [pc, #364]	@ (800706c <_dtoa_r+0x2dc>)
 8006efe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f0a:	f7f9 fde7 	bl	8000adc <__aeabi_dcmplt>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	d048      	beq.n	8006fa4 <_dtoa_r+0x214>
 8006f12:	3f01      	subs	r7, #1
 8006f14:	2300      	movs	r3, #0
 8006f16:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f1a:	1b9b      	subs	r3, r3, r6
 8006f1c:	1e5a      	subs	r2, r3, #1
 8006f1e:	bf44      	itt	mi
 8006f20:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f24:	2300      	movmi	r3, #0
 8006f26:	9208      	str	r2, [sp, #32]
 8006f28:	bf54      	ite	pl
 8006f2a:	f04f 0800 	movpl.w	r8, #0
 8006f2e:	9308      	strmi	r3, [sp, #32]
 8006f30:	2f00      	cmp	r7, #0
 8006f32:	db39      	blt.n	8006fa8 <_dtoa_r+0x218>
 8006f34:	9b08      	ldr	r3, [sp, #32]
 8006f36:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f38:	443b      	add	r3, r7
 8006f3a:	9308      	str	r3, [sp, #32]
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f42:	2b09      	cmp	r3, #9
 8006f44:	d864      	bhi.n	8007010 <_dtoa_r+0x280>
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	bfc4      	itt	gt
 8006f4a:	3b04      	subgt	r3, #4
 8006f4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f50:	f1a3 0302 	sub.w	r3, r3, #2
 8006f54:	bfcc      	ite	gt
 8006f56:	2400      	movgt	r4, #0
 8006f58:	2401      	movle	r4, #1
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d863      	bhi.n	8007026 <_dtoa_r+0x296>
 8006f5e:	e8df f003 	tbb	[pc, r3]
 8006f62:	372a      	.short	0x372a
 8006f64:	5535      	.short	0x5535
 8006f66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f6a:	441e      	add	r6, r3
 8006f6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	bfc1      	itttt	gt
 8006f74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f78:	409f      	lslgt	r7, r3
 8006f7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f82:	bfd6      	itet	le
 8006f84:	f1c3 0320 	rsble	r3, r3, #32
 8006f88:	ea47 0003 	orrgt.w	r0, r7, r3
 8006f8c:	fa04 f003 	lslle.w	r0, r4, r3
 8006f90:	f7f9 fab8 	bl	8000504 <__aeabi_ui2d>
 8006f94:	2201      	movs	r2, #1
 8006f96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006f9a:	3e01      	subs	r6, #1
 8006f9c:	9214      	str	r2, [sp, #80]	@ 0x50
 8006f9e:	e777      	b.n	8006e90 <_dtoa_r+0x100>
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e7b8      	b.n	8006f16 <_dtoa_r+0x186>
 8006fa4:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fa6:	e7b7      	b.n	8006f18 <_dtoa_r+0x188>
 8006fa8:	427b      	negs	r3, r7
 8006faa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fac:	2300      	movs	r3, #0
 8006fae:	eba8 0807 	sub.w	r8, r8, r7
 8006fb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fb4:	e7c4      	b.n	8006f40 <_dtoa_r+0x1b0>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	dc35      	bgt.n	800702c <_dtoa_r+0x29c>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	9307      	str	r3, [sp, #28]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fca:	e00b      	b.n	8006fe4 <_dtoa_r+0x254>
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e7f3      	b.n	8006fb8 <_dtoa_r+0x228>
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd6:	18fb      	adds	r3, r7, r3
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	9307      	str	r3, [sp, #28]
 8006fe0:	bfb8      	it	lt
 8006fe2:	2301      	movlt	r3, #1
 8006fe4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006fe8:	2100      	movs	r1, #0
 8006fea:	2204      	movs	r2, #4
 8006fec:	f102 0514 	add.w	r5, r2, #20
 8006ff0:	429d      	cmp	r5, r3
 8006ff2:	d91f      	bls.n	8007034 <_dtoa_r+0x2a4>
 8006ff4:	6041      	str	r1, [r0, #4]
 8006ff6:	4658      	mov	r0, fp
 8006ff8:	f000 fd8e 	bl	8007b18 <_Balloc>
 8006ffc:	4682      	mov	sl, r0
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d13c      	bne.n	800707c <_dtoa_r+0x2ec>
 8007002:	4b1b      	ldr	r3, [pc, #108]	@ (8007070 <_dtoa_r+0x2e0>)
 8007004:	4602      	mov	r2, r0
 8007006:	f240 11af 	movw	r1, #431	@ 0x1af
 800700a:	e6d8      	b.n	8006dbe <_dtoa_r+0x2e>
 800700c:	2301      	movs	r3, #1
 800700e:	e7e0      	b.n	8006fd2 <_dtoa_r+0x242>
 8007010:	2401      	movs	r4, #1
 8007012:	2300      	movs	r3, #0
 8007014:	9309      	str	r3, [sp, #36]	@ 0x24
 8007016:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007018:	f04f 33ff 	mov.w	r3, #4294967295
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	9307      	str	r3, [sp, #28]
 8007020:	2200      	movs	r2, #0
 8007022:	2312      	movs	r3, #18
 8007024:	e7d0      	b.n	8006fc8 <_dtoa_r+0x238>
 8007026:	2301      	movs	r3, #1
 8007028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800702a:	e7f5      	b.n	8007018 <_dtoa_r+0x288>
 800702c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	9307      	str	r3, [sp, #28]
 8007032:	e7d7      	b.n	8006fe4 <_dtoa_r+0x254>
 8007034:	3101      	adds	r1, #1
 8007036:	0052      	lsls	r2, r2, #1
 8007038:	e7d8      	b.n	8006fec <_dtoa_r+0x25c>
 800703a:	bf00      	nop
 800703c:	f3af 8000 	nop.w
 8007040:	636f4361 	.word	0x636f4361
 8007044:	3fd287a7 	.word	0x3fd287a7
 8007048:	8b60c8b3 	.word	0x8b60c8b3
 800704c:	3fc68a28 	.word	0x3fc68a28
 8007050:	509f79fb 	.word	0x509f79fb
 8007054:	3fd34413 	.word	0x3fd34413
 8007058:	08008add 	.word	0x08008add
 800705c:	08008af4 	.word	0x08008af4
 8007060:	7ff00000 	.word	0x7ff00000
 8007064:	08008aad 	.word	0x08008aad
 8007068:	3ff80000 	.word	0x3ff80000
 800706c:	08008bf0 	.word	0x08008bf0
 8007070:	08008b4c 	.word	0x08008b4c
 8007074:	08008ad9 	.word	0x08008ad9
 8007078:	08008aac 	.word	0x08008aac
 800707c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007080:	6018      	str	r0, [r3, #0]
 8007082:	9b07      	ldr	r3, [sp, #28]
 8007084:	2b0e      	cmp	r3, #14
 8007086:	f200 80a4 	bhi.w	80071d2 <_dtoa_r+0x442>
 800708a:	2c00      	cmp	r4, #0
 800708c:	f000 80a1 	beq.w	80071d2 <_dtoa_r+0x442>
 8007090:	2f00      	cmp	r7, #0
 8007092:	dd33      	ble.n	80070fc <_dtoa_r+0x36c>
 8007094:	4bad      	ldr	r3, [pc, #692]	@ (800734c <_dtoa_r+0x5bc>)
 8007096:	f007 020f 	and.w	r2, r7, #15
 800709a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800709e:	ed93 7b00 	vldr	d7, [r3]
 80070a2:	05f8      	lsls	r0, r7, #23
 80070a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070ac:	d516      	bpl.n	80070dc <_dtoa_r+0x34c>
 80070ae:	4ba8      	ldr	r3, [pc, #672]	@ (8007350 <_dtoa_r+0x5c0>)
 80070b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070b8:	f7f9 fbc8 	bl	800084c <__aeabi_ddiv>
 80070bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070c0:	f004 040f 	and.w	r4, r4, #15
 80070c4:	2603      	movs	r6, #3
 80070c6:	4da2      	ldr	r5, [pc, #648]	@ (8007350 <_dtoa_r+0x5c0>)
 80070c8:	b954      	cbnz	r4, 80070e0 <_dtoa_r+0x350>
 80070ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d2:	f7f9 fbbb 	bl	800084c <__aeabi_ddiv>
 80070d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070da:	e028      	b.n	800712e <_dtoa_r+0x39e>
 80070dc:	2602      	movs	r6, #2
 80070de:	e7f2      	b.n	80070c6 <_dtoa_r+0x336>
 80070e0:	07e1      	lsls	r1, r4, #31
 80070e2:	d508      	bpl.n	80070f6 <_dtoa_r+0x366>
 80070e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80070ec:	f7f9 fa84 	bl	80005f8 <__aeabi_dmul>
 80070f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80070f4:	3601      	adds	r6, #1
 80070f6:	1064      	asrs	r4, r4, #1
 80070f8:	3508      	adds	r5, #8
 80070fa:	e7e5      	b.n	80070c8 <_dtoa_r+0x338>
 80070fc:	f000 80d2 	beq.w	80072a4 <_dtoa_r+0x514>
 8007100:	427c      	negs	r4, r7
 8007102:	4b92      	ldr	r3, [pc, #584]	@ (800734c <_dtoa_r+0x5bc>)
 8007104:	4d92      	ldr	r5, [pc, #584]	@ (8007350 <_dtoa_r+0x5c0>)
 8007106:	f004 020f 	and.w	r2, r4, #15
 800710a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007116:	f7f9 fa6f 	bl	80005f8 <__aeabi_dmul>
 800711a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800711e:	1124      	asrs	r4, r4, #4
 8007120:	2300      	movs	r3, #0
 8007122:	2602      	movs	r6, #2
 8007124:	2c00      	cmp	r4, #0
 8007126:	f040 80b2 	bne.w	800728e <_dtoa_r+0x4fe>
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1d3      	bne.n	80070d6 <_dtoa_r+0x346>
 800712e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007130:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 80b7 	beq.w	80072a8 <_dtoa_r+0x518>
 800713a:	4b86      	ldr	r3, [pc, #536]	@ (8007354 <_dtoa_r+0x5c4>)
 800713c:	2200      	movs	r2, #0
 800713e:	4620      	mov	r0, r4
 8007140:	4629      	mov	r1, r5
 8007142:	f7f9 fccb 	bl	8000adc <__aeabi_dcmplt>
 8007146:	2800      	cmp	r0, #0
 8007148:	f000 80ae 	beq.w	80072a8 <_dtoa_r+0x518>
 800714c:	9b07      	ldr	r3, [sp, #28]
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 80aa 	beq.w	80072a8 <_dtoa_r+0x518>
 8007154:	9b00      	ldr	r3, [sp, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	dd37      	ble.n	80071ca <_dtoa_r+0x43a>
 800715a:	1e7b      	subs	r3, r7, #1
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	4620      	mov	r0, r4
 8007160:	4b7d      	ldr	r3, [pc, #500]	@ (8007358 <_dtoa_r+0x5c8>)
 8007162:	2200      	movs	r2, #0
 8007164:	4629      	mov	r1, r5
 8007166:	f7f9 fa47 	bl	80005f8 <__aeabi_dmul>
 800716a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800716e:	9c00      	ldr	r4, [sp, #0]
 8007170:	3601      	adds	r6, #1
 8007172:	4630      	mov	r0, r6
 8007174:	f7f9 f9d6 	bl	8000524 <__aeabi_i2d>
 8007178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_dmul>
 8007180:	4b76      	ldr	r3, [pc, #472]	@ (800735c <_dtoa_r+0x5cc>)
 8007182:	2200      	movs	r2, #0
 8007184:	f7f9 f882 	bl	800028c <__adddf3>
 8007188:	4605      	mov	r5, r0
 800718a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800718e:	2c00      	cmp	r4, #0
 8007190:	f040 808d 	bne.w	80072ae <_dtoa_r+0x51e>
 8007194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007198:	4b71      	ldr	r3, [pc, #452]	@ (8007360 <_dtoa_r+0x5d0>)
 800719a:	2200      	movs	r2, #0
 800719c:	f7f9 f874 	bl	8000288 <__aeabi_dsub>
 80071a0:	4602      	mov	r2, r0
 80071a2:	460b      	mov	r3, r1
 80071a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4633      	mov	r3, r6
 80071ac:	f7f9 fcb4 	bl	8000b18 <__aeabi_dcmpgt>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	f040 828b 	bne.w	80076cc <_dtoa_r+0x93c>
 80071b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071ba:	462a      	mov	r2, r5
 80071bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071c0:	f7f9 fc8c 	bl	8000adc <__aeabi_dcmplt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f040 8128 	bne.w	800741a <_dtoa_r+0x68a>
 80071ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80071d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f2c0 815a 	blt.w	800748e <_dtoa_r+0x6fe>
 80071da:	2f0e      	cmp	r7, #14
 80071dc:	f300 8157 	bgt.w	800748e <_dtoa_r+0x6fe>
 80071e0:	4b5a      	ldr	r3, [pc, #360]	@ (800734c <_dtoa_r+0x5bc>)
 80071e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071e6:	ed93 7b00 	vldr	d7, [r3]
 80071ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	ed8d 7b00 	vstr	d7, [sp]
 80071f2:	da03      	bge.n	80071fc <_dtoa_r+0x46c>
 80071f4:	9b07      	ldr	r3, [sp, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f340 8101 	ble.w	80073fe <_dtoa_r+0x66e>
 80071fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007200:	4656      	mov	r6, sl
 8007202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	f7f9 fb1f 	bl	800084c <__aeabi_ddiv>
 800720e:	f7f9 fca3 	bl	8000b58 <__aeabi_d2iz>
 8007212:	4680      	mov	r8, r0
 8007214:	f7f9 f986 	bl	8000524 <__aeabi_i2d>
 8007218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721c:	f7f9 f9ec 	bl	80005f8 <__aeabi_dmul>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800722c:	f7f9 f82c 	bl	8000288 <__aeabi_dsub>
 8007230:	f806 4b01 	strb.w	r4, [r6], #1
 8007234:	9d07      	ldr	r5, [sp, #28]
 8007236:	eba6 040a 	sub.w	r4, r6, sl
 800723a:	42a5      	cmp	r5, r4
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	f040 8117 	bne.w	8007472 <_dtoa_r+0x6e2>
 8007244:	f7f9 f822 	bl	800028c <__adddf3>
 8007248:	e9dd 2300 	ldrd	r2, r3, [sp]
 800724c:	4604      	mov	r4, r0
 800724e:	460d      	mov	r5, r1
 8007250:	f7f9 fc62 	bl	8000b18 <__aeabi_dcmpgt>
 8007254:	2800      	cmp	r0, #0
 8007256:	f040 80f9 	bne.w	800744c <_dtoa_r+0x6bc>
 800725a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800725e:	4620      	mov	r0, r4
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 fc31 	bl	8000ac8 <__aeabi_dcmpeq>
 8007266:	b118      	cbz	r0, 8007270 <_dtoa_r+0x4e0>
 8007268:	f018 0f01 	tst.w	r8, #1
 800726c:	f040 80ee 	bne.w	800744c <_dtoa_r+0x6bc>
 8007270:	4649      	mov	r1, r9
 8007272:	4658      	mov	r0, fp
 8007274:	f000 fc90 	bl	8007b98 <_Bfree>
 8007278:	2300      	movs	r3, #0
 800727a:	7033      	strb	r3, [r6, #0]
 800727c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800727e:	3701      	adds	r7, #1
 8007280:	601f      	str	r7, [r3, #0]
 8007282:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007284:	2b00      	cmp	r3, #0
 8007286:	f000 831d 	beq.w	80078c4 <_dtoa_r+0xb34>
 800728a:	601e      	str	r6, [r3, #0]
 800728c:	e31a      	b.n	80078c4 <_dtoa_r+0xb34>
 800728e:	07e2      	lsls	r2, r4, #31
 8007290:	d505      	bpl.n	800729e <_dtoa_r+0x50e>
 8007292:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007296:	f7f9 f9af 	bl	80005f8 <__aeabi_dmul>
 800729a:	3601      	adds	r6, #1
 800729c:	2301      	movs	r3, #1
 800729e:	1064      	asrs	r4, r4, #1
 80072a0:	3508      	adds	r5, #8
 80072a2:	e73f      	b.n	8007124 <_dtoa_r+0x394>
 80072a4:	2602      	movs	r6, #2
 80072a6:	e742      	b.n	800712e <_dtoa_r+0x39e>
 80072a8:	9c07      	ldr	r4, [sp, #28]
 80072aa:	9704      	str	r7, [sp, #16]
 80072ac:	e761      	b.n	8007172 <_dtoa_r+0x3e2>
 80072ae:	4b27      	ldr	r3, [pc, #156]	@ (800734c <_dtoa_r+0x5bc>)
 80072b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072ba:	4454      	add	r4, sl
 80072bc:	2900      	cmp	r1, #0
 80072be:	d053      	beq.n	8007368 <_dtoa_r+0x5d8>
 80072c0:	4928      	ldr	r1, [pc, #160]	@ (8007364 <_dtoa_r+0x5d4>)
 80072c2:	2000      	movs	r0, #0
 80072c4:	f7f9 fac2 	bl	800084c <__aeabi_ddiv>
 80072c8:	4633      	mov	r3, r6
 80072ca:	462a      	mov	r2, r5
 80072cc:	f7f8 ffdc 	bl	8000288 <__aeabi_dsub>
 80072d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072d4:	4656      	mov	r6, sl
 80072d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072da:	f7f9 fc3d 	bl	8000b58 <__aeabi_d2iz>
 80072de:	4605      	mov	r5, r0
 80072e0:	f7f9 f920 	bl	8000524 <__aeabi_i2d>
 80072e4:	4602      	mov	r2, r0
 80072e6:	460b      	mov	r3, r1
 80072e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ec:	f7f8 ffcc 	bl	8000288 <__aeabi_dsub>
 80072f0:	3530      	adds	r5, #48	@ 0x30
 80072f2:	4602      	mov	r2, r0
 80072f4:	460b      	mov	r3, r1
 80072f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072fa:	f806 5b01 	strb.w	r5, [r6], #1
 80072fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007302:	f7f9 fbeb 	bl	8000adc <__aeabi_dcmplt>
 8007306:	2800      	cmp	r0, #0
 8007308:	d171      	bne.n	80073ee <_dtoa_r+0x65e>
 800730a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800730e:	4911      	ldr	r1, [pc, #68]	@ (8007354 <_dtoa_r+0x5c4>)
 8007310:	2000      	movs	r0, #0
 8007312:	f7f8 ffb9 	bl	8000288 <__aeabi_dsub>
 8007316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800731a:	f7f9 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800731e:	2800      	cmp	r0, #0
 8007320:	f040 8095 	bne.w	800744e <_dtoa_r+0x6be>
 8007324:	42a6      	cmp	r6, r4
 8007326:	f43f af50 	beq.w	80071ca <_dtoa_r+0x43a>
 800732a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800732e:	4b0a      	ldr	r3, [pc, #40]	@ (8007358 <_dtoa_r+0x5c8>)
 8007330:	2200      	movs	r2, #0
 8007332:	f7f9 f961 	bl	80005f8 <__aeabi_dmul>
 8007336:	4b08      	ldr	r3, [pc, #32]	@ (8007358 <_dtoa_r+0x5c8>)
 8007338:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800733c:	2200      	movs	r2, #0
 800733e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007342:	f7f9 f959 	bl	80005f8 <__aeabi_dmul>
 8007346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800734a:	e7c4      	b.n	80072d6 <_dtoa_r+0x546>
 800734c:	08008bf0 	.word	0x08008bf0
 8007350:	08008bc8 	.word	0x08008bc8
 8007354:	3ff00000 	.word	0x3ff00000
 8007358:	40240000 	.word	0x40240000
 800735c:	401c0000 	.word	0x401c0000
 8007360:	40140000 	.word	0x40140000
 8007364:	3fe00000 	.word	0x3fe00000
 8007368:	4631      	mov	r1, r6
 800736a:	4628      	mov	r0, r5
 800736c:	f7f9 f944 	bl	80005f8 <__aeabi_dmul>
 8007370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007374:	9415      	str	r4, [sp, #84]	@ 0x54
 8007376:	4656      	mov	r6, sl
 8007378:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800737c:	f7f9 fbec 	bl	8000b58 <__aeabi_d2iz>
 8007380:	4605      	mov	r5, r0
 8007382:	f7f9 f8cf 	bl	8000524 <__aeabi_i2d>
 8007386:	4602      	mov	r2, r0
 8007388:	460b      	mov	r3, r1
 800738a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800738e:	f7f8 ff7b 	bl	8000288 <__aeabi_dsub>
 8007392:	3530      	adds	r5, #48	@ 0x30
 8007394:	f806 5b01 	strb.w	r5, [r6], #1
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	42a6      	cmp	r6, r4
 800739e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	d124      	bne.n	80073f2 <_dtoa_r+0x662>
 80073a8:	4bac      	ldr	r3, [pc, #688]	@ (800765c <_dtoa_r+0x8cc>)
 80073aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073ae:	f7f8 ff6d 	bl	800028c <__adddf3>
 80073b2:	4602      	mov	r2, r0
 80073b4:	460b      	mov	r3, r1
 80073b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ba:	f7f9 fbad 	bl	8000b18 <__aeabi_dcmpgt>
 80073be:	2800      	cmp	r0, #0
 80073c0:	d145      	bne.n	800744e <_dtoa_r+0x6be>
 80073c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073c6:	49a5      	ldr	r1, [pc, #660]	@ (800765c <_dtoa_r+0x8cc>)
 80073c8:	2000      	movs	r0, #0
 80073ca:	f7f8 ff5d 	bl	8000288 <__aeabi_dsub>
 80073ce:	4602      	mov	r2, r0
 80073d0:	460b      	mov	r3, r1
 80073d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d6:	f7f9 fb81 	bl	8000adc <__aeabi_dcmplt>
 80073da:	2800      	cmp	r0, #0
 80073dc:	f43f aef5 	beq.w	80071ca <_dtoa_r+0x43a>
 80073e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80073e2:	1e73      	subs	r3, r6, #1
 80073e4:	9315      	str	r3, [sp, #84]	@ 0x54
 80073e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073ea:	2b30      	cmp	r3, #48	@ 0x30
 80073ec:	d0f8      	beq.n	80073e0 <_dtoa_r+0x650>
 80073ee:	9f04      	ldr	r7, [sp, #16]
 80073f0:	e73e      	b.n	8007270 <_dtoa_r+0x4e0>
 80073f2:	4b9b      	ldr	r3, [pc, #620]	@ (8007660 <_dtoa_r+0x8d0>)
 80073f4:	f7f9 f900 	bl	80005f8 <__aeabi_dmul>
 80073f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073fc:	e7bc      	b.n	8007378 <_dtoa_r+0x5e8>
 80073fe:	d10c      	bne.n	800741a <_dtoa_r+0x68a>
 8007400:	4b98      	ldr	r3, [pc, #608]	@ (8007664 <_dtoa_r+0x8d4>)
 8007402:	2200      	movs	r2, #0
 8007404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007408:	f7f9 f8f6 	bl	80005f8 <__aeabi_dmul>
 800740c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007410:	f7f9 fb78 	bl	8000b04 <__aeabi_dcmpge>
 8007414:	2800      	cmp	r0, #0
 8007416:	f000 8157 	beq.w	80076c8 <_dtoa_r+0x938>
 800741a:	2400      	movs	r4, #0
 800741c:	4625      	mov	r5, r4
 800741e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007420:	43db      	mvns	r3, r3
 8007422:	9304      	str	r3, [sp, #16]
 8007424:	4656      	mov	r6, sl
 8007426:	2700      	movs	r7, #0
 8007428:	4621      	mov	r1, r4
 800742a:	4658      	mov	r0, fp
 800742c:	f000 fbb4 	bl	8007b98 <_Bfree>
 8007430:	2d00      	cmp	r5, #0
 8007432:	d0dc      	beq.n	80073ee <_dtoa_r+0x65e>
 8007434:	b12f      	cbz	r7, 8007442 <_dtoa_r+0x6b2>
 8007436:	42af      	cmp	r7, r5
 8007438:	d003      	beq.n	8007442 <_dtoa_r+0x6b2>
 800743a:	4639      	mov	r1, r7
 800743c:	4658      	mov	r0, fp
 800743e:	f000 fbab 	bl	8007b98 <_Bfree>
 8007442:	4629      	mov	r1, r5
 8007444:	4658      	mov	r0, fp
 8007446:	f000 fba7 	bl	8007b98 <_Bfree>
 800744a:	e7d0      	b.n	80073ee <_dtoa_r+0x65e>
 800744c:	9704      	str	r7, [sp, #16]
 800744e:	4633      	mov	r3, r6
 8007450:	461e      	mov	r6, r3
 8007452:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007456:	2a39      	cmp	r2, #57	@ 0x39
 8007458:	d107      	bne.n	800746a <_dtoa_r+0x6da>
 800745a:	459a      	cmp	sl, r3
 800745c:	d1f8      	bne.n	8007450 <_dtoa_r+0x6c0>
 800745e:	9a04      	ldr	r2, [sp, #16]
 8007460:	3201      	adds	r2, #1
 8007462:	9204      	str	r2, [sp, #16]
 8007464:	2230      	movs	r2, #48	@ 0x30
 8007466:	f88a 2000 	strb.w	r2, [sl]
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	3201      	adds	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]
 8007470:	e7bd      	b.n	80073ee <_dtoa_r+0x65e>
 8007472:	4b7b      	ldr	r3, [pc, #492]	@ (8007660 <_dtoa_r+0x8d0>)
 8007474:	2200      	movs	r2, #0
 8007476:	f7f9 f8bf 	bl	80005f8 <__aeabi_dmul>
 800747a:	2200      	movs	r2, #0
 800747c:	2300      	movs	r3, #0
 800747e:	4604      	mov	r4, r0
 8007480:	460d      	mov	r5, r1
 8007482:	f7f9 fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8007486:	2800      	cmp	r0, #0
 8007488:	f43f aebb 	beq.w	8007202 <_dtoa_r+0x472>
 800748c:	e6f0      	b.n	8007270 <_dtoa_r+0x4e0>
 800748e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007490:	2a00      	cmp	r2, #0
 8007492:	f000 80db 	beq.w	800764c <_dtoa_r+0x8bc>
 8007496:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007498:	2a01      	cmp	r2, #1
 800749a:	f300 80bf 	bgt.w	800761c <_dtoa_r+0x88c>
 800749e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	f000 80b7 	beq.w	8007614 <_dtoa_r+0x884>
 80074a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074ac:	4646      	mov	r6, r8
 80074ae:	9a08      	ldr	r2, [sp, #32]
 80074b0:	2101      	movs	r1, #1
 80074b2:	441a      	add	r2, r3
 80074b4:	4658      	mov	r0, fp
 80074b6:	4498      	add	r8, r3
 80074b8:	9208      	str	r2, [sp, #32]
 80074ba:	f000 fc21 	bl	8007d00 <__i2b>
 80074be:	4605      	mov	r5, r0
 80074c0:	b15e      	cbz	r6, 80074da <_dtoa_r+0x74a>
 80074c2:	9b08      	ldr	r3, [sp, #32]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	dd08      	ble.n	80074da <_dtoa_r+0x74a>
 80074c8:	42b3      	cmp	r3, r6
 80074ca:	9a08      	ldr	r2, [sp, #32]
 80074cc:	bfa8      	it	ge
 80074ce:	4633      	movge	r3, r6
 80074d0:	eba8 0803 	sub.w	r8, r8, r3
 80074d4:	1af6      	subs	r6, r6, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	9308      	str	r3, [sp, #32]
 80074da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074dc:	b1f3      	cbz	r3, 800751c <_dtoa_r+0x78c>
 80074de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	f000 80b7 	beq.w	8007654 <_dtoa_r+0x8c4>
 80074e6:	b18c      	cbz	r4, 800750c <_dtoa_r+0x77c>
 80074e8:	4629      	mov	r1, r5
 80074ea:	4622      	mov	r2, r4
 80074ec:	4658      	mov	r0, fp
 80074ee:	f000 fcc7 	bl	8007e80 <__pow5mult>
 80074f2:	464a      	mov	r2, r9
 80074f4:	4601      	mov	r1, r0
 80074f6:	4605      	mov	r5, r0
 80074f8:	4658      	mov	r0, fp
 80074fa:	f000 fc17 	bl	8007d2c <__multiply>
 80074fe:	4649      	mov	r1, r9
 8007500:	9004      	str	r0, [sp, #16]
 8007502:	4658      	mov	r0, fp
 8007504:	f000 fb48 	bl	8007b98 <_Bfree>
 8007508:	9b04      	ldr	r3, [sp, #16]
 800750a:	4699      	mov	r9, r3
 800750c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800750e:	1b1a      	subs	r2, r3, r4
 8007510:	d004      	beq.n	800751c <_dtoa_r+0x78c>
 8007512:	4649      	mov	r1, r9
 8007514:	4658      	mov	r0, fp
 8007516:	f000 fcb3 	bl	8007e80 <__pow5mult>
 800751a:	4681      	mov	r9, r0
 800751c:	2101      	movs	r1, #1
 800751e:	4658      	mov	r0, fp
 8007520:	f000 fbee 	bl	8007d00 <__i2b>
 8007524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007526:	4604      	mov	r4, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 81cf 	beq.w	80078cc <_dtoa_r+0xb3c>
 800752e:	461a      	mov	r2, r3
 8007530:	4601      	mov	r1, r0
 8007532:	4658      	mov	r0, fp
 8007534:	f000 fca4 	bl	8007e80 <__pow5mult>
 8007538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753a:	2b01      	cmp	r3, #1
 800753c:	4604      	mov	r4, r0
 800753e:	f300 8095 	bgt.w	800766c <_dtoa_r+0x8dc>
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 8087 	bne.w	8007658 <_dtoa_r+0x8c8>
 800754a:	9b03      	ldr	r3, [sp, #12]
 800754c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007550:	2b00      	cmp	r3, #0
 8007552:	f040 8089 	bne.w	8007668 <_dtoa_r+0x8d8>
 8007556:	9b03      	ldr	r3, [sp, #12]
 8007558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800755c:	0d1b      	lsrs	r3, r3, #20
 800755e:	051b      	lsls	r3, r3, #20
 8007560:	b12b      	cbz	r3, 800756e <_dtoa_r+0x7de>
 8007562:	9b08      	ldr	r3, [sp, #32]
 8007564:	3301      	adds	r3, #1
 8007566:	9308      	str	r3, [sp, #32]
 8007568:	f108 0801 	add.w	r8, r8, #1
 800756c:	2301      	movs	r3, #1
 800756e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007570:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 81b0 	beq.w	80078d8 <_dtoa_r+0xb48>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800757e:	6918      	ldr	r0, [r3, #16]
 8007580:	f000 fb72 	bl	8007c68 <__hi0bits>
 8007584:	f1c0 0020 	rsb	r0, r0, #32
 8007588:	9b08      	ldr	r3, [sp, #32]
 800758a:	4418      	add	r0, r3
 800758c:	f010 001f 	ands.w	r0, r0, #31
 8007590:	d077      	beq.n	8007682 <_dtoa_r+0x8f2>
 8007592:	f1c0 0320 	rsb	r3, r0, #32
 8007596:	2b04      	cmp	r3, #4
 8007598:	dd6b      	ble.n	8007672 <_dtoa_r+0x8e2>
 800759a:	9b08      	ldr	r3, [sp, #32]
 800759c:	f1c0 001c 	rsb	r0, r0, #28
 80075a0:	4403      	add	r3, r0
 80075a2:	4480      	add	r8, r0
 80075a4:	4406      	add	r6, r0
 80075a6:	9308      	str	r3, [sp, #32]
 80075a8:	f1b8 0f00 	cmp.w	r8, #0
 80075ac:	dd05      	ble.n	80075ba <_dtoa_r+0x82a>
 80075ae:	4649      	mov	r1, r9
 80075b0:	4642      	mov	r2, r8
 80075b2:	4658      	mov	r0, fp
 80075b4:	f000 fcbe 	bl	8007f34 <__lshift>
 80075b8:	4681      	mov	r9, r0
 80075ba:	9b08      	ldr	r3, [sp, #32]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dd05      	ble.n	80075cc <_dtoa_r+0x83c>
 80075c0:	4621      	mov	r1, r4
 80075c2:	461a      	mov	r2, r3
 80075c4:	4658      	mov	r0, fp
 80075c6:	f000 fcb5 	bl	8007f34 <__lshift>
 80075ca:	4604      	mov	r4, r0
 80075cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d059      	beq.n	8007686 <_dtoa_r+0x8f6>
 80075d2:	4621      	mov	r1, r4
 80075d4:	4648      	mov	r0, r9
 80075d6:	f000 fd19 	bl	800800c <__mcmp>
 80075da:	2800      	cmp	r0, #0
 80075dc:	da53      	bge.n	8007686 <_dtoa_r+0x8f6>
 80075de:	1e7b      	subs	r3, r7, #1
 80075e0:	9304      	str	r3, [sp, #16]
 80075e2:	4649      	mov	r1, r9
 80075e4:	2300      	movs	r3, #0
 80075e6:	220a      	movs	r2, #10
 80075e8:	4658      	mov	r0, fp
 80075ea:	f000 faf7 	bl	8007bdc <__multadd>
 80075ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075f0:	4681      	mov	r9, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f000 8172 	beq.w	80078dc <_dtoa_r+0xb4c>
 80075f8:	2300      	movs	r3, #0
 80075fa:	4629      	mov	r1, r5
 80075fc:	220a      	movs	r2, #10
 80075fe:	4658      	mov	r0, fp
 8007600:	f000 faec 	bl	8007bdc <__multadd>
 8007604:	9b00      	ldr	r3, [sp, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	4605      	mov	r5, r0
 800760a:	dc67      	bgt.n	80076dc <_dtoa_r+0x94c>
 800760c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800760e:	2b02      	cmp	r3, #2
 8007610:	dc41      	bgt.n	8007696 <_dtoa_r+0x906>
 8007612:	e063      	b.n	80076dc <_dtoa_r+0x94c>
 8007614:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007616:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800761a:	e746      	b.n	80074aa <_dtoa_r+0x71a>
 800761c:	9b07      	ldr	r3, [sp, #28]
 800761e:	1e5c      	subs	r4, r3, #1
 8007620:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007622:	42a3      	cmp	r3, r4
 8007624:	bfbf      	itttt	lt
 8007626:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007628:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800762a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800762c:	1ae3      	sublt	r3, r4, r3
 800762e:	bfb4      	ite	lt
 8007630:	18d2      	addlt	r2, r2, r3
 8007632:	1b1c      	subge	r4, r3, r4
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	bfbc      	itt	lt
 8007638:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800763a:	2400      	movlt	r4, #0
 800763c:	2b00      	cmp	r3, #0
 800763e:	bfb5      	itete	lt
 8007640:	eba8 0603 	sublt.w	r6, r8, r3
 8007644:	9b07      	ldrge	r3, [sp, #28]
 8007646:	2300      	movlt	r3, #0
 8007648:	4646      	movge	r6, r8
 800764a:	e730      	b.n	80074ae <_dtoa_r+0x71e>
 800764c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800764e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007650:	4646      	mov	r6, r8
 8007652:	e735      	b.n	80074c0 <_dtoa_r+0x730>
 8007654:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007656:	e75c      	b.n	8007512 <_dtoa_r+0x782>
 8007658:	2300      	movs	r3, #0
 800765a:	e788      	b.n	800756e <_dtoa_r+0x7de>
 800765c:	3fe00000 	.word	0x3fe00000
 8007660:	40240000 	.word	0x40240000
 8007664:	40140000 	.word	0x40140000
 8007668:	9b02      	ldr	r3, [sp, #8]
 800766a:	e780      	b.n	800756e <_dtoa_r+0x7de>
 800766c:	2300      	movs	r3, #0
 800766e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007670:	e782      	b.n	8007578 <_dtoa_r+0x7e8>
 8007672:	d099      	beq.n	80075a8 <_dtoa_r+0x818>
 8007674:	9a08      	ldr	r2, [sp, #32]
 8007676:	331c      	adds	r3, #28
 8007678:	441a      	add	r2, r3
 800767a:	4498      	add	r8, r3
 800767c:	441e      	add	r6, r3
 800767e:	9208      	str	r2, [sp, #32]
 8007680:	e792      	b.n	80075a8 <_dtoa_r+0x818>
 8007682:	4603      	mov	r3, r0
 8007684:	e7f6      	b.n	8007674 <_dtoa_r+0x8e4>
 8007686:	9b07      	ldr	r3, [sp, #28]
 8007688:	9704      	str	r7, [sp, #16]
 800768a:	2b00      	cmp	r3, #0
 800768c:	dc20      	bgt.n	80076d0 <_dtoa_r+0x940>
 800768e:	9300      	str	r3, [sp, #0]
 8007690:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007692:	2b02      	cmp	r3, #2
 8007694:	dd1e      	ble.n	80076d4 <_dtoa_r+0x944>
 8007696:	9b00      	ldr	r3, [sp, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f47f aec0 	bne.w	800741e <_dtoa_r+0x68e>
 800769e:	4621      	mov	r1, r4
 80076a0:	2205      	movs	r2, #5
 80076a2:	4658      	mov	r0, fp
 80076a4:	f000 fa9a 	bl	8007bdc <__multadd>
 80076a8:	4601      	mov	r1, r0
 80076aa:	4604      	mov	r4, r0
 80076ac:	4648      	mov	r0, r9
 80076ae:	f000 fcad 	bl	800800c <__mcmp>
 80076b2:	2800      	cmp	r0, #0
 80076b4:	f77f aeb3 	ble.w	800741e <_dtoa_r+0x68e>
 80076b8:	4656      	mov	r6, sl
 80076ba:	2331      	movs	r3, #49	@ 0x31
 80076bc:	f806 3b01 	strb.w	r3, [r6], #1
 80076c0:	9b04      	ldr	r3, [sp, #16]
 80076c2:	3301      	adds	r3, #1
 80076c4:	9304      	str	r3, [sp, #16]
 80076c6:	e6ae      	b.n	8007426 <_dtoa_r+0x696>
 80076c8:	9c07      	ldr	r4, [sp, #28]
 80076ca:	9704      	str	r7, [sp, #16]
 80076cc:	4625      	mov	r5, r4
 80076ce:	e7f3      	b.n	80076b8 <_dtoa_r+0x928>
 80076d0:	9b07      	ldr	r3, [sp, #28]
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	f000 8104 	beq.w	80078e4 <_dtoa_r+0xb54>
 80076dc:	2e00      	cmp	r6, #0
 80076de:	dd05      	ble.n	80076ec <_dtoa_r+0x95c>
 80076e0:	4629      	mov	r1, r5
 80076e2:	4632      	mov	r2, r6
 80076e4:	4658      	mov	r0, fp
 80076e6:	f000 fc25 	bl	8007f34 <__lshift>
 80076ea:	4605      	mov	r5, r0
 80076ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d05a      	beq.n	80077a8 <_dtoa_r+0xa18>
 80076f2:	6869      	ldr	r1, [r5, #4]
 80076f4:	4658      	mov	r0, fp
 80076f6:	f000 fa0f 	bl	8007b18 <_Balloc>
 80076fa:	4606      	mov	r6, r0
 80076fc:	b928      	cbnz	r0, 800770a <_dtoa_r+0x97a>
 80076fe:	4b84      	ldr	r3, [pc, #528]	@ (8007910 <_dtoa_r+0xb80>)
 8007700:	4602      	mov	r2, r0
 8007702:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007706:	f7ff bb5a 	b.w	8006dbe <_dtoa_r+0x2e>
 800770a:	692a      	ldr	r2, [r5, #16]
 800770c:	3202      	adds	r2, #2
 800770e:	0092      	lsls	r2, r2, #2
 8007710:	f105 010c 	add.w	r1, r5, #12
 8007714:	300c      	adds	r0, #12
 8007716:	f7ff faa2 	bl	8006c5e <memcpy>
 800771a:	2201      	movs	r2, #1
 800771c:	4631      	mov	r1, r6
 800771e:	4658      	mov	r0, fp
 8007720:	f000 fc08 	bl	8007f34 <__lshift>
 8007724:	f10a 0301 	add.w	r3, sl, #1
 8007728:	9307      	str	r3, [sp, #28]
 800772a:	9b00      	ldr	r3, [sp, #0]
 800772c:	4453      	add	r3, sl
 800772e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007730:	9b02      	ldr	r3, [sp, #8]
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	462f      	mov	r7, r5
 8007738:	930a      	str	r3, [sp, #40]	@ 0x28
 800773a:	4605      	mov	r5, r0
 800773c:	9b07      	ldr	r3, [sp, #28]
 800773e:	4621      	mov	r1, r4
 8007740:	3b01      	subs	r3, #1
 8007742:	4648      	mov	r0, r9
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	f7ff fa98 	bl	8006c7a <quorem>
 800774a:	4639      	mov	r1, r7
 800774c:	9002      	str	r0, [sp, #8]
 800774e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007752:	4648      	mov	r0, r9
 8007754:	f000 fc5a 	bl	800800c <__mcmp>
 8007758:	462a      	mov	r2, r5
 800775a:	9008      	str	r0, [sp, #32]
 800775c:	4621      	mov	r1, r4
 800775e:	4658      	mov	r0, fp
 8007760:	f000 fc70 	bl	8008044 <__mdiff>
 8007764:	68c2      	ldr	r2, [r0, #12]
 8007766:	4606      	mov	r6, r0
 8007768:	bb02      	cbnz	r2, 80077ac <_dtoa_r+0xa1c>
 800776a:	4601      	mov	r1, r0
 800776c:	4648      	mov	r0, r9
 800776e:	f000 fc4d 	bl	800800c <__mcmp>
 8007772:	4602      	mov	r2, r0
 8007774:	4631      	mov	r1, r6
 8007776:	4658      	mov	r0, fp
 8007778:	920e      	str	r2, [sp, #56]	@ 0x38
 800777a:	f000 fa0d 	bl	8007b98 <_Bfree>
 800777e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007780:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007782:	9e07      	ldr	r6, [sp, #28]
 8007784:	ea43 0102 	orr.w	r1, r3, r2
 8007788:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778a:	4319      	orrs	r1, r3
 800778c:	d110      	bne.n	80077b0 <_dtoa_r+0xa20>
 800778e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007792:	d029      	beq.n	80077e8 <_dtoa_r+0xa58>
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	2b00      	cmp	r3, #0
 8007798:	dd02      	ble.n	80077a0 <_dtoa_r+0xa10>
 800779a:	9b02      	ldr	r3, [sp, #8]
 800779c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077a0:	9b00      	ldr	r3, [sp, #0]
 80077a2:	f883 8000 	strb.w	r8, [r3]
 80077a6:	e63f      	b.n	8007428 <_dtoa_r+0x698>
 80077a8:	4628      	mov	r0, r5
 80077aa:	e7bb      	b.n	8007724 <_dtoa_r+0x994>
 80077ac:	2201      	movs	r2, #1
 80077ae:	e7e1      	b.n	8007774 <_dtoa_r+0x9e4>
 80077b0:	9b08      	ldr	r3, [sp, #32]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	db04      	blt.n	80077c0 <_dtoa_r+0xa30>
 80077b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077b8:	430b      	orrs	r3, r1
 80077ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077bc:	430b      	orrs	r3, r1
 80077be:	d120      	bne.n	8007802 <_dtoa_r+0xa72>
 80077c0:	2a00      	cmp	r2, #0
 80077c2:	dded      	ble.n	80077a0 <_dtoa_r+0xa10>
 80077c4:	4649      	mov	r1, r9
 80077c6:	2201      	movs	r2, #1
 80077c8:	4658      	mov	r0, fp
 80077ca:	f000 fbb3 	bl	8007f34 <__lshift>
 80077ce:	4621      	mov	r1, r4
 80077d0:	4681      	mov	r9, r0
 80077d2:	f000 fc1b 	bl	800800c <__mcmp>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	dc03      	bgt.n	80077e2 <_dtoa_r+0xa52>
 80077da:	d1e1      	bne.n	80077a0 <_dtoa_r+0xa10>
 80077dc:	f018 0f01 	tst.w	r8, #1
 80077e0:	d0de      	beq.n	80077a0 <_dtoa_r+0xa10>
 80077e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077e6:	d1d8      	bne.n	800779a <_dtoa_r+0xa0a>
 80077e8:	9a00      	ldr	r2, [sp, #0]
 80077ea:	2339      	movs	r3, #57	@ 0x39
 80077ec:	7013      	strb	r3, [r2, #0]
 80077ee:	4633      	mov	r3, r6
 80077f0:	461e      	mov	r6, r3
 80077f2:	3b01      	subs	r3, #1
 80077f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80077f8:	2a39      	cmp	r2, #57	@ 0x39
 80077fa:	d052      	beq.n	80078a2 <_dtoa_r+0xb12>
 80077fc:	3201      	adds	r2, #1
 80077fe:	701a      	strb	r2, [r3, #0]
 8007800:	e612      	b.n	8007428 <_dtoa_r+0x698>
 8007802:	2a00      	cmp	r2, #0
 8007804:	dd07      	ble.n	8007816 <_dtoa_r+0xa86>
 8007806:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800780a:	d0ed      	beq.n	80077e8 <_dtoa_r+0xa58>
 800780c:	9a00      	ldr	r2, [sp, #0]
 800780e:	f108 0301 	add.w	r3, r8, #1
 8007812:	7013      	strb	r3, [r2, #0]
 8007814:	e608      	b.n	8007428 <_dtoa_r+0x698>
 8007816:	9b07      	ldr	r3, [sp, #28]
 8007818:	9a07      	ldr	r2, [sp, #28]
 800781a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800781e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007820:	4293      	cmp	r3, r2
 8007822:	d028      	beq.n	8007876 <_dtoa_r+0xae6>
 8007824:	4649      	mov	r1, r9
 8007826:	2300      	movs	r3, #0
 8007828:	220a      	movs	r2, #10
 800782a:	4658      	mov	r0, fp
 800782c:	f000 f9d6 	bl	8007bdc <__multadd>
 8007830:	42af      	cmp	r7, r5
 8007832:	4681      	mov	r9, r0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	f04f 020a 	mov.w	r2, #10
 800783c:	4639      	mov	r1, r7
 800783e:	4658      	mov	r0, fp
 8007840:	d107      	bne.n	8007852 <_dtoa_r+0xac2>
 8007842:	f000 f9cb 	bl	8007bdc <__multadd>
 8007846:	4607      	mov	r7, r0
 8007848:	4605      	mov	r5, r0
 800784a:	9b07      	ldr	r3, [sp, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	9307      	str	r3, [sp, #28]
 8007850:	e774      	b.n	800773c <_dtoa_r+0x9ac>
 8007852:	f000 f9c3 	bl	8007bdc <__multadd>
 8007856:	4629      	mov	r1, r5
 8007858:	4607      	mov	r7, r0
 800785a:	2300      	movs	r3, #0
 800785c:	220a      	movs	r2, #10
 800785e:	4658      	mov	r0, fp
 8007860:	f000 f9bc 	bl	8007bdc <__multadd>
 8007864:	4605      	mov	r5, r0
 8007866:	e7f0      	b.n	800784a <_dtoa_r+0xaba>
 8007868:	9b00      	ldr	r3, [sp, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	bfcc      	ite	gt
 800786e:	461e      	movgt	r6, r3
 8007870:	2601      	movle	r6, #1
 8007872:	4456      	add	r6, sl
 8007874:	2700      	movs	r7, #0
 8007876:	4649      	mov	r1, r9
 8007878:	2201      	movs	r2, #1
 800787a:	4658      	mov	r0, fp
 800787c:	f000 fb5a 	bl	8007f34 <__lshift>
 8007880:	4621      	mov	r1, r4
 8007882:	4681      	mov	r9, r0
 8007884:	f000 fbc2 	bl	800800c <__mcmp>
 8007888:	2800      	cmp	r0, #0
 800788a:	dcb0      	bgt.n	80077ee <_dtoa_r+0xa5e>
 800788c:	d102      	bne.n	8007894 <_dtoa_r+0xb04>
 800788e:	f018 0f01 	tst.w	r8, #1
 8007892:	d1ac      	bne.n	80077ee <_dtoa_r+0xa5e>
 8007894:	4633      	mov	r3, r6
 8007896:	461e      	mov	r6, r3
 8007898:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789c:	2a30      	cmp	r2, #48	@ 0x30
 800789e:	d0fa      	beq.n	8007896 <_dtoa_r+0xb06>
 80078a0:	e5c2      	b.n	8007428 <_dtoa_r+0x698>
 80078a2:	459a      	cmp	sl, r3
 80078a4:	d1a4      	bne.n	80077f0 <_dtoa_r+0xa60>
 80078a6:	9b04      	ldr	r3, [sp, #16]
 80078a8:	3301      	adds	r3, #1
 80078aa:	9304      	str	r3, [sp, #16]
 80078ac:	2331      	movs	r3, #49	@ 0x31
 80078ae:	f88a 3000 	strb.w	r3, [sl]
 80078b2:	e5b9      	b.n	8007428 <_dtoa_r+0x698>
 80078b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007914 <_dtoa_r+0xb84>
 80078ba:	b11b      	cbz	r3, 80078c4 <_dtoa_r+0xb34>
 80078bc:	f10a 0308 	add.w	r3, sl, #8
 80078c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80078c2:	6013      	str	r3, [r2, #0]
 80078c4:	4650      	mov	r0, sl
 80078c6:	b019      	add	sp, #100	@ 0x64
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	f77f ae37 	ble.w	8007542 <_dtoa_r+0x7b2>
 80078d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d8:	2001      	movs	r0, #1
 80078da:	e655      	b.n	8007588 <_dtoa_r+0x7f8>
 80078dc:	9b00      	ldr	r3, [sp, #0]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f77f aed6 	ble.w	8007690 <_dtoa_r+0x900>
 80078e4:	4656      	mov	r6, sl
 80078e6:	4621      	mov	r1, r4
 80078e8:	4648      	mov	r0, r9
 80078ea:	f7ff f9c6 	bl	8006c7a <quorem>
 80078ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80078f2:	f806 8b01 	strb.w	r8, [r6], #1
 80078f6:	9b00      	ldr	r3, [sp, #0]
 80078f8:	eba6 020a 	sub.w	r2, r6, sl
 80078fc:	4293      	cmp	r3, r2
 80078fe:	ddb3      	ble.n	8007868 <_dtoa_r+0xad8>
 8007900:	4649      	mov	r1, r9
 8007902:	2300      	movs	r3, #0
 8007904:	220a      	movs	r2, #10
 8007906:	4658      	mov	r0, fp
 8007908:	f000 f968 	bl	8007bdc <__multadd>
 800790c:	4681      	mov	r9, r0
 800790e:	e7ea      	b.n	80078e6 <_dtoa_r+0xb56>
 8007910:	08008b4c 	.word	0x08008b4c
 8007914:	08008ad0 	.word	0x08008ad0

08007918 <_free_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4605      	mov	r5, r0
 800791c:	2900      	cmp	r1, #0
 800791e:	d041      	beq.n	80079a4 <_free_r+0x8c>
 8007920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007924:	1f0c      	subs	r4, r1, #4
 8007926:	2b00      	cmp	r3, #0
 8007928:	bfb8      	it	lt
 800792a:	18e4      	addlt	r4, r4, r3
 800792c:	f000 f8e8 	bl	8007b00 <__malloc_lock>
 8007930:	4a1d      	ldr	r2, [pc, #116]	@ (80079a8 <_free_r+0x90>)
 8007932:	6813      	ldr	r3, [r2, #0]
 8007934:	b933      	cbnz	r3, 8007944 <_free_r+0x2c>
 8007936:	6063      	str	r3, [r4, #4]
 8007938:	6014      	str	r4, [r2, #0]
 800793a:	4628      	mov	r0, r5
 800793c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007940:	f000 b8e4 	b.w	8007b0c <__malloc_unlock>
 8007944:	42a3      	cmp	r3, r4
 8007946:	d908      	bls.n	800795a <_free_r+0x42>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	1821      	adds	r1, r4, r0
 800794c:	428b      	cmp	r3, r1
 800794e:	bf01      	itttt	eq
 8007950:	6819      	ldreq	r1, [r3, #0]
 8007952:	685b      	ldreq	r3, [r3, #4]
 8007954:	1809      	addeq	r1, r1, r0
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	e7ed      	b.n	8007936 <_free_r+0x1e>
 800795a:	461a      	mov	r2, r3
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	b10b      	cbz	r3, 8007964 <_free_r+0x4c>
 8007960:	42a3      	cmp	r3, r4
 8007962:	d9fa      	bls.n	800795a <_free_r+0x42>
 8007964:	6811      	ldr	r1, [r2, #0]
 8007966:	1850      	adds	r0, r2, r1
 8007968:	42a0      	cmp	r0, r4
 800796a:	d10b      	bne.n	8007984 <_free_r+0x6c>
 800796c:	6820      	ldr	r0, [r4, #0]
 800796e:	4401      	add	r1, r0
 8007970:	1850      	adds	r0, r2, r1
 8007972:	4283      	cmp	r3, r0
 8007974:	6011      	str	r1, [r2, #0]
 8007976:	d1e0      	bne.n	800793a <_free_r+0x22>
 8007978:	6818      	ldr	r0, [r3, #0]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	6053      	str	r3, [r2, #4]
 800797e:	4408      	add	r0, r1
 8007980:	6010      	str	r0, [r2, #0]
 8007982:	e7da      	b.n	800793a <_free_r+0x22>
 8007984:	d902      	bls.n	800798c <_free_r+0x74>
 8007986:	230c      	movs	r3, #12
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	e7d6      	b.n	800793a <_free_r+0x22>
 800798c:	6820      	ldr	r0, [r4, #0]
 800798e:	1821      	adds	r1, r4, r0
 8007990:	428b      	cmp	r3, r1
 8007992:	bf04      	itt	eq
 8007994:	6819      	ldreq	r1, [r3, #0]
 8007996:	685b      	ldreq	r3, [r3, #4]
 8007998:	6063      	str	r3, [r4, #4]
 800799a:	bf04      	itt	eq
 800799c:	1809      	addeq	r1, r1, r0
 800799e:	6021      	streq	r1, [r4, #0]
 80079a0:	6054      	str	r4, [r2, #4]
 80079a2:	e7ca      	b.n	800793a <_free_r+0x22>
 80079a4:	bd38      	pop	{r3, r4, r5, pc}
 80079a6:	bf00      	nop
 80079a8:	20004d84 	.word	0x20004d84

080079ac <malloc>:
 80079ac:	4b02      	ldr	r3, [pc, #8]	@ (80079b8 <malloc+0xc>)
 80079ae:	4601      	mov	r1, r0
 80079b0:	6818      	ldr	r0, [r3, #0]
 80079b2:	f000 b825 	b.w	8007a00 <_malloc_r>
 80079b6:	bf00      	nop
 80079b8:	2000001c 	.word	0x2000001c

080079bc <sbrk_aligned>:
 80079bc:	b570      	push	{r4, r5, r6, lr}
 80079be:	4e0f      	ldr	r6, [pc, #60]	@ (80079fc <sbrk_aligned+0x40>)
 80079c0:	460c      	mov	r4, r1
 80079c2:	6831      	ldr	r1, [r6, #0]
 80079c4:	4605      	mov	r5, r0
 80079c6:	b911      	cbnz	r1, 80079ce <sbrk_aligned+0x12>
 80079c8:	f000 fcd4 	bl	8008374 <_sbrk_r>
 80079cc:	6030      	str	r0, [r6, #0]
 80079ce:	4621      	mov	r1, r4
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 fccf 	bl	8008374 <_sbrk_r>
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	d103      	bne.n	80079e2 <sbrk_aligned+0x26>
 80079da:	f04f 34ff 	mov.w	r4, #4294967295
 80079de:	4620      	mov	r0, r4
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	1cc4      	adds	r4, r0, #3
 80079e4:	f024 0403 	bic.w	r4, r4, #3
 80079e8:	42a0      	cmp	r0, r4
 80079ea:	d0f8      	beq.n	80079de <sbrk_aligned+0x22>
 80079ec:	1a21      	subs	r1, r4, r0
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 fcc0 	bl	8008374 <_sbrk_r>
 80079f4:	3001      	adds	r0, #1
 80079f6:	d1f2      	bne.n	80079de <sbrk_aligned+0x22>
 80079f8:	e7ef      	b.n	80079da <sbrk_aligned+0x1e>
 80079fa:	bf00      	nop
 80079fc:	20004d80 	.word	0x20004d80

08007a00 <_malloc_r>:
 8007a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a04:	1ccd      	adds	r5, r1, #3
 8007a06:	f025 0503 	bic.w	r5, r5, #3
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	2d0c      	cmp	r5, #12
 8007a0e:	bf38      	it	cc
 8007a10:	250c      	movcc	r5, #12
 8007a12:	2d00      	cmp	r5, #0
 8007a14:	4606      	mov	r6, r0
 8007a16:	db01      	blt.n	8007a1c <_malloc_r+0x1c>
 8007a18:	42a9      	cmp	r1, r5
 8007a1a:	d904      	bls.n	8007a26 <_malloc_r+0x26>
 8007a1c:	230c      	movs	r3, #12
 8007a1e:	6033      	str	r3, [r6, #0]
 8007a20:	2000      	movs	r0, #0
 8007a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007afc <_malloc_r+0xfc>
 8007a2a:	f000 f869 	bl	8007b00 <__malloc_lock>
 8007a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a32:	461c      	mov	r4, r3
 8007a34:	bb44      	cbnz	r4, 8007a88 <_malloc_r+0x88>
 8007a36:	4629      	mov	r1, r5
 8007a38:	4630      	mov	r0, r6
 8007a3a:	f7ff ffbf 	bl	80079bc <sbrk_aligned>
 8007a3e:	1c43      	adds	r3, r0, #1
 8007a40:	4604      	mov	r4, r0
 8007a42:	d158      	bne.n	8007af6 <_malloc_r+0xf6>
 8007a44:	f8d8 4000 	ldr.w	r4, [r8]
 8007a48:	4627      	mov	r7, r4
 8007a4a:	2f00      	cmp	r7, #0
 8007a4c:	d143      	bne.n	8007ad6 <_malloc_r+0xd6>
 8007a4e:	2c00      	cmp	r4, #0
 8007a50:	d04b      	beq.n	8007aea <_malloc_r+0xea>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	4639      	mov	r1, r7
 8007a56:	4630      	mov	r0, r6
 8007a58:	eb04 0903 	add.w	r9, r4, r3
 8007a5c:	f000 fc8a 	bl	8008374 <_sbrk_r>
 8007a60:	4581      	cmp	r9, r0
 8007a62:	d142      	bne.n	8007aea <_malloc_r+0xea>
 8007a64:	6821      	ldr	r1, [r4, #0]
 8007a66:	1a6d      	subs	r5, r5, r1
 8007a68:	4629      	mov	r1, r5
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7ff ffa6 	bl	80079bc <sbrk_aligned>
 8007a70:	3001      	adds	r0, #1
 8007a72:	d03a      	beq.n	8007aea <_malloc_r+0xea>
 8007a74:	6823      	ldr	r3, [r4, #0]
 8007a76:	442b      	add	r3, r5
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	bb62      	cbnz	r2, 8007adc <_malloc_r+0xdc>
 8007a82:	f8c8 7000 	str.w	r7, [r8]
 8007a86:	e00f      	b.n	8007aa8 <_malloc_r+0xa8>
 8007a88:	6822      	ldr	r2, [r4, #0]
 8007a8a:	1b52      	subs	r2, r2, r5
 8007a8c:	d420      	bmi.n	8007ad0 <_malloc_r+0xd0>
 8007a8e:	2a0b      	cmp	r2, #11
 8007a90:	d917      	bls.n	8007ac2 <_malloc_r+0xc2>
 8007a92:	1961      	adds	r1, r4, r5
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	6025      	str	r5, [r4, #0]
 8007a98:	bf18      	it	ne
 8007a9a:	6059      	strne	r1, [r3, #4]
 8007a9c:	6863      	ldr	r3, [r4, #4]
 8007a9e:	bf08      	it	eq
 8007aa0:	f8c8 1000 	streq.w	r1, [r8]
 8007aa4:	5162      	str	r2, [r4, r5]
 8007aa6:	604b      	str	r3, [r1, #4]
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 f82f 	bl	8007b0c <__malloc_unlock>
 8007aae:	f104 000b 	add.w	r0, r4, #11
 8007ab2:	1d23      	adds	r3, r4, #4
 8007ab4:	f020 0007 	bic.w	r0, r0, #7
 8007ab8:	1ac2      	subs	r2, r0, r3
 8007aba:	bf1c      	itt	ne
 8007abc:	1a1b      	subne	r3, r3, r0
 8007abe:	50a3      	strne	r3, [r4, r2]
 8007ac0:	e7af      	b.n	8007a22 <_malloc_r+0x22>
 8007ac2:	6862      	ldr	r2, [r4, #4]
 8007ac4:	42a3      	cmp	r3, r4
 8007ac6:	bf0c      	ite	eq
 8007ac8:	f8c8 2000 	streq.w	r2, [r8]
 8007acc:	605a      	strne	r2, [r3, #4]
 8007ace:	e7eb      	b.n	8007aa8 <_malloc_r+0xa8>
 8007ad0:	4623      	mov	r3, r4
 8007ad2:	6864      	ldr	r4, [r4, #4]
 8007ad4:	e7ae      	b.n	8007a34 <_malloc_r+0x34>
 8007ad6:	463c      	mov	r4, r7
 8007ad8:	687f      	ldr	r7, [r7, #4]
 8007ada:	e7b6      	b.n	8007a4a <_malloc_r+0x4a>
 8007adc:	461a      	mov	r2, r3
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	42a3      	cmp	r3, r4
 8007ae2:	d1fb      	bne.n	8007adc <_malloc_r+0xdc>
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	6053      	str	r3, [r2, #4]
 8007ae8:	e7de      	b.n	8007aa8 <_malloc_r+0xa8>
 8007aea:	230c      	movs	r3, #12
 8007aec:	6033      	str	r3, [r6, #0]
 8007aee:	4630      	mov	r0, r6
 8007af0:	f000 f80c 	bl	8007b0c <__malloc_unlock>
 8007af4:	e794      	b.n	8007a20 <_malloc_r+0x20>
 8007af6:	6005      	str	r5, [r0, #0]
 8007af8:	e7d6      	b.n	8007aa8 <_malloc_r+0xa8>
 8007afa:	bf00      	nop
 8007afc:	20004d84 	.word	0x20004d84

08007b00 <__malloc_lock>:
 8007b00:	4801      	ldr	r0, [pc, #4]	@ (8007b08 <__malloc_lock+0x8>)
 8007b02:	f7ff b8aa 	b.w	8006c5a <__retarget_lock_acquire_recursive>
 8007b06:	bf00      	nop
 8007b08:	20004d7c 	.word	0x20004d7c

08007b0c <__malloc_unlock>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__malloc_unlock+0x8>)
 8007b0e:	f7ff b8a5 	b.w	8006c5c <__retarget_lock_release_recursive>
 8007b12:	bf00      	nop
 8007b14:	20004d7c 	.word	0x20004d7c

08007b18 <_Balloc>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	69c6      	ldr	r6, [r0, #28]
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	460d      	mov	r5, r1
 8007b20:	b976      	cbnz	r6, 8007b40 <_Balloc+0x28>
 8007b22:	2010      	movs	r0, #16
 8007b24:	f7ff ff42 	bl	80079ac <malloc>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	61e0      	str	r0, [r4, #28]
 8007b2c:	b920      	cbnz	r0, 8007b38 <_Balloc+0x20>
 8007b2e:	4b18      	ldr	r3, [pc, #96]	@ (8007b90 <_Balloc+0x78>)
 8007b30:	4818      	ldr	r0, [pc, #96]	@ (8007b94 <_Balloc+0x7c>)
 8007b32:	216b      	movs	r1, #107	@ 0x6b
 8007b34:	f000 fc2e 	bl	8008394 <__assert_func>
 8007b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b3c:	6006      	str	r6, [r0, #0]
 8007b3e:	60c6      	str	r6, [r0, #12]
 8007b40:	69e6      	ldr	r6, [r4, #28]
 8007b42:	68f3      	ldr	r3, [r6, #12]
 8007b44:	b183      	cbz	r3, 8007b68 <_Balloc+0x50>
 8007b46:	69e3      	ldr	r3, [r4, #28]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b4e:	b9b8      	cbnz	r0, 8007b80 <_Balloc+0x68>
 8007b50:	2101      	movs	r1, #1
 8007b52:	fa01 f605 	lsl.w	r6, r1, r5
 8007b56:	1d72      	adds	r2, r6, #5
 8007b58:	0092      	lsls	r2, r2, #2
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f000 fc38 	bl	80083d0 <_calloc_r>
 8007b60:	b160      	cbz	r0, 8007b7c <_Balloc+0x64>
 8007b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b66:	e00e      	b.n	8007b86 <_Balloc+0x6e>
 8007b68:	2221      	movs	r2, #33	@ 0x21
 8007b6a:	2104      	movs	r1, #4
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	f000 fc2f 	bl	80083d0 <_calloc_r>
 8007b72:	69e3      	ldr	r3, [r4, #28]
 8007b74:	60f0      	str	r0, [r6, #12]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1e4      	bne.n	8007b46 <_Balloc+0x2e>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	6802      	ldr	r2, [r0, #0]
 8007b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b86:	2300      	movs	r3, #0
 8007b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b8c:	e7f7      	b.n	8007b7e <_Balloc+0x66>
 8007b8e:	bf00      	nop
 8007b90:	08008add 	.word	0x08008add
 8007b94:	08008b5d 	.word	0x08008b5d

08007b98 <_Bfree>:
 8007b98:	b570      	push	{r4, r5, r6, lr}
 8007b9a:	69c6      	ldr	r6, [r0, #28]
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	460c      	mov	r4, r1
 8007ba0:	b976      	cbnz	r6, 8007bc0 <_Bfree+0x28>
 8007ba2:	2010      	movs	r0, #16
 8007ba4:	f7ff ff02 	bl	80079ac <malloc>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	61e8      	str	r0, [r5, #28]
 8007bac:	b920      	cbnz	r0, 8007bb8 <_Bfree+0x20>
 8007bae:	4b09      	ldr	r3, [pc, #36]	@ (8007bd4 <_Bfree+0x3c>)
 8007bb0:	4809      	ldr	r0, [pc, #36]	@ (8007bd8 <_Bfree+0x40>)
 8007bb2:	218f      	movs	r1, #143	@ 0x8f
 8007bb4:	f000 fbee 	bl	8008394 <__assert_func>
 8007bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bbc:	6006      	str	r6, [r0, #0]
 8007bbe:	60c6      	str	r6, [r0, #12]
 8007bc0:	b13c      	cbz	r4, 8007bd2 <_Bfree+0x3a>
 8007bc2:	69eb      	ldr	r3, [r5, #28]
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007bcc:	6021      	str	r1, [r4, #0]
 8007bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bd2:	bd70      	pop	{r4, r5, r6, pc}
 8007bd4:	08008add 	.word	0x08008add
 8007bd8:	08008b5d 	.word	0x08008b5d

08007bdc <__multadd>:
 8007bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007be0:	690d      	ldr	r5, [r1, #16]
 8007be2:	4607      	mov	r7, r0
 8007be4:	460c      	mov	r4, r1
 8007be6:	461e      	mov	r6, r3
 8007be8:	f101 0c14 	add.w	ip, r1, #20
 8007bec:	2000      	movs	r0, #0
 8007bee:	f8dc 3000 	ldr.w	r3, [ip]
 8007bf2:	b299      	uxth	r1, r3
 8007bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8007bf8:	0c1e      	lsrs	r6, r3, #16
 8007bfa:	0c0b      	lsrs	r3, r1, #16
 8007bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8007c00:	b289      	uxth	r1, r1
 8007c02:	3001      	adds	r0, #1
 8007c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c08:	4285      	cmp	r5, r0
 8007c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c12:	dcec      	bgt.n	8007bee <__multadd+0x12>
 8007c14:	b30e      	cbz	r6, 8007c5a <__multadd+0x7e>
 8007c16:	68a3      	ldr	r3, [r4, #8]
 8007c18:	42ab      	cmp	r3, r5
 8007c1a:	dc19      	bgt.n	8007c50 <__multadd+0x74>
 8007c1c:	6861      	ldr	r1, [r4, #4]
 8007c1e:	4638      	mov	r0, r7
 8007c20:	3101      	adds	r1, #1
 8007c22:	f7ff ff79 	bl	8007b18 <_Balloc>
 8007c26:	4680      	mov	r8, r0
 8007c28:	b928      	cbnz	r0, 8007c36 <__multadd+0x5a>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007c60 <__multadd+0x84>)
 8007c2e:	480d      	ldr	r0, [pc, #52]	@ (8007c64 <__multadd+0x88>)
 8007c30:	21ba      	movs	r1, #186	@ 0xba
 8007c32:	f000 fbaf 	bl	8008394 <__assert_func>
 8007c36:	6922      	ldr	r2, [r4, #16]
 8007c38:	3202      	adds	r2, #2
 8007c3a:	f104 010c 	add.w	r1, r4, #12
 8007c3e:	0092      	lsls	r2, r2, #2
 8007c40:	300c      	adds	r0, #12
 8007c42:	f7ff f80c 	bl	8006c5e <memcpy>
 8007c46:	4621      	mov	r1, r4
 8007c48:	4638      	mov	r0, r7
 8007c4a:	f7ff ffa5 	bl	8007b98 <_Bfree>
 8007c4e:	4644      	mov	r4, r8
 8007c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c54:	3501      	adds	r5, #1
 8007c56:	615e      	str	r6, [r3, #20]
 8007c58:	6125      	str	r5, [r4, #16]
 8007c5a:	4620      	mov	r0, r4
 8007c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c60:	08008b4c 	.word	0x08008b4c
 8007c64:	08008b5d 	.word	0x08008b5d

08007c68 <__hi0bits>:
 8007c68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	bf36      	itet	cc
 8007c70:	0403      	lslcc	r3, r0, #16
 8007c72:	2000      	movcs	r0, #0
 8007c74:	2010      	movcc	r0, #16
 8007c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c7a:	bf3c      	itt	cc
 8007c7c:	021b      	lslcc	r3, r3, #8
 8007c7e:	3008      	addcc	r0, #8
 8007c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c84:	bf3c      	itt	cc
 8007c86:	011b      	lslcc	r3, r3, #4
 8007c88:	3004      	addcc	r0, #4
 8007c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c8e:	bf3c      	itt	cc
 8007c90:	009b      	lslcc	r3, r3, #2
 8007c92:	3002      	addcc	r0, #2
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	db05      	blt.n	8007ca4 <__hi0bits+0x3c>
 8007c98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007c9c:	f100 0001 	add.w	r0, r0, #1
 8007ca0:	bf08      	it	eq
 8007ca2:	2020      	moveq	r0, #32
 8007ca4:	4770      	bx	lr

08007ca6 <__lo0bits>:
 8007ca6:	6803      	ldr	r3, [r0, #0]
 8007ca8:	4602      	mov	r2, r0
 8007caa:	f013 0007 	ands.w	r0, r3, #7
 8007cae:	d00b      	beq.n	8007cc8 <__lo0bits+0x22>
 8007cb0:	07d9      	lsls	r1, r3, #31
 8007cb2:	d421      	bmi.n	8007cf8 <__lo0bits+0x52>
 8007cb4:	0798      	lsls	r0, r3, #30
 8007cb6:	bf49      	itett	mi
 8007cb8:	085b      	lsrmi	r3, r3, #1
 8007cba:	089b      	lsrpl	r3, r3, #2
 8007cbc:	2001      	movmi	r0, #1
 8007cbe:	6013      	strmi	r3, [r2, #0]
 8007cc0:	bf5c      	itt	pl
 8007cc2:	6013      	strpl	r3, [r2, #0]
 8007cc4:	2002      	movpl	r0, #2
 8007cc6:	4770      	bx	lr
 8007cc8:	b299      	uxth	r1, r3
 8007cca:	b909      	cbnz	r1, 8007cd0 <__lo0bits+0x2a>
 8007ccc:	0c1b      	lsrs	r3, r3, #16
 8007cce:	2010      	movs	r0, #16
 8007cd0:	b2d9      	uxtb	r1, r3
 8007cd2:	b909      	cbnz	r1, 8007cd8 <__lo0bits+0x32>
 8007cd4:	3008      	adds	r0, #8
 8007cd6:	0a1b      	lsrs	r3, r3, #8
 8007cd8:	0719      	lsls	r1, r3, #28
 8007cda:	bf04      	itt	eq
 8007cdc:	091b      	lsreq	r3, r3, #4
 8007cde:	3004      	addeq	r0, #4
 8007ce0:	0799      	lsls	r1, r3, #30
 8007ce2:	bf04      	itt	eq
 8007ce4:	089b      	lsreq	r3, r3, #2
 8007ce6:	3002      	addeq	r0, #2
 8007ce8:	07d9      	lsls	r1, r3, #31
 8007cea:	d403      	bmi.n	8007cf4 <__lo0bits+0x4e>
 8007cec:	085b      	lsrs	r3, r3, #1
 8007cee:	f100 0001 	add.w	r0, r0, #1
 8007cf2:	d003      	beq.n	8007cfc <__lo0bits+0x56>
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	4770      	bx	lr
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	4770      	bx	lr
 8007cfc:	2020      	movs	r0, #32
 8007cfe:	4770      	bx	lr

08007d00 <__i2b>:
 8007d00:	b510      	push	{r4, lr}
 8007d02:	460c      	mov	r4, r1
 8007d04:	2101      	movs	r1, #1
 8007d06:	f7ff ff07 	bl	8007b18 <_Balloc>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	b928      	cbnz	r0, 8007d1a <__i2b+0x1a>
 8007d0e:	4b05      	ldr	r3, [pc, #20]	@ (8007d24 <__i2b+0x24>)
 8007d10:	4805      	ldr	r0, [pc, #20]	@ (8007d28 <__i2b+0x28>)
 8007d12:	f240 1145 	movw	r1, #325	@ 0x145
 8007d16:	f000 fb3d 	bl	8008394 <__assert_func>
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	6144      	str	r4, [r0, #20]
 8007d1e:	6103      	str	r3, [r0, #16]
 8007d20:	bd10      	pop	{r4, pc}
 8007d22:	bf00      	nop
 8007d24:	08008b4c 	.word	0x08008b4c
 8007d28:	08008b5d 	.word	0x08008b5d

08007d2c <__multiply>:
 8007d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	4614      	mov	r4, r2
 8007d32:	690a      	ldr	r2, [r1, #16]
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	bfa8      	it	ge
 8007d3a:	4623      	movge	r3, r4
 8007d3c:	460f      	mov	r7, r1
 8007d3e:	bfa4      	itt	ge
 8007d40:	460c      	movge	r4, r1
 8007d42:	461f      	movge	r7, r3
 8007d44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d4c:	68a3      	ldr	r3, [r4, #8]
 8007d4e:	6861      	ldr	r1, [r4, #4]
 8007d50:	eb0a 0609 	add.w	r6, sl, r9
 8007d54:	42b3      	cmp	r3, r6
 8007d56:	b085      	sub	sp, #20
 8007d58:	bfb8      	it	lt
 8007d5a:	3101      	addlt	r1, #1
 8007d5c:	f7ff fedc 	bl	8007b18 <_Balloc>
 8007d60:	b930      	cbnz	r0, 8007d70 <__multiply+0x44>
 8007d62:	4602      	mov	r2, r0
 8007d64:	4b44      	ldr	r3, [pc, #272]	@ (8007e78 <__multiply+0x14c>)
 8007d66:	4845      	ldr	r0, [pc, #276]	@ (8007e7c <__multiply+0x150>)
 8007d68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d6c:	f000 fb12 	bl	8008394 <__assert_func>
 8007d70:	f100 0514 	add.w	r5, r0, #20
 8007d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d78:	462b      	mov	r3, r5
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	d321      	bcc.n	8007dc4 <__multiply+0x98>
 8007d80:	f107 0114 	add.w	r1, r7, #20
 8007d84:	f104 0214 	add.w	r2, r4, #20
 8007d88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007d8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007d90:	9302      	str	r3, [sp, #8]
 8007d92:	1b13      	subs	r3, r2, r4
 8007d94:	3b15      	subs	r3, #21
 8007d96:	f023 0303 	bic.w	r3, r3, #3
 8007d9a:	3304      	adds	r3, #4
 8007d9c:	f104 0715 	add.w	r7, r4, #21
 8007da0:	42ba      	cmp	r2, r7
 8007da2:	bf38      	it	cc
 8007da4:	2304      	movcc	r3, #4
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	9b02      	ldr	r3, [sp, #8]
 8007daa:	9103      	str	r1, [sp, #12]
 8007dac:	428b      	cmp	r3, r1
 8007dae:	d80c      	bhi.n	8007dca <__multiply+0x9e>
 8007db0:	2e00      	cmp	r6, #0
 8007db2:	dd03      	ble.n	8007dbc <__multiply+0x90>
 8007db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05b      	beq.n	8007e74 <__multiply+0x148>
 8007dbc:	6106      	str	r6, [r0, #16]
 8007dbe:	b005      	add	sp, #20
 8007dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dc4:	f843 2b04 	str.w	r2, [r3], #4
 8007dc8:	e7d8      	b.n	8007d7c <__multiply+0x50>
 8007dca:	f8b1 a000 	ldrh.w	sl, [r1]
 8007dce:	f1ba 0f00 	cmp.w	sl, #0
 8007dd2:	d024      	beq.n	8007e1e <__multiply+0xf2>
 8007dd4:	f104 0e14 	add.w	lr, r4, #20
 8007dd8:	46a9      	mov	r9, r5
 8007dda:	f04f 0c00 	mov.w	ip, #0
 8007dde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007de2:	f8d9 3000 	ldr.w	r3, [r9]
 8007de6:	fa1f fb87 	uxth.w	fp, r7
 8007dea:	b29b      	uxth	r3, r3
 8007dec:	fb0a 330b 	mla	r3, sl, fp, r3
 8007df0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007df4:	f8d9 7000 	ldr.w	r7, [r9]
 8007df8:	4463      	add	r3, ip
 8007dfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007dfe:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e0c:	4572      	cmp	r2, lr
 8007e0e:	f849 3b04 	str.w	r3, [r9], #4
 8007e12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e16:	d8e2      	bhi.n	8007dde <__multiply+0xb2>
 8007e18:	9b01      	ldr	r3, [sp, #4]
 8007e1a:	f845 c003 	str.w	ip, [r5, r3]
 8007e1e:	9b03      	ldr	r3, [sp, #12]
 8007e20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e24:	3104      	adds	r1, #4
 8007e26:	f1b9 0f00 	cmp.w	r9, #0
 8007e2a:	d021      	beq.n	8007e70 <__multiply+0x144>
 8007e2c:	682b      	ldr	r3, [r5, #0]
 8007e2e:	f104 0c14 	add.w	ip, r4, #20
 8007e32:	46ae      	mov	lr, r5
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	f8bc b000 	ldrh.w	fp, [ip]
 8007e3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e40:	fb09 770b 	mla	r7, r9, fp, r7
 8007e44:	4457      	add	r7, sl
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e4c:	f84e 3b04 	str.w	r3, [lr], #4
 8007e50:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e58:	f8be 3000 	ldrh.w	r3, [lr]
 8007e5c:	fb09 330a 	mla	r3, r9, sl, r3
 8007e60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e64:	4562      	cmp	r2, ip
 8007e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e6a:	d8e5      	bhi.n	8007e38 <__multiply+0x10c>
 8007e6c:	9f01      	ldr	r7, [sp, #4]
 8007e6e:	51eb      	str	r3, [r5, r7]
 8007e70:	3504      	adds	r5, #4
 8007e72:	e799      	b.n	8007da8 <__multiply+0x7c>
 8007e74:	3e01      	subs	r6, #1
 8007e76:	e79b      	b.n	8007db0 <__multiply+0x84>
 8007e78:	08008b4c 	.word	0x08008b4c
 8007e7c:	08008b5d 	.word	0x08008b5d

08007e80 <__pow5mult>:
 8007e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e84:	4615      	mov	r5, r2
 8007e86:	f012 0203 	ands.w	r2, r2, #3
 8007e8a:	4607      	mov	r7, r0
 8007e8c:	460e      	mov	r6, r1
 8007e8e:	d007      	beq.n	8007ea0 <__pow5mult+0x20>
 8007e90:	4c25      	ldr	r4, [pc, #148]	@ (8007f28 <__pow5mult+0xa8>)
 8007e92:	3a01      	subs	r2, #1
 8007e94:	2300      	movs	r3, #0
 8007e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e9a:	f7ff fe9f 	bl	8007bdc <__multadd>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	10ad      	asrs	r5, r5, #2
 8007ea2:	d03d      	beq.n	8007f20 <__pow5mult+0xa0>
 8007ea4:	69fc      	ldr	r4, [r7, #28]
 8007ea6:	b97c      	cbnz	r4, 8007ec8 <__pow5mult+0x48>
 8007ea8:	2010      	movs	r0, #16
 8007eaa:	f7ff fd7f 	bl	80079ac <malloc>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	61f8      	str	r0, [r7, #28]
 8007eb2:	b928      	cbnz	r0, 8007ec0 <__pow5mult+0x40>
 8007eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <__pow5mult+0xac>)
 8007eb6:	481e      	ldr	r0, [pc, #120]	@ (8007f30 <__pow5mult+0xb0>)
 8007eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ebc:	f000 fa6a 	bl	8008394 <__assert_func>
 8007ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ec4:	6004      	str	r4, [r0, #0]
 8007ec6:	60c4      	str	r4, [r0, #12]
 8007ec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ed0:	b94c      	cbnz	r4, 8007ee6 <__pow5mult+0x66>
 8007ed2:	f240 2171 	movw	r1, #625	@ 0x271
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ff12 	bl	8007d00 <__i2b>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	6003      	str	r3, [r0, #0]
 8007ee6:	f04f 0900 	mov.w	r9, #0
 8007eea:	07eb      	lsls	r3, r5, #31
 8007eec:	d50a      	bpl.n	8007f04 <__pow5mult+0x84>
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4622      	mov	r2, r4
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f7ff ff1a 	bl	8007d2c <__multiply>
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4680      	mov	r8, r0
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff fe4b 	bl	8007b98 <_Bfree>
 8007f02:	4646      	mov	r6, r8
 8007f04:	106d      	asrs	r5, r5, #1
 8007f06:	d00b      	beq.n	8007f20 <__pow5mult+0xa0>
 8007f08:	6820      	ldr	r0, [r4, #0]
 8007f0a:	b938      	cbnz	r0, 8007f1c <__pow5mult+0x9c>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4621      	mov	r1, r4
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ff0b 	bl	8007d2c <__multiply>
 8007f16:	6020      	str	r0, [r4, #0]
 8007f18:	f8c0 9000 	str.w	r9, [r0]
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	e7e4      	b.n	8007eea <__pow5mult+0x6a>
 8007f20:	4630      	mov	r0, r6
 8007f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f26:	bf00      	nop
 8007f28:	08008bb8 	.word	0x08008bb8
 8007f2c:	08008add 	.word	0x08008add
 8007f30:	08008b5d 	.word	0x08008b5d

08007f34 <__lshift>:
 8007f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f38:	460c      	mov	r4, r1
 8007f3a:	6849      	ldr	r1, [r1, #4]
 8007f3c:	6923      	ldr	r3, [r4, #16]
 8007f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f42:	68a3      	ldr	r3, [r4, #8]
 8007f44:	4607      	mov	r7, r0
 8007f46:	4691      	mov	r9, r2
 8007f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f4c:	f108 0601 	add.w	r6, r8, #1
 8007f50:	42b3      	cmp	r3, r6
 8007f52:	db0b      	blt.n	8007f6c <__lshift+0x38>
 8007f54:	4638      	mov	r0, r7
 8007f56:	f7ff fddf 	bl	8007b18 <_Balloc>
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	b948      	cbnz	r0, 8007f72 <__lshift+0x3e>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b28      	ldr	r3, [pc, #160]	@ (8008004 <__lshift+0xd0>)
 8007f62:	4829      	ldr	r0, [pc, #164]	@ (8008008 <__lshift+0xd4>)
 8007f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f68:	f000 fa14 	bl	8008394 <__assert_func>
 8007f6c:	3101      	adds	r1, #1
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	e7ee      	b.n	8007f50 <__lshift+0x1c>
 8007f72:	2300      	movs	r3, #0
 8007f74:	f100 0114 	add.w	r1, r0, #20
 8007f78:	f100 0210 	add.w	r2, r0, #16
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4553      	cmp	r3, sl
 8007f80:	db33      	blt.n	8007fea <__lshift+0xb6>
 8007f82:	6920      	ldr	r0, [r4, #16]
 8007f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f88:	f104 0314 	add.w	r3, r4, #20
 8007f8c:	f019 091f 	ands.w	r9, r9, #31
 8007f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f98:	d02b      	beq.n	8007ff2 <__lshift+0xbe>
 8007f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f9e:	468a      	mov	sl, r1
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	6818      	ldr	r0, [r3, #0]
 8007fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8007fa8:	4310      	orrs	r0, r2
 8007faa:	f84a 0b04 	str.w	r0, [sl], #4
 8007fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fb2:	459c      	cmp	ip, r3
 8007fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fb8:	d8f3      	bhi.n	8007fa2 <__lshift+0x6e>
 8007fba:	ebac 0304 	sub.w	r3, ip, r4
 8007fbe:	3b15      	subs	r3, #21
 8007fc0:	f023 0303 	bic.w	r3, r3, #3
 8007fc4:	3304      	adds	r3, #4
 8007fc6:	f104 0015 	add.w	r0, r4, #21
 8007fca:	4584      	cmp	ip, r0
 8007fcc:	bf38      	it	cc
 8007fce:	2304      	movcc	r3, #4
 8007fd0:	50ca      	str	r2, [r1, r3]
 8007fd2:	b10a      	cbz	r2, 8007fd8 <__lshift+0xa4>
 8007fd4:	f108 0602 	add.w	r6, r8, #2
 8007fd8:	3e01      	subs	r6, #1
 8007fda:	4638      	mov	r0, r7
 8007fdc:	612e      	str	r6, [r5, #16]
 8007fde:	4621      	mov	r1, r4
 8007fe0:	f7ff fdda 	bl	8007b98 <_Bfree>
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fee:	3301      	adds	r3, #1
 8007ff0:	e7c5      	b.n	8007f7e <__lshift+0x4a>
 8007ff2:	3904      	subs	r1, #4
 8007ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ffc:	459c      	cmp	ip, r3
 8007ffe:	d8f9      	bhi.n	8007ff4 <__lshift+0xc0>
 8008000:	e7ea      	b.n	8007fd8 <__lshift+0xa4>
 8008002:	bf00      	nop
 8008004:	08008b4c 	.word	0x08008b4c
 8008008:	08008b5d 	.word	0x08008b5d

0800800c <__mcmp>:
 800800c:	690a      	ldr	r2, [r1, #16]
 800800e:	4603      	mov	r3, r0
 8008010:	6900      	ldr	r0, [r0, #16]
 8008012:	1a80      	subs	r0, r0, r2
 8008014:	b530      	push	{r4, r5, lr}
 8008016:	d10e      	bne.n	8008036 <__mcmp+0x2a>
 8008018:	3314      	adds	r3, #20
 800801a:	3114      	adds	r1, #20
 800801c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800802c:	4295      	cmp	r5, r2
 800802e:	d003      	beq.n	8008038 <__mcmp+0x2c>
 8008030:	d205      	bcs.n	800803e <__mcmp+0x32>
 8008032:	f04f 30ff 	mov.w	r0, #4294967295
 8008036:	bd30      	pop	{r4, r5, pc}
 8008038:	42a3      	cmp	r3, r4
 800803a:	d3f3      	bcc.n	8008024 <__mcmp+0x18>
 800803c:	e7fb      	b.n	8008036 <__mcmp+0x2a>
 800803e:	2001      	movs	r0, #1
 8008040:	e7f9      	b.n	8008036 <__mcmp+0x2a>
	...

08008044 <__mdiff>:
 8008044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008048:	4689      	mov	r9, r1
 800804a:	4606      	mov	r6, r0
 800804c:	4611      	mov	r1, r2
 800804e:	4648      	mov	r0, r9
 8008050:	4614      	mov	r4, r2
 8008052:	f7ff ffdb 	bl	800800c <__mcmp>
 8008056:	1e05      	subs	r5, r0, #0
 8008058:	d112      	bne.n	8008080 <__mdiff+0x3c>
 800805a:	4629      	mov	r1, r5
 800805c:	4630      	mov	r0, r6
 800805e:	f7ff fd5b 	bl	8007b18 <_Balloc>
 8008062:	4602      	mov	r2, r0
 8008064:	b928      	cbnz	r0, 8008072 <__mdiff+0x2e>
 8008066:	4b3f      	ldr	r3, [pc, #252]	@ (8008164 <__mdiff+0x120>)
 8008068:	f240 2137 	movw	r1, #567	@ 0x237
 800806c:	483e      	ldr	r0, [pc, #248]	@ (8008168 <__mdiff+0x124>)
 800806e:	f000 f991 	bl	8008394 <__assert_func>
 8008072:	2301      	movs	r3, #1
 8008074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008078:	4610      	mov	r0, r2
 800807a:	b003      	add	sp, #12
 800807c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008080:	bfbc      	itt	lt
 8008082:	464b      	movlt	r3, r9
 8008084:	46a1      	movlt	r9, r4
 8008086:	4630      	mov	r0, r6
 8008088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800808c:	bfba      	itte	lt
 800808e:	461c      	movlt	r4, r3
 8008090:	2501      	movlt	r5, #1
 8008092:	2500      	movge	r5, #0
 8008094:	f7ff fd40 	bl	8007b18 <_Balloc>
 8008098:	4602      	mov	r2, r0
 800809a:	b918      	cbnz	r0, 80080a4 <__mdiff+0x60>
 800809c:	4b31      	ldr	r3, [pc, #196]	@ (8008164 <__mdiff+0x120>)
 800809e:	f240 2145 	movw	r1, #581	@ 0x245
 80080a2:	e7e3      	b.n	800806c <__mdiff+0x28>
 80080a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080a8:	6926      	ldr	r6, [r4, #16]
 80080aa:	60c5      	str	r5, [r0, #12]
 80080ac:	f109 0310 	add.w	r3, r9, #16
 80080b0:	f109 0514 	add.w	r5, r9, #20
 80080b4:	f104 0e14 	add.w	lr, r4, #20
 80080b8:	f100 0b14 	add.w	fp, r0, #20
 80080bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080c4:	9301      	str	r3, [sp, #4]
 80080c6:	46d9      	mov	r9, fp
 80080c8:	f04f 0c00 	mov.w	ip, #0
 80080cc:	9b01      	ldr	r3, [sp, #4]
 80080ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080d6:	9301      	str	r3, [sp, #4]
 80080d8:	fa1f f38a 	uxth.w	r3, sl
 80080dc:	4619      	mov	r1, r3
 80080de:	b283      	uxth	r3, r0
 80080e0:	1acb      	subs	r3, r1, r3
 80080e2:	0c00      	lsrs	r0, r0, #16
 80080e4:	4463      	add	r3, ip
 80080e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80080ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80080f4:	4576      	cmp	r6, lr
 80080f6:	f849 3b04 	str.w	r3, [r9], #4
 80080fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80080fe:	d8e5      	bhi.n	80080cc <__mdiff+0x88>
 8008100:	1b33      	subs	r3, r6, r4
 8008102:	3b15      	subs	r3, #21
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	3415      	adds	r4, #21
 800810a:	3304      	adds	r3, #4
 800810c:	42a6      	cmp	r6, r4
 800810e:	bf38      	it	cc
 8008110:	2304      	movcc	r3, #4
 8008112:	441d      	add	r5, r3
 8008114:	445b      	add	r3, fp
 8008116:	461e      	mov	r6, r3
 8008118:	462c      	mov	r4, r5
 800811a:	4544      	cmp	r4, r8
 800811c:	d30e      	bcc.n	800813c <__mdiff+0xf8>
 800811e:	f108 0103 	add.w	r1, r8, #3
 8008122:	1b49      	subs	r1, r1, r5
 8008124:	f021 0103 	bic.w	r1, r1, #3
 8008128:	3d03      	subs	r5, #3
 800812a:	45a8      	cmp	r8, r5
 800812c:	bf38      	it	cc
 800812e:	2100      	movcc	r1, #0
 8008130:	440b      	add	r3, r1
 8008132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008136:	b191      	cbz	r1, 800815e <__mdiff+0x11a>
 8008138:	6117      	str	r7, [r2, #16]
 800813a:	e79d      	b.n	8008078 <__mdiff+0x34>
 800813c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008140:	46e6      	mov	lr, ip
 8008142:	0c08      	lsrs	r0, r1, #16
 8008144:	fa1c fc81 	uxtah	ip, ip, r1
 8008148:	4471      	add	r1, lr
 800814a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800814e:	b289      	uxth	r1, r1
 8008150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008154:	f846 1b04 	str.w	r1, [r6], #4
 8008158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800815c:	e7dd      	b.n	800811a <__mdiff+0xd6>
 800815e:	3f01      	subs	r7, #1
 8008160:	e7e7      	b.n	8008132 <__mdiff+0xee>
 8008162:	bf00      	nop
 8008164:	08008b4c 	.word	0x08008b4c
 8008168:	08008b5d 	.word	0x08008b5d

0800816c <__d2b>:
 800816c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008170:	460f      	mov	r7, r1
 8008172:	2101      	movs	r1, #1
 8008174:	ec59 8b10 	vmov	r8, r9, d0
 8008178:	4616      	mov	r6, r2
 800817a:	f7ff fccd 	bl	8007b18 <_Balloc>
 800817e:	4604      	mov	r4, r0
 8008180:	b930      	cbnz	r0, 8008190 <__d2b+0x24>
 8008182:	4602      	mov	r2, r0
 8008184:	4b23      	ldr	r3, [pc, #140]	@ (8008214 <__d2b+0xa8>)
 8008186:	4824      	ldr	r0, [pc, #144]	@ (8008218 <__d2b+0xac>)
 8008188:	f240 310f 	movw	r1, #783	@ 0x30f
 800818c:	f000 f902 	bl	8008394 <__assert_func>
 8008190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008198:	b10d      	cbz	r5, 800819e <__d2b+0x32>
 800819a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800819e:	9301      	str	r3, [sp, #4]
 80081a0:	f1b8 0300 	subs.w	r3, r8, #0
 80081a4:	d023      	beq.n	80081ee <__d2b+0x82>
 80081a6:	4668      	mov	r0, sp
 80081a8:	9300      	str	r3, [sp, #0]
 80081aa:	f7ff fd7c 	bl	8007ca6 <__lo0bits>
 80081ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081b2:	b1d0      	cbz	r0, 80081ea <__d2b+0x7e>
 80081b4:	f1c0 0320 	rsb	r3, r0, #32
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	430b      	orrs	r3, r1
 80081be:	40c2      	lsrs	r2, r0
 80081c0:	6163      	str	r3, [r4, #20]
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	61a3      	str	r3, [r4, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	bf0c      	ite	eq
 80081cc:	2201      	moveq	r2, #1
 80081ce:	2202      	movne	r2, #2
 80081d0:	6122      	str	r2, [r4, #16]
 80081d2:	b1a5      	cbz	r5, 80081fe <__d2b+0x92>
 80081d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081d8:	4405      	add	r5, r0
 80081da:	603d      	str	r5, [r7, #0]
 80081dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081e0:	6030      	str	r0, [r6, #0]
 80081e2:	4620      	mov	r0, r4
 80081e4:	b003      	add	sp, #12
 80081e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ea:	6161      	str	r1, [r4, #20]
 80081ec:	e7ea      	b.n	80081c4 <__d2b+0x58>
 80081ee:	a801      	add	r0, sp, #4
 80081f0:	f7ff fd59 	bl	8007ca6 <__lo0bits>
 80081f4:	9b01      	ldr	r3, [sp, #4]
 80081f6:	6163      	str	r3, [r4, #20]
 80081f8:	3020      	adds	r0, #32
 80081fa:	2201      	movs	r2, #1
 80081fc:	e7e8      	b.n	80081d0 <__d2b+0x64>
 80081fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008206:	6038      	str	r0, [r7, #0]
 8008208:	6918      	ldr	r0, [r3, #16]
 800820a:	f7ff fd2d 	bl	8007c68 <__hi0bits>
 800820e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008212:	e7e5      	b.n	80081e0 <__d2b+0x74>
 8008214:	08008b4c 	.word	0x08008b4c
 8008218:	08008b5d 	.word	0x08008b5d

0800821c <__sflush_r>:
 800821c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008224:	0716      	lsls	r6, r2, #28
 8008226:	4605      	mov	r5, r0
 8008228:	460c      	mov	r4, r1
 800822a:	d454      	bmi.n	80082d6 <__sflush_r+0xba>
 800822c:	684b      	ldr	r3, [r1, #4]
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc02      	bgt.n	8008238 <__sflush_r+0x1c>
 8008232:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008234:	2b00      	cmp	r3, #0
 8008236:	dd48      	ble.n	80082ca <__sflush_r+0xae>
 8008238:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800823a:	2e00      	cmp	r6, #0
 800823c:	d045      	beq.n	80082ca <__sflush_r+0xae>
 800823e:	2300      	movs	r3, #0
 8008240:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008244:	682f      	ldr	r7, [r5, #0]
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	d030      	beq.n	80082ae <__sflush_r+0x92>
 800824c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	0759      	lsls	r1, r3, #29
 8008252:	d505      	bpl.n	8008260 <__sflush_r+0x44>
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800825a:	b10b      	cbz	r3, 8008260 <__sflush_r+0x44>
 800825c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	2300      	movs	r3, #0
 8008262:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008264:	6a21      	ldr	r1, [r4, #32]
 8008266:	4628      	mov	r0, r5
 8008268:	47b0      	blx	r6
 800826a:	1c43      	adds	r3, r0, #1
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	d106      	bne.n	800827e <__sflush_r+0x62>
 8008270:	6829      	ldr	r1, [r5, #0]
 8008272:	291d      	cmp	r1, #29
 8008274:	d82b      	bhi.n	80082ce <__sflush_r+0xb2>
 8008276:	4a2a      	ldr	r2, [pc, #168]	@ (8008320 <__sflush_r+0x104>)
 8008278:	410a      	asrs	r2, r1
 800827a:	07d6      	lsls	r6, r2, #31
 800827c:	d427      	bmi.n	80082ce <__sflush_r+0xb2>
 800827e:	2200      	movs	r2, #0
 8008280:	6062      	str	r2, [r4, #4]
 8008282:	04d9      	lsls	r1, r3, #19
 8008284:	6922      	ldr	r2, [r4, #16]
 8008286:	6022      	str	r2, [r4, #0]
 8008288:	d504      	bpl.n	8008294 <__sflush_r+0x78>
 800828a:	1c42      	adds	r2, r0, #1
 800828c:	d101      	bne.n	8008292 <__sflush_r+0x76>
 800828e:	682b      	ldr	r3, [r5, #0]
 8008290:	b903      	cbnz	r3, 8008294 <__sflush_r+0x78>
 8008292:	6560      	str	r0, [r4, #84]	@ 0x54
 8008294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008296:	602f      	str	r7, [r5, #0]
 8008298:	b1b9      	cbz	r1, 80082ca <__sflush_r+0xae>
 800829a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800829e:	4299      	cmp	r1, r3
 80082a0:	d002      	beq.n	80082a8 <__sflush_r+0x8c>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff fb38 	bl	8007918 <_free_r>
 80082a8:	2300      	movs	r3, #0
 80082aa:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ac:	e00d      	b.n	80082ca <__sflush_r+0xae>
 80082ae:	2301      	movs	r3, #1
 80082b0:	4628      	mov	r0, r5
 80082b2:	47b0      	blx	r6
 80082b4:	4602      	mov	r2, r0
 80082b6:	1c50      	adds	r0, r2, #1
 80082b8:	d1c9      	bne.n	800824e <__sflush_r+0x32>
 80082ba:	682b      	ldr	r3, [r5, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d0c6      	beq.n	800824e <__sflush_r+0x32>
 80082c0:	2b1d      	cmp	r3, #29
 80082c2:	d001      	beq.n	80082c8 <__sflush_r+0xac>
 80082c4:	2b16      	cmp	r3, #22
 80082c6:	d11e      	bne.n	8008306 <__sflush_r+0xea>
 80082c8:	602f      	str	r7, [r5, #0]
 80082ca:	2000      	movs	r0, #0
 80082cc:	e022      	b.n	8008314 <__sflush_r+0xf8>
 80082ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082d2:	b21b      	sxth	r3, r3
 80082d4:	e01b      	b.n	800830e <__sflush_r+0xf2>
 80082d6:	690f      	ldr	r7, [r1, #16]
 80082d8:	2f00      	cmp	r7, #0
 80082da:	d0f6      	beq.n	80082ca <__sflush_r+0xae>
 80082dc:	0793      	lsls	r3, r2, #30
 80082de:	680e      	ldr	r6, [r1, #0]
 80082e0:	bf08      	it	eq
 80082e2:	694b      	ldreq	r3, [r1, #20]
 80082e4:	600f      	str	r7, [r1, #0]
 80082e6:	bf18      	it	ne
 80082e8:	2300      	movne	r3, #0
 80082ea:	eba6 0807 	sub.w	r8, r6, r7
 80082ee:	608b      	str	r3, [r1, #8]
 80082f0:	f1b8 0f00 	cmp.w	r8, #0
 80082f4:	dde9      	ble.n	80082ca <__sflush_r+0xae>
 80082f6:	6a21      	ldr	r1, [r4, #32]
 80082f8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80082fa:	4643      	mov	r3, r8
 80082fc:	463a      	mov	r2, r7
 80082fe:	4628      	mov	r0, r5
 8008300:	47b0      	blx	r6
 8008302:	2800      	cmp	r0, #0
 8008304:	dc08      	bgt.n	8008318 <__sflush_r+0xfc>
 8008306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800830a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	4407      	add	r7, r0
 800831a:	eba8 0800 	sub.w	r8, r8, r0
 800831e:	e7e7      	b.n	80082f0 <__sflush_r+0xd4>
 8008320:	dfbffffe 	.word	0xdfbffffe

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b913      	cbnz	r3, 8008334 <_fflush_r+0x10>
 800832e:	2500      	movs	r5, #0
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	b118      	cbz	r0, 800833e <_fflush_r+0x1a>
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	b90b      	cbnz	r3, 800833e <_fflush_r+0x1a>
 800833a:	f7fe fb41 	bl	80069c0 <__sinit>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f3      	beq.n	800832e <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x32>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x32>
 8008350:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008352:	f7fe fc82 	bl	8006c5a <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff5f 	bl	800821c <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e4      	bmi.n	8008330 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4e1      	bmi.n	8008330 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800836e:	f7fe fc75 	bl	8006c5c <__retarget_lock_release_recursive>
 8008372:	e7dd      	b.n	8008330 <_fflush_r+0xc>

08008374 <_sbrk_r>:
 8008374:	b538      	push	{r3, r4, r5, lr}
 8008376:	4d06      	ldr	r5, [pc, #24]	@ (8008390 <_sbrk_r+0x1c>)
 8008378:	2300      	movs	r3, #0
 800837a:	4604      	mov	r4, r0
 800837c:	4608      	mov	r0, r1
 800837e:	602b      	str	r3, [r5, #0]
 8008380:	f7f9 f840 	bl	8001404 <_sbrk>
 8008384:	1c43      	adds	r3, r0, #1
 8008386:	d102      	bne.n	800838e <_sbrk_r+0x1a>
 8008388:	682b      	ldr	r3, [r5, #0]
 800838a:	b103      	cbz	r3, 800838e <_sbrk_r+0x1a>
 800838c:	6023      	str	r3, [r4, #0]
 800838e:	bd38      	pop	{r3, r4, r5, pc}
 8008390:	20004d78 	.word	0x20004d78

08008394 <__assert_func>:
 8008394:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008396:	4614      	mov	r4, r2
 8008398:	461a      	mov	r2, r3
 800839a:	4b09      	ldr	r3, [pc, #36]	@ (80083c0 <__assert_func+0x2c>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	4605      	mov	r5, r0
 80083a0:	68d8      	ldr	r0, [r3, #12]
 80083a2:	b954      	cbnz	r4, 80083ba <__assert_func+0x26>
 80083a4:	4b07      	ldr	r3, [pc, #28]	@ (80083c4 <__assert_func+0x30>)
 80083a6:	461c      	mov	r4, r3
 80083a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083ac:	9100      	str	r1, [sp, #0]
 80083ae:	462b      	mov	r3, r5
 80083b0:	4905      	ldr	r1, [pc, #20]	@ (80083c8 <__assert_func+0x34>)
 80083b2:	f000 f841 	bl	8008438 <fiprintf>
 80083b6:	f000 f851 	bl	800845c <abort>
 80083ba:	4b04      	ldr	r3, [pc, #16]	@ (80083cc <__assert_func+0x38>)
 80083bc:	e7f4      	b.n	80083a8 <__assert_func+0x14>
 80083be:	bf00      	nop
 80083c0:	2000001c 	.word	0x2000001c
 80083c4:	08008cfd 	.word	0x08008cfd
 80083c8:	08008ccf 	.word	0x08008ccf
 80083cc:	08008cc2 	.word	0x08008cc2

080083d0 <_calloc_r>:
 80083d0:	b570      	push	{r4, r5, r6, lr}
 80083d2:	fba1 5402 	umull	r5, r4, r1, r2
 80083d6:	b93c      	cbnz	r4, 80083e8 <_calloc_r+0x18>
 80083d8:	4629      	mov	r1, r5
 80083da:	f7ff fb11 	bl	8007a00 <_malloc_r>
 80083de:	4606      	mov	r6, r0
 80083e0:	b928      	cbnz	r0, 80083ee <_calloc_r+0x1e>
 80083e2:	2600      	movs	r6, #0
 80083e4:	4630      	mov	r0, r6
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	220c      	movs	r2, #12
 80083ea:	6002      	str	r2, [r0, #0]
 80083ec:	e7f9      	b.n	80083e2 <_calloc_r+0x12>
 80083ee:	462a      	mov	r2, r5
 80083f0:	4621      	mov	r1, r4
 80083f2:	f7fe fb5e 	bl	8006ab2 <memset>
 80083f6:	e7f5      	b.n	80083e4 <_calloc_r+0x14>

080083f8 <__ascii_mbtowc>:
 80083f8:	b082      	sub	sp, #8
 80083fa:	b901      	cbnz	r1, 80083fe <__ascii_mbtowc+0x6>
 80083fc:	a901      	add	r1, sp, #4
 80083fe:	b142      	cbz	r2, 8008412 <__ascii_mbtowc+0x1a>
 8008400:	b14b      	cbz	r3, 8008416 <__ascii_mbtowc+0x1e>
 8008402:	7813      	ldrb	r3, [r2, #0]
 8008404:	600b      	str	r3, [r1, #0]
 8008406:	7812      	ldrb	r2, [r2, #0]
 8008408:	1e10      	subs	r0, r2, #0
 800840a:	bf18      	it	ne
 800840c:	2001      	movne	r0, #1
 800840e:	b002      	add	sp, #8
 8008410:	4770      	bx	lr
 8008412:	4610      	mov	r0, r2
 8008414:	e7fb      	b.n	800840e <__ascii_mbtowc+0x16>
 8008416:	f06f 0001 	mvn.w	r0, #1
 800841a:	e7f8      	b.n	800840e <__ascii_mbtowc+0x16>

0800841c <__ascii_wctomb>:
 800841c:	4603      	mov	r3, r0
 800841e:	4608      	mov	r0, r1
 8008420:	b141      	cbz	r1, 8008434 <__ascii_wctomb+0x18>
 8008422:	2aff      	cmp	r2, #255	@ 0xff
 8008424:	d904      	bls.n	8008430 <__ascii_wctomb+0x14>
 8008426:	228a      	movs	r2, #138	@ 0x8a
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	f04f 30ff 	mov.w	r0, #4294967295
 800842e:	4770      	bx	lr
 8008430:	700a      	strb	r2, [r1, #0]
 8008432:	2001      	movs	r0, #1
 8008434:	4770      	bx	lr
	...

08008438 <fiprintf>:
 8008438:	b40e      	push	{r1, r2, r3}
 800843a:	b503      	push	{r0, r1, lr}
 800843c:	4601      	mov	r1, r0
 800843e:	ab03      	add	r3, sp, #12
 8008440:	4805      	ldr	r0, [pc, #20]	@ (8008458 <fiprintf+0x20>)
 8008442:	f853 2b04 	ldr.w	r2, [r3], #4
 8008446:	6800      	ldr	r0, [r0, #0]
 8008448:	9301      	str	r3, [sp, #4]
 800844a:	f000 f837 	bl	80084bc <_vfiprintf_r>
 800844e:	b002      	add	sp, #8
 8008450:	f85d eb04 	ldr.w	lr, [sp], #4
 8008454:	b003      	add	sp, #12
 8008456:	4770      	bx	lr
 8008458:	2000001c 	.word	0x2000001c

0800845c <abort>:
 800845c:	b508      	push	{r3, lr}
 800845e:	2006      	movs	r0, #6
 8008460:	f000 fa00 	bl	8008864 <raise>
 8008464:	2001      	movs	r0, #1
 8008466:	f7f8 ff55 	bl	8001314 <_exit>

0800846a <__sfputc_r>:
 800846a:	6893      	ldr	r3, [r2, #8]
 800846c:	3b01      	subs	r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	b410      	push	{r4}
 8008472:	6093      	str	r3, [r2, #8]
 8008474:	da08      	bge.n	8008488 <__sfputc_r+0x1e>
 8008476:	6994      	ldr	r4, [r2, #24]
 8008478:	42a3      	cmp	r3, r4
 800847a:	db01      	blt.n	8008480 <__sfputc_r+0x16>
 800847c:	290a      	cmp	r1, #10
 800847e:	d103      	bne.n	8008488 <__sfputc_r+0x1e>
 8008480:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008484:	f000 b932 	b.w	80086ec <__swbuf_r>
 8008488:	6813      	ldr	r3, [r2, #0]
 800848a:	1c58      	adds	r0, r3, #1
 800848c:	6010      	str	r0, [r2, #0]
 800848e:	7019      	strb	r1, [r3, #0]
 8008490:	4608      	mov	r0, r1
 8008492:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008496:	4770      	bx	lr

08008498 <__sfputs_r>:
 8008498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800849a:	4606      	mov	r6, r0
 800849c:	460f      	mov	r7, r1
 800849e:	4614      	mov	r4, r2
 80084a0:	18d5      	adds	r5, r2, r3
 80084a2:	42ac      	cmp	r4, r5
 80084a4:	d101      	bne.n	80084aa <__sfputs_r+0x12>
 80084a6:	2000      	movs	r0, #0
 80084a8:	e007      	b.n	80084ba <__sfputs_r+0x22>
 80084aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ae:	463a      	mov	r2, r7
 80084b0:	4630      	mov	r0, r6
 80084b2:	f7ff ffda 	bl	800846a <__sfputc_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d1f3      	bne.n	80084a2 <__sfputs_r+0xa>
 80084ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080084bc <_vfiprintf_r>:
 80084bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084c0:	460d      	mov	r5, r1
 80084c2:	b09d      	sub	sp, #116	@ 0x74
 80084c4:	4614      	mov	r4, r2
 80084c6:	4698      	mov	r8, r3
 80084c8:	4606      	mov	r6, r0
 80084ca:	b118      	cbz	r0, 80084d4 <_vfiprintf_r+0x18>
 80084cc:	6a03      	ldr	r3, [r0, #32]
 80084ce:	b90b      	cbnz	r3, 80084d4 <_vfiprintf_r+0x18>
 80084d0:	f7fe fa76 	bl	80069c0 <__sinit>
 80084d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084d6:	07d9      	lsls	r1, r3, #31
 80084d8:	d405      	bmi.n	80084e6 <_vfiprintf_r+0x2a>
 80084da:	89ab      	ldrh	r3, [r5, #12]
 80084dc:	059a      	lsls	r2, r3, #22
 80084de:	d402      	bmi.n	80084e6 <_vfiprintf_r+0x2a>
 80084e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80084e2:	f7fe fbba 	bl	8006c5a <__retarget_lock_acquire_recursive>
 80084e6:	89ab      	ldrh	r3, [r5, #12]
 80084e8:	071b      	lsls	r3, r3, #28
 80084ea:	d501      	bpl.n	80084f0 <_vfiprintf_r+0x34>
 80084ec:	692b      	ldr	r3, [r5, #16]
 80084ee:	b99b      	cbnz	r3, 8008518 <_vfiprintf_r+0x5c>
 80084f0:	4629      	mov	r1, r5
 80084f2:	4630      	mov	r0, r6
 80084f4:	f000 f938 	bl	8008768 <__swsetup_r>
 80084f8:	b170      	cbz	r0, 8008518 <_vfiprintf_r+0x5c>
 80084fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80084fc:	07dc      	lsls	r4, r3, #31
 80084fe:	d504      	bpl.n	800850a <_vfiprintf_r+0x4e>
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	b01d      	add	sp, #116	@ 0x74
 8008506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	0598      	lsls	r0, r3, #22
 800850e:	d4f7      	bmi.n	8008500 <_vfiprintf_r+0x44>
 8008510:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008512:	f7fe fba3 	bl	8006c5c <__retarget_lock_release_recursive>
 8008516:	e7f3      	b.n	8008500 <_vfiprintf_r+0x44>
 8008518:	2300      	movs	r3, #0
 800851a:	9309      	str	r3, [sp, #36]	@ 0x24
 800851c:	2320      	movs	r3, #32
 800851e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008522:	f8cd 800c 	str.w	r8, [sp, #12]
 8008526:	2330      	movs	r3, #48	@ 0x30
 8008528:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80086d8 <_vfiprintf_r+0x21c>
 800852c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008530:	f04f 0901 	mov.w	r9, #1
 8008534:	4623      	mov	r3, r4
 8008536:	469a      	mov	sl, r3
 8008538:	f813 2b01 	ldrb.w	r2, [r3], #1
 800853c:	b10a      	cbz	r2, 8008542 <_vfiprintf_r+0x86>
 800853e:	2a25      	cmp	r2, #37	@ 0x25
 8008540:	d1f9      	bne.n	8008536 <_vfiprintf_r+0x7a>
 8008542:	ebba 0b04 	subs.w	fp, sl, r4
 8008546:	d00b      	beq.n	8008560 <_vfiprintf_r+0xa4>
 8008548:	465b      	mov	r3, fp
 800854a:	4622      	mov	r2, r4
 800854c:	4629      	mov	r1, r5
 800854e:	4630      	mov	r0, r6
 8008550:	f7ff ffa2 	bl	8008498 <__sfputs_r>
 8008554:	3001      	adds	r0, #1
 8008556:	f000 80a7 	beq.w	80086a8 <_vfiprintf_r+0x1ec>
 800855a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800855c:	445a      	add	r2, fp
 800855e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008560:	f89a 3000 	ldrb.w	r3, [sl]
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 809f 	beq.w	80086a8 <_vfiprintf_r+0x1ec>
 800856a:	2300      	movs	r3, #0
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008574:	f10a 0a01 	add.w	sl, sl, #1
 8008578:	9304      	str	r3, [sp, #16]
 800857a:	9307      	str	r3, [sp, #28]
 800857c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008580:	931a      	str	r3, [sp, #104]	@ 0x68
 8008582:	4654      	mov	r4, sl
 8008584:	2205      	movs	r2, #5
 8008586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858a:	4853      	ldr	r0, [pc, #332]	@ (80086d8 <_vfiprintf_r+0x21c>)
 800858c:	f7f7 fe20 	bl	80001d0 <memchr>
 8008590:	9a04      	ldr	r2, [sp, #16]
 8008592:	b9d8      	cbnz	r0, 80085cc <_vfiprintf_r+0x110>
 8008594:	06d1      	lsls	r1, r2, #27
 8008596:	bf44      	itt	mi
 8008598:	2320      	movmi	r3, #32
 800859a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800859e:	0713      	lsls	r3, r2, #28
 80085a0:	bf44      	itt	mi
 80085a2:	232b      	movmi	r3, #43	@ 0x2b
 80085a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80085a8:	f89a 3000 	ldrb.w	r3, [sl]
 80085ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80085ae:	d015      	beq.n	80085dc <_vfiprintf_r+0x120>
 80085b0:	9a07      	ldr	r2, [sp, #28]
 80085b2:	4654      	mov	r4, sl
 80085b4:	2000      	movs	r0, #0
 80085b6:	f04f 0c0a 	mov.w	ip, #10
 80085ba:	4621      	mov	r1, r4
 80085bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085c0:	3b30      	subs	r3, #48	@ 0x30
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d94b      	bls.n	800865e <_vfiprintf_r+0x1a2>
 80085c6:	b1b0      	cbz	r0, 80085f6 <_vfiprintf_r+0x13a>
 80085c8:	9207      	str	r2, [sp, #28]
 80085ca:	e014      	b.n	80085f6 <_vfiprintf_r+0x13a>
 80085cc:	eba0 0308 	sub.w	r3, r0, r8
 80085d0:	fa09 f303 	lsl.w	r3, r9, r3
 80085d4:	4313      	orrs	r3, r2
 80085d6:	9304      	str	r3, [sp, #16]
 80085d8:	46a2      	mov	sl, r4
 80085da:	e7d2      	b.n	8008582 <_vfiprintf_r+0xc6>
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	1d19      	adds	r1, r3, #4
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	9103      	str	r1, [sp, #12]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	bfbb      	ittet	lt
 80085e8:	425b      	neglt	r3, r3
 80085ea:	f042 0202 	orrlt.w	r2, r2, #2
 80085ee:	9307      	strge	r3, [sp, #28]
 80085f0:	9307      	strlt	r3, [sp, #28]
 80085f2:	bfb8      	it	lt
 80085f4:	9204      	strlt	r2, [sp, #16]
 80085f6:	7823      	ldrb	r3, [r4, #0]
 80085f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80085fa:	d10a      	bne.n	8008612 <_vfiprintf_r+0x156>
 80085fc:	7863      	ldrb	r3, [r4, #1]
 80085fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008600:	d132      	bne.n	8008668 <_vfiprintf_r+0x1ac>
 8008602:	9b03      	ldr	r3, [sp, #12]
 8008604:	1d1a      	adds	r2, r3, #4
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	9203      	str	r2, [sp, #12]
 800860a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800860e:	3402      	adds	r4, #2
 8008610:	9305      	str	r3, [sp, #20]
 8008612:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80086e8 <_vfiprintf_r+0x22c>
 8008616:	7821      	ldrb	r1, [r4, #0]
 8008618:	2203      	movs	r2, #3
 800861a:	4650      	mov	r0, sl
 800861c:	f7f7 fdd8 	bl	80001d0 <memchr>
 8008620:	b138      	cbz	r0, 8008632 <_vfiprintf_r+0x176>
 8008622:	9b04      	ldr	r3, [sp, #16]
 8008624:	eba0 000a 	sub.w	r0, r0, sl
 8008628:	2240      	movs	r2, #64	@ 0x40
 800862a:	4082      	lsls	r2, r0
 800862c:	4313      	orrs	r3, r2
 800862e:	3401      	adds	r4, #1
 8008630:	9304      	str	r3, [sp, #16]
 8008632:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008636:	4829      	ldr	r0, [pc, #164]	@ (80086dc <_vfiprintf_r+0x220>)
 8008638:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800863c:	2206      	movs	r2, #6
 800863e:	f7f7 fdc7 	bl	80001d0 <memchr>
 8008642:	2800      	cmp	r0, #0
 8008644:	d03f      	beq.n	80086c6 <_vfiprintf_r+0x20a>
 8008646:	4b26      	ldr	r3, [pc, #152]	@ (80086e0 <_vfiprintf_r+0x224>)
 8008648:	bb1b      	cbnz	r3, 8008692 <_vfiprintf_r+0x1d6>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	3307      	adds	r3, #7
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	3308      	adds	r3, #8
 8008654:	9303      	str	r3, [sp, #12]
 8008656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008658:	443b      	add	r3, r7
 800865a:	9309      	str	r3, [sp, #36]	@ 0x24
 800865c:	e76a      	b.n	8008534 <_vfiprintf_r+0x78>
 800865e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008662:	460c      	mov	r4, r1
 8008664:	2001      	movs	r0, #1
 8008666:	e7a8      	b.n	80085ba <_vfiprintf_r+0xfe>
 8008668:	2300      	movs	r3, #0
 800866a:	3401      	adds	r4, #1
 800866c:	9305      	str	r3, [sp, #20]
 800866e:	4619      	mov	r1, r3
 8008670:	f04f 0c0a 	mov.w	ip, #10
 8008674:	4620      	mov	r0, r4
 8008676:	f810 2b01 	ldrb.w	r2, [r0], #1
 800867a:	3a30      	subs	r2, #48	@ 0x30
 800867c:	2a09      	cmp	r2, #9
 800867e:	d903      	bls.n	8008688 <_vfiprintf_r+0x1cc>
 8008680:	2b00      	cmp	r3, #0
 8008682:	d0c6      	beq.n	8008612 <_vfiprintf_r+0x156>
 8008684:	9105      	str	r1, [sp, #20]
 8008686:	e7c4      	b.n	8008612 <_vfiprintf_r+0x156>
 8008688:	fb0c 2101 	mla	r1, ip, r1, r2
 800868c:	4604      	mov	r4, r0
 800868e:	2301      	movs	r3, #1
 8008690:	e7f0      	b.n	8008674 <_vfiprintf_r+0x1b8>
 8008692:	ab03      	add	r3, sp, #12
 8008694:	9300      	str	r3, [sp, #0]
 8008696:	462a      	mov	r2, r5
 8008698:	4b12      	ldr	r3, [pc, #72]	@ (80086e4 <_vfiprintf_r+0x228>)
 800869a:	a904      	add	r1, sp, #16
 800869c:	4630      	mov	r0, r6
 800869e:	f7fd fd4b 	bl	8006138 <_printf_float>
 80086a2:	4607      	mov	r7, r0
 80086a4:	1c78      	adds	r0, r7, #1
 80086a6:	d1d6      	bne.n	8008656 <_vfiprintf_r+0x19a>
 80086a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80086aa:	07d9      	lsls	r1, r3, #31
 80086ac:	d405      	bmi.n	80086ba <_vfiprintf_r+0x1fe>
 80086ae:	89ab      	ldrh	r3, [r5, #12]
 80086b0:	059a      	lsls	r2, r3, #22
 80086b2:	d402      	bmi.n	80086ba <_vfiprintf_r+0x1fe>
 80086b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80086b6:	f7fe fad1 	bl	8006c5c <__retarget_lock_release_recursive>
 80086ba:	89ab      	ldrh	r3, [r5, #12]
 80086bc:	065b      	lsls	r3, r3, #25
 80086be:	f53f af1f 	bmi.w	8008500 <_vfiprintf_r+0x44>
 80086c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80086c4:	e71e      	b.n	8008504 <_vfiprintf_r+0x48>
 80086c6:	ab03      	add	r3, sp, #12
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	462a      	mov	r2, r5
 80086cc:	4b05      	ldr	r3, [pc, #20]	@ (80086e4 <_vfiprintf_r+0x228>)
 80086ce:	a904      	add	r1, sp, #16
 80086d0:	4630      	mov	r0, r6
 80086d2:	f7fd ffc9 	bl	8006668 <_printf_i>
 80086d6:	e7e4      	b.n	80086a2 <_vfiprintf_r+0x1e6>
 80086d8:	08008dff 	.word	0x08008dff
 80086dc:	08008e09 	.word	0x08008e09
 80086e0:	08006139 	.word	0x08006139
 80086e4:	08008499 	.word	0x08008499
 80086e8:	08008e05 	.word	0x08008e05

080086ec <__swbuf_r>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	460e      	mov	r6, r1
 80086f0:	4614      	mov	r4, r2
 80086f2:	4605      	mov	r5, r0
 80086f4:	b118      	cbz	r0, 80086fe <__swbuf_r+0x12>
 80086f6:	6a03      	ldr	r3, [r0, #32]
 80086f8:	b90b      	cbnz	r3, 80086fe <__swbuf_r+0x12>
 80086fa:	f7fe f961 	bl	80069c0 <__sinit>
 80086fe:	69a3      	ldr	r3, [r4, #24]
 8008700:	60a3      	str	r3, [r4, #8]
 8008702:	89a3      	ldrh	r3, [r4, #12]
 8008704:	071a      	lsls	r2, r3, #28
 8008706:	d501      	bpl.n	800870c <__swbuf_r+0x20>
 8008708:	6923      	ldr	r3, [r4, #16]
 800870a:	b943      	cbnz	r3, 800871e <__swbuf_r+0x32>
 800870c:	4621      	mov	r1, r4
 800870e:	4628      	mov	r0, r5
 8008710:	f000 f82a 	bl	8008768 <__swsetup_r>
 8008714:	b118      	cbz	r0, 800871e <__swbuf_r+0x32>
 8008716:	f04f 37ff 	mov.w	r7, #4294967295
 800871a:	4638      	mov	r0, r7
 800871c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	6922      	ldr	r2, [r4, #16]
 8008722:	1a98      	subs	r0, r3, r2
 8008724:	6963      	ldr	r3, [r4, #20]
 8008726:	b2f6      	uxtb	r6, r6
 8008728:	4283      	cmp	r3, r0
 800872a:	4637      	mov	r7, r6
 800872c:	dc05      	bgt.n	800873a <__swbuf_r+0x4e>
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f7ff fdf7 	bl	8008324 <_fflush_r>
 8008736:	2800      	cmp	r0, #0
 8008738:	d1ed      	bne.n	8008716 <__swbuf_r+0x2a>
 800873a:	68a3      	ldr	r3, [r4, #8]
 800873c:	3b01      	subs	r3, #1
 800873e:	60a3      	str	r3, [r4, #8]
 8008740:	6823      	ldr	r3, [r4, #0]
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	6022      	str	r2, [r4, #0]
 8008746:	701e      	strb	r6, [r3, #0]
 8008748:	6962      	ldr	r2, [r4, #20]
 800874a:	1c43      	adds	r3, r0, #1
 800874c:	429a      	cmp	r2, r3
 800874e:	d004      	beq.n	800875a <__swbuf_r+0x6e>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	07db      	lsls	r3, r3, #31
 8008754:	d5e1      	bpl.n	800871a <__swbuf_r+0x2e>
 8008756:	2e0a      	cmp	r6, #10
 8008758:	d1df      	bne.n	800871a <__swbuf_r+0x2e>
 800875a:	4621      	mov	r1, r4
 800875c:	4628      	mov	r0, r5
 800875e:	f7ff fde1 	bl	8008324 <_fflush_r>
 8008762:	2800      	cmp	r0, #0
 8008764:	d0d9      	beq.n	800871a <__swbuf_r+0x2e>
 8008766:	e7d6      	b.n	8008716 <__swbuf_r+0x2a>

08008768 <__swsetup_r>:
 8008768:	b538      	push	{r3, r4, r5, lr}
 800876a:	4b29      	ldr	r3, [pc, #164]	@ (8008810 <__swsetup_r+0xa8>)
 800876c:	4605      	mov	r5, r0
 800876e:	6818      	ldr	r0, [r3, #0]
 8008770:	460c      	mov	r4, r1
 8008772:	b118      	cbz	r0, 800877c <__swsetup_r+0x14>
 8008774:	6a03      	ldr	r3, [r0, #32]
 8008776:	b90b      	cbnz	r3, 800877c <__swsetup_r+0x14>
 8008778:	f7fe f922 	bl	80069c0 <__sinit>
 800877c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008780:	0719      	lsls	r1, r3, #28
 8008782:	d422      	bmi.n	80087ca <__swsetup_r+0x62>
 8008784:	06da      	lsls	r2, r3, #27
 8008786:	d407      	bmi.n	8008798 <__swsetup_r+0x30>
 8008788:	2209      	movs	r2, #9
 800878a:	602a      	str	r2, [r5, #0]
 800878c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008790:	81a3      	strh	r3, [r4, #12]
 8008792:	f04f 30ff 	mov.w	r0, #4294967295
 8008796:	e033      	b.n	8008800 <__swsetup_r+0x98>
 8008798:	0758      	lsls	r0, r3, #29
 800879a:	d512      	bpl.n	80087c2 <__swsetup_r+0x5a>
 800879c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800879e:	b141      	cbz	r1, 80087b2 <__swsetup_r+0x4a>
 80087a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80087a4:	4299      	cmp	r1, r3
 80087a6:	d002      	beq.n	80087ae <__swsetup_r+0x46>
 80087a8:	4628      	mov	r0, r5
 80087aa:	f7ff f8b5 	bl	8007918 <_free_r>
 80087ae:	2300      	movs	r3, #0
 80087b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80087b8:	81a3      	strh	r3, [r4, #12]
 80087ba:	2300      	movs	r3, #0
 80087bc:	6063      	str	r3, [r4, #4]
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	89a3      	ldrh	r3, [r4, #12]
 80087c4:	f043 0308 	orr.w	r3, r3, #8
 80087c8:	81a3      	strh	r3, [r4, #12]
 80087ca:	6923      	ldr	r3, [r4, #16]
 80087cc:	b94b      	cbnz	r3, 80087e2 <__swsetup_r+0x7a>
 80087ce:	89a3      	ldrh	r3, [r4, #12]
 80087d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80087d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087d8:	d003      	beq.n	80087e2 <__swsetup_r+0x7a>
 80087da:	4621      	mov	r1, r4
 80087dc:	4628      	mov	r0, r5
 80087de:	f000 f883 	bl	80088e8 <__smakebuf_r>
 80087e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087e6:	f013 0201 	ands.w	r2, r3, #1
 80087ea:	d00a      	beq.n	8008802 <__swsetup_r+0x9a>
 80087ec:	2200      	movs	r2, #0
 80087ee:	60a2      	str	r2, [r4, #8]
 80087f0:	6962      	ldr	r2, [r4, #20]
 80087f2:	4252      	negs	r2, r2
 80087f4:	61a2      	str	r2, [r4, #24]
 80087f6:	6922      	ldr	r2, [r4, #16]
 80087f8:	b942      	cbnz	r2, 800880c <__swsetup_r+0xa4>
 80087fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087fe:	d1c5      	bne.n	800878c <__swsetup_r+0x24>
 8008800:	bd38      	pop	{r3, r4, r5, pc}
 8008802:	0799      	lsls	r1, r3, #30
 8008804:	bf58      	it	pl
 8008806:	6962      	ldrpl	r2, [r4, #20]
 8008808:	60a2      	str	r2, [r4, #8]
 800880a:	e7f4      	b.n	80087f6 <__swsetup_r+0x8e>
 800880c:	2000      	movs	r0, #0
 800880e:	e7f7      	b.n	8008800 <__swsetup_r+0x98>
 8008810:	2000001c 	.word	0x2000001c

08008814 <_raise_r>:
 8008814:	291f      	cmp	r1, #31
 8008816:	b538      	push	{r3, r4, r5, lr}
 8008818:	4605      	mov	r5, r0
 800881a:	460c      	mov	r4, r1
 800881c:	d904      	bls.n	8008828 <_raise_r+0x14>
 800881e:	2316      	movs	r3, #22
 8008820:	6003      	str	r3, [r0, #0]
 8008822:	f04f 30ff 	mov.w	r0, #4294967295
 8008826:	bd38      	pop	{r3, r4, r5, pc}
 8008828:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800882a:	b112      	cbz	r2, 8008832 <_raise_r+0x1e>
 800882c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008830:	b94b      	cbnz	r3, 8008846 <_raise_r+0x32>
 8008832:	4628      	mov	r0, r5
 8008834:	f000 f830 	bl	8008898 <_getpid_r>
 8008838:	4622      	mov	r2, r4
 800883a:	4601      	mov	r1, r0
 800883c:	4628      	mov	r0, r5
 800883e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008842:	f000 b817 	b.w	8008874 <_kill_r>
 8008846:	2b01      	cmp	r3, #1
 8008848:	d00a      	beq.n	8008860 <_raise_r+0x4c>
 800884a:	1c59      	adds	r1, r3, #1
 800884c:	d103      	bne.n	8008856 <_raise_r+0x42>
 800884e:	2316      	movs	r3, #22
 8008850:	6003      	str	r3, [r0, #0]
 8008852:	2001      	movs	r0, #1
 8008854:	e7e7      	b.n	8008826 <_raise_r+0x12>
 8008856:	2100      	movs	r1, #0
 8008858:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800885c:	4620      	mov	r0, r4
 800885e:	4798      	blx	r3
 8008860:	2000      	movs	r0, #0
 8008862:	e7e0      	b.n	8008826 <_raise_r+0x12>

08008864 <raise>:
 8008864:	4b02      	ldr	r3, [pc, #8]	@ (8008870 <raise+0xc>)
 8008866:	4601      	mov	r1, r0
 8008868:	6818      	ldr	r0, [r3, #0]
 800886a:	f7ff bfd3 	b.w	8008814 <_raise_r>
 800886e:	bf00      	nop
 8008870:	2000001c 	.word	0x2000001c

08008874 <_kill_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d07      	ldr	r5, [pc, #28]	@ (8008894 <_kill_r+0x20>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	602b      	str	r3, [r5, #0]
 8008882:	f7f8 fd37 	bl	80012f4 <_kill>
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d102      	bne.n	8008890 <_kill_r+0x1c>
 800888a:	682b      	ldr	r3, [r5, #0]
 800888c:	b103      	cbz	r3, 8008890 <_kill_r+0x1c>
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd38      	pop	{r3, r4, r5, pc}
 8008892:	bf00      	nop
 8008894:	20004d78 	.word	0x20004d78

08008898 <_getpid_r>:
 8008898:	f7f8 bd24 	b.w	80012e4 <_getpid>

0800889c <__swhatbuf_r>:
 800889c:	b570      	push	{r4, r5, r6, lr}
 800889e:	460c      	mov	r4, r1
 80088a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a4:	2900      	cmp	r1, #0
 80088a6:	b096      	sub	sp, #88	@ 0x58
 80088a8:	4615      	mov	r5, r2
 80088aa:	461e      	mov	r6, r3
 80088ac:	da0d      	bge.n	80088ca <__swhatbuf_r+0x2e>
 80088ae:	89a3      	ldrh	r3, [r4, #12]
 80088b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80088b4:	f04f 0100 	mov.w	r1, #0
 80088b8:	bf14      	ite	ne
 80088ba:	2340      	movne	r3, #64	@ 0x40
 80088bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80088c0:	2000      	movs	r0, #0
 80088c2:	6031      	str	r1, [r6, #0]
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	b016      	add	sp, #88	@ 0x58
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
 80088ca:	466a      	mov	r2, sp
 80088cc:	f000 f848 	bl	8008960 <_fstat_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	dbec      	blt.n	80088ae <__swhatbuf_r+0x12>
 80088d4:	9901      	ldr	r1, [sp, #4]
 80088d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80088da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80088de:	4259      	negs	r1, r3
 80088e0:	4159      	adcs	r1, r3
 80088e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80088e6:	e7eb      	b.n	80088c0 <__swhatbuf_r+0x24>

080088e8 <__smakebuf_r>:
 80088e8:	898b      	ldrh	r3, [r1, #12]
 80088ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088ec:	079d      	lsls	r5, r3, #30
 80088ee:	4606      	mov	r6, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	d507      	bpl.n	8008904 <__smakebuf_r+0x1c>
 80088f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	6123      	str	r3, [r4, #16]
 80088fc:	2301      	movs	r3, #1
 80088fe:	6163      	str	r3, [r4, #20]
 8008900:	b003      	add	sp, #12
 8008902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008904:	ab01      	add	r3, sp, #4
 8008906:	466a      	mov	r2, sp
 8008908:	f7ff ffc8 	bl	800889c <__swhatbuf_r>
 800890c:	9f00      	ldr	r7, [sp, #0]
 800890e:	4605      	mov	r5, r0
 8008910:	4639      	mov	r1, r7
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff f874 	bl	8007a00 <_malloc_r>
 8008918:	b948      	cbnz	r0, 800892e <__smakebuf_r+0x46>
 800891a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891e:	059a      	lsls	r2, r3, #22
 8008920:	d4ee      	bmi.n	8008900 <__smakebuf_r+0x18>
 8008922:	f023 0303 	bic.w	r3, r3, #3
 8008926:	f043 0302 	orr.w	r3, r3, #2
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	e7e2      	b.n	80088f4 <__smakebuf_r+0xc>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	6020      	str	r0, [r4, #0]
 8008932:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008936:	81a3      	strh	r3, [r4, #12]
 8008938:	9b01      	ldr	r3, [sp, #4]
 800893a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800893e:	b15b      	cbz	r3, 8008958 <__smakebuf_r+0x70>
 8008940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008944:	4630      	mov	r0, r6
 8008946:	f000 f81d 	bl	8008984 <_isatty_r>
 800894a:	b128      	cbz	r0, 8008958 <__smakebuf_r+0x70>
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	f023 0303 	bic.w	r3, r3, #3
 8008952:	f043 0301 	orr.w	r3, r3, #1
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	89a3      	ldrh	r3, [r4, #12]
 800895a:	431d      	orrs	r5, r3
 800895c:	81a5      	strh	r5, [r4, #12]
 800895e:	e7cf      	b.n	8008900 <__smakebuf_r+0x18>

08008960 <_fstat_r>:
 8008960:	b538      	push	{r3, r4, r5, lr}
 8008962:	4d07      	ldr	r5, [pc, #28]	@ (8008980 <_fstat_r+0x20>)
 8008964:	2300      	movs	r3, #0
 8008966:	4604      	mov	r4, r0
 8008968:	4608      	mov	r0, r1
 800896a:	4611      	mov	r1, r2
 800896c:	602b      	str	r3, [r5, #0]
 800896e:	f7f8 fd21 	bl	80013b4 <_fstat>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	d102      	bne.n	800897c <_fstat_r+0x1c>
 8008976:	682b      	ldr	r3, [r5, #0]
 8008978:	b103      	cbz	r3, 800897c <_fstat_r+0x1c>
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	bd38      	pop	{r3, r4, r5, pc}
 800897e:	bf00      	nop
 8008980:	20004d78 	.word	0x20004d78

08008984 <_isatty_r>:
 8008984:	b538      	push	{r3, r4, r5, lr}
 8008986:	4d06      	ldr	r5, [pc, #24]	@ (80089a0 <_isatty_r+0x1c>)
 8008988:	2300      	movs	r3, #0
 800898a:	4604      	mov	r4, r0
 800898c:	4608      	mov	r0, r1
 800898e:	602b      	str	r3, [r5, #0]
 8008990:	f7f8 fd20 	bl	80013d4 <_isatty>
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	d102      	bne.n	800899e <_isatty_r+0x1a>
 8008998:	682b      	ldr	r3, [r5, #0]
 800899a:	b103      	cbz	r3, 800899e <_isatty_r+0x1a>
 800899c:	6023      	str	r3, [r4, #0]
 800899e:	bd38      	pop	{r3, r4, r5, pc}
 80089a0:	20004d78 	.word	0x20004d78

080089a4 <_init>:
 80089a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089a6:	bf00      	nop
 80089a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089aa:	bc08      	pop	{r3}
 80089ac:	469e      	mov	lr, r3
 80089ae:	4770      	bx	lr

080089b0 <_fini>:
 80089b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089b2:	bf00      	nop
 80089b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089b6:	bc08      	pop	{r3}
 80089b8:	469e      	mov	lr, r3
 80089ba:	4770      	bx	lr
