
LAB_7_PRIORITY_TASK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b94  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  08008d28  08008d28  00009d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009210  08009210  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009210  08009210  0000a210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009218  08009218  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009218  08009218  0000a218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800921c  0800921c  0000a21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009220  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          00004c74  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004e4c  20004e4c  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180c8  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033a2  00000000  00000000  000232d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00026678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001000  00000000  00000000  00027b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000044f8  00000000  00000000  00028b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000168f8  00000000  00000000  0002d010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d796c  00000000  00000000  00043908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011b274  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006838  00000000  00000000  0011b2b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00121af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008d0c 	.word	0x08008d0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008d0c 	.word	0x08008d0c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fc28 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f850 	bl	8000f44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f8e2 	bl	800106c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 f8b6 	bl	8001018 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eac:	f002 faca 	bl	8003444 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000eb0:	4a15      	ldr	r2, [pc, #84]	@ (8000f08 <main+0x70>)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4815      	ldr	r0, [pc, #84]	@ (8000f0c <main+0x74>)
 8000eb6:	f002 fb0f 	bl	80034d8 <osThreadNew>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a14      	ldr	r2, [pc, #80]	@ (8000f10 <main+0x78>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 8000ec0:	4a14      	ldr	r2, [pc, #80]	@ (8000f14 <main+0x7c>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <main+0x80>)
 8000ec6:	f002 fb07 	bl	80034d8 <osThreadNew>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <main+0x84>)
 8000ece:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <main+0x88>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4813      	ldr	r0, [pc, #76]	@ (8000f24 <main+0x8c>)
 8000ed6:	f002 faff 	bl	80034d8 <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a12      	ldr	r2, [pc, #72]	@ (8000f28 <main+0x90>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* creation of LED3_Task */
  LED3_TaskHandle = osThreadNew(StartLED3_Task, NULL, &LED3_Task_attributes);
 8000ee0:	4a12      	ldr	r2, [pc, #72]	@ (8000f2c <main+0x94>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4812      	ldr	r0, [pc, #72]	@ (8000f30 <main+0x98>)
 8000ee6:	f002 faf7 	bl	80034d8 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a11      	ldr	r2, [pc, #68]	@ (8000f34 <main+0x9c>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* creation of LED4_Task */
  LED4_TaskHandle = osThreadNew(StartLED4_Task, NULL, &LED4_Task_attributes);
 8000ef0:	4a11      	ldr	r2, [pc, #68]	@ (8000f38 <main+0xa0>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <main+0xa4>)
 8000ef6:	f002 faef 	bl	80034d8 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a10      	ldr	r2, [pc, #64]	@ (8000f40 <main+0xa8>)
 8000efe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f00:	f002 fac4 	bl	800348c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <main+0x6c>
 8000f08:	08008dd0 	.word	0x08008dd0
 8000f0c:	080011a9 	.word	0x080011a9
 8000f10:	200002b4 	.word	0x200002b4
 8000f14:	08008df4 	.word	0x08008df4
 8000f18:	080011c1 	.word	0x080011c1
 8000f1c:	200002b8 	.word	0x200002b8
 8000f20:	08008e18 	.word	0x08008e18
 8000f24:	080011f9 	.word	0x080011f9
 8000f28:	200002bc 	.word	0x200002bc
 8000f2c:	08008e3c 	.word	0x08008e3c
 8000f30:	08001231 	.word	0x08001231
 8000f34:	200002c0 	.word	0x200002c0
 8000f38:	08008e60 	.word	0x08008e60
 8000f3c:	08001269 	.word	0x08001269
 8000f40:	200002c4 	.word	0x200002c4

08000f44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b094      	sub	sp, #80	@ 0x50
 8000f48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	2230      	movs	r2, #48	@ 0x30
 8000f50:	2100      	movs	r1, #0
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 fdb9 	bl	8006aca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f58:	f107 030c 	add.w	r3, r7, #12
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	4b28      	ldr	r3, [pc, #160]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f70:	4a27      	ldr	r2, [pc, #156]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f78:	4b25      	ldr	r3, [pc, #148]	@ (8001010 <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a21      	ldr	r2, [pc, #132]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fa4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000faa:	2302      	movs	r3, #2
 8000fac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000fb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000fbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc6:	f107 0320 	add.w	r3, r7, #32
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f000 fe84 	bl	8001cd8 <HAL_RCC_OscConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fd6:	f000 f975 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fda:	230f      	movs	r3, #15
 8000fdc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fe6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2105      	movs	r1, #5
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f001 f8e5 	bl	80021c8 <HAL_RCC_ClockConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001004:	f000 f95e 	bl	80012c4 <Error_Handler>
  }
}
 8001008:	bf00      	nop
 800100a:	3750      	adds	r7, #80	@ 0x50
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000

08001018 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800101e:	4a12      	ldr	r2, [pc, #72]	@ (8001068 <MX_USART2_UART_Init+0x50>)
 8001020:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001022:	4b10      	ldr	r3, [pc, #64]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001024:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001028:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001032:	2200      	movs	r2, #0
 8001034:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800103e:	220c      	movs	r2, #12
 8001040:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 800104a:	2200      	movs	r2, #0
 800104c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_USART2_UART_Init+0x4c>)
 8001050:	f001 fda8 	bl	8002ba4 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800105a:	f000 f933 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000026c 	.word	0x2000026c
 8001068:	40004400 	.word	0x40004400

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <MX_GPIO_Init+0x9c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a1f      	ldr	r2, [pc, #124]	@ (8001108 <MX_GPIO_Init+0x9c>)
 800108c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b1d      	ldr	r3, [pc, #116]	@ (8001108 <MX_GPIO_Init+0x9c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b16      	ldr	r3, [pc, #88]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_GPIO_Init+0x9c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80010dc:	480b      	ldr	r0, [pc, #44]	@ (800110c <MX_GPIO_Init+0xa0>)
 80010de:	f000 fdc7 	bl	8001c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80010e2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80010e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f4:	f107 030c 	add.w	r3, r7, #12
 80010f8:	4619      	mov	r1, r3
 80010fa:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0xa0>)
 80010fc:	f000 fc1c 	bl	8001938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40023800 	.word	0x40023800
 800110c:	40020c00 	.word	0x40020c00

08001110 <Print_Task_Status>:

/* USER CODE BEGIN 4 */
void Print_Task_Status(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af04      	add	r7, sp, #16
  snprintf(buffer, sizeof(buffer), "Task Status : LED1(Lowest):%lu, LED2(Low):%lu, LED3(Medium):%lu, LED4(High):%lu\r\n",
 8001116:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <Print_Task_Status+0x44>)
 8001118:	6818      	ldr	r0, [r3, #0]
 800111a:	4b0f      	ldr	r3, [pc, #60]	@ (8001158 <Print_Task_Status+0x48>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <Print_Task_Status+0x4c>)
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	490f      	ldr	r1, [pc, #60]	@ (8001160 <Print_Task_Status+0x50>)
 8001124:	6809      	ldr	r1, [r1, #0]
 8001126:	9102      	str	r1, [sp, #8]
 8001128:	9201      	str	r2, [sp, #4]
 800112a:	9300      	str	r3, [sp, #0]
 800112c:	4603      	mov	r3, r0
 800112e:	4a0d      	ldr	r2, [pc, #52]	@ (8001164 <Print_Task_Status+0x54>)
 8001130:	2164      	movs	r1, #100	@ 0x64
 8001132:	480d      	ldr	r0, [pc, #52]	@ (8001168 <Print_Task_Status+0x58>)
 8001134:	f005 fc52 	bl	80069dc <sniprintf>
           counter_led1, counter_led2, counter_led3, counter_led4);
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <Print_Task_Status+0x58>)
 800113a:	f7ff f899 	bl	8000270 <strlen>
 800113e:	4603      	mov	r3, r0
 8001140:	b29a      	uxth	r2, r3
 8001142:	f04f 33ff 	mov.w	r3, #4294967295
 8001146:	4908      	ldr	r1, [pc, #32]	@ (8001168 <Print_Task_Status+0x58>)
 8001148:	4808      	ldr	r0, [pc, #32]	@ (800116c <Print_Task_Status+0x5c>)
 800114a:	f001 fd7b 	bl	8002c44 <HAL_UART_Transmit>
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200001f4 	.word	0x200001f4
 8001158:	200001f8 	.word	0x200001f8
 800115c:	200001fc 	.word	0x200001fc
 8001160:	20000200 	.word	0x20000200
 8001164:	08008d64 	.word	0x08008d64
 8001168:	20000204 	.word	0x20000204
 800116c:	2000026c 	.word	0x2000026c

08001170 <Simulate_CPU_Work>:
void Simulate_CPU_Work(uint32_t iterations)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  for (uint32_t i = 0; i < iterations; i++)
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e007      	b.n	800118e <Simulate_CPU_Work+0x1e>
  {
	  mycounter++;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <Simulate_CPU_Work+0x34>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <Simulate_CPU_Work+0x34>)
 8001186:	6013      	str	r3, [r2, #0]
  for (uint32_t i = 0; i < iterations; i++)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	429a      	cmp	r2, r3
 8001194:	d3f3      	bcc.n	800117e <Simulate_CPU_Work+0xe>
  }
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	20000268 	.word	0x20000268

080011a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  Print_Task_Status();
 80011b0:	f7ff ffae 	bl	8001110 <Print_Task_Status>
	  osDelay(5000);
 80011b4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011b8:	f002 fa20 	bl	80035fc <osDelay>
	  Print_Task_Status();
 80011bc:	bf00      	nop
 80011be:	e7f7      	b.n	80011b0 <StartDefaultTask+0x8>

080011c0 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80011c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011cc:	4808      	ldr	r0, [pc, #32]	@ (80011f0 <StartLED1_Task+0x30>)
 80011ce:	f000 fd68 	bl	8001ca2 <HAL_GPIO_TogglePin>
	  counter_led1++;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <StartLED1_Task+0x34>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <StartLED1_Task+0x34>)
 80011da:	6013      	str	r3, [r2, #0]
	  Simulate_CPU_Work(1000);
 80011dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e0:	f7ff ffc6 	bl	8001170 <Simulate_CPU_Work>
	  osDelay(1000);
 80011e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011e8:	f002 fa08 	bl	80035fc <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80011ec:	bf00      	nop
 80011ee:	e7eb      	b.n	80011c8 <StartLED1_Task+0x8>
 80011f0:	40020c00 	.word	0x40020c00
 80011f4:	200001f4 	.word	0x200001f4

080011f8 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001200:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001204:	4808      	ldr	r0, [pc, #32]	@ (8001228 <StartLED2_Task+0x30>)
 8001206:	f000 fd4c 	bl	8001ca2 <HAL_GPIO_TogglePin>
	    counter_led2++;
 800120a:	4b08      	ldr	r3, [pc, #32]	@ (800122c <StartLED2_Task+0x34>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	3301      	adds	r3, #1
 8001210:	4a06      	ldr	r2, [pc, #24]	@ (800122c <StartLED2_Task+0x34>)
 8001212:	6013      	str	r3, [r2, #0]
	    Simulate_CPU_Work(2000);
 8001214:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001218:	f7ff ffaa 	bl	8001170 <Simulate_CPU_Work>
	    osDelay(700);
 800121c:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8001220:	f002 f9ec 	bl	80035fc <osDelay>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001224:	bf00      	nop
 8001226:	e7eb      	b.n	8001200 <StartLED2_Task+0x8>
 8001228:	40020c00 	.word	0x40020c00
 800122c:	200001f8 	.word	0x200001f8

08001230 <StartLED3_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED3_Task */
void StartLED3_Task(void *argument)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED3_Task */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8001238:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800123c:	4808      	ldr	r0, [pc, #32]	@ (8001260 <StartLED3_Task+0x30>)
 800123e:	f000 fd30 	bl	8001ca2 <HAL_GPIO_TogglePin>
	    counter_led3++;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <StartLED3_Task+0x34>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	3301      	adds	r3, #1
 8001248:	4a06      	ldr	r2, [pc, #24]	@ (8001264 <StartLED3_Task+0x34>)
 800124a:	6013      	str	r3, [r2, #0]
	    Simulate_CPU_Work(3000);
 800124c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001250:	f7ff ff8e 	bl	8001170 <Simulate_CPU_Work>
	    osDelay(400);
 8001254:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001258:	f002 f9d0 	bl	80035fc <osDelay>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800125c:	bf00      	nop
 800125e:	e7eb      	b.n	8001238 <StartLED3_Task+0x8>
 8001260:	40020c00 	.word	0x40020c00
 8001264:	200001fc 	.word	0x200001fc

08001268 <StartLED4_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED4_Task */
void StartLED4_Task(void *argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED4_Task */
  /* Infinite loop */
  for(;;)
  {
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001270:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001274:	4808      	ldr	r0, [pc, #32]	@ (8001298 <StartLED4_Task+0x30>)
 8001276:	f000 fd14 	bl	8001ca2 <HAL_GPIO_TogglePin>
	    counter_led4++;
 800127a:	4b08      	ldr	r3, [pc, #32]	@ (800129c <StartLED4_Task+0x34>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	3301      	adds	r3, #1
 8001280:	4a06      	ldr	r2, [pc, #24]	@ (800129c <StartLED4_Task+0x34>)
 8001282:	6013      	str	r3, [r2, #0]
	    Simulate_CPU_Work(5000);
 8001284:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001288:	f7ff ff72 	bl	8001170 <Simulate_CPU_Work>
	    osDelay(100);
 800128c:	2064      	movs	r0, #100	@ 0x64
 800128e:	f002 f9b5 	bl	80035fc <osDelay>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001292:	bf00      	nop
 8001294:	e7ec      	b.n	8001270 <StartLED4_Task+0x8>
 8001296:	bf00      	nop
 8001298:	40020c00 	.word	0x40020c00
 800129c:	20000200 	.word	0x20000200

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f000 fa3f 	bl	8001734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40010000 	.word	0x40010000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <Error_Handler+0x8>

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	607b      	str	r3, [r7, #4]
 80012da:	4b12      	ldr	r3, [pc, #72]	@ (8001324 <HAL_MspInit+0x54>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <HAL_MspInit+0x54>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001324 <HAL_MspInit+0x54>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001324 <HAL_MspInit+0x54>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001324 <HAL_MspInit+0x54>)
 80012fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001300:	6413      	str	r3, [r2, #64]	@ 0x40
 8001302:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <HAL_MspInit+0x54>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
 8001310:	210f      	movs	r1, #15
 8001312:	f06f 0001 	mvn.w	r0, #1
 8001316:	f000 fae5 	bl	80018e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	@ (80013ac <HAL_UART_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12b      	bne.n	80013a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 8001354:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001358:	6413      	str	r3, [r2, #64]	@ 0x40
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136e:	4a10      	ldr	r2, [pc, #64]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	@ 0x30
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001382:	230c      	movs	r3, #12
 8001384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	2302      	movs	r3, #2
 8001388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138e:	2303      	movs	r3, #3
 8001390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001392:	2307      	movs	r3, #7
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <HAL_UART_MspInit+0x8c>)
 800139e:	f000 facb 	bl	8001938 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	@ 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40004400 	.word	0x40004400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020000 	.word	0x40020000

080013b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b2f      	ldr	r3, [pc, #188]	@ (800148c <HAL_InitTick+0xd4>)
 80013ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d0:	4a2e      	ldr	r2, [pc, #184]	@ (800148c <HAL_InitTick+0xd4>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80013d8:	4b2c      	ldr	r3, [pc, #176]	@ (800148c <HAL_InitTick+0xd4>)
 80013da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013dc:	f003 0301 	and.w	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013e4:	f107 020c 	add.w	r2, r7, #12
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	4611      	mov	r1, r2
 80013ee:	4618      	mov	r0, r3
 80013f0:	f001 f90a 	bl	8002608 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80013f4:	f001 f8f4 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 80013f8:	4603      	mov	r3, r0
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001400:	4a23      	ldr	r2, [pc, #140]	@ (8001490 <HAL_InitTick+0xd8>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9b      	lsrs	r3, r3, #18
 8001408:	3b01      	subs	r3, #1
 800140a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800140c:	4b21      	ldr	r3, [pc, #132]	@ (8001494 <HAL_InitTick+0xdc>)
 800140e:	4a22      	ldr	r2, [pc, #136]	@ (8001498 <HAL_InitTick+0xe0>)
 8001410:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001412:	4b20      	ldr	r3, [pc, #128]	@ (8001494 <HAL_InitTick+0xdc>)
 8001414:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001418:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800141a:	4a1e      	ldr	r2, [pc, #120]	@ (8001494 <HAL_InitTick+0xdc>)
 800141c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001420:	4b1c      	ldr	r3, [pc, #112]	@ (8001494 <HAL_InitTick+0xdc>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001426:	4b1b      	ldr	r3, [pc, #108]	@ (8001494 <HAL_InitTick+0xdc>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <HAL_InitTick+0xdc>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001432:	4818      	ldr	r0, [pc, #96]	@ (8001494 <HAL_InitTick+0xdc>)
 8001434:	f001 f91a 	bl	800266c <HAL_TIM_Base_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800143e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001442:	2b00      	cmp	r3, #0
 8001444:	d11b      	bne.n	800147e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001446:	4813      	ldr	r0, [pc, #76]	@ (8001494 <HAL_InitTick+0xdc>)
 8001448:	f001 f96a 	bl	8002720 <HAL_TIM_Base_Start_IT>
 800144c:	4603      	mov	r3, r0
 800144e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001452:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001456:	2b00      	cmp	r3, #0
 8001458:	d111      	bne.n	800147e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800145a:	2019      	movs	r0, #25
 800145c:	f000 fa5e 	bl	800191c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b0f      	cmp	r3, #15
 8001464:	d808      	bhi.n	8001478 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001466:	2200      	movs	r2, #0
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	2019      	movs	r0, #25
 800146c:	f000 fa3a 	bl	80018e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001470:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <HAL_InitTick+0xe4>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	e002      	b.n	800147e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800147e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001482:	4618      	mov	r0, r3
 8001484:	3730      	adds	r7, #48	@ 0x30
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	431bde83 	.word	0x431bde83
 8001494:	200002c8 	.word	0x200002c8
 8001498:	40010000 	.word	0x40010000
 800149c:	20000004 	.word	0x20000004

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014a4:	bf00      	nop
 80014a6:	e7fd      	b.n	80014a4 <NMI_Handler+0x4>

080014a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <MemManage_Handler+0x4>

080014b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014dc:	4802      	ldr	r0, [pc, #8]	@ (80014e8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80014de:	f001 f98f 	bl	8002800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200002c8 	.word	0x200002c8

080014ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return 1;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_kill>:

int _kill(int pid, int sig)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001506:	f005 fb89 	bl	8006c1c <__errno>
 800150a:	4603      	mov	r3, r0
 800150c:	2216      	movs	r2, #22
 800150e:	601a      	str	r2, [r3, #0]
  return -1;
 8001510:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <_exit>:

void _exit (int status)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ffe7 	bl	80014fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800152e:	bf00      	nop
 8001530:	e7fd      	b.n	800152e <_exit+0x12>

08001532 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e00a      	b.n	800155a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001544:	f3af 8000 	nop.w
 8001548:	4601      	mov	r1, r0
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	1c5a      	adds	r2, r3, #1
 800154e:	60ba      	str	r2, [r7, #8]
 8001550:	b2ca      	uxtb	r2, r1
 8001552:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	3301      	adds	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	dbf0      	blt.n	8001544 <_read+0x12>
  }

  return len;
 8001562:	687b      	ldr	r3, [r7, #4]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001578:	2300      	movs	r3, #0
 800157a:	617b      	str	r3, [r7, #20]
 800157c:	e009      	b.n	8001592 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	1c5a      	adds	r2, r3, #1
 8001582:	60ba      	str	r2, [r7, #8]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	3301      	adds	r3, #1
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	429a      	cmp	r2, r3
 8001598:	dbf1      	blt.n	800157e <_write+0x12>
  }
  return len;
 800159a:	687b      	ldr	r3, [r7, #4]
}
 800159c:	4618      	mov	r0, r3
 800159e:	3718      	adds	r7, #24
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_close>:

int _close(int file)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015cc:	605a      	str	r2, [r3, #4]
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <_isatty>:

int _isatty(int file)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015e4:	2301      	movs	r3, #1
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr

080015f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015f2:	b480      	push	{r7}
 80015f4:	b085      	sub	sp, #20
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	60f8      	str	r0, [r7, #12]
 80015fa:	60b9      	str	r1, [r7, #8]
 80015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	@ (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f005 faee 	bl	8006c1c <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	@ (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20020000 	.word	0x20020000
 800166c:	00000400 	.word	0x00000400
 8001670:	20000310 	.word	0x20000310
 8001674:	20004e50 	.word	0x20004e50

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	@ (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	@ (80016dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	@ (80016e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	@ (80016e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	@ (80016e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ca:	f005 faad 	bl	8006c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff fbe3 	bl	8000e98 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80016e0:	08009220 	.word	0x08009220
  ldr r2, =_sbss
 80016e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80016e8:	20004e4c 	.word	0x20004e4c

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 f8d8 	bl	80018ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	200f      	movs	r0, #15
 8001720:	f7ff fe4a 	bl	80013b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fdd4 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_IncTick+0x20>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x24>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4413      	add	r3, r2
 8001744:	4a04      	ldr	r2, [pc, #16]	@ (8001758 <HAL_IncTick+0x24>)
 8001746:	6013      	str	r3, [r2, #0]
}
 8001748:	bf00      	nop
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	20000008 	.word	0x20000008
 8001758:	20000314 	.word	0x20000314

0800175c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  return uwTick;
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_GetTick+0x14>)
 8001762:	681b      	ldr	r3, [r3, #0]
}
 8001764:	4618      	mov	r0, r3
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	20000314 	.word	0x20000314

08001774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001784:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800178a:	68ba      	ldr	r2, [r7, #8]
 800178c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001790:	4013      	ands	r3, r2
 8001792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800179c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017a6:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	60d3      	str	r3, [r2, #12]
}
 80017ac:	bf00      	nop
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c0:	4b04      	ldr	r3, [pc, #16]	@ (80017d4 <__NVIC_GetPriorityGrouping+0x18>)
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	0a1b      	lsrs	r3, r3, #8
 80017c6:	f003 0307 	and.w	r3, r3, #7
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	db0b      	blt.n	8001802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	f003 021f 	and.w	r2, r3, #31
 80017f0:	4907      	ldr	r1, [pc, #28]	@ (8001810 <__NVIC_EnableIRQ+0x38>)
 80017f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f6:	095b      	lsrs	r3, r3, #5
 80017f8:	2001      	movs	r0, #1
 80017fa:	fa00 f202 	lsl.w	r2, r0, r2
 80017fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000e100 	.word	0xe000e100

08001814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	6039      	str	r1, [r7, #0]
 800181e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	db0a      	blt.n	800183e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	490c      	ldr	r1, [pc, #48]	@ (8001860 <__NVIC_SetPriority+0x4c>)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	0112      	lsls	r2, r2, #4
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	440b      	add	r3, r1
 8001838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800183c:	e00a      	b.n	8001854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4908      	ldr	r1, [pc, #32]	@ (8001864 <__NVIC_SetPriority+0x50>)
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	f003 030f 	and.w	r3, r3, #15
 800184a:	3b04      	subs	r3, #4
 800184c:	0112      	lsls	r2, r2, #4
 800184e:	b2d2      	uxtb	r2, r2
 8001850:	440b      	add	r3, r1
 8001852:	761a      	strb	r2, [r3, #24]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000e100 	.word	0xe000e100
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001868:	b480      	push	{r7}
 800186a:	b089      	sub	sp, #36	@ 0x24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f1c3 0307 	rsb	r3, r3, #7
 8001882:	2b04      	cmp	r3, #4
 8001884:	bf28      	it	cs
 8001886:	2304      	movcs	r3, #4
 8001888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3304      	adds	r3, #4
 800188e:	2b06      	cmp	r3, #6
 8001890:	d902      	bls.n	8001898 <NVIC_EncodePriority+0x30>
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3b03      	subs	r3, #3
 8001896:	e000      	b.n	800189a <NVIC_EncodePriority+0x32>
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800189c:	f04f 32ff 	mov.w	r2, #4294967295
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	43da      	mvns	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	401a      	ands	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b0:	f04f 31ff 	mov.w	r1, #4294967295
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	fa01 f303 	lsl.w	r3, r1, r3
 80018ba:	43d9      	mvns	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	4313      	orrs	r3, r2
         );
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3724      	adds	r7, #36	@ 0x24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ff4c 	bl	8001774 <__NVIC_SetPriorityGrouping>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f2:	2300      	movs	r3, #0
 80018f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f6:	f7ff ff61 	bl	80017bc <__NVIC_GetPriorityGrouping>
 80018fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	68b9      	ldr	r1, [r7, #8]
 8001900:	6978      	ldr	r0, [r7, #20]
 8001902:	f7ff ffb1 	bl	8001868 <NVIC_EncodePriority>
 8001906:	4602      	mov	r2, r0
 8001908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190c:	4611      	mov	r1, r2
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff80 	bl	8001814 <__NVIC_SetPriority>
}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff54 	bl	80017d8 <__NVIC_EnableIRQ>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e16b      	b.n	8001c2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	429a      	cmp	r2, r3
 800196e:	f040 815a 	bne.w	8001c26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f003 0303 	and.w	r3, r3, #3
 800197a:	2b01      	cmp	r3, #1
 800197c:	d005      	beq.n	800198a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001986:	2b02      	cmp	r3, #2
 8001988:	d130      	bne.n	80019ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	2203      	movs	r2, #3
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019c0:	2201      	movs	r2, #1
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 0201 	and.w	r2, r3, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0303 	and.w	r3, r3, #3
 80019f4:	2b03      	cmp	r3, #3
 80019f6:	d017      	beq.n	8001a28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f003 0303 	and.w	r3, r3, #3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d123      	bne.n	8001a7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	08da      	lsrs	r2, r3, #3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3208      	adds	r2, #8
 8001a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	691a      	ldr	r2, [r3, #16]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	69b9      	ldr	r1, [r7, #24]
 8001a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 80b4 	beq.w	8001c26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b60      	ldr	r3, [pc, #384]	@ (8001c44 <HAL_GPIO_Init+0x30c>)
 8001ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c44 <HAL_GPIO_Init+0x30c>)
 8001ac8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001acc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ace:	4b5d      	ldr	r3, [pc, #372]	@ (8001c44 <HAL_GPIO_Init+0x30c>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ada:	4a5b      	ldr	r2, [pc, #364]	@ (8001c48 <HAL_GPIO_Init+0x310>)
 8001adc:	69fb      	ldr	r3, [r7, #28]
 8001ade:	089b      	lsrs	r3, r3, #2
 8001ae0:	3302      	adds	r3, #2
 8001ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	220f      	movs	r2, #15
 8001af2:	fa02 f303 	lsl.w	r3, r2, r3
 8001af6:	43db      	mvns	r3, r3
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	4013      	ands	r3, r2
 8001afc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	@ (8001c4c <HAL_GPIO_Init+0x314>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d02b      	beq.n	8001b5e <HAL_GPIO_Init+0x226>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a51      	ldr	r2, [pc, #324]	@ (8001c50 <HAL_GPIO_Init+0x318>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d025      	beq.n	8001b5a <HAL_GPIO_Init+0x222>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a50      	ldr	r2, [pc, #320]	@ (8001c54 <HAL_GPIO_Init+0x31c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01f      	beq.n	8001b56 <HAL_GPIO_Init+0x21e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	@ (8001c58 <HAL_GPIO_Init+0x320>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d019      	beq.n	8001b52 <HAL_GPIO_Init+0x21a>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	@ (8001c5c <HAL_GPIO_Init+0x324>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0x216>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a4d      	ldr	r2, [pc, #308]	@ (8001c60 <HAL_GPIO_Init+0x328>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00d      	beq.n	8001b4a <HAL_GPIO_Init+0x212>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4a4c      	ldr	r2, [pc, #304]	@ (8001c64 <HAL_GPIO_Init+0x32c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d007      	beq.n	8001b46 <HAL_GPIO_Init+0x20e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a4b      	ldr	r2, [pc, #300]	@ (8001c68 <HAL_GPIO_Init+0x330>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d101      	bne.n	8001b42 <HAL_GPIO_Init+0x20a>
 8001b3e:	2307      	movs	r3, #7
 8001b40:	e00e      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b42:	2308      	movs	r3, #8
 8001b44:	e00c      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b46:	2306      	movs	r3, #6
 8001b48:	e00a      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x228>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	69fa      	ldr	r2, [r7, #28]
 8001b62:	f002 0203 	and.w	r2, r2, #3
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b70:	4935      	ldr	r1, [pc, #212]	@ (8001c48 <HAL_GPIO_Init+0x310>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b7e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba2:	4a32      	ldr	r2, [pc, #200]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba8:	4b30      	ldr	r3, [pc, #192]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bcc:	4a27      	ldr	r2, [pc, #156]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd2:	4b26      	ldr	r3, [pc, #152]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bf6:	4a1d      	ldr	r2, [pc, #116]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c20:	4a12      	ldr	r2, [pc, #72]	@ (8001c6c <HAL_GPIO_Init+0x334>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	2b0f      	cmp	r3, #15
 8001c30:	f67f ae90 	bls.w	8001954 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3724      	adds	r7, #36	@ 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40013800 	.word	0x40013800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40021800 	.word	0x40021800
 8001c68:	40021c00 	.word	0x40021c00
 8001c6c:	40013c00 	.word	0x40013c00

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	807b      	strh	r3, [r7, #2]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c80:	787b      	ldrb	r3, [r7, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c86:	887a      	ldrh	r2, [r7, #2]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c8c:	e003      	b.n	8001c96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	041a      	lsls	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	619a      	str	r2, [r3, #24]
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cb4:	887a      	ldrh	r2, [r7, #2]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	041a      	lsls	r2, r3, #16
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	400b      	ands	r3, r1
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	619a      	str	r2, [r3, #24]
}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d101      	bne.n	8001cea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e267      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d075      	beq.n	8001de2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001cf6:	4b88      	ldr	r3, [pc, #544]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	d00c      	beq.n	8001d1c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d02:	4b85      	ldr	r3, [pc, #532]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d112      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d0e:	4b82      	ldr	r3, [pc, #520]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d05b      	beq.n	8001de0 <HAL_RCC_OscConfig+0x108>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d157      	bne.n	8001de0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e242      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x74>
 8001d3e:	4b76      	ldr	r3, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a75      	ldr	r2, [pc, #468]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e01d      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d54:	d10c      	bne.n	8001d70 <HAL_RCC_OscConfig+0x98>
 8001d56:	4b70      	ldr	r3, [pc, #448]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b6d      	ldr	r3, [pc, #436]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6c      	ldr	r2, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e00b      	b.n	8001d88 <HAL_RCC_OscConfig+0xb0>
 8001d70:	4b69      	ldr	r3, [pc, #420]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a68      	ldr	r2, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7a:	6013      	str	r3, [r2, #0]
 8001d7c:	4b66      	ldr	r3, [pc, #408]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a65      	ldr	r2, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d013      	beq.n	8001db8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fce4 	bl	800175c <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d98:	f7ff fce0 	bl	800175c <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b64      	cmp	r3, #100	@ 0x64
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e207      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001daa:	4b5b      	ldr	r3, [pc, #364]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0xc0>
 8001db6:	e014      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db8:	f7ff fcd0 	bl	800175c <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc0:	f7ff fccc 	bl	800175c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b64      	cmp	r3, #100	@ 0x64
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e1f3      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe8>
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d063      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001dee:	4b4a      	ldr	r3, [pc, #296]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00b      	beq.n	8001e12 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfa:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d11c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e06:	4b44      	ldr	r3, [pc, #272]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d116      	bne.n	8001e40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e12:	4b41      	ldr	r3, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e1c7      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3e:	e03a      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d020      	beq.n	8001e8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e48:	4b34      	ldr	r3, [pc, #208]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fc85 	bl	800175c <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fc81 	bl	800175c <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1a8      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e68:	4b2b      	ldr	r3, [pc, #172]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d0f0      	beq.n	8001e56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e74:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	4925      	ldr	r1, [pc, #148]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	600b      	str	r3, [r1, #0]
 8001e88:	e015      	b.n	8001eb6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8a:	4b24      	ldr	r3, [pc, #144]	@ (8001f1c <HAL_RCC_OscConfig+0x244>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e90:	f7ff fc64 	bl	800175c <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e98:	f7ff fc60 	bl	800175c <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e187      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d1f0      	bne.n	8001e98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d036      	beq.n	8001f30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d016      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001ecc:	2201      	movs	r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff fc44 	bl	800175c <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed8:	f7ff fc40 	bl	800175c <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e167      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x240>)
 8001eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x200>
 8001ef6:	e01b      	b.n	8001f30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_OscConfig+0x248>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001efe:	f7ff fc2d 	bl	800175c <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f04:	e00e      	b.n	8001f24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f06:	f7ff fc29 	bl	800175c <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d907      	bls.n	8001f24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e150      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	42470000 	.word	0x42470000
 8001f20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	4b88      	ldr	r3, [pc, #544]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1ea      	bne.n	8001f06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8097 	beq.w	800206c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f42:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10f      	bne.n	8001f6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	4b7d      	ldr	r3, [pc, #500]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f56:	4a7c      	ldr	r2, [pc, #496]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5e:	4b7a      	ldr	r3, [pc, #488]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6e:	4b77      	ldr	r3, [pc, #476]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d118      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f7a:	4b74      	ldr	r3, [pc, #464]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a73      	ldr	r2, [pc, #460]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f86:	f7ff fbe9 	bl	800175c <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8e:	f7ff fbe5 	bl	800175c <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e10c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa0:	4b6a      	ldr	r3, [pc, #424]	@ (800214c <HAL_RCC_OscConfig+0x474>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2ea>
 8001fb4:	4b64      	ldr	r3, [pc, #400]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fb8:	4a63      	ldr	r2, [pc, #396]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fba:	f043 0301 	orr.w	r3, r3, #1
 8001fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fc0:	e01c      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b05      	cmp	r3, #5
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x30c>
 8001fca:	4b5f      	ldr	r3, [pc, #380]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fd6:	4b5c      	ldr	r3, [pc, #368]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a5b      	ldr	r2, [pc, #364]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0x324>
 8001fe4:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fe8:	4a57      	ldr	r2, [pc, #348]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001fea:	f023 0301 	bic.w	r3, r3, #1
 8001fee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff0:	4b55      	ldr	r3, [pc, #340]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff4:	4a54      	ldr	r2, [pc, #336]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8001ff6:	f023 0304 	bic.w	r3, r3, #4
 8001ffa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d015      	beq.n	8002030 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff fbaa 	bl	800175c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200a:	e00a      	b.n	8002022 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7ff fba6 	bl	800175c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e0cb      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0ee      	beq.n	800200c <HAL_RCC_OscConfig+0x334>
 800202e:	e014      	b.n	800205a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002030:	f7ff fb94 	bl	800175c <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002036:	e00a      	b.n	800204e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f7ff fb90 	bl	800175c <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e0b5      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	4b3e      	ldr	r3, [pc, #248]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1ee      	bne.n	8002038 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800205a:	7dfb      	ldrb	r3, [r7, #23]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002060:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002064:	4a38      	ldr	r2, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002066:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800206a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80a1 	beq.w	80021b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
 800207e:	2b08      	cmp	r3, #8
 8002080:	d05c      	beq.n	800213c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d141      	bne.n	800210e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208a:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002090:	f7ff fb64 	bl	800175c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7ff fb60 	bl	800175c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e087      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020aa:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69da      	ldr	r2, [r3, #28]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	085b      	lsrs	r3, r3, #1
 80020ce:	3b01      	subs	r3, #1
 80020d0:	041b      	lsls	r3, r3, #16
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	061b      	lsls	r3, r3, #24
 80020da:	491b      	ldr	r1, [pc, #108]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e6:	f7ff fb39 	bl	800175c <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ee:	f7ff fb35 	bl	800175c <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e05c      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002100:	4b11      	ldr	r3, [pc, #68]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x416>
 800210c:	e054      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210e:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <HAL_RCC_OscConfig+0x478>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7ff fb22 	bl	800175c <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7ff fb1e 	bl	800175c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e045      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212e:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x470>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x444>
 800213a:	e03d      	b.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d107      	bne.n	8002154 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e038      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
 8002148:	40023800 	.word	0x40023800
 800214c:	40007000 	.word	0x40007000
 8002150:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x4ec>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d028      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800216c:	429a      	cmp	r2, r3
 800216e:	d121      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11a      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002184:	4013      	ands	r3, r2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800218a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800218c:	4293      	cmp	r3, r2
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219a:	085b      	lsrs	r3, r3, #1
 800219c:	3b01      	subs	r3, #1
 800219e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d001      	beq.n	80021b8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e0cc      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021dc:	4b68      	ldr	r3, [pc, #416]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d90c      	bls.n	8002204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b65      	ldr	r3, [pc, #404]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b63      	ldr	r3, [pc, #396]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0b8      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800221c:	4b59      	ldr	r3, [pc, #356]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	4a58      	ldr	r2, [pc, #352]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0308 	and.w	r3, r3, #8
 8002230:	2b00      	cmp	r3, #0
 8002232:	d005      	beq.n	8002240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002234:	4b53      	ldr	r3, [pc, #332]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a52      	ldr	r2, [pc, #328]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800223e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002240:	4b50      	ldr	r3, [pc, #320]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	494d      	ldr	r1, [pc, #308]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800224e:	4313      	orrs	r3, r2
 8002250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d044      	beq.n	80022e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d107      	bne.n	8002276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d119      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e07f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d003      	beq.n	8002286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002282:	2b03      	cmp	r3, #3
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002286:	4b3f      	ldr	r3, [pc, #252]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d109      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e06f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002296:	4b3b      	ldr	r3, [pc, #236]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e067      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	4b37      	ldr	r3, [pc, #220]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f023 0203 	bic.w	r2, r3, #3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4934      	ldr	r1, [pc, #208]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022b8:	f7ff fa50 	bl	800175c <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022be:	e00a      	b.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c0:	f7ff fa4c 	bl	800175c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e04f      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022d6:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 020c 	and.w	r2, r3, #12
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d1eb      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022e8:	4b25      	ldr	r3, [pc, #148]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d20c      	bcs.n	8002310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f6:	4b22      	ldr	r3, [pc, #136]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <HAL_RCC_ClockConfig+0x1b8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d001      	beq.n	8002310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e032      	b.n	8002376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d008      	beq.n	800232e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800231c:	4b19      	ldr	r3, [pc, #100]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	4916      	ldr	r1, [pc, #88]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d009      	beq.n	800234e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233a:	4b12      	ldr	r3, [pc, #72]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	490e      	ldr	r1, [pc, #56]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800234e:	f000 f821 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8002352:	4602      	mov	r2, r0
 8002354:	4b0b      	ldr	r3, [pc, #44]	@ (8002384 <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	5ccb      	ldrb	r3, [r1, r3]
 8002362:	fa22 f303 	lsr.w	r3, r2, r3
 8002366:	4a09      	ldr	r2, [pc, #36]	@ (800238c <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800236a:	4b09      	ldr	r3, [pc, #36]	@ (8002390 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff f822 	bl	80013b8 <HAL_InitTick>

  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40023c00 	.word	0x40023c00
 8002384:	40023800 	.word	0x40023800
 8002388:	08008e84 	.word	0x08008e84
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002398:	b094      	sub	sp, #80	@ 0x50
 800239a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023ac:	4b79      	ldr	r3, [pc, #484]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d00d      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x40>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	f200 80e1 	bhi.w	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x34>
 80023c2:	2b04      	cmp	r3, #4
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x3a>
 80023c6:	e0db      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023c8:	4b73      	ldr	r3, [pc, #460]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023cc:	e0db      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ce:	4b73      	ldr	r3, [pc, #460]	@ (800259c <HAL_RCC_GetSysClockFreq+0x208>)
 80023d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023d2:	e0d8      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d4:	4b6f      	ldr	r3, [pc, #444]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023dc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023de:	4b6d      	ldr	r3, [pc, #436]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d063      	beq.n	80024b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ea:	4b6a      	ldr	r3, [pc, #424]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	099b      	lsrs	r3, r3, #6
 80023f0:	2200      	movs	r2, #0
 80023f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80023f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023fe:	2300      	movs	r3, #0
 8002400:	637b      	str	r3, [r7, #52]	@ 0x34
 8002402:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002406:	4622      	mov	r2, r4
 8002408:	462b      	mov	r3, r5
 800240a:	f04f 0000 	mov.w	r0, #0
 800240e:	f04f 0100 	mov.w	r1, #0
 8002412:	0159      	lsls	r1, r3, #5
 8002414:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002418:	0150      	lsls	r0, r2, #5
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4621      	mov	r1, r4
 8002420:	1a51      	subs	r1, r2, r1
 8002422:	6139      	str	r1, [r7, #16]
 8002424:	4629      	mov	r1, r5
 8002426:	eb63 0301 	sbc.w	r3, r3, r1
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	f04f 0200 	mov.w	r2, #0
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002438:	4659      	mov	r1, fp
 800243a:	018b      	lsls	r3, r1, #6
 800243c:	4651      	mov	r1, sl
 800243e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002442:	4651      	mov	r1, sl
 8002444:	018a      	lsls	r2, r1, #6
 8002446:	4651      	mov	r1, sl
 8002448:	ebb2 0801 	subs.w	r8, r2, r1
 800244c:	4659      	mov	r1, fp
 800244e:	eb63 0901 	sbc.w	r9, r3, r1
 8002452:	f04f 0200 	mov.w	r2, #0
 8002456:	f04f 0300 	mov.w	r3, #0
 800245a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800245e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002466:	4690      	mov	r8, r2
 8002468:	4699      	mov	r9, r3
 800246a:	4623      	mov	r3, r4
 800246c:	eb18 0303 	adds.w	r3, r8, r3
 8002470:	60bb      	str	r3, [r7, #8]
 8002472:	462b      	mov	r3, r5
 8002474:	eb49 0303 	adc.w	r3, r9, r3
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	f04f 0300 	mov.w	r3, #0
 8002482:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002486:	4629      	mov	r1, r5
 8002488:	024b      	lsls	r3, r1, #9
 800248a:	4621      	mov	r1, r4
 800248c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002490:	4621      	mov	r1, r4
 8002492:	024a      	lsls	r2, r1, #9
 8002494:	4610      	mov	r0, r2
 8002496:	4619      	mov	r1, r3
 8002498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800249a:	2200      	movs	r2, #0
 800249c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800249e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024a4:	f7fe fb80 	bl	8000ba8 <__aeabi_uldivmod>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4613      	mov	r3, r2
 80024ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024b0:	e058      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b2:	4b38      	ldr	r3, [pc, #224]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	099b      	lsrs	r3, r3, #6
 80024b8:	2200      	movs	r2, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	4611      	mov	r1, r2
 80024be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024c2:	623b      	str	r3, [r7, #32]
 80024c4:	2300      	movs	r3, #0
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024cc:	4642      	mov	r2, r8
 80024ce:	464b      	mov	r3, r9
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	0159      	lsls	r1, r3, #5
 80024da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024de:	0150      	lsls	r0, r2, #5
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4641      	mov	r1, r8
 80024e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80024ea:	4649      	mov	r1, r9
 80024ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80024fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002500:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002504:	ebb2 040a 	subs.w	r4, r2, sl
 8002508:	eb63 050b 	sbc.w	r5, r3, fp
 800250c:	f04f 0200 	mov.w	r2, #0
 8002510:	f04f 0300 	mov.w	r3, #0
 8002514:	00eb      	lsls	r3, r5, #3
 8002516:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800251a:	00e2      	lsls	r2, r4, #3
 800251c:	4614      	mov	r4, r2
 800251e:	461d      	mov	r5, r3
 8002520:	4643      	mov	r3, r8
 8002522:	18e3      	adds	r3, r4, r3
 8002524:	603b      	str	r3, [r7, #0]
 8002526:	464b      	mov	r3, r9
 8002528:	eb45 0303 	adc.w	r3, r5, r3
 800252c:	607b      	str	r3, [r7, #4]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	e9d7 4500 	ldrd	r4, r5, [r7]
 800253a:	4629      	mov	r1, r5
 800253c:	028b      	lsls	r3, r1, #10
 800253e:	4621      	mov	r1, r4
 8002540:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002544:	4621      	mov	r1, r4
 8002546:	028a      	lsls	r2, r1, #10
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800254e:	2200      	movs	r2, #0
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	61fa      	str	r2, [r7, #28]
 8002554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002558:	f7fe fb26 	bl	8000ba8 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_RCC_GetSysClockFreq+0x200>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	0c1b      	lsrs	r3, r3, #16
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	3301      	adds	r3, #1
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002574:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002576:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetSysClockFreq+0x204>)
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002588:	4618      	mov	r0, r3
 800258a:	3750      	adds	r7, #80	@ 0x50
 800258c:	46bd      	mov	sp, r7
 800258e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002592:	bf00      	nop
 8002594:	40023800 	.word	0x40023800
 8002598:	00f42400 	.word	0x00f42400
 800259c:	007a1200 	.word	0x007a1200

080025a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025a4:	4b03      	ldr	r3, [pc, #12]	@ (80025b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025a6:	681b      	ldr	r3, [r3, #0]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	20000000 	.word	0x20000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025bc:	f7ff fff0 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b05      	ldr	r3, [pc, #20]	@ (80025d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	0a9b      	lsrs	r3, r3, #10
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4903      	ldr	r1, [pc, #12]	@ (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800
 80025dc:	08008e94 	.word	0x08008e94

080025e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e4:	f7ff ffdc 	bl	80025a0 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0b5b      	lsrs	r3, r3, #13
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40023800 	.word	0x40023800
 8002604:	08008e94 	.word	0x08008e94

08002608 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	220f      	movs	r2, #15
 8002616:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002618:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCC_GetClockConfig+0x5c>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0203 	and.w	r2, r3, #3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002624:	4b0f      	ldr	r3, [pc, #60]	@ (8002664 <HAL_RCC_GetClockConfig+0x5c>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002630:	4b0c      	ldr	r3, [pc, #48]	@ (8002664 <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800263c:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	08db      	lsrs	r3, r3, #3
 8002642:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <HAL_RCC_GetClockConfig+0x60>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0207 	and.w	r2, r3, #7
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	601a      	str	r2, [r3, #0]
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800
 8002668:	40023c00 	.word	0x40023c00

0800266c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e041      	b.n	8002702 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f839 	bl	800270a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f000 f9c0 	bl	8002a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2201      	movs	r2, #1
 80026cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2201      	movs	r2, #1
 80026d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2201      	movs	r2, #1
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b01      	cmp	r3, #1
 8002732:	d001      	beq.n	8002738 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e04e      	b.n	80027d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2202      	movs	r2, #2
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f042 0201 	orr.w	r2, r2, #1
 800274e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a23      	ldr	r2, [pc, #140]	@ (80027e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d022      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002762:	d01d      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a1f      	ldr	r2, [pc, #124]	@ (80027e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d018      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a1e      	ldr	r2, [pc, #120]	@ (80027ec <HAL_TIM_Base_Start_IT+0xcc>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d013      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a1c      	ldr	r2, [pc, #112]	@ (80027f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d00e      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a1b      	ldr	r2, [pc, #108]	@ (80027f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d009      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a19      	ldr	r2, [pc, #100]	@ (80027f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d004      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x80>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a18      	ldr	r2, [pc, #96]	@ (80027fc <HAL_TIM_Base_Start_IT+0xdc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d111      	bne.n	80027c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d010      	beq.n	80027d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f042 0201 	orr.w	r2, r2, #1
 80027c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c2:	e007      	b.n	80027d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0201 	orr.w	r2, r2, #1
 80027d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40010000 	.word	0x40010000
 80027e8:	40000400 	.word	0x40000400
 80027ec:	40000800 	.word	0x40000800
 80027f0:	40000c00 	.word	0x40000c00
 80027f4:	40010400 	.word	0x40010400
 80027f8:	40014000 	.word	0x40014000
 80027fc:	40001800 	.word	0x40001800

08002800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b084      	sub	sp, #16
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d020      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d01b      	beq.n	8002864 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0202 	mvn.w	r2, #2
 8002834:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0303 	and.w	r3, r3, #3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f8d2 	bl	80029f4 <HAL_TIM_IC_CaptureCallback>
 8002850:	e005      	b.n	800285e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f8c4 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f8d5 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	2b00      	cmp	r3, #0
 800286c:	d020      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d01b      	beq.n	80028b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0204 	mvn.w	r2, #4
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2202      	movs	r2, #2
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8ac 	bl	80029f4 <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f89e 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8af 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f003 0308 	and.w	r3, r3, #8
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d020      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0308 	and.w	r3, r3, #8
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d01b      	beq.n	80028fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f06f 0208 	mvn.w	r2, #8
 80028cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2204      	movs	r2, #4
 80028d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	69db      	ldr	r3, [r3, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d003      	beq.n	80028ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f886 	bl	80029f4 <HAL_TIM_IC_CaptureCallback>
 80028e8:	e005      	b.n	80028f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f878 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f000 f889 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d020      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f06f 0210 	mvn.w	r2, #16
 8002918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2208      	movs	r2, #8
 800291e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800292a:	2b00      	cmp	r3, #0
 800292c:	d003      	beq.n	8002936 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f860 	bl	80029f4 <HAL_TIM_IC_CaptureCallback>
 8002934:	e005      	b.n	8002942 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f852 	bl	80029e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 f863 	bl	8002a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0301 	and.w	r3, r3, #1
 800294e:	2b00      	cmp	r3, #0
 8002950:	d00c      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b00      	cmp	r3, #0
 800295a:	d007      	beq.n	800296c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f06f 0201 	mvn.w	r2, #1
 8002964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7fe fc9a 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00c      	beq.n	8002990 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f900 	bl	8002b90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00c      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d007      	beq.n	80029b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f834 	bl	8002a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00c      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d007      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f06f 0220 	mvn.w	r2, #32
 80029d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f8d2 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a43      	ldr	r2, [pc, #268]	@ (8002b50 <TIM_Base_SetConfig+0x120>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d013      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d00f      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <TIM_Base_SetConfig+0x124>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00b      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <TIM_Base_SetConfig+0x128>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d007      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <TIM_Base_SetConfig+0x12c>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d003      	beq.n	8002a70 <TIM_Base_SetConfig+0x40>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <TIM_Base_SetConfig+0x130>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d108      	bne.n	8002a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <TIM_Base_SetConfig+0x120>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d02b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a90:	d027      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a2f      	ldr	r2, [pc, #188]	@ (8002b54 <TIM_Base_SetConfig+0x124>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d023      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8002b58 <TIM_Base_SetConfig+0x128>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d01f      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <TIM_Base_SetConfig+0x12c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d01b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2c      	ldr	r2, [pc, #176]	@ (8002b60 <TIM_Base_SetConfig+0x130>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d017      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8002b64 <TIM_Base_SetConfig+0x134>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d013      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	@ (8002b68 <TIM_Base_SetConfig+0x138>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00f      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a29      	ldr	r2, [pc, #164]	@ (8002b6c <TIM_Base_SetConfig+0x13c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00b      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a28      	ldr	r2, [pc, #160]	@ (8002b70 <TIM_Base_SetConfig+0x140>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d007      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a27      	ldr	r2, [pc, #156]	@ (8002b74 <TIM_Base_SetConfig+0x144>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d003      	beq.n	8002ae2 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a26      	ldr	r2, [pc, #152]	@ (8002b78 <TIM_Base_SetConfig+0x148>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d108      	bne.n	8002af4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ae8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a0e      	ldr	r2, [pc, #56]	@ (8002b50 <TIM_Base_SetConfig+0x120>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0xf2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a10      	ldr	r2, [pc, #64]	@ (8002b60 <TIM_Base_SetConfig+0x130>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d103      	bne.n	8002b2a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40014400 	.word	0x40014400
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	40001800 	.word	0x40001800
 8002b74:	40001c00 	.word	0x40001c00
 8002b78:	40002000 	.word	0x40002000

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e042      	b.n	8002c3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fe fbac 	bl	8001328 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	@ 0x24
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68da      	ldr	r2, [r3, #12]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002be6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f973 	bl	8002ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691a      	ldr	r2, [r3, #16]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	695a      	ldr	r2, [r3, #20]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2220      	movs	r2, #32
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2220      	movs	r2, #32
 8002c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	@ 0x28
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	4613      	mov	r3, r2
 8002c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	2b20      	cmp	r3, #32
 8002c62:	d175      	bne.n	8002d50 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d002      	beq.n	8002c70 <HAL_UART_Transmit+0x2c>
 8002c6a:	88fb      	ldrh	r3, [r7, #6]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e06e      	b.n	8002d52 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2221      	movs	r2, #33	@ 0x21
 8002c7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c82:	f7fe fd6b 	bl	800175c <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	88fa      	ldrh	r2, [r7, #6]
 8002c8c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c9c:	d108      	bne.n	8002cb0 <HAL_UART_Transmit+0x6c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	e003      	b.n	8002cb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cb8:	e02e      	b.n	8002d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	2180      	movs	r1, #128	@ 0x80
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f848 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e03a      	b.n	8002d52 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d10b      	bne.n	8002cfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	881b      	ldrh	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	61bb      	str	r3, [r7, #24]
 8002cf8:	e007      	b.n	8002d0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	3301      	adds	r3, #1
 8002d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1cb      	bne.n	8002cba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2140      	movs	r1, #64	@ 0x40
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f000 f814 	bl	8002d5a <UART_WaitOnFlagUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e006      	b.n	8002d52 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e000      	b.n	8002d52 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d50:	2302      	movs	r3, #2
  }
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3720      	adds	r7, #32
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b086      	sub	sp, #24
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	60f8      	str	r0, [r7, #12]
 8002d62:	60b9      	str	r1, [r7, #8]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	4613      	mov	r3, r2
 8002d68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d6a:	e03b      	b.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d037      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d74:	f7fe fcf2 	bl	800175c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	6a3a      	ldr	r2, [r7, #32]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d302      	bcc.n	8002d8a <UART_WaitOnFlagUntilTimeout+0x30>
 8002d84:	6a3b      	ldr	r3, [r7, #32]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e03a      	b.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d023      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	d020      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	2b40      	cmp	r3, #64	@ 0x40
 8002da6:	d01d      	beq.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0308 	and.w	r3, r3, #8
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d116      	bne.n	8002de4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002db6:	2300      	movs	r3, #0
 8002db8:	617b      	str	r3, [r7, #20]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f81d 	bl	8002e0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2208      	movs	r2, #8
 8002dd6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e00f      	b.n	8002e04 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d0b4      	beq.n	8002d6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b095      	sub	sp, #84	@ 0x54
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1e:	e853 3f00 	ldrex	r3, [r3]
 8002e22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	330c      	adds	r3, #12
 8002e32:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e34:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e3c:	e841 2300 	strex	r3, r2, [r1]
 8002e40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d1e5      	bne.n	8002e14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3314      	adds	r3, #20
 8002e4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	e853 3f00 	ldrex	r3, [r3]
 8002e56:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f023 0301 	bic.w	r3, r3, #1
 8002e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3314      	adds	r3, #20
 8002e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e6c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e70:	e841 2300 	strex	r3, r2, [r1]
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1e5      	bne.n	8002e48 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d119      	bne.n	8002eb8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f023 0310 	bic.w	r3, r3, #16
 8002e9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	330c      	adds	r3, #12
 8002ea2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ea4:	61ba      	str	r2, [r7, #24]
 8002ea6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6979      	ldr	r1, [r7, #20]
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2220      	movs	r2, #32
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002ec6:	bf00      	nop
 8002ec8:	3754      	adds	r7, #84	@ 0x54
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
	...

08002ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed8:	b0c0      	sub	sp, #256	@ 0x100
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef0:	68d9      	ldr	r1, [r3, #12]
 8002ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	ea40 0301 	orr.w	r3, r0, r1
 8002efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f02:	689a      	ldr	r2, [r3, #8]
 8002f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f2c:	f021 010c 	bic.w	r1, r1, #12
 8002f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f3a:	430b      	orrs	r3, r1
 8002f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4e:	6999      	ldr	r1, [r3, #24]
 8002f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	ea40 0301 	orr.w	r3, r0, r1
 8002f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4b8f      	ldr	r3, [pc, #572]	@ (80031a0 <UART_SetConfig+0x2cc>)
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d005      	beq.n	8002f74 <UART_SetConfig+0xa0>
 8002f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80031a4 <UART_SetConfig+0x2d0>)
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d104      	bne.n	8002f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f74:	f7ff fb34 	bl	80025e0 <HAL_RCC_GetPCLK2Freq>
 8002f78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002f7c:	e003      	b.n	8002f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f7e:	f7ff fb1b 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8002f82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8a:	69db      	ldr	r3, [r3, #28]
 8002f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f90:	f040 810c 	bne.w	80031ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fa6:	4622      	mov	r2, r4
 8002fa8:	462b      	mov	r3, r5
 8002faa:	1891      	adds	r1, r2, r2
 8002fac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fae:	415b      	adcs	r3, r3
 8002fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fb6:	4621      	mov	r1, r4
 8002fb8:	eb12 0801 	adds.w	r8, r2, r1
 8002fbc:	4629      	mov	r1, r5
 8002fbe:	eb43 0901 	adc.w	r9, r3, r1
 8002fc2:	f04f 0200 	mov.w	r2, #0
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002fd6:	4690      	mov	r8, r2
 8002fd8:	4699      	mov	r9, r3
 8002fda:	4623      	mov	r3, r4
 8002fdc:	eb18 0303 	adds.w	r3, r8, r3
 8002fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002fe4:	462b      	mov	r3, r5
 8002fe6:	eb49 0303 	adc.w	r3, r9, r3
 8002fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003002:	460b      	mov	r3, r1
 8003004:	18db      	adds	r3, r3, r3
 8003006:	653b      	str	r3, [r7, #80]	@ 0x50
 8003008:	4613      	mov	r3, r2
 800300a:	eb42 0303 	adc.w	r3, r2, r3
 800300e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003018:	f7fd fdc6 	bl	8000ba8 <__aeabi_uldivmod>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4b61      	ldr	r3, [pc, #388]	@ (80031a8 <UART_SetConfig+0x2d4>)
 8003022:	fba3 2302 	umull	r2, r3, r3, r2
 8003026:	095b      	lsrs	r3, r3, #5
 8003028:	011c      	lsls	r4, r3, #4
 800302a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800302e:	2200      	movs	r2, #0
 8003030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003034:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800303c:	4642      	mov	r2, r8
 800303e:	464b      	mov	r3, r9
 8003040:	1891      	adds	r1, r2, r2
 8003042:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003044:	415b      	adcs	r3, r3
 8003046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800304c:	4641      	mov	r1, r8
 800304e:	eb12 0a01 	adds.w	sl, r2, r1
 8003052:	4649      	mov	r1, r9
 8003054:	eb43 0b01 	adc.w	fp, r3, r1
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	f04f 0300 	mov.w	r3, #0
 8003060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800306c:	4692      	mov	sl, r2
 800306e:	469b      	mov	fp, r3
 8003070:	4643      	mov	r3, r8
 8003072:	eb1a 0303 	adds.w	r3, sl, r3
 8003076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800307a:	464b      	mov	r3, r9
 800307c:	eb4b 0303 	adc.w	r3, fp, r3
 8003080:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003090:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003098:	460b      	mov	r3, r1
 800309a:	18db      	adds	r3, r3, r3
 800309c:	643b      	str	r3, [r7, #64]	@ 0x40
 800309e:	4613      	mov	r3, r2
 80030a0:	eb42 0303 	adc.w	r3, r2, r3
 80030a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80030a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030ae:	f7fd fd7b 	bl	8000ba8 <__aeabi_uldivmod>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	4b3b      	ldr	r3, [pc, #236]	@ (80031a8 <UART_SetConfig+0x2d4>)
 80030ba:	fba3 2301 	umull	r2, r3, r3, r1
 80030be:	095b      	lsrs	r3, r3, #5
 80030c0:	2264      	movs	r2, #100	@ 0x64
 80030c2:	fb02 f303 	mul.w	r3, r2, r3
 80030c6:	1acb      	subs	r3, r1, r3
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80030ce:	4b36      	ldr	r3, [pc, #216]	@ (80031a8 <UART_SetConfig+0x2d4>)
 80030d0:	fba3 2302 	umull	r2, r3, r3, r2
 80030d4:	095b      	lsrs	r3, r3, #5
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80030dc:	441c      	add	r4, r3
 80030de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030e2:	2200      	movs	r2, #0
 80030e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80030ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80030f0:	4642      	mov	r2, r8
 80030f2:	464b      	mov	r3, r9
 80030f4:	1891      	adds	r1, r2, r2
 80030f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80030f8:	415b      	adcs	r3, r3
 80030fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80030fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003100:	4641      	mov	r1, r8
 8003102:	1851      	adds	r1, r2, r1
 8003104:	6339      	str	r1, [r7, #48]	@ 0x30
 8003106:	4649      	mov	r1, r9
 8003108:	414b      	adcs	r3, r1
 800310a:	637b      	str	r3, [r7, #52]	@ 0x34
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003118:	4659      	mov	r1, fp
 800311a:	00cb      	lsls	r3, r1, #3
 800311c:	4651      	mov	r1, sl
 800311e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003122:	4651      	mov	r1, sl
 8003124:	00ca      	lsls	r2, r1, #3
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	4603      	mov	r3, r0
 800312c:	4642      	mov	r2, r8
 800312e:	189b      	adds	r3, r3, r2
 8003130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003134:	464b      	mov	r3, r9
 8003136:	460a      	mov	r2, r1
 8003138:	eb42 0303 	adc.w	r3, r2, r3
 800313c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800314c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003154:	460b      	mov	r3, r1
 8003156:	18db      	adds	r3, r3, r3
 8003158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800315a:	4613      	mov	r3, r2
 800315c:	eb42 0303 	adc.w	r3, r2, r3
 8003160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800316a:	f7fd fd1d 	bl	8000ba8 <__aeabi_uldivmod>
 800316e:	4602      	mov	r2, r0
 8003170:	460b      	mov	r3, r1
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <UART_SetConfig+0x2d4>)
 8003174:	fba3 1302 	umull	r1, r3, r3, r2
 8003178:	095b      	lsrs	r3, r3, #5
 800317a:	2164      	movs	r1, #100	@ 0x64
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	3332      	adds	r3, #50	@ 0x32
 8003186:	4a08      	ldr	r2, [pc, #32]	@ (80031a8 <UART_SetConfig+0x2d4>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	f003 0207 	and.w	r2, r3, #7
 8003192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4422      	add	r2, r4
 800319a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800319c:	e106      	b.n	80033ac <UART_SetConfig+0x4d8>
 800319e:	bf00      	nop
 80031a0:	40011000 	.word	0x40011000
 80031a4:	40011400 	.word	0x40011400
 80031a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031b0:	2200      	movs	r2, #0
 80031b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031be:	4642      	mov	r2, r8
 80031c0:	464b      	mov	r3, r9
 80031c2:	1891      	adds	r1, r2, r2
 80031c4:	6239      	str	r1, [r7, #32]
 80031c6:	415b      	adcs	r3, r3
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80031ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031ce:	4641      	mov	r1, r8
 80031d0:	1854      	adds	r4, r2, r1
 80031d2:	4649      	mov	r1, r9
 80031d4:	eb43 0501 	adc.w	r5, r3, r1
 80031d8:	f04f 0200 	mov.w	r2, #0
 80031dc:	f04f 0300 	mov.w	r3, #0
 80031e0:	00eb      	lsls	r3, r5, #3
 80031e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031e6:	00e2      	lsls	r2, r4, #3
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4643      	mov	r3, r8
 80031ee:	18e3      	adds	r3, r4, r3
 80031f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80031f4:	464b      	mov	r3, r9
 80031f6:	eb45 0303 	adc.w	r3, r5, r3
 80031fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80031fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800320a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800321a:	4629      	mov	r1, r5
 800321c:	008b      	lsls	r3, r1, #2
 800321e:	4621      	mov	r1, r4
 8003220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003224:	4621      	mov	r1, r4
 8003226:	008a      	lsls	r2, r1, #2
 8003228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800322c:	f7fd fcbc 	bl	8000ba8 <__aeabi_uldivmod>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4b60      	ldr	r3, [pc, #384]	@ (80033b8 <UART_SetConfig+0x4e4>)
 8003236:	fba3 2302 	umull	r2, r3, r3, r2
 800323a:	095b      	lsrs	r3, r3, #5
 800323c:	011c      	lsls	r4, r3, #4
 800323e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800324c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003250:	4642      	mov	r2, r8
 8003252:	464b      	mov	r3, r9
 8003254:	1891      	adds	r1, r2, r2
 8003256:	61b9      	str	r1, [r7, #24]
 8003258:	415b      	adcs	r3, r3
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003260:	4641      	mov	r1, r8
 8003262:	1851      	adds	r1, r2, r1
 8003264:	6139      	str	r1, [r7, #16]
 8003266:	4649      	mov	r1, r9
 8003268:	414b      	adcs	r3, r1
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003278:	4659      	mov	r1, fp
 800327a:	00cb      	lsls	r3, r1, #3
 800327c:	4651      	mov	r1, sl
 800327e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003282:	4651      	mov	r1, sl
 8003284:	00ca      	lsls	r2, r1, #3
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	4603      	mov	r3, r0
 800328c:	4642      	mov	r2, r8
 800328e:	189b      	adds	r3, r3, r2
 8003290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003294:	464b      	mov	r3, r9
 8003296:	460a      	mov	r2, r1
 8003298:	eb42 0303 	adc.w	r3, r2, r3
 800329c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032b8:	4649      	mov	r1, r9
 80032ba:	008b      	lsls	r3, r1, #2
 80032bc:	4641      	mov	r1, r8
 80032be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032c2:	4641      	mov	r1, r8
 80032c4:	008a      	lsls	r2, r1, #2
 80032c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032ca:	f7fd fc6d 	bl	8000ba8 <__aeabi_uldivmod>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4611      	mov	r1, r2
 80032d4:	4b38      	ldr	r3, [pc, #224]	@ (80033b8 <UART_SetConfig+0x4e4>)
 80032d6:	fba3 2301 	umull	r2, r3, r3, r1
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2264      	movs	r2, #100	@ 0x64
 80032de:	fb02 f303 	mul.w	r3, r2, r3
 80032e2:	1acb      	subs	r3, r1, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	@ 0x32
 80032e8:	4a33      	ldr	r2, [pc, #204]	@ (80033b8 <UART_SetConfig+0x4e4>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80032f4:	441c      	add	r4, r3
 80032f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032fa:	2200      	movs	r2, #0
 80032fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80032fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8003300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	1891      	adds	r1, r2, r2
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	415b      	adcs	r3, r3
 800330e:	60fb      	str	r3, [r7, #12]
 8003310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003314:	4641      	mov	r1, r8
 8003316:	1851      	adds	r1, r2, r1
 8003318:	6039      	str	r1, [r7, #0]
 800331a:	4649      	mov	r1, r9
 800331c:	414b      	adcs	r3, r1
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	f04f 0200 	mov.w	r2, #0
 8003324:	f04f 0300 	mov.w	r3, #0
 8003328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800332c:	4659      	mov	r1, fp
 800332e:	00cb      	lsls	r3, r1, #3
 8003330:	4651      	mov	r1, sl
 8003332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003336:	4651      	mov	r1, sl
 8003338:	00ca      	lsls	r2, r1, #3
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	4603      	mov	r3, r0
 8003340:	4642      	mov	r2, r8
 8003342:	189b      	adds	r3, r3, r2
 8003344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003346:	464b      	mov	r3, r9
 8003348:	460a      	mov	r2, r1
 800334a:	eb42 0303 	adc.w	r3, r2, r3
 800334e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	663b      	str	r3, [r7, #96]	@ 0x60
 800335a:	667a      	str	r2, [r7, #100]	@ 0x64
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003368:	4649      	mov	r1, r9
 800336a:	008b      	lsls	r3, r1, #2
 800336c:	4641      	mov	r1, r8
 800336e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003372:	4641      	mov	r1, r8
 8003374:	008a      	lsls	r2, r1, #2
 8003376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800337a:	f7fd fc15 	bl	8000ba8 <__aeabi_uldivmod>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <UART_SetConfig+0x4e4>)
 8003384:	fba3 1302 	umull	r1, r3, r3, r2
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	2164      	movs	r1, #100	@ 0x64
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	3332      	adds	r3, #50	@ 0x32
 8003396:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <UART_SetConfig+0x4e4>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	095b      	lsrs	r3, r3, #5
 800339e:	f003 020f 	and.w	r2, r3, #15
 80033a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4422      	add	r2, r4
 80033aa:	609a      	str	r2, [r3, #8]
}
 80033ac:	bf00      	nop
 80033ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033b2:	46bd      	mov	sp, r7
 80033b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033b8:	51eb851f 	.word	0x51eb851f

080033bc <__NVIC_SetPriority>:
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	db0a      	blt.n	80033e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	b2da      	uxtb	r2, r3
 80033d4:	490c      	ldr	r1, [pc, #48]	@ (8003408 <__NVIC_SetPriority+0x4c>)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	0112      	lsls	r2, r2, #4
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	440b      	add	r3, r1
 80033e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80033e4:	e00a      	b.n	80033fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	4908      	ldr	r1, [pc, #32]	@ (800340c <__NVIC_SetPriority+0x50>)
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	f003 030f 	and.w	r3, r3, #15
 80033f2:	3b04      	subs	r3, #4
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	b2d2      	uxtb	r2, r2
 80033f8:	440b      	add	r3, r1
 80033fa:	761a      	strb	r2, [r3, #24]
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000e100 	.word	0xe000e100
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <SysTick_Handler+0x1c>)
 8003416:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003418:	f001 fd46 	bl	8004ea8 <xTaskGetSchedulerState>
 800341c:	4603      	mov	r3, r0
 800341e:	2b01      	cmp	r3, #1
 8003420:	d001      	beq.n	8003426 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003422:	f002 fb41 	bl	8005aa8 <xPortSysTickHandler>
  }
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	e000e010 	.word	0xe000e010

08003430 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003434:	2100      	movs	r1, #0
 8003436:	f06f 0004 	mvn.w	r0, #4
 800343a:	f7ff ffbf 	bl	80033bc <__NVIC_SetPriority>
#endif
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800344a:	f3ef 8305 	mrs	r3, IPSR
 800344e:	603b      	str	r3, [r7, #0]
  return(result);
 8003450:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003456:	f06f 0305 	mvn.w	r3, #5
 800345a:	607b      	str	r3, [r7, #4]
 800345c:	e00c      	b.n	8003478 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800345e:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <osKernelInitialize+0x44>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d105      	bne.n	8003472 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003466:	4b08      	ldr	r3, [pc, #32]	@ (8003488 <osKernelInitialize+0x44>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800346c:	2300      	movs	r3, #0
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	e002      	b.n	8003478 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003472:	f04f 33ff 	mov.w	r3, #4294967295
 8003476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003478:	687b      	ldr	r3, [r7, #4]
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000318 	.word	0x20000318

0800348c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003492:	f3ef 8305 	mrs	r3, IPSR
 8003496:	603b      	str	r3, [r7, #0]
  return(result);
 8003498:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800349e:	f06f 0305 	mvn.w	r3, #5
 80034a2:	607b      	str	r3, [r7, #4]
 80034a4:	e010      	b.n	80034c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034a6:	4b0b      	ldr	r3, [pc, #44]	@ (80034d4 <osKernelStart+0x48>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d109      	bne.n	80034c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034ae:	f7ff ffbf 	bl	8003430 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034b2:	4b08      	ldr	r3, [pc, #32]	@ (80034d4 <osKernelStart+0x48>)
 80034b4:	2202      	movs	r2, #2
 80034b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034b8:	f001 f892 	bl	80045e0 <vTaskStartScheduler>
      stat = osOK;
 80034bc:	2300      	movs	r3, #0
 80034be:	607b      	str	r3, [r7, #4]
 80034c0:	e002      	b.n	80034c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034c2:	f04f 33ff 	mov.w	r3, #4294967295
 80034c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034c8:	687b      	ldr	r3, [r7, #4]
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000318 	.word	0x20000318

080034d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b08e      	sub	sp, #56	@ 0x38
 80034dc:	af04      	add	r7, sp, #16
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034e8:	f3ef 8305 	mrs	r3, IPSR
 80034ec:	617b      	str	r3, [r7, #20]
  return(result);
 80034ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d17e      	bne.n	80035f2 <osThreadNew+0x11a>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d07b      	beq.n	80035f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80034fa:	2380      	movs	r3, #128	@ 0x80
 80034fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80034fe:	2318      	movs	r3, #24
 8003500:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003506:	f04f 33ff 	mov.w	r3, #4294967295
 800350a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d045      	beq.n	800359e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <osThreadNew+0x48>
        name = attr->name;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <osThreadNew+0x6e>
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b38      	cmp	r3, #56	@ 0x38
 8003538:	d805      	bhi.n	8003546 <osThreadNew+0x6e>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <osThreadNew+0x72>
        return (NULL);
 8003546:	2300      	movs	r3, #0
 8003548:	e054      	b.n	80035f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	089b      	lsrs	r3, r3, #2
 8003558:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00e      	beq.n	8003580 <osThreadNew+0xa8>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	2ba7      	cmp	r3, #167	@ 0xa7
 8003568:	d90a      	bls.n	8003580 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800356e:	2b00      	cmp	r3, #0
 8003570:	d006      	beq.n	8003580 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d002      	beq.n	8003580 <osThreadNew+0xa8>
        mem = 1;
 800357a:	2301      	movs	r3, #1
 800357c:	61bb      	str	r3, [r7, #24]
 800357e:	e010      	b.n	80035a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10c      	bne.n	80035a2 <osThreadNew+0xca>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d108      	bne.n	80035a2 <osThreadNew+0xca>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d104      	bne.n	80035a2 <osThreadNew+0xca>
          mem = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	61bb      	str	r3, [r7, #24]
 800359c:	e001      	b.n	80035a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035a2:	69bb      	ldr	r3, [r7, #24]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d110      	bne.n	80035ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035b0:	9202      	str	r2, [sp, #8]
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	6a3a      	ldr	r2, [r7, #32]
 80035bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 fe1a 	bl	80041f8 <xTaskCreateStatic>
 80035c4:	4603      	mov	r3, r0
 80035c6:	613b      	str	r3, [r7, #16]
 80035c8:	e013      	b.n	80035f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d110      	bne.n	80035f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035d0:	6a3b      	ldr	r3, [r7, #32]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	f107 0310 	add.w	r3, r7, #16
 80035d8:	9301      	str	r3, [sp, #4]
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	f000 fe68 	bl	80042b8 <xTaskCreate>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d001      	beq.n	80035f2 <osThreadNew+0x11a>
            hTask = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80035f2:	693b      	ldr	r3, [r7, #16]
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3728      	adds	r7, #40	@ 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003604:	f3ef 8305 	mrs	r3, IPSR
 8003608:	60bb      	str	r3, [r7, #8]
  return(result);
 800360a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <osDelay+0x1c>
    stat = osErrorISR;
 8003610:	f06f 0305 	mvn.w	r3, #5
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e007      	b.n	8003628 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 ffa6 	bl	8004574 <vTaskDelay>
    }
  }

  return (stat);
 8003628:	68fb      	ldr	r3, [r7, #12]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	4a07      	ldr	r2, [pc, #28]	@ (8003660 <vApplicationGetIdleTaskMemory+0x2c>)
 8003644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	4a06      	ldr	r2, [pc, #24]	@ (8003664 <vApplicationGetIdleTaskMemory+0x30>)
 800364a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2280      	movs	r2, #128	@ 0x80
 8003650:	601a      	str	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	2000031c 	.word	0x2000031c
 8003664:	200003c4 	.word	0x200003c4

08003668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a07      	ldr	r2, [pc, #28]	@ (8003694 <vApplicationGetTimerTaskMemory+0x2c>)
 8003678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4a06      	ldr	r2, [pc, #24]	@ (8003698 <vApplicationGetTimerTaskMemory+0x30>)
 800367e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003686:	601a      	str	r2, [r3, #0]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	200005c4 	.word	0x200005c4
 8003698:	2000066c 	.word	0x2000066c

0800369c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f103 0208 	add.w	r2, r3, #8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f04f 32ff 	mov.w	r2, #4294967295
 80036b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f103 0208 	add.w	r2, r3, #8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f103 0208 	add.w	r2, r3, #8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr

080036f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036f6:	b480      	push	{r7}
 80036f8:	b085      	sub	sp, #20
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	6078      	str	r0, [r7, #4]
 80036fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	1c5a      	adds	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	601a      	str	r2, [r3, #0]
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr

0800373e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800373e:	b480      	push	{r7}
 8003740:	b085      	sub	sp, #20
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
 8003746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d103      	bne.n	800375e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	60fb      	str	r3, [r7, #12]
 800375c:	e00c      	b.n	8003778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3308      	adds	r3, #8
 8003762:	60fb      	str	r3, [r7, #12]
 8003764:	e002      	b.n	800376c <vListInsert+0x2e>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	429a      	cmp	r2, r3
 8003776:	d2f6      	bcs.n	8003766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	685a      	ldr	r2, [r3, #4]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	601a      	str	r2, [r3, #0]
}
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6892      	ldr	r2, [r2, #8]
 80037c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6852      	ldr	r2, [r2, #4]
 80037d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d103      	bne.n	80037e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	1e5a      	subs	r2, r3, #1
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3714      	adds	r7, #20
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr

08003804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10b      	bne.n	8003830 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800382a:	bf00      	nop
 800382c:	bf00      	nop
 800382e:	e7fd      	b.n	800382c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003830:	f002 f8aa 	bl	8005988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	68f9      	ldr	r1, [r7, #12]
 800383e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	441a      	add	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003860:	3b01      	subs	r3, #1
 8003862:	68f9      	ldr	r1, [r7, #12]
 8003864:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003866:	fb01 f303 	mul.w	r3, r1, r3
 800386a:	441a      	add	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	22ff      	movs	r2, #255	@ 0xff
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	22ff      	movs	r2, #255	@ 0xff
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d114      	bne.n	80038b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01a      	beq.n	80038c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	3310      	adds	r3, #16
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f942 	bl	8004b1c <xTaskRemoveFromEventList>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d012      	beq.n	80038c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800389e:	4b0d      	ldr	r3, [pc, #52]	@ (80038d4 <xQueueGenericReset+0xd0>)
 80038a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	e009      	b.n	80038c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	3310      	adds	r3, #16
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff fef1 	bl	800369c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3324      	adds	r3, #36	@ 0x24
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff feec 	bl	800369c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80038c4:	f002 f892 	bl	80059ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80038c8:	2301      	movs	r3, #1
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	e000ed04 	.word	0xe000ed04

080038d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08e      	sub	sp, #56	@ 0x38
 80038dc:	af02      	add	r7, sp, #8
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
 80038e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10b      	bne.n	8003922 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800391c:	bf00      	nop
 800391e:	bf00      	nop
 8003920:	e7fd      	b.n	800391e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <xQueueGenericCreateStatic+0x56>
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <xQueueGenericCreateStatic+0x5a>
 800392e:	2301      	movs	r3, #1
 8003930:	e000      	b.n	8003934 <xQueueGenericCreateStatic+0x5c>
 8003932:	2300      	movs	r3, #0
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10b      	bne.n	8003950 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	623b      	str	r3, [r7, #32]
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d102      	bne.n	800395c <xQueueGenericCreateStatic+0x84>
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <xQueueGenericCreateStatic+0x88>
 800395c:	2301      	movs	r3, #1
 800395e:	e000      	b.n	8003962 <xQueueGenericCreateStatic+0x8a>
 8003960:	2300      	movs	r3, #0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10b      	bne.n	800397e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800396a:	f383 8811 	msr	BASEPRI, r3
 800396e:	f3bf 8f6f 	isb	sy
 8003972:	f3bf 8f4f 	dsb	sy
 8003976:	61fb      	str	r3, [r7, #28]
}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	e7fd      	b.n	800397a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800397e:	2350      	movs	r3, #80	@ 0x50
 8003980:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	2b50      	cmp	r3, #80	@ 0x50
 8003986:	d00b      	beq.n	80039a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398c:	f383 8811 	msr	BASEPRI, r3
 8003990:	f3bf 8f6f 	isb	sy
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	61bb      	str	r3, [r7, #24]
}
 800399a:	bf00      	nop
 800399c:	bf00      	nop
 800399e:	e7fd      	b.n	800399c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80039a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80039a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00d      	beq.n	80039c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80039ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80039b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80039b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ba:	9300      	str	r3, [sp, #0]
 80039bc:	4613      	mov	r3, r2
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 f805 	bl	80039d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80039c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3730      	adds	r7, #48	@ 0x30
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b084      	sub	sp, #16
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	60f8      	str	r0, [r7, #12]
 80039da:	60b9      	str	r1, [r7, #8]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d103      	bne.n	80039ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e002      	b.n	80039f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	68ba      	ldr	r2, [r7, #8]
 80039fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a00:	2101      	movs	r1, #1
 8003a02:	69b8      	ldr	r0, [r7, #24]
 8003a04:	f7ff fefe 	bl	8003804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003a10:	bf00      	nop
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	@ 0x38
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003a26:	2300      	movs	r3, #0
 8003a28:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <xQueueGenericSend+0x34>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003a46:	bf00      	nop
 8003a48:	bf00      	nop
 8003a4a:	e7fd      	b.n	8003a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d103      	bne.n	8003a5a <xQueueGenericSend+0x42>
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <xQueueGenericSend+0x46>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <xQueueGenericSend+0x48>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <xQueueGenericSend+0x64>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d103      	bne.n	8003a8a <xQueueGenericSend+0x72>
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <xQueueGenericSend+0x76>
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <xQueueGenericSend+0x78>
 8003a8e:	2300      	movs	r3, #0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10b      	bne.n	8003aac <xQueueGenericSend+0x94>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	623b      	str	r3, [r7, #32]
}
 8003aa6:	bf00      	nop
 8003aa8:	bf00      	nop
 8003aaa:	e7fd      	b.n	8003aa8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003aac:	f001 f9fc 	bl	8004ea8 <xTaskGetSchedulerState>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d102      	bne.n	8003abc <xQueueGenericSend+0xa4>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <xQueueGenericSend+0xa8>
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <xQueueGenericSend+0xaa>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10b      	bne.n	8003ade <xQueueGenericSend+0xc6>
	__asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	61fb      	str	r3, [r7, #28]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ade:	f001 ff53 	bl	8005988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <xQueueGenericSend+0xdc>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d129      	bne.n	8003b48 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	68b9      	ldr	r1, [r7, #8]
 8003af8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003afa:	f000 fa0f 	bl	8003f1c <prvCopyDataToQueue>
 8003afe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d010      	beq.n	8003b2a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	3324      	adds	r3, #36	@ 0x24
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f001 f805 	bl	8004b1c <xTaskRemoveFromEventList>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d013      	beq.n	8003b40 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003b18:	4b3f      	ldr	r3, [pc, #252]	@ (8003c18 <xQueueGenericSend+0x200>)
 8003b1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	e00a      	b.n	8003b40 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d007      	beq.n	8003b40 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003b30:	4b39      	ldr	r3, [pc, #228]	@ (8003c18 <xQueueGenericSend+0x200>)
 8003b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003b40:	f001 ff54 	bl	80059ec <vPortExitCritical>
				return pdPASS;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e063      	b.n	8003c10 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d103      	bne.n	8003b56 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b4e:	f001 ff4d 	bl	80059ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	e05c      	b.n	8003c10 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b5c:	f107 0314 	add.w	r3, r7, #20
 8003b60:	4618      	mov	r0, r3
 8003b62:	f001 f83f 	bl	8004be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b6a:	f001 ff3f 	bl	80059ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b6e:	f000 fda7 	bl	80046c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b72:	f001 ff09 	bl	8005988 <vPortEnterCritical>
 8003b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b7c:	b25b      	sxtb	r3, r3
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d103      	bne.n	8003b8c <xQueueGenericSend+0x174>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b92:	b25b      	sxtb	r3, r3
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b98:	d103      	bne.n	8003ba2 <xQueueGenericSend+0x18a>
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ba2:	f001 ff23 	bl	80059ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ba6:	1d3a      	adds	r2, r7, #4
 8003ba8:	f107 0314 	add.w	r3, r7, #20
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f82e 	bl	8004c10 <xTaskCheckForTimeOut>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d124      	bne.n	8003c04 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003bba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bbc:	f000 faa6 	bl	800410c <prvIsQueueFull>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d018      	beq.n	8003bf8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 ff52 	bl	8004a78 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003bd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bd6:	f000 fa31 	bl	800403c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003bda:	f000 fd7f 	bl	80046dc <xTaskResumeAll>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f af7c 	bne.w	8003ade <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003be6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c18 <xQueueGenericSend+0x200>)
 8003be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	e772      	b.n	8003ade <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003bf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bfa:	f000 fa1f 	bl	800403c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bfe:	f000 fd6d 	bl	80046dc <xTaskResumeAll>
 8003c02:	e76c      	b.n	8003ade <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c04:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c06:	f000 fa19 	bl	800403c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c0a:	f000 fd67 	bl	80046dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3738      	adds	r7, #56	@ 0x38
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b090      	sub	sp, #64	@ 0x40
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <xQueueGenericSendFromISR+0x3e>
 8003c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <xQueueGenericSendFromISR+0x42>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueGenericSendFromISR+0x44>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d103      	bne.n	8003c8a <xQueueGenericSendFromISR+0x6e>
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <xQueueGenericSendFromISR+0x72>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e000      	b.n	8003c90 <xQueueGenericSendFromISR+0x74>
 8003c8e:	2300      	movs	r3, #0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10b      	bne.n	8003cac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c98:	f383 8811 	msr	BASEPRI, r3
 8003c9c:	f3bf 8f6f 	isb	sy
 8003ca0:	f3bf 8f4f 	dsb	sy
 8003ca4:	623b      	str	r3, [r7, #32]
}
 8003ca6:	bf00      	nop
 8003ca8:	bf00      	nop
 8003caa:	e7fd      	b.n	8003ca8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003cac:	f001 ff4c 	bl	8005b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003cb0:	f3ef 8211 	mrs	r2, BASEPRI
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61fa      	str	r2, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003cc8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003cca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <xQueueGenericSendFromISR+0xc2>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d12f      	bne.n	8003d3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ce4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	68b9      	ldr	r1, [r7, #8]
 8003cf2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003cf4:	f000 f912 	bl	8003f1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003cf8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d112      	bne.n	8003d28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d016      	beq.n	8003d38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0c:	3324      	adds	r3, #36	@ 0x24
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff04 	bl	8004b1c <xTaskRemoveFromEventList>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00e      	beq.n	8003d38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	e007      	b.n	8003d38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003d28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	b25a      	sxtb	r2, r3
 8003d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003d3c:	e001      	b.n	8003d42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003d4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3740      	adds	r7, #64	@ 0x40
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08c      	sub	sp, #48	@ 0x30
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d64:	2300      	movs	r3, #0
 8003d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <xQueueReceive+0x32>
	__asm volatile
 8003d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d76:	f383 8811 	msr	BASEPRI, r3
 8003d7a:	f3bf 8f6f 	isb	sy
 8003d7e:	f3bf 8f4f 	dsb	sy
 8003d82:	623b      	str	r3, [r7, #32]
}
 8003d84:	bf00      	nop
 8003d86:	bf00      	nop
 8003d88:	e7fd      	b.n	8003d86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <xQueueReceive+0x40>
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d101      	bne.n	8003d9c <xQueueReceive+0x44>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <xQueueReceive+0x46>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <xQueueReceive+0x62>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	61fb      	str	r3, [r7, #28]
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dba:	f001 f875 	bl	8004ea8 <xTaskGetSchedulerState>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <xQueueReceive+0x72>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <xQueueReceive+0x76>
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e000      	b.n	8003dd0 <xQueueReceive+0x78>
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10b      	bne.n	8003dec <xQueueReceive+0x94>
	__asm volatile
 8003dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	61bb      	str	r3, [r7, #24]
}
 8003de6:	bf00      	nop
 8003de8:	bf00      	nop
 8003dea:	e7fd      	b.n	8003de8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dec:	f001 fdcc 	bl	8005988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d01f      	beq.n	8003e3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e00:	f000 f8f6 	bl	8003ff0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e06:	1e5a      	subs	r2, r3, #1
 8003e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00f      	beq.n	8003e34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e16:	3310      	adds	r3, #16
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fe7f 	bl	8004b1c <xTaskRemoveFromEventList>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d007      	beq.n	8003e34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e24:	4b3c      	ldr	r3, [pc, #240]	@ (8003f18 <xQueueReceive+0x1c0>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e34:	f001 fdda 	bl	80059ec <vPortExitCritical>
				return pdPASS;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e069      	b.n	8003f10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e42:	f001 fdd3 	bl	80059ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e46:	2300      	movs	r3, #0
 8003e48:	e062      	b.n	8003f10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d106      	bne.n	8003e5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fec5 	bl	8004be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e5e:	f001 fdc5 	bl	80059ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e62:	f000 fc2d 	bl	80046c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e66:	f001 fd8f 	bl	8005988 <vPortEnterCritical>
 8003e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e70:	b25b      	sxtb	r3, r3
 8003e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e76:	d103      	bne.n	8003e80 <xQueueReceive+0x128>
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e86:	b25b      	sxtb	r3, r3
 8003e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8c:	d103      	bne.n	8003e96 <xQueueReceive+0x13e>
 8003e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e96:	f001 fda9 	bl	80059ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e9a:	1d3a      	adds	r2, r7, #4
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	4611      	mov	r1, r2
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 feb4 	bl	8004c10 <xTaskCheckForTimeOut>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d123      	bne.n	8003ef6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eb0:	f000 f916 	bl	80040e0 <prvIsQueueEmpty>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d017      	beq.n	8003eea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ebc:	3324      	adds	r3, #36	@ 0x24
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4611      	mov	r1, r2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fdd8 	bl	8004a78 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ec8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eca:	f000 f8b7 	bl	800403c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ece:	f000 fc05 	bl	80046dc <xTaskResumeAll>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d189      	bne.n	8003dec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8003f18 <xQueueReceive+0x1c0>)
 8003eda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	e780      	b.n	8003dec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003eec:	f000 f8a6 	bl	800403c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ef0:	f000 fbf4 	bl	80046dc <xTaskResumeAll>
 8003ef4:	e77a      	b.n	8003dec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003ef6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ef8:	f000 f8a0 	bl	800403c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003efc:	f000 fbee 	bl	80046dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f02:	f000 f8ed 	bl	80040e0 <prvIsQueueEmpty>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f43f af6f 	beq.w	8003dec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3730      	adds	r7, #48	@ 0x30
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	e000ed04 	.word	0xe000ed04

08003f1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10d      	bne.n	8003f56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d14d      	bne.n	8003fde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 ffcc 	bl	8004ee4 <xTaskPriorityDisinherit>
 8003f4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	e043      	b.n	8003fde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d119      	bne.n	8003f90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6858      	ldr	r0, [r3, #4]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	461a      	mov	r2, r3
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	f002 fe85 	bl	8006c76 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	441a      	add	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d32b      	bcc.n	8003fde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e026      	b.n	8003fde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	68d8      	ldr	r0, [r3, #12]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	f002 fe6b 	bl	8006c76 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa8:	425b      	negs	r3, r3
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d207      	bcs.n	8003fcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc4:	425b      	negs	r3, r3
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d105      	bne.n	8003fde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d002      	beq.n	8003fde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003fe6:	697b      	ldr	r3, [r7, #20]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d018      	beq.n	8004034 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68da      	ldr	r2, [r3, #12]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400a:	441a      	add	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	68da      	ldr	r2, [r3, #12]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	429a      	cmp	r2, r3
 800401a:	d303      	bcc.n	8004024 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68d9      	ldr	r1, [r3, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402c:	461a      	mov	r2, r3
 800402e:	6838      	ldr	r0, [r7, #0]
 8004030:	f002 fe21 	bl	8006c76 <memcpy>
	}
}
 8004034:	bf00      	nop
 8004036:	3708      	adds	r7, #8
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004044:	f001 fca0 	bl	8005988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800404e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004050:	e011      	b.n	8004076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d012      	beq.n	8004080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	3324      	adds	r3, #36	@ 0x24
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fd5c 	bl	8004b1c <xTaskRemoveFromEventList>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800406a:	f000 fe35 	bl	8004cd8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800406e:	7bfb      	ldrb	r3, [r7, #15]
 8004070:	3b01      	subs	r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800407a:	2b00      	cmp	r3, #0
 800407c:	dce9      	bgt.n	8004052 <prvUnlockQueue+0x16>
 800407e:	e000      	b.n	8004082 <prvUnlockQueue+0x46>
					break;
 8004080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	22ff      	movs	r2, #255	@ 0xff
 8004086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800408a:	f001 fcaf 	bl	80059ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800408e:	f001 fc7b 	bl	8005988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800409a:	e011      	b.n	80040c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	691b      	ldr	r3, [r3, #16]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d012      	beq.n	80040ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3310      	adds	r3, #16
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fd37 	bl	8004b1c <xTaskRemoveFromEventList>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80040b4:	f000 fe10 	bl	8004cd8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80040b8:	7bbb      	ldrb	r3, [r7, #14]
 80040ba:	3b01      	subs	r3, #1
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	dce9      	bgt.n	800409c <prvUnlockQueue+0x60>
 80040c8:	e000      	b.n	80040cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80040ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	22ff      	movs	r2, #255	@ 0xff
 80040d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80040d4:	f001 fc8a 	bl	80059ec <vPortExitCritical>
}
 80040d8:	bf00      	nop
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040e8:	f001 fc4e 	bl	8005988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80040f4:	2301      	movs	r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	e001      	b.n	80040fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040fe:	f001 fc75 	bl	80059ec <vPortExitCritical>

	return xReturn;
 8004102:	68fb      	ldr	r3, [r7, #12]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004114:	f001 fc38 	bl	8005988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004120:	429a      	cmp	r2, r3
 8004122:	d102      	bne.n	800412a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e001      	b.n	800412e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800412e:	f001 fc5d 	bl	80059ec <vPortExitCritical>

	return xReturn;
 8004132:	68fb      	ldr	r3, [r7, #12]
}
 8004134:	4618      	mov	r0, r3
 8004136:	3710      	adds	r7, #16
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004146:	2300      	movs	r3, #0
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	e014      	b.n	8004176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800414c:	4a0f      	ldr	r2, [pc, #60]	@ (800418c <vQueueAddToRegistry+0x50>)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10b      	bne.n	8004170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004158:	490c      	ldr	r1, [pc, #48]	@ (800418c <vQueueAddToRegistry+0x50>)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004162:	4a0a      	ldr	r2, [pc, #40]	@ (800418c <vQueueAddToRegistry+0x50>)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	00db      	lsls	r3, r3, #3
 8004168:	4413      	add	r3, r2
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800416e:	e006      	b.n	800417e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	3301      	adds	r3, #1
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2b07      	cmp	r3, #7
 800417a:	d9e7      	bls.n	800414c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	20000a6c 	.word	0x20000a6c

08004190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80041a0:	f001 fbf2 	bl	8005988 <vPortEnterCritical>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041aa:	b25b      	sxtb	r3, r3
 80041ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b0:	d103      	bne.n	80041ba <vQueueWaitForMessageRestricted+0x2a>
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d103      	bne.n	80041d0 <vQueueWaitForMessageRestricted+0x40>
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041d0:	f001 fc0c 	bl	80059ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d106      	bne.n	80041ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	3324      	adds	r3, #36	@ 0x24
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f000 fc6d 	bl	8004ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80041ea:	6978      	ldr	r0, [r7, #20]
 80041ec:	f7ff ff26 	bl	800403c <prvUnlockQueue>
	}
 80041f0:	bf00      	nop
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b08e      	sub	sp, #56	@ 0x38
 80041fc:	af04      	add	r7, sp, #16
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
 8004204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <xTaskCreateStatic+0x2c>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	623b      	str	r3, [r7, #32]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004224:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <xTaskCreateStatic+0x4a>
	__asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	61fb      	str	r3, [r7, #28]
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	e7fd      	b.n	800423e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004242:	23a8      	movs	r3, #168	@ 0xa8
 8004244:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	2ba8      	cmp	r3, #168	@ 0xa8
 800424a:	d00b      	beq.n	8004264 <xTaskCreateStatic+0x6c>
	__asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	61bb      	str	r3, [r7, #24]
}
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004264:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	2b00      	cmp	r3, #0
 800426a:	d01e      	beq.n	80042aa <xTaskCreateStatic+0xb2>
 800426c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01b      	beq.n	80042aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004274:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800427a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800427c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427e:	2202      	movs	r2, #2
 8004280:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004284:	2300      	movs	r3, #0
 8004286:	9303      	str	r3, [sp, #12]
 8004288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428a:	9302      	str	r3, [sp, #8]
 800428c:	f107 0314 	add.w	r3, r7, #20
 8004290:	9301      	str	r3, [sp, #4]
 8004292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f000 f851 	bl	8004344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80042a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80042a4:	f000 f8f6 	bl	8004494 <prvAddNewTaskToReadyList>
 80042a8:	e001      	b.n	80042ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80042aa:	2300      	movs	r3, #0
 80042ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80042ae:	697b      	ldr	r3, [r7, #20]
	}
 80042b0:	4618      	mov	r0, r3
 80042b2:	3728      	adds	r7, #40	@ 0x28
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b08c      	sub	sp, #48	@ 0x30
 80042bc:	af04      	add	r7, sp, #16
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80042c8:	88fb      	ldrh	r3, [r7, #6]
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f001 fc7d 	bl	8005bcc <pvPortMalloc>
 80042d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00e      	beq.n	80042f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80042da:	20a8      	movs	r0, #168	@ 0xa8
 80042dc:	f001 fc76 	bl	8005bcc <pvPortMalloc>
 80042e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80042ee:	e005      	b.n	80042fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f001 fd39 	bl	8005d68 <vPortFree>
 80042f6:	e001      	b.n	80042fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d017      	beq.n	8004332 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800430a:	88fa      	ldrh	r2, [r7, #6]
 800430c:	2300      	movs	r3, #0
 800430e:	9303      	str	r3, [sp, #12]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f80f 	bl	8004344 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004326:	69f8      	ldr	r0, [r7, #28]
 8004328:	f000 f8b4 	bl	8004494 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800432c:	2301      	movs	r3, #1
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e002      	b.n	8004338 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004332:	f04f 33ff 	mov.w	r3, #4294967295
 8004336:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004338:	69bb      	ldr	r3, [r7, #24]
	}
 800433a:	4618      	mov	r0, r3
 800433c:	3720      	adds	r7, #32
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
 8004350:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004354:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	461a      	mov	r2, r3
 800435c:	21a5      	movs	r1, #165	@ 0xa5
 800435e:	f002 fbb4 	bl	8006aca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004364:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800436c:	3b01      	subs	r3, #1
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f023 0307 	bic.w	r3, r3, #7
 800437a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800437c:	69bb      	ldr	r3, [r7, #24]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00b      	beq.n	800439e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	617b      	str	r3, [r7, #20]
}
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01f      	beq.n	80043e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043a4:	2300      	movs	r3, #0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e012      	b.n	80043d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80043aa:	68ba      	ldr	r2, [r7, #8]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	7819      	ldrb	r1, [r3, #0]
 80043b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	3334      	adds	r3, #52	@ 0x34
 80043ba:	460a      	mov	r2, r1
 80043bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d006      	beq.n	80043d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	3301      	adds	r3, #1
 80043ce:	61fb      	str	r3, [r7, #28]
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	2b0f      	cmp	r3, #15
 80043d4:	d9e9      	bls.n	80043aa <prvInitialiseNewTask+0x66>
 80043d6:	e000      	b.n	80043da <prvInitialiseNewTask+0x96>
			{
				break;
 80043d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80043da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043dc:	2200      	movs	r2, #0
 80043de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80043e2:	e003      	b.n	80043ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	2b37      	cmp	r3, #55	@ 0x37
 80043f0:	d901      	bls.n	80043f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80043f2:	2337      	movs	r3, #55	@ 0x37
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80043f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80043fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004400:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004404:	2200      	movs	r2, #0
 8004406:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7ff f965 	bl	80036dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004414:	3318      	adds	r3, #24
 8004416:	4618      	mov	r0, r3
 8004418:	f7ff f960 	bl	80036dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800441c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800441e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004420:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004424:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800442c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004434:	2200      	movs	r2, #0
 8004436:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800443a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800443c:	2200      	movs	r2, #0
 800443e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	3354      	adds	r3, #84	@ 0x54
 8004446:	224c      	movs	r2, #76	@ 0x4c
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f002 fb3d 	bl	8006aca <memset>
 8004450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004452:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <prvInitialiseNewTask+0x144>)
 8004454:	659a      	str	r2, [r3, #88]	@ 0x58
 8004456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004458:	4a0c      	ldr	r2, [pc, #48]	@ (800448c <prvInitialiseNewTask+0x148>)
 800445a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800445c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800445e:	4a0c      	ldr	r2, [pc, #48]	@ (8004490 <prvInitialiseNewTask+0x14c>)
 8004460:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	68f9      	ldr	r1, [r7, #12]
 8004466:	69b8      	ldr	r0, [r7, #24]
 8004468:	f001 f95a 	bl	8005720 <pxPortInitialiseStack>
 800446c:	4602      	mov	r2, r0
 800446e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004470:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800447a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800447c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800447e:	bf00      	nop
 8004480:	3720      	adds	r7, #32
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	20004d00 	.word	0x20004d00
 800448c:	20004d68 	.word	0x20004d68
 8004490:	20004dd0 	.word	0x20004dd0

08004494 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800449c:	f001 fa74 	bl	8005988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044a0:	4b2d      	ldr	r3, [pc, #180]	@ (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3301      	adds	r3, #1
 80044a6:	4a2c      	ldr	r2, [pc, #176]	@ (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044aa:	4b2c      	ldr	r3, [pc, #176]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d109      	bne.n	80044c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80044b2:	4a2a      	ldr	r2, [pc, #168]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80044b8:	4b27      	ldr	r3, [pc, #156]	@ (8004558 <prvAddNewTaskToReadyList+0xc4>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d110      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80044c0:	f000 fc2e 	bl	8004d20 <prvInitialiseTaskLists>
 80044c4:	e00d      	b.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80044c6:	4b26      	ldr	r3, [pc, #152]	@ (8004560 <prvAddNewTaskToReadyList+0xcc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d109      	bne.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80044ce:	4b23      	ldr	r3, [pc, #140]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	429a      	cmp	r2, r3
 80044da:	d802      	bhi.n	80044e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80044dc:	4a1f      	ldr	r2, [pc, #124]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80044e2:	4b20      	ldr	r3, [pc, #128]	@ (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3301      	adds	r3, #1
 80044e8:	4a1e      	ldr	r2, [pc, #120]	@ (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004564 <prvAddNewTaskToReadyList+0xd0>)
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004568 <prvAddNewTaskToReadyList+0xd4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d903      	bls.n	8004508 <prvAddNewTaskToReadyList+0x74>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	4a18      	ldr	r2, [pc, #96]	@ (8004568 <prvAddNewTaskToReadyList+0xd4>)
 8004506:	6013      	str	r3, [r2, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800450c:	4613      	mov	r3, r2
 800450e:	009b      	lsls	r3, r3, #2
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4a15      	ldr	r2, [pc, #84]	@ (800456c <prvAddNewTaskToReadyList+0xd8>)
 8004516:	441a      	add	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f7ff f8e9 	bl	80036f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004524:	f001 fa62 	bl	80059ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004528:	4b0d      	ldr	r3, [pc, #52]	@ (8004560 <prvAddNewTaskToReadyList+0xcc>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00e      	beq.n	800454e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <prvAddNewTaskToReadyList+0xc8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	429a      	cmp	r2, r3
 800453c:	d207      	bcs.n	800454e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800453e:	4b0c      	ldr	r3, [pc, #48]	@ (8004570 <prvAddNewTaskToReadyList+0xdc>)
 8004540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	20000f80 	.word	0x20000f80
 800455c:	20000aac 	.word	0x20000aac
 8004560:	20000f8c 	.word	0x20000f8c
 8004564:	20000f9c 	.word	0x20000f9c
 8004568:	20000f88 	.word	0x20000f88
 800456c:	20000ab0 	.word	0x20000ab0
 8004570:	e000ed04 	.word	0xe000ed04

08004574 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800457c:	2300      	movs	r3, #0
 800457e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d018      	beq.n	80045b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004586:	4b14      	ldr	r3, [pc, #80]	@ (80045d8 <vTaskDelay+0x64>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <vTaskDelay+0x32>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60bb      	str	r3, [r7, #8]
}
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045a6:	f000 f88b 	bl	80046c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045aa:	2100      	movs	r1, #0
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fd09 	bl	8004fc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80045b2:	f000 f893 	bl	80046dc <xTaskResumeAll>
 80045b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d107      	bne.n	80045ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80045be:	4b07      	ldr	r3, [pc, #28]	@ (80045dc <vTaskDelay+0x68>)
 80045c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80045ce:	bf00      	nop
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	20000fa8 	.word	0x20000fa8
 80045dc:	e000ed04 	.word	0xe000ed04

080045e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	@ 0x28
 80045e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80045ee:	463a      	mov	r2, r7
 80045f0:	1d39      	adds	r1, r7, #4
 80045f2:	f107 0308 	add.w	r3, r7, #8
 80045f6:	4618      	mov	r0, r3
 80045f8:	f7ff f81c 	bl	8003634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80045fc:	6839      	ldr	r1, [r7, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	9202      	str	r2, [sp, #8]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	460a      	mov	r2, r1
 800460e:	4924      	ldr	r1, [pc, #144]	@ (80046a0 <vTaskStartScheduler+0xc0>)
 8004610:	4824      	ldr	r0, [pc, #144]	@ (80046a4 <vTaskStartScheduler+0xc4>)
 8004612:	f7ff fdf1 	bl	80041f8 <xTaskCreateStatic>
 8004616:	4603      	mov	r3, r0
 8004618:	4a23      	ldr	r2, [pc, #140]	@ (80046a8 <vTaskStartScheduler+0xc8>)
 800461a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800461c:	4b22      	ldr	r3, [pc, #136]	@ (80046a8 <vTaskStartScheduler+0xc8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d002      	beq.n	800462a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e001      	b.n	800462e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d102      	bne.n	800463a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004634:	f000 fd1a 	bl	800506c <xTimerCreateTimerTask>
 8004638:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d11b      	bne.n	8004678 <vTaskStartScheduler+0x98>
	__asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	613b      	str	r3, [r7, #16]
}
 8004652:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004654:	4b15      	ldr	r3, [pc, #84]	@ (80046ac <vTaskStartScheduler+0xcc>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3354      	adds	r3, #84	@ 0x54
 800465a:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <vTaskStartScheduler+0xd0>)
 800465c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800465e:	4b15      	ldr	r3, [pc, #84]	@ (80046b4 <vTaskStartScheduler+0xd4>)
 8004660:	f04f 32ff 	mov.w	r2, #4294967295
 8004664:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004666:	4b14      	ldr	r3, [pc, #80]	@ (80046b8 <vTaskStartScheduler+0xd8>)
 8004668:	2201      	movs	r2, #1
 800466a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800466c:	4b13      	ldr	r3, [pc, #76]	@ (80046bc <vTaskStartScheduler+0xdc>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004672:	f001 f8e5 	bl	8005840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004676:	e00f      	b.n	8004698 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467e:	d10b      	bne.n	8004698 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <vTaskStartScheduler+0xb4>
}
 8004698:	bf00      	nop
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	08008db8 	.word	0x08008db8
 80046a4:	08004cf1 	.word	0x08004cf1
 80046a8:	20000fa4 	.word	0x20000fa4
 80046ac:	20000aac 	.word	0x20000aac
 80046b0:	2000001c 	.word	0x2000001c
 80046b4:	20000fa0 	.word	0x20000fa0
 80046b8:	20000f8c 	.word	0x20000f8c
 80046bc:	20000f84 	.word	0x20000f84

080046c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046c4:	4b04      	ldr	r3, [pc, #16]	@ (80046d8 <vTaskSuspendAll+0x18>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a03      	ldr	r2, [pc, #12]	@ (80046d8 <vTaskSuspendAll+0x18>)
 80046cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80046ce:	bf00      	nop
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000fa8 	.word	0x20000fa8

080046dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80046e6:	2300      	movs	r3, #0
 80046e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80046ea:	4b42      	ldr	r3, [pc, #264]	@ (80047f4 <xTaskResumeAll+0x118>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10b      	bne.n	800470a <xTaskResumeAll+0x2e>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	603b      	str	r3, [r7, #0]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800470a:	f001 f93d 	bl	8005988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800470e:	4b39      	ldr	r3, [pc, #228]	@ (80047f4 <xTaskResumeAll+0x118>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	3b01      	subs	r3, #1
 8004714:	4a37      	ldr	r2, [pc, #220]	@ (80047f4 <xTaskResumeAll+0x118>)
 8004716:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004718:	4b36      	ldr	r3, [pc, #216]	@ (80047f4 <xTaskResumeAll+0x118>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d162      	bne.n	80047e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004720:	4b35      	ldr	r3, [pc, #212]	@ (80047f8 <xTaskResumeAll+0x11c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d05e      	beq.n	80047e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004728:	e02f      	b.n	800478a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472a:	4b34      	ldr	r3, [pc, #208]	@ (80047fc <xTaskResumeAll+0x120>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	3318      	adds	r3, #24
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff f83a 	bl	80037b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3304      	adds	r3, #4
 8004740:	4618      	mov	r0, r3
 8004742:	f7ff f835 	bl	80037b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474a:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <xTaskResumeAll+0x124>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d903      	bls.n	800475a <xTaskResumeAll+0x7e>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	4a2a      	ldr	r2, [pc, #168]	@ (8004800 <xTaskResumeAll+0x124>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	4a27      	ldr	r2, [pc, #156]	@ (8004804 <xTaskResumeAll+0x128>)
 8004768:	441a      	add	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3304      	adds	r3, #4
 800476e:	4619      	mov	r1, r3
 8004770:	4610      	mov	r0, r2
 8004772:	f7fe ffc0 	bl	80036f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800477a:	4b23      	ldr	r3, [pc, #140]	@ (8004808 <xTaskResumeAll+0x12c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004780:	429a      	cmp	r2, r3
 8004782:	d302      	bcc.n	800478a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004784:	4b21      	ldr	r3, [pc, #132]	@ (800480c <xTaskResumeAll+0x130>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478a:	4b1c      	ldr	r3, [pc, #112]	@ (80047fc <xTaskResumeAll+0x120>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1cb      	bne.n	800472a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004798:	f000 fb66 	bl	8004e68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800479c:	4b1c      	ldr	r3, [pc, #112]	@ (8004810 <xTaskResumeAll+0x134>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d010      	beq.n	80047ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047a8:	f000 f846 	bl	8004838 <xTaskIncrementTick>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d002      	beq.n	80047b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80047b2:	4b16      	ldr	r3, [pc, #88]	@ (800480c <xTaskResumeAll+0x130>)
 80047b4:	2201      	movs	r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d1f1      	bne.n	80047a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80047c4:	4b12      	ldr	r3, [pc, #72]	@ (8004810 <xTaskResumeAll+0x134>)
 80047c6:	2200      	movs	r2, #0
 80047c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80047ca:	4b10      	ldr	r3, [pc, #64]	@ (800480c <xTaskResumeAll+0x130>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80047d2:	2301      	movs	r3, #1
 80047d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80047d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004814 <xTaskResumeAll+0x138>)
 80047d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80047e6:	f001 f901 	bl	80059ec <vPortExitCritical>

	return xAlreadyYielded;
 80047ea:	68bb      	ldr	r3, [r7, #8]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000fa8 	.word	0x20000fa8
 80047f8:	20000f80 	.word	0x20000f80
 80047fc:	20000f40 	.word	0x20000f40
 8004800:	20000f88 	.word	0x20000f88
 8004804:	20000ab0 	.word	0x20000ab0
 8004808:	20000aac 	.word	0x20000aac
 800480c:	20000f94 	.word	0x20000f94
 8004810:	20000f90 	.word	0x20000f90
 8004814:	e000ed04 	.word	0xe000ed04

08004818 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <xTaskGetTickCount+0x1c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004824:	687b      	ldr	r3, [r7, #4]
}
 8004826:	4618      	mov	r0, r3
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000f84 	.word	0x20000f84

08004838 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800483e:	2300      	movs	r3, #0
 8004840:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004842:	4b4f      	ldr	r3, [pc, #316]	@ (8004980 <xTaskIncrementTick+0x148>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	f040 8090 	bne.w	800496c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800484c:	4b4d      	ldr	r3, [pc, #308]	@ (8004984 <xTaskIncrementTick+0x14c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004854:	4a4b      	ldr	r2, [pc, #300]	@ (8004984 <xTaskIncrementTick+0x14c>)
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d121      	bne.n	80048a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004860:	4b49      	ldr	r3, [pc, #292]	@ (8004988 <xTaskIncrementTick+0x150>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <xTaskIncrementTick+0x4a>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	603b      	str	r3, [r7, #0]
}
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	e7fd      	b.n	800487e <xTaskIncrementTick+0x46>
 8004882:	4b41      	ldr	r3, [pc, #260]	@ (8004988 <xTaskIncrementTick+0x150>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	4b40      	ldr	r3, [pc, #256]	@ (800498c <xTaskIncrementTick+0x154>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3e      	ldr	r2, [pc, #248]	@ (8004988 <xTaskIncrementTick+0x150>)
 800488e:	6013      	str	r3, [r2, #0]
 8004890:	4a3e      	ldr	r2, [pc, #248]	@ (800498c <xTaskIncrementTick+0x154>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b3e      	ldr	r3, [pc, #248]	@ (8004990 <xTaskIncrementTick+0x158>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a3c      	ldr	r2, [pc, #240]	@ (8004990 <xTaskIncrementTick+0x158>)
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	f000 fae2 	bl	8004e68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d349      	bcc.n	8004942 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048ae:	4b36      	ldr	r3, [pc, #216]	@ (8004988 <xTaskIncrementTick+0x150>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048b8:	4b36      	ldr	r3, [pc, #216]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048ba:	f04f 32ff 	mov.w	r2, #4294967295
 80048be:	601a      	str	r2, [r3, #0]
					break;
 80048c0:	e03f      	b.n	8004942 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048c2:	4b31      	ldr	r3, [pc, #196]	@ (8004988 <xTaskIncrementTick+0x150>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80048d2:	693a      	ldr	r2, [r7, #16]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d203      	bcs.n	80048e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80048da:	4a2e      	ldr	r2, [pc, #184]	@ (8004994 <xTaskIncrementTick+0x15c>)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80048e0:	e02f      	b.n	8004942 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	3304      	adds	r3, #4
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe ff62 	bl	80037b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d004      	beq.n	80048fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fe ff59 	bl	80037b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004902:	4b25      	ldr	r3, [pc, #148]	@ (8004998 <xTaskIncrementTick+0x160>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d903      	bls.n	8004912 <xTaskIncrementTick+0xda>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <xTaskIncrementTick+0x160>)
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004916:	4613      	mov	r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4a1f      	ldr	r2, [pc, #124]	@ (800499c <xTaskIncrementTick+0x164>)
 8004920:	441a      	add	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	3304      	adds	r3, #4
 8004926:	4619      	mov	r1, r3
 8004928:	4610      	mov	r0, r2
 800492a:	f7fe fee4 	bl	80036f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004932:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <xTaskIncrementTick+0x168>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004938:	429a      	cmp	r2, r3
 800493a:	d3b8      	bcc.n	80048ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004940:	e7b5      	b.n	80048ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004942:	4b17      	ldr	r3, [pc, #92]	@ (80049a0 <xTaskIncrementTick+0x168>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004948:	4914      	ldr	r1, [pc, #80]	@ (800499c <xTaskIncrementTick+0x164>)
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d901      	bls.n	800495e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800495a:	2301      	movs	r3, #1
 800495c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800495e:	4b11      	ldr	r3, [pc, #68]	@ (80049a4 <xTaskIncrementTick+0x16c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004966:	2301      	movs	r3, #1
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e004      	b.n	8004976 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800496c:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <xTaskIncrementTick+0x170>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3301      	adds	r3, #1
 8004972:	4a0d      	ldr	r2, [pc, #52]	@ (80049a8 <xTaskIncrementTick+0x170>)
 8004974:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004976:	697b      	ldr	r3, [r7, #20]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000fa8 	.word	0x20000fa8
 8004984:	20000f84 	.word	0x20000f84
 8004988:	20000f38 	.word	0x20000f38
 800498c:	20000f3c 	.word	0x20000f3c
 8004990:	20000f98 	.word	0x20000f98
 8004994:	20000fa0 	.word	0x20000fa0
 8004998:	20000f88 	.word	0x20000f88
 800499c:	20000ab0 	.word	0x20000ab0
 80049a0:	20000aac 	.word	0x20000aac
 80049a4:	20000f94 	.word	0x20000f94
 80049a8:	20000f90 	.word	0x20000f90

080049ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	b085      	sub	sp, #20
 80049b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049b2:	4b2b      	ldr	r3, [pc, #172]	@ (8004a60 <vTaskSwitchContext+0xb4>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004a64 <vTaskSwitchContext+0xb8>)
 80049bc:	2201      	movs	r2, #1
 80049be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049c0:	e047      	b.n	8004a52 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80049c2:	4b28      	ldr	r3, [pc, #160]	@ (8004a64 <vTaskSwitchContext+0xb8>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b27      	ldr	r3, [pc, #156]	@ (8004a68 <vTaskSwitchContext+0xbc>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	e011      	b.n	80049f4 <vTaskSwitchContext+0x48>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10b      	bne.n	80049ee <vTaskSwitchContext+0x42>
	__asm volatile
 80049d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049da:	f383 8811 	msr	BASEPRI, r3
 80049de:	f3bf 8f6f 	isb	sy
 80049e2:	f3bf 8f4f 	dsb	sy
 80049e6:	607b      	str	r3, [r7, #4]
}
 80049e8:	bf00      	nop
 80049ea:	bf00      	nop
 80049ec:	e7fd      	b.n	80049ea <vTaskSwitchContext+0x3e>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	491d      	ldr	r1, [pc, #116]	@ (8004a6c <vTaskSwitchContext+0xc0>)
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	4613      	mov	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d0e3      	beq.n	80049d0 <vTaskSwitchContext+0x24>
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4a16      	ldr	r2, [pc, #88]	@ (8004a6c <vTaskSwitchContext+0xc0>)
 8004a14:	4413      	add	r3, r2
 8004a16:	60bb      	str	r3, [r7, #8]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	685a      	ldr	r2, [r3, #4]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	3308      	adds	r3, #8
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d104      	bne.n	8004a38 <vTaskSwitchContext+0x8c>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	605a      	str	r2, [r3, #4]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004a70 <vTaskSwitchContext+0xc4>)
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	4a09      	ldr	r2, [pc, #36]	@ (8004a68 <vTaskSwitchContext+0xbc>)
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004a48:	4b09      	ldr	r3, [pc, #36]	@ (8004a70 <vTaskSwitchContext+0xc4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3354      	adds	r3, #84	@ 0x54
 8004a4e:	4a09      	ldr	r2, [pc, #36]	@ (8004a74 <vTaskSwitchContext+0xc8>)
 8004a50:	6013      	str	r3, [r2, #0]
}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	20000fa8 	.word	0x20000fa8
 8004a64:	20000f94 	.word	0x20000f94
 8004a68:	20000f88 	.word	0x20000f88
 8004a6c:	20000ab0 	.word	0x20000ab0
 8004a70:	20000aac 	.word	0x20000aac
 8004a74:	2000001c 	.word	0x2000001c

08004a78 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10b      	bne.n	8004aa0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	60fb      	str	r3, [r7, #12]
}
 8004a9a:	bf00      	nop
 8004a9c:	bf00      	nop
 8004a9e:	e7fd      	b.n	8004a9c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aa0:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <vTaskPlaceOnEventList+0x48>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3318      	adds	r3, #24
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f7fe fe48 	bl	800373e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004aae:	2101      	movs	r1, #1
 8004ab0:	6838      	ldr	r0, [r7, #0]
 8004ab2:	f000 fa87 	bl	8004fc4 <prvAddCurrentTaskToDelayedList>
}
 8004ab6:	bf00      	nop
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000aac 	.word	0x20000aac

08004ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10b      	bne.n	8004aee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	617b      	str	r3, [r7, #20]
}
 8004ae8:	bf00      	nop
 8004aea:	bf00      	nop
 8004aec:	e7fd      	b.n	8004aea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004aee:	4b0a      	ldr	r3, [pc, #40]	@ (8004b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3318      	adds	r3, #24
 8004af4:	4619      	mov	r1, r3
 8004af6:	68f8      	ldr	r0, [r7, #12]
 8004af8:	f7fe fdfd 	bl	80036f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	68b8      	ldr	r0, [r7, #8]
 8004b0c:	f000 fa5a 	bl	8004fc4 <prvAddCurrentTaskToDelayedList>
	}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20000aac 	.word	0x20000aac

08004b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	60fb      	str	r3, [r7, #12]
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	e7fd      	b.n	8004b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	3318      	adds	r3, #24
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7fe fe2e 	bl	80037b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b54:	4b1d      	ldr	r3, [pc, #116]	@ (8004bcc <xTaskRemoveFromEventList+0xb0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d11d      	bne.n	8004b98 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fe25 	bl	80037b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b6a:	4b19      	ldr	r3, [pc, #100]	@ (8004bd0 <xTaskRemoveFromEventList+0xb4>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d903      	bls.n	8004b7a <xTaskRemoveFromEventList+0x5e>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <xTaskRemoveFromEventList+0xb4>)
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4a13      	ldr	r2, [pc, #76]	@ (8004bd4 <xTaskRemoveFromEventList+0xb8>)
 8004b88:	441a      	add	r2, r3
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	4619      	mov	r1, r3
 8004b90:	4610      	mov	r0, r2
 8004b92:	f7fe fdb0 	bl	80036f6 <vListInsertEnd>
 8004b96:	e005      	b.n	8004ba4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	3318      	adds	r3, #24
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	480e      	ldr	r0, [pc, #56]	@ (8004bd8 <xTaskRemoveFromEventList+0xbc>)
 8004ba0:	f7fe fda9 	bl	80036f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8004bdc <xTaskRemoveFromEventList+0xc0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d905      	bls.n	8004bbe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <xTaskRemoveFromEventList+0xc4>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	e001      	b.n	8004bc2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004bc2:	697b      	ldr	r3, [r7, #20]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	20000fa8 	.word	0x20000fa8
 8004bd0:	20000f88 	.word	0x20000f88
 8004bd4:	20000ab0 	.word	0x20000ab0
 8004bd8:	20000f40 	.word	0x20000f40
 8004bdc:	20000aac 	.word	0x20000aac
 8004be0:	20000f94 	.word	0x20000f94

08004be4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <vTaskInternalSetTimeOutState+0x24>)
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004bf4:	4b05      	ldr	r3, [pc, #20]	@ (8004c0c <vTaskInternalSetTimeOutState+0x28>)
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	605a      	str	r2, [r3, #4]
}
 8004bfc:	bf00      	nop
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000f98 	.word	0x20000f98
 8004c0c:	20000f84 	.word	0x20000f84

08004c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10b      	bne.n	8004c38 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	613b      	str	r3, [r7, #16]
}
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10b      	bne.n	8004c56 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60fb      	str	r3, [r7, #12]
}
 8004c50:	bf00      	nop
 8004c52:	bf00      	nop
 8004c54:	e7fd      	b.n	8004c52 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004c56:	f000 fe97 	bl	8005988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <xTaskCheckForTimeOut+0xc0>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d102      	bne.n	8004c7a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	61fb      	str	r3, [r7, #28]
 8004c78:	e023      	b.n	8004cc2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <xTaskCheckForTimeOut+0xc4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	429a      	cmp	r2, r3
 8004c84:	d007      	beq.n	8004c96 <xTaskCheckForTimeOut+0x86>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d302      	bcc.n	8004c96 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	61fb      	str	r3, [r7, #28]
 8004c94:	e015      	b.n	8004cc2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d20b      	bcs.n	8004cb8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	1ad2      	subs	r2, r2, r3
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff99 	bl	8004be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	61fb      	str	r3, [r7, #28]
 8004cb6:	e004      	b.n	8004cc2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004cc2:	f000 fe93 	bl	80059ec <vPortExitCritical>

	return xReturn;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3720      	adds	r7, #32
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20000f84 	.word	0x20000f84
 8004cd4:	20000f98 	.word	0x20000f98

08004cd8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cdc:	4b03      	ldr	r3, [pc, #12]	@ (8004cec <vTaskMissedYield+0x14>)
 8004cde:	2201      	movs	r2, #1
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr
 8004cec:	20000f94 	.word	0x20000f94

08004cf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004cf8:	f000 f852 	bl	8004da0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004cfc:	4b06      	ldr	r3, [pc, #24]	@ (8004d18 <prvIdleTask+0x28>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d9f9      	bls.n	8004cf8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d04:	4b05      	ldr	r3, [pc, #20]	@ (8004d1c <prvIdleTask+0x2c>)
 8004d06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d14:	e7f0      	b.n	8004cf8 <prvIdleTask+0x8>
 8004d16:	bf00      	nop
 8004d18:	20000ab0 	.word	0x20000ab0
 8004d1c:	e000ed04 	.word	0xe000ed04

08004d20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d26:	2300      	movs	r3, #0
 8004d28:	607b      	str	r3, [r7, #4]
 8004d2a:	e00c      	b.n	8004d46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a12      	ldr	r2, [pc, #72]	@ (8004d80 <prvInitialiseTaskLists+0x60>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fcae 	bl	800369c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b37      	cmp	r3, #55	@ 0x37
 8004d4a:	d9ef      	bls.n	8004d2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d4c:	480d      	ldr	r0, [pc, #52]	@ (8004d84 <prvInitialiseTaskLists+0x64>)
 8004d4e:	f7fe fca5 	bl	800369c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d52:	480d      	ldr	r0, [pc, #52]	@ (8004d88 <prvInitialiseTaskLists+0x68>)
 8004d54:	f7fe fca2 	bl	800369c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d58:	480c      	ldr	r0, [pc, #48]	@ (8004d8c <prvInitialiseTaskLists+0x6c>)
 8004d5a:	f7fe fc9f 	bl	800369c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d5e:	480c      	ldr	r0, [pc, #48]	@ (8004d90 <prvInitialiseTaskLists+0x70>)
 8004d60:	f7fe fc9c 	bl	800369c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d64:	480b      	ldr	r0, [pc, #44]	@ (8004d94 <prvInitialiseTaskLists+0x74>)
 8004d66:	f7fe fc99 	bl	800369c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <prvInitialiseTaskLists+0x78>)
 8004d6c:	4a05      	ldr	r2, [pc, #20]	@ (8004d84 <prvInitialiseTaskLists+0x64>)
 8004d6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d70:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <prvInitialiseTaskLists+0x7c>)
 8004d72:	4a05      	ldr	r2, [pc, #20]	@ (8004d88 <prvInitialiseTaskLists+0x68>)
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20000ab0 	.word	0x20000ab0
 8004d84:	20000f10 	.word	0x20000f10
 8004d88:	20000f24 	.word	0x20000f24
 8004d8c:	20000f40 	.word	0x20000f40
 8004d90:	20000f54 	.word	0x20000f54
 8004d94:	20000f6c 	.word	0x20000f6c
 8004d98:	20000f38 	.word	0x20000f38
 8004d9c:	20000f3c 	.word	0x20000f3c

08004da0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004da6:	e019      	b.n	8004ddc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004da8:	f000 fdee 	bl	8005988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dac:	4b10      	ldr	r3, [pc, #64]	@ (8004df0 <prvCheckTasksWaitingTermination+0x50>)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe fcf9 	bl	80037b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <prvCheckTasksWaitingTermination+0x54>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004df4 <prvCheckTasksWaitingTermination+0x54>)
 8004dc6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004df8 <prvCheckTasksWaitingTermination+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	3b01      	subs	r3, #1
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <prvCheckTasksWaitingTermination+0x58>)
 8004dd0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dd2:	f000 fe0b 	bl	80059ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f810 	bl	8004dfc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <prvCheckTasksWaitingTermination+0x58>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e1      	bne.n	8004da8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000f54 	.word	0x20000f54
 8004df4:	20000f80 	.word	0x20000f80
 8004df8:	20000f68 	.word	0x20000f68

08004dfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3354      	adds	r3, #84	@ 0x54
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f001 fe7b 	bl	8006b04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d108      	bne.n	8004e2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 ffa3 	bl	8005d68 <vPortFree>
				vPortFree( pxTCB );
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 ffa0 	bl	8005d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e28:	e019      	b.n	8004e5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d103      	bne.n	8004e3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 ff97 	bl	8005d68 <vPortFree>
	}
 8004e3a:	e010      	b.n	8004e5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d00b      	beq.n	8004e5e <prvDeleteTCB+0x62>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	bf00      	nop
 8004e5c:	e7fd      	b.n	8004e5a <prvDeleteTCB+0x5e>
	}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d104      	bne.n	8004e82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e78:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e80:	e008      	b.n	8004e94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e82:	4b07      	ldr	r3, [pc, #28]	@ (8004ea0 <prvResetNextTaskUnblockTime+0x38>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	4a04      	ldr	r2, [pc, #16]	@ (8004ea4 <prvResetNextTaskUnblockTime+0x3c>)
 8004e92:	6013      	str	r3, [r2, #0]
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	20000f38 	.word	0x20000f38
 8004ea4:	20000fa0 	.word	0x20000fa0

08004ea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004eae:	4b0b      	ldr	r3, [pc, #44]	@ (8004edc <xTaskGetSchedulerState+0x34>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d102      	bne.n	8004ebc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	e008      	b.n	8004ece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ebc:	4b08      	ldr	r3, [pc, #32]	@ (8004ee0 <xTaskGetSchedulerState+0x38>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d102      	bne.n	8004eca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	e001      	b.n	8004ece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ece:	687b      	ldr	r3, [r7, #4]
	}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr
 8004edc:	20000f8c 	.word	0x20000f8c
 8004ee0:	20000fa8 	.word	0x20000fa8

08004ee4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d058      	beq.n	8004fac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004efa:	4b2f      	ldr	r3, [pc, #188]	@ (8004fb8 <xTaskPriorityDisinherit+0xd4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d00b      	beq.n	8004f1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f08:	f383 8811 	msr	BASEPRI, r3
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f3bf 8f4f 	dsb	sy
 8004f14:	60fb      	str	r3, [r7, #12]
}
 8004f16:	bf00      	nop
 8004f18:	bf00      	nop
 8004f1a:	e7fd      	b.n	8004f18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10b      	bne.n	8004f3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	60bb      	str	r3, [r7, #8]
}
 8004f36:	bf00      	nop
 8004f38:	bf00      	nop
 8004f3a:	e7fd      	b.n	8004f38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d02c      	beq.n	8004fac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d128      	bne.n	8004fac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3304      	adds	r3, #4
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fe fc26 	bl	80037b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fbc <xTaskPriorityDisinherit+0xd8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d903      	bls.n	8004f8c <xTaskPriorityDisinherit+0xa8>
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	4a0c      	ldr	r2, [pc, #48]	@ (8004fbc <xTaskPriorityDisinherit+0xd8>)
 8004f8a:	6013      	str	r3, [r2, #0]
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4a09      	ldr	r2, [pc, #36]	@ (8004fc0 <xTaskPriorityDisinherit+0xdc>)
 8004f9a:	441a      	add	r2, r3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	f7fe fba7 	bl	80036f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fac:	697b      	ldr	r3, [r7, #20]
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3718      	adds	r7, #24
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000aac 	.word	0x20000aac
 8004fbc:	20000f88 	.word	0x20000f88
 8004fc0:	20000ab0 	.word	0x20000ab0

08004fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fce:	4b21      	ldr	r3, [pc, #132]	@ (8005054 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fd4:	4b20      	ldr	r3, [pc, #128]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fbe8 	bl	80037b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe6:	d10a      	bne.n	8004ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fee:	4b1a      	ldr	r3, [pc, #104]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4819      	ldr	r0, [pc, #100]	@ (800505c <prvAddCurrentTaskToDelayedList+0x98>)
 8004ff8:	f7fe fb7d 	bl	80036f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ffc:	e026      	b.n	800504c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005006:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x94>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	429a      	cmp	r2, r3
 8005014:	d209      	bcs.n	800502a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005016:	4b12      	ldr	r3, [pc, #72]	@ (8005060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b0f      	ldr	r3, [pc, #60]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x94>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3304      	adds	r3, #4
 8005020:	4619      	mov	r1, r3
 8005022:	4610      	mov	r0, r2
 8005024:	f7fe fb8b 	bl	800373e <vListInsert>
}
 8005028:	e010      	b.n	800504c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800502a:	4b0e      	ldr	r3, [pc, #56]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <prvAddCurrentTaskToDelayedList+0x94>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4610      	mov	r0, r2
 8005038:	f7fe fb81 	bl	800373e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800503c:	4b0a      	ldr	r3, [pc, #40]	@ (8005068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	429a      	cmp	r2, r3
 8005044:	d202      	bcs.n	800504c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005046:	4a08      	ldr	r2, [pc, #32]	@ (8005068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	6013      	str	r3, [r2, #0]
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	20000f84 	.word	0x20000f84
 8005058:	20000aac 	.word	0x20000aac
 800505c:	20000f6c 	.word	0x20000f6c
 8005060:	20000f3c 	.word	0x20000f3c
 8005064:	20000f38 	.word	0x20000f38
 8005068:	20000fa0 	.word	0x20000fa0

0800506c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	@ 0x28
 8005070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005072:	2300      	movs	r3, #0
 8005074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005076:	f000 fb13 	bl	80056a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800507a:	4b1d      	ldr	r3, [pc, #116]	@ (80050f0 <xTimerCreateTimerTask+0x84>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d021      	beq.n	80050c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800508a:	1d3a      	adds	r2, r7, #4
 800508c:	f107 0108 	add.w	r1, r7, #8
 8005090:	f107 030c 	add.w	r3, r7, #12
 8005094:	4618      	mov	r0, r3
 8005096:	f7fe fae7 	bl	8003668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	9202      	str	r2, [sp, #8]
 80050a2:	9301      	str	r3, [sp, #4]
 80050a4:	2302      	movs	r3, #2
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	2300      	movs	r3, #0
 80050aa:	460a      	mov	r2, r1
 80050ac:	4911      	ldr	r1, [pc, #68]	@ (80050f4 <xTimerCreateTimerTask+0x88>)
 80050ae:	4812      	ldr	r0, [pc, #72]	@ (80050f8 <xTimerCreateTimerTask+0x8c>)
 80050b0:	f7ff f8a2 	bl	80041f8 <xTaskCreateStatic>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4a11      	ldr	r2, [pc, #68]	@ (80050fc <xTimerCreateTimerTask+0x90>)
 80050b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ba:	4b10      	ldr	r3, [pc, #64]	@ (80050fc <xTimerCreateTimerTask+0x90>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050c2:	2301      	movs	r3, #1
 80050c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10b      	bne.n	80050e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	613b      	str	r3, [r7, #16]
}
 80050de:	bf00      	nop
 80050e0:	bf00      	nop
 80050e2:	e7fd      	b.n	80050e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050e4:	697b      	ldr	r3, [r7, #20]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3718      	adds	r7, #24
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000fdc 	.word	0x20000fdc
 80050f4:	08008dc0 	.word	0x08008dc0
 80050f8:	08005239 	.word	0x08005239
 80050fc:	20000fe0 	.word	0x20000fe0

08005100 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08a      	sub	sp, #40	@ 0x28
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800510e:	2300      	movs	r3, #0
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10b      	bne.n	8005130 <xTimerGenericCommand+0x30>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	623b      	str	r3, [r7, #32]
}
 800512a:	bf00      	nop
 800512c:	bf00      	nop
 800512e:	e7fd      	b.n	800512c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005130:	4b19      	ldr	r3, [pc, #100]	@ (8005198 <xTimerGenericCommand+0x98>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02a      	beq.n	800518e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b05      	cmp	r3, #5
 8005148:	dc18      	bgt.n	800517c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800514a:	f7ff fead 	bl	8004ea8 <xTaskGetSchedulerState>
 800514e:	4603      	mov	r3, r0
 8005150:	2b02      	cmp	r3, #2
 8005152:	d109      	bne.n	8005168 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005154:	4b10      	ldr	r3, [pc, #64]	@ (8005198 <xTimerGenericCommand+0x98>)
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	f107 0110 	add.w	r1, r7, #16
 800515c:	2300      	movs	r3, #0
 800515e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005160:	f7fe fc5a 	bl	8003a18 <xQueueGenericSend>
 8005164:	6278      	str	r0, [r7, #36]	@ 0x24
 8005166:	e012      	b.n	800518e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005168:	4b0b      	ldr	r3, [pc, #44]	@ (8005198 <xTimerGenericCommand+0x98>)
 800516a:	6818      	ldr	r0, [r3, #0]
 800516c:	f107 0110 	add.w	r1, r7, #16
 8005170:	2300      	movs	r3, #0
 8005172:	2200      	movs	r2, #0
 8005174:	f7fe fc50 	bl	8003a18 <xQueueGenericSend>
 8005178:	6278      	str	r0, [r7, #36]	@ 0x24
 800517a:	e008      	b.n	800518e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800517c:	4b06      	ldr	r3, [pc, #24]	@ (8005198 <xTimerGenericCommand+0x98>)
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	f107 0110 	add.w	r1, r7, #16
 8005184:	2300      	movs	r3, #0
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	f7fe fd48 	bl	8003c1c <xQueueGenericSendFromISR>
 800518c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800518e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005190:	4618      	mov	r0, r3
 8005192:	3728      	adds	r7, #40	@ 0x28
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000fdc 	.word	0x20000fdc

0800519c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af02      	add	r7, sp, #8
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a6:	4b23      	ldr	r3, [pc, #140]	@ (8005234 <prvProcessExpiredTimer+0x98>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3304      	adds	r3, #4
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fafb 	bl	80037b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d023      	beq.n	8005210 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	699a      	ldr	r2, [r3, #24]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	18d1      	adds	r1, r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	683a      	ldr	r2, [r7, #0]
 80051d4:	6978      	ldr	r0, [r7, #20]
 80051d6:	f000 f8d5 	bl	8005384 <prvInsertTimerInActiveList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d020      	beq.n	8005222 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051e0:	2300      	movs	r3, #0
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	687a      	ldr	r2, [r7, #4]
 80051e8:	2100      	movs	r1, #0
 80051ea:	6978      	ldr	r0, [r7, #20]
 80051ec:	f7ff ff88 	bl	8005100 <xTimerGenericCommand>
 80051f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d114      	bne.n	8005222 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80051f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051fc:	f383 8811 	msr	BASEPRI, r3
 8005200:	f3bf 8f6f 	isb	sy
 8005204:	f3bf 8f4f 	dsb	sy
 8005208:	60fb      	str	r3, [r7, #12]
}
 800520a:	bf00      	nop
 800520c:	bf00      	nop
 800520e:	e7fd      	b.n	800520c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005216:	f023 0301 	bic.w	r3, r3, #1
 800521a:	b2da      	uxtb	r2, r3
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	4798      	blx	r3
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000fd4 	.word	0x20000fd4

08005238 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005240:	f107 0308 	add.w	r3, r7, #8
 8005244:	4618      	mov	r0, r3
 8005246:	f000 f859 	bl	80052fc <prvGetNextExpireTime>
 800524a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4619      	mov	r1, r3
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 f805 	bl	8005260 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005256:	f000 f8d7 	bl	8005408 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800525a:	bf00      	nop
 800525c:	e7f0      	b.n	8005240 <prvTimerTask+0x8>
	...

08005260 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800526a:	f7ff fa29 	bl	80046c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800526e:	f107 0308 	add.w	r3, r7, #8
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f866 	bl	8005344 <prvSampleTimeNow>
 8005278:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d130      	bne.n	80052e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10a      	bne.n	800529c <prvProcessTimerOrBlockTask+0x3c>
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	429a      	cmp	r2, r3
 800528c:	d806      	bhi.n	800529c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800528e:	f7ff fa25 	bl	80046dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005292:	68f9      	ldr	r1, [r7, #12]
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff ff81 	bl	800519c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800529a:	e024      	b.n	80052e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d008      	beq.n	80052b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052a2:	4b13      	ldr	r3, [pc, #76]	@ (80052f0 <prvProcessTimerOrBlockTask+0x90>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <prvProcessTimerOrBlockTask+0x50>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <prvProcessTimerOrBlockTask+0x52>
 80052b0:	2300      	movs	r3, #0
 80052b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <prvProcessTimerOrBlockTask+0x94>)
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	687a      	ldr	r2, [r7, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	683a      	ldr	r2, [r7, #0]
 80052c0:	4619      	mov	r1, r3
 80052c2:	f7fe ff65 	bl	8004190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052c6:	f7ff fa09 	bl	80046dc <xTaskResumeAll>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10a      	bne.n	80052e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052d0:	4b09      	ldr	r3, [pc, #36]	@ (80052f8 <prvProcessTimerOrBlockTask+0x98>)
 80052d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80052d6:	601a      	str	r2, [r3, #0]
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
}
 80052e0:	e001      	b.n	80052e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052e2:	f7ff f9fb 	bl	80046dc <xTaskResumeAll>
}
 80052e6:	bf00      	nop
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000fd8 	.word	0x20000fd8
 80052f4:	20000fdc 	.word	0x20000fdc
 80052f8:	e000ed04 	.word	0xe000ed04

080052fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005304:	4b0e      	ldr	r3, [pc, #56]	@ (8005340 <prvGetNextExpireTime+0x44>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <prvGetNextExpireTime+0x16>
 800530e:	2201      	movs	r2, #1
 8005310:	e000      	b.n	8005314 <prvGetNextExpireTime+0x18>
 8005312:	2200      	movs	r2, #0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d105      	bne.n	800532c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005320:	4b07      	ldr	r3, [pc, #28]	@ (8005340 <prvGetNextExpireTime+0x44>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60fb      	str	r3, [r7, #12]
 800532a:	e001      	b.n	8005330 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800532c:	2300      	movs	r3, #0
 800532e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	20000fd4 	.word	0x20000fd4

08005344 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800534c:	f7ff fa64 	bl	8004818 <xTaskGetTickCount>
 8005350:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005352:	4b0b      	ldr	r3, [pc, #44]	@ (8005380 <prvSampleTimeNow+0x3c>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	429a      	cmp	r2, r3
 800535a:	d205      	bcs.n	8005368 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800535c:	f000 f93a 	bl	80055d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	601a      	str	r2, [r3, #0]
 8005366:	e002      	b.n	800536e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800536e:	4a04      	ldr	r2, [pc, #16]	@ (8005380 <prvSampleTimeNow+0x3c>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005374:	68fb      	ldr	r3, [r7, #12]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	20000fe4 	.word	0x20000fe4

08005384 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d812      	bhi.n	80053d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	1ad2      	subs	r2, r2, r3
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053b8:	2301      	movs	r3, #1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	e01b      	b.n	80053f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053be:	4b10      	ldr	r3, [pc, #64]	@ (8005400 <prvInsertTimerInActiveList+0x7c>)
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	3304      	adds	r3, #4
 80053c6:	4619      	mov	r1, r3
 80053c8:	4610      	mov	r0, r2
 80053ca:	f7fe f9b8 	bl	800373e <vListInsert>
 80053ce:	e012      	b.n	80053f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d206      	bcs.n	80053e6 <prvInsertTimerInActiveList+0x62>
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053e0:	2301      	movs	r3, #1
 80053e2:	617b      	str	r3, [r7, #20]
 80053e4:	e007      	b.n	80053f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053e6:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <prvInsertTimerInActiveList+0x80>)
 80053e8:	681a      	ldr	r2, [r3, #0]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fe f9a4 	bl	800373e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053f6:	697b      	ldr	r3, [r7, #20]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3718      	adds	r7, #24
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	20000fd8 	.word	0x20000fd8
 8005404:	20000fd4 	.word	0x20000fd4

08005408 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08e      	sub	sp, #56	@ 0x38
 800540c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800540e:	e0ce      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	da19      	bge.n	800544a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005416:	1d3b      	adds	r3, r7, #4
 8005418:	3304      	adds	r3, #4
 800541a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	61fb      	str	r3, [r7, #28]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005440:	6850      	ldr	r0, [r2, #4]
 8005442:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	4611      	mov	r1, r2
 8005448:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f2c0 80ae 	blt.w	80055ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d004      	beq.n	8005468 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800545e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005460:	3304      	adds	r3, #4
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe f9a4 	bl	80037b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005468:	463b      	mov	r3, r7
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff6a 	bl	8005344 <prvSampleTimeNow>
 8005470:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b09      	cmp	r3, #9
 8005476:	f200 8097 	bhi.w	80055a8 <prvProcessReceivedCommands+0x1a0>
 800547a:	a201      	add	r2, pc, #4	@ (adr r2, 8005480 <prvProcessReceivedCommands+0x78>)
 800547c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005480:	080054a9 	.word	0x080054a9
 8005484:	080054a9 	.word	0x080054a9
 8005488:	080054a9 	.word	0x080054a9
 800548c:	0800551f 	.word	0x0800551f
 8005490:	08005533 	.word	0x08005533
 8005494:	0800557f 	.word	0x0800557f
 8005498:	080054a9 	.word	0x080054a9
 800549c:	080054a9 	.word	0x080054a9
 80054a0:	0800551f 	.word	0x0800551f
 80054a4:	08005533 	.word	0x08005533
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	b2da      	uxtb	r2, r3
 80054b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054be:	699b      	ldr	r3, [r3, #24]
 80054c0:	18d1      	adds	r1, r2, r3
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054c8:	f7ff ff5c 	bl	8005384 <prvInsertTimerInActiveList>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d06c      	beq.n	80055ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d061      	beq.n	80055ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	441a      	add	r2, r3
 80054f0:	2300      	movs	r3, #0
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	2300      	movs	r3, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054fa:	f7ff fe01 	bl	8005100 <xTimerGenericCommand>
 80054fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005500:	6a3b      	ldr	r3, [r7, #32]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d152      	bne.n	80055ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800550a:	f383 8811 	msr	BASEPRI, r3
 800550e:	f3bf 8f6f 	isb	sy
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	61bb      	str	r3, [r7, #24]
}
 8005518:	bf00      	nop
 800551a:	bf00      	nop
 800551c:	e7fd      	b.n	800551a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005520:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005524:	f023 0301 	bic.w	r3, r3, #1
 8005528:	b2da      	uxtb	r2, r3
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005530:	e03d      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005538:	f043 0301 	orr.w	r3, r3, #1
 800553c:	b2da      	uxtb	r2, r3
 800553e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005540:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005544:	68ba      	ldr	r2, [r7, #8]
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800554a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10b      	bne.n	800556a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	617b      	str	r3, [r7, #20]
}
 8005564:	bf00      	nop
 8005566:	bf00      	nop
 8005568:	e7fd      	b.n	8005566 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800556a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	18d1      	adds	r1, r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005578:	f7ff ff04 	bl	8005384 <prvInsertTimerInActiveList>
					break;
 800557c:	e017      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558e:	f000 fbeb 	bl	8005d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005592:	e00c      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055a6:	e002      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80055a8:	bf00      	nop
 80055aa:	e000      	b.n	80055ae <prvProcessReceivedCommands+0x1a6>
					break;
 80055ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055ae:	4b08      	ldr	r3, [pc, #32]	@ (80055d0 <prvProcessReceivedCommands+0x1c8>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	1d39      	adds	r1, r7, #4
 80055b4:	2200      	movs	r2, #0
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fbce 	bl	8003d58 <xQueueReceive>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f47f af26 	bne.w	8005410 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop
 80055c8:	3730      	adds	r7, #48	@ 0x30
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000fdc 	.word	0x20000fdc

080055d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b088      	sub	sp, #32
 80055d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055da:	e049      	b.n	8005670 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e6:	4b2c      	ldr	r3, [pc, #176]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fe f8db 	bl	80037b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005608:	f003 0304 	and.w	r3, r3, #4
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02f      	beq.n	8005670 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4413      	add	r3, r2
 8005618:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d90e      	bls.n	8005640 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562e:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 8005630:	681a      	ldr	r2, [r3, #0]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	4619      	mov	r1, r3
 8005638:	4610      	mov	r0, r2
 800563a:	f7fe f880 	bl	800373e <vListInsert>
 800563e:	e017      	b.n	8005670 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2300      	movs	r3, #0
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	2100      	movs	r1, #0
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f7ff fd58 	bl	8005100 <xTimerGenericCommand>
 8005650:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d10b      	bne.n	8005670 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565c:	f383 8811 	msr	BASEPRI, r3
 8005660:	f3bf 8f6f 	isb	sy
 8005664:	f3bf 8f4f 	dsb	sy
 8005668:	603b      	str	r3, [r7, #0]
}
 800566a:	bf00      	nop
 800566c:	bf00      	nop
 800566e:	e7fd      	b.n	800566c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005670:	4b09      	ldr	r3, [pc, #36]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1b0      	bne.n	80055dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800567a:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <prvSwitchTimerLists+0xc8>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a04      	ldr	r2, [pc, #16]	@ (8005698 <prvSwitchTimerLists+0xc4>)
 8005686:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005688:	4a04      	ldr	r2, [pc, #16]	@ (800569c <prvSwitchTimerLists+0xc8>)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6013      	str	r3, [r2, #0]
}
 800568e:	bf00      	nop
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000fd4 	.word	0x20000fd4
 800569c:	20000fd8 	.word	0x20000fd8

080056a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056a6:	f000 f96f 	bl	8005988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056aa:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <prvCheckForValidListAndQueue+0x60>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d120      	bne.n	80056f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056b2:	4814      	ldr	r0, [pc, #80]	@ (8005704 <prvCheckForValidListAndQueue+0x64>)
 80056b4:	f7fd fff2 	bl	800369c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056b8:	4813      	ldr	r0, [pc, #76]	@ (8005708 <prvCheckForValidListAndQueue+0x68>)
 80056ba:	f7fd ffef 	bl	800369c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056be:	4b13      	ldr	r3, [pc, #76]	@ (800570c <prvCheckForValidListAndQueue+0x6c>)
 80056c0:	4a10      	ldr	r2, [pc, #64]	@ (8005704 <prvCheckForValidListAndQueue+0x64>)
 80056c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056c4:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <prvCheckForValidListAndQueue+0x70>)
 80056c6:	4a10      	ldr	r2, [pc, #64]	@ (8005708 <prvCheckForValidListAndQueue+0x68>)
 80056c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056ca:	2300      	movs	r3, #0
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	4b11      	ldr	r3, [pc, #68]	@ (8005714 <prvCheckForValidListAndQueue+0x74>)
 80056d0:	4a11      	ldr	r2, [pc, #68]	@ (8005718 <prvCheckForValidListAndQueue+0x78>)
 80056d2:	2110      	movs	r1, #16
 80056d4:	200a      	movs	r0, #10
 80056d6:	f7fe f8ff 	bl	80038d8 <xQueueGenericCreateStatic>
 80056da:	4603      	mov	r3, r0
 80056dc:	4a08      	ldr	r2, [pc, #32]	@ (8005700 <prvCheckForValidListAndQueue+0x60>)
 80056de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056e0:	4b07      	ldr	r3, [pc, #28]	@ (8005700 <prvCheckForValidListAndQueue+0x60>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d005      	beq.n	80056f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056e8:	4b05      	ldr	r3, [pc, #20]	@ (8005700 <prvCheckForValidListAndQueue+0x60>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	490b      	ldr	r1, [pc, #44]	@ (800571c <prvCheckForValidListAndQueue+0x7c>)
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fd24 	bl	800413c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056f4:	f000 f97a 	bl	80059ec <vPortExitCritical>
}
 80056f8:	bf00      	nop
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000fdc 	.word	0x20000fdc
 8005704:	20000fac 	.word	0x20000fac
 8005708:	20000fc0 	.word	0x20000fc0
 800570c:	20000fd4 	.word	0x20000fd4
 8005710:	20000fd8 	.word	0x20000fd8
 8005714:	20001088 	.word	0x20001088
 8005718:	20000fe8 	.word	0x20000fe8
 800571c:	08008dc8 	.word	0x08008dc8

08005720 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3b04      	subs	r3, #4
 8005730:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005738:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	3b04      	subs	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3b04      	subs	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005750:	4a0c      	ldr	r2, [pc, #48]	@ (8005784 <pxPortInitialiseStack+0x64>)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	3b14      	subs	r3, #20
 800575a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	3b04      	subs	r3, #4
 8005766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f06f 0202 	mvn.w	r2, #2
 800576e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3b20      	subs	r3, #32
 8005774:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005776:	68fb      	ldr	r3, [r7, #12]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	08005789 	.word	0x08005789

08005788 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005792:	4b13      	ldr	r3, [pc, #76]	@ (80057e0 <prvTaskExitError+0x58>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d00b      	beq.n	80057b4 <prvTaskExitError+0x2c>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	bf00      	nop
 80057b2:	e7fd      	b.n	80057b0 <prvTaskExitError+0x28>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	60bb      	str	r3, [r7, #8]
}
 80057c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80057c8:	bf00      	nop
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0fc      	beq.n	80057ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80057d0:	bf00      	nop
 80057d2:	bf00      	nop
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	2000000c 	.word	0x2000000c
	...

080057f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80057f0:	4b07      	ldr	r3, [pc, #28]	@ (8005810 <pxCurrentTCBConst2>)
 80057f2:	6819      	ldr	r1, [r3, #0]
 80057f4:	6808      	ldr	r0, [r1, #0]
 80057f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057fa:	f380 8809 	msr	PSP, r0
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f04f 0000 	mov.w	r0, #0
 8005806:	f380 8811 	msr	BASEPRI, r0
 800580a:	4770      	bx	lr
 800580c:	f3af 8000 	nop.w

08005810 <pxCurrentTCBConst2>:
 8005810:	20000aac 	.word	0x20000aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005814:	bf00      	nop
 8005816:	bf00      	nop

08005818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005818:	4808      	ldr	r0, [pc, #32]	@ (800583c <prvPortStartFirstTask+0x24>)
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	6800      	ldr	r0, [r0, #0]
 800581e:	f380 8808 	msr	MSP, r0
 8005822:	f04f 0000 	mov.w	r0, #0
 8005826:	f380 8814 	msr	CONTROL, r0
 800582a:	b662      	cpsie	i
 800582c:	b661      	cpsie	f
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	df00      	svc	0
 8005838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800583a:	bf00      	nop
 800583c:	e000ed08 	.word	0xe000ed08

08005840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005846:	4b47      	ldr	r3, [pc, #284]	@ (8005964 <xPortStartScheduler+0x124>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a47      	ldr	r2, [pc, #284]	@ (8005968 <xPortStartScheduler+0x128>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10b      	bne.n	8005868 <xPortStartScheduler+0x28>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	613b      	str	r3, [r7, #16]
}
 8005862:	bf00      	nop
 8005864:	bf00      	nop
 8005866:	e7fd      	b.n	8005864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005868:	4b3e      	ldr	r3, [pc, #248]	@ (8005964 <xPortStartScheduler+0x124>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a3f      	ldr	r2, [pc, #252]	@ (800596c <xPortStartScheduler+0x12c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d10b      	bne.n	800588a <xPortStartScheduler+0x4a>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	60fb      	str	r3, [r7, #12]
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	e7fd      	b.n	8005886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800588a:	4b39      	ldr	r3, [pc, #228]	@ (8005970 <xPortStartScheduler+0x130>)
 800588c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	781b      	ldrb	r3, [r3, #0]
 8005892:	b2db      	uxtb	r3, r3
 8005894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	22ff      	movs	r2, #255	@ 0xff
 800589a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80058ac:	b2da      	uxtb	r2, r3
 80058ae:	4b31      	ldr	r3, [pc, #196]	@ (8005974 <xPortStartScheduler+0x134>)
 80058b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80058b2:	4b31      	ldr	r3, [pc, #196]	@ (8005978 <xPortStartScheduler+0x138>)
 80058b4:	2207      	movs	r2, #7
 80058b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058b8:	e009      	b.n	80058ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80058ba:	4b2f      	ldr	r3, [pc, #188]	@ (8005978 <xPortStartScheduler+0x138>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3b01      	subs	r3, #1
 80058c0:	4a2d      	ldr	r2, [pc, #180]	@ (8005978 <xPortStartScheduler+0x138>)
 80058c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d6:	2b80      	cmp	r3, #128	@ 0x80
 80058d8:	d0ef      	beq.n	80058ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80058da:	4b27      	ldr	r3, [pc, #156]	@ (8005978 <xPortStartScheduler+0x138>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f1c3 0307 	rsb	r3, r3, #7
 80058e2:	2b04      	cmp	r3, #4
 80058e4:	d00b      	beq.n	80058fe <xPortStartScheduler+0xbe>
	__asm volatile
 80058e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60bb      	str	r3, [r7, #8]
}
 80058f8:	bf00      	nop
 80058fa:	bf00      	nop
 80058fc:	e7fd      	b.n	80058fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80058fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <xPortStartScheduler+0x138>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	4a1c      	ldr	r2, [pc, #112]	@ (8005978 <xPortStartScheduler+0x138>)
 8005906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005908:	4b1b      	ldr	r3, [pc, #108]	@ (8005978 <xPortStartScheduler+0x138>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <xPortStartScheduler+0x138>)
 8005912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800591c:	4b17      	ldr	r3, [pc, #92]	@ (800597c <xPortStartScheduler+0x13c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a16      	ldr	r2, [pc, #88]	@ (800597c <xPortStartScheduler+0x13c>)
 8005922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005928:	4b14      	ldr	r3, [pc, #80]	@ (800597c <xPortStartScheduler+0x13c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a13      	ldr	r2, [pc, #76]	@ (800597c <xPortStartScheduler+0x13c>)
 800592e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005934:	f000 f8da 	bl	8005aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005938:	4b11      	ldr	r3, [pc, #68]	@ (8005980 <xPortStartScheduler+0x140>)
 800593a:	2200      	movs	r2, #0
 800593c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800593e:	f000 f8f9 	bl	8005b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005942:	4b10      	ldr	r3, [pc, #64]	@ (8005984 <xPortStartScheduler+0x144>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a0f      	ldr	r2, [pc, #60]	@ (8005984 <xPortStartScheduler+0x144>)
 8005948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800594c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800594e:	f7ff ff63 	bl	8005818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005952:	f7ff f82b 	bl	80049ac <vTaskSwitchContext>
	prvTaskExitError();
 8005956:	f7ff ff17 	bl	8005788 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3718      	adds	r7, #24
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed00 	.word	0xe000ed00
 8005968:	410fc271 	.word	0x410fc271
 800596c:	410fc270 	.word	0x410fc270
 8005970:	e000e400 	.word	0xe000e400
 8005974:	200010d8 	.word	0x200010d8
 8005978:	200010dc 	.word	0x200010dc
 800597c:	e000ed20 	.word	0xe000ed20
 8005980:	2000000c 	.word	0x2000000c
 8005984:	e000ef34 	.word	0xe000ef34

08005988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <vPortEnterCritical+0x5c>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	3301      	adds	r3, #1
 80059a8:	4a0e      	ldr	r2, [pc, #56]	@ (80059e4 <vPortEnterCritical+0x5c>)
 80059aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80059ac:	4b0d      	ldr	r3, [pc, #52]	@ (80059e4 <vPortEnterCritical+0x5c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d110      	bne.n	80059d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <vPortEnterCritical+0x60>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	603b      	str	r3, [r7, #0]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <vPortEnterCritical+0x4a>
	}
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	e000ed04 	.word	0xe000ed04

080059ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80059f2:	4b12      	ldr	r3, [pc, #72]	@ (8005a3c <vPortExitCritical+0x50>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d10b      	bne.n	8005a12 <vPortExitCritical+0x26>
	__asm volatile
 80059fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fe:	f383 8811 	msr	BASEPRI, r3
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	f3bf 8f4f 	dsb	sy
 8005a0a:	607b      	str	r3, [r7, #4]
}
 8005a0c:	bf00      	nop
 8005a0e:	bf00      	nop
 8005a10:	e7fd      	b.n	8005a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a12:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <vPortExitCritical+0x50>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	4a08      	ldr	r2, [pc, #32]	@ (8005a3c <vPortExitCritical+0x50>)
 8005a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a1c:	4b07      	ldr	r3, [pc, #28]	@ (8005a3c <vPortExitCritical+0x50>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <vPortExitCritical+0x44>
 8005a24:	2300      	movs	r3, #0
 8005a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	f383 8811 	msr	BASEPRI, r3
}
 8005a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000000c 	.word	0x2000000c

08005a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005a40:	f3ef 8009 	mrs	r0, PSP
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	4b15      	ldr	r3, [pc, #84]	@ (8005aa0 <pxCurrentTCBConst>)
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	f01e 0f10 	tst.w	lr, #16
 8005a50:	bf08      	it	eq
 8005a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a5a:	6010      	str	r0, [r2, #0]
 8005a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005a64:	f380 8811 	msr	BASEPRI, r0
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f7fe ff9c 	bl	80049ac <vTaskSwitchContext>
 8005a74:	f04f 0000 	mov.w	r0, #0
 8005a78:	f380 8811 	msr	BASEPRI, r0
 8005a7c:	bc09      	pop	{r0, r3}
 8005a7e:	6819      	ldr	r1, [r3, #0]
 8005a80:	6808      	ldr	r0, [r1, #0]
 8005a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a86:	f01e 0f10 	tst.w	lr, #16
 8005a8a:	bf08      	it	eq
 8005a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005a90:	f380 8809 	msr	PSP, r0
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	f3af 8000 	nop.w

08005aa0 <pxCurrentTCBConst>:
 8005aa0:	20000aac 	.word	0x20000aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005aa4:	bf00      	nop
 8005aa6:	bf00      	nop

08005aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	607b      	str	r3, [r7, #4]
}
 8005ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ac2:	f7fe feb9 	bl	8004838 <xTaskIncrementTick>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005acc:	4b06      	ldr	r3, [pc, #24]	@ (8005ae8 <xPortSysTickHandler+0x40>)
 8005ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ad2:	601a      	str	r2, [r3, #0]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f383 8811 	msr	BASEPRI, r3
}
 8005ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ae0:	bf00      	nop
 8005ae2:	3708      	adds	r7, #8
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	e000ed04 	.word	0xe000ed04

08005aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005aec:	b480      	push	{r7}
 8005aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005af0:	4b0b      	ldr	r3, [pc, #44]	@ (8005b20 <vPortSetupTimerInterrupt+0x34>)
 8005af2:	2200      	movs	r2, #0
 8005af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005af6:	4b0b      	ldr	r3, [pc, #44]	@ (8005b24 <vPortSetupTimerInterrupt+0x38>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005afc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b28 <vPortSetupTimerInterrupt+0x3c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a0a      	ldr	r2, [pc, #40]	@ (8005b2c <vPortSetupTimerInterrupt+0x40>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	4a09      	ldr	r2, [pc, #36]	@ (8005b30 <vPortSetupTimerInterrupt+0x44>)
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b0e:	4b04      	ldr	r3, [pc, #16]	@ (8005b20 <vPortSetupTimerInterrupt+0x34>)
 8005b10:	2207      	movs	r2, #7
 8005b12:	601a      	str	r2, [r3, #0]
}
 8005b14:	bf00      	nop
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	e000e010 	.word	0xe000e010
 8005b24:	e000e018 	.word	0xe000e018
 8005b28:	20000000 	.word	0x20000000
 8005b2c:	10624dd3 	.word	0x10624dd3
 8005b30:	e000e014 	.word	0xe000e014

08005b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005b44 <vPortEnableVFP+0x10>
 8005b38:	6801      	ldr	r1, [r0, #0]
 8005b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b3e:	6001      	str	r1, [r0, #0]
 8005b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005b42:	bf00      	nop
 8005b44:	e000ed88 	.word	0xe000ed88

08005b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005b4e:	f3ef 8305 	mrs	r3, IPSR
 8005b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2b0f      	cmp	r3, #15
 8005b58:	d915      	bls.n	8005b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <vPortValidateInterruptPriority+0x74>)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005b64:	4b16      	ldr	r3, [pc, #88]	@ (8005bc0 <vPortValidateInterruptPriority+0x78>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	7afa      	ldrb	r2, [r7, #11]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	d20b      	bcs.n	8005b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	e7fd      	b.n	8005b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005b86:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc4 <vPortValidateInterruptPriority+0x7c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc8 <vPortValidateInterruptPriority+0x80>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d90b      	bls.n	8005bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9a:	f383 8811 	msr	BASEPRI, r3
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	f3bf 8f4f 	dsb	sy
 8005ba6:	603b      	str	r3, [r7, #0]
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	e7fd      	b.n	8005baa <vPortValidateInterruptPriority+0x62>
	}
 8005bae:	bf00      	nop
 8005bb0:	3714      	adds	r7, #20
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	e000e3f0 	.word	0xe000e3f0
 8005bc0:	200010d8 	.word	0x200010d8
 8005bc4:	e000ed0c 	.word	0xe000ed0c
 8005bc8:	200010dc 	.word	0x200010dc

08005bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005bd8:	f7fe fd72 	bl	80046c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8005d50 <pvPortMalloc+0x184>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005be4:	f000 f924 	bl	8005e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005be8:	4b5a      	ldr	r3, [pc, #360]	@ (8005d54 <pvPortMalloc+0x188>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f040 8095 	bne.w	8005d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d01e      	beq.n	8005c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bfc:	2208      	movs	r2, #8
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4413      	add	r3, r2
 8005c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f003 0307 	and.w	r3, r3, #7
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d015      	beq.n	8005c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f023 0307 	bic.w	r3, r3, #7
 8005c14:	3308      	adds	r3, #8
 8005c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f003 0307 	and.w	r3, r3, #7
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00b      	beq.n	8005c3a <pvPortMalloc+0x6e>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	617b      	str	r3, [r7, #20]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d06f      	beq.n	8005d20 <pvPortMalloc+0x154>
 8005c40:	4b45      	ldr	r3, [pc, #276]	@ (8005d58 <pvPortMalloc+0x18c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d86a      	bhi.n	8005d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c4a:	4b44      	ldr	r3, [pc, #272]	@ (8005d5c <pvPortMalloc+0x190>)
 8005c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c4e:	4b43      	ldr	r3, [pc, #268]	@ (8005d5c <pvPortMalloc+0x190>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c54:	e004      	b.n	8005c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	687a      	ldr	r2, [r7, #4]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d903      	bls.n	8005c72 <pvPortMalloc+0xa6>
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1f1      	bne.n	8005c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c72:	4b37      	ldr	r3, [pc, #220]	@ (8005d50 <pvPortMalloc+0x184>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d051      	beq.n	8005d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	2208      	movs	r2, #8
 8005c82:	4413      	add	r3, r2
 8005c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	1ad2      	subs	r2, r2, r3
 8005c96:	2308      	movs	r3, #8
 8005c98:	005b      	lsls	r3, r3, #1
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d920      	bls.n	8005ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d00b      	beq.n	8005cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cca:	685a      	ldr	r2, [r3, #4]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	1ad2      	subs	r2, r2, r3
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005cda:	69b8      	ldr	r0, [r7, #24]
 8005cdc:	f000 f90a 	bl	8005ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8005d58 <pvPortMalloc+0x18c>)
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	4a1b      	ldr	r2, [pc, #108]	@ (8005d58 <pvPortMalloc+0x18c>)
 8005cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cee:	4b1a      	ldr	r3, [pc, #104]	@ (8005d58 <pvPortMalloc+0x18c>)
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8005d60 <pvPortMalloc+0x194>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d203      	bcs.n	8005d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cfa:	4b17      	ldr	r3, [pc, #92]	@ (8005d58 <pvPortMalloc+0x18c>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a18      	ldr	r2, [pc, #96]	@ (8005d60 <pvPortMalloc+0x194>)
 8005d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d04:	685a      	ldr	r2, [r3, #4]
 8005d06:	4b13      	ldr	r3, [pc, #76]	@ (8005d54 <pvPortMalloc+0x188>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	431a      	orrs	r2, r3
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	2200      	movs	r2, #0
 8005d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d16:	4b13      	ldr	r3, [pc, #76]	@ (8005d64 <pvPortMalloc+0x198>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	4a11      	ldr	r2, [pc, #68]	@ (8005d64 <pvPortMalloc+0x198>)
 8005d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d20:	f7fe fcdc 	bl	80046dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00b      	beq.n	8005d46 <pvPortMalloc+0x17a>
	__asm volatile
 8005d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d32:	f383 8811 	msr	BASEPRI, r3
 8005d36:	f3bf 8f6f 	isb	sy
 8005d3a:	f3bf 8f4f 	dsb	sy
 8005d3e:	60fb      	str	r3, [r7, #12]
}
 8005d40:	bf00      	nop
 8005d42:	bf00      	nop
 8005d44:	e7fd      	b.n	8005d42 <pvPortMalloc+0x176>
	return pvReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	@ 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20004ce8 	.word	0x20004ce8
 8005d54:	20004cfc 	.word	0x20004cfc
 8005d58:	20004cec 	.word	0x20004cec
 8005d5c:	20004ce0 	.word	0x20004ce0
 8005d60:	20004cf0 	.word	0x20004cf0
 8005d64:	20004cf4 	.word	0x20004cf4

08005d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d04f      	beq.n	8005e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d7a:	2308      	movs	r3, #8
 8005d7c:	425b      	negs	r3, r3
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	4b25      	ldr	r3, [pc, #148]	@ (8005e24 <vPortFree+0xbc>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4013      	ands	r3, r2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10b      	bne.n	8005dae <vPortFree+0x46>
	__asm volatile
 8005d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	60fb      	str	r3, [r7, #12]
}
 8005da8:	bf00      	nop
 8005daa:	bf00      	nop
 8005dac:	e7fd      	b.n	8005daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d00b      	beq.n	8005dce <vPortFree+0x66>
	__asm volatile
 8005db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	60bb      	str	r3, [r7, #8]
}
 8005dc8:	bf00      	nop
 8005dca:	bf00      	nop
 8005dcc:	e7fd      	b.n	8005dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b14      	ldr	r3, [pc, #80]	@ (8005e24 <vPortFree+0xbc>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d01e      	beq.n	8005e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d11a      	bne.n	8005e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e24 <vPortFree+0xbc>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005df4:	f7fe fc64 	bl	80046c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8005e28 <vPortFree+0xc0>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	4a09      	ldr	r2, [pc, #36]	@ (8005e28 <vPortFree+0xc0>)
 8005e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e06:	6938      	ldr	r0, [r7, #16]
 8005e08:	f000 f874 	bl	8005ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e0c:	4b07      	ldr	r3, [pc, #28]	@ (8005e2c <vPortFree+0xc4>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	3301      	adds	r3, #1
 8005e12:	4a06      	ldr	r2, [pc, #24]	@ (8005e2c <vPortFree+0xc4>)
 8005e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e16:	f7fe fc61 	bl	80046dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e1a:	bf00      	nop
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	20004cfc 	.word	0x20004cfc
 8005e28:	20004cec 	.word	0x20004cec
 8005e2c:	20004cf8 	.word	0x20004cf8

08005e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e3c:	4b27      	ldr	r3, [pc, #156]	@ (8005edc <prvHeapInit+0xac>)
 8005e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00c      	beq.n	8005e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	3307      	adds	r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0307 	bic.w	r3, r3, #7
 8005e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005edc <prvHeapInit+0xac>)
 8005e60:	4413      	add	r3, r2
 8005e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e68:	4a1d      	ldr	r2, [pc, #116]	@ (8005ee0 <prvHeapInit+0xb0>)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee0 <prvHeapInit+0xb0>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68ba      	ldr	r2, [r7, #8]
 8005e78:	4413      	add	r3, r2
 8005e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e7c:	2208      	movs	r2, #8
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	1a9b      	subs	r3, r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f023 0307 	bic.w	r3, r3, #7
 8005e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a15      	ldr	r2, [pc, #84]	@ (8005ee4 <prvHeapInit+0xb4>)
 8005e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <prvHeapInit+0xb4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2200      	movs	r2, #0
 8005e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e9a:	4b12      	ldr	r3, [pc, #72]	@ (8005ee4 <prvHeapInit+0xb4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	1ad2      	subs	r2, r2, r3
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee4 <prvHeapInit+0xb4>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8005ee8 <prvHeapInit+0xb8>)
 8005ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4a09      	ldr	r2, [pc, #36]	@ (8005eec <prvHeapInit+0xbc>)
 8005ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ec8:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <prvHeapInit+0xc0>)
 8005eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005ece:	601a      	str	r2, [r3, #0]
}
 8005ed0:	bf00      	nop
 8005ed2:	3714      	adds	r7, #20
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eda:	4770      	bx	lr
 8005edc:	200010e0 	.word	0x200010e0
 8005ee0:	20004ce0 	.word	0x20004ce0
 8005ee4:	20004ce8 	.word	0x20004ce8
 8005ee8:	20004cf0 	.word	0x20004cf0
 8005eec:	20004cec 	.word	0x20004cec
 8005ef0:	20004cfc 	.word	0x20004cfc

08005ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005efc:	4b28      	ldr	r3, [pc, #160]	@ (8005fa0 <prvInsertBlockIntoFreeList+0xac>)
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	e002      	b.n	8005f08 <prvInsertBlockIntoFreeList+0x14>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d8f7      	bhi.n	8005f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	68ba      	ldr	r2, [r7, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	429a      	cmp	r2, r3
 8005f22:	d108      	bne.n	8005f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	441a      	add	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d118      	bne.n	8005f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4b15      	ldr	r3, [pc, #84]	@ (8005fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d00d      	beq.n	8005f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	441a      	add	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	681a      	ldr	r2, [r3, #0]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e008      	b.n	8005f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f72:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	601a      	str	r2, [r3, #0]
 8005f7a:	e003      	b.n	8005f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d002      	beq.n	8005f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20004ce0 	.word	0x20004ce0
 8005fa4:	20004ce8 	.word	0x20004ce8

08005fa8 <__cvt>:
 8005fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fac:	ec57 6b10 	vmov	r6, r7, d0
 8005fb0:	2f00      	cmp	r7, #0
 8005fb2:	460c      	mov	r4, r1
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	bfbb      	ittet	lt
 8005fba:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005fbe:	461f      	movlt	r7, r3
 8005fc0:	2300      	movge	r3, #0
 8005fc2:	232d      	movlt	r3, #45	@ 0x2d
 8005fc4:	700b      	strb	r3, [r1, #0]
 8005fc6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005fc8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005fcc:	4691      	mov	r9, r2
 8005fce:	f023 0820 	bic.w	r8, r3, #32
 8005fd2:	bfbc      	itt	lt
 8005fd4:	4632      	movlt	r2, r6
 8005fd6:	4616      	movlt	r6, r2
 8005fd8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005fdc:	d005      	beq.n	8005fea <__cvt+0x42>
 8005fde:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005fe2:	d100      	bne.n	8005fe6 <__cvt+0x3e>
 8005fe4:	3401      	adds	r4, #1
 8005fe6:	2102      	movs	r1, #2
 8005fe8:	e000      	b.n	8005fec <__cvt+0x44>
 8005fea:	2103      	movs	r1, #3
 8005fec:	ab03      	add	r3, sp, #12
 8005fee:	9301      	str	r3, [sp, #4]
 8005ff0:	ab02      	add	r3, sp, #8
 8005ff2:	9300      	str	r3, [sp, #0]
 8005ff4:	ec47 6b10 	vmov	d0, r6, r7
 8005ff8:	4653      	mov	r3, sl
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	f000 fed4 	bl	8006da8 <_dtoa_r>
 8006000:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006004:	4605      	mov	r5, r0
 8006006:	d119      	bne.n	800603c <__cvt+0x94>
 8006008:	f019 0f01 	tst.w	r9, #1
 800600c:	d00e      	beq.n	800602c <__cvt+0x84>
 800600e:	eb00 0904 	add.w	r9, r0, r4
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4630      	mov	r0, r6
 8006018:	4639      	mov	r1, r7
 800601a:	f7fa fd55 	bl	8000ac8 <__aeabi_dcmpeq>
 800601e:	b108      	cbz	r0, 8006024 <__cvt+0x7c>
 8006020:	f8cd 900c 	str.w	r9, [sp, #12]
 8006024:	2230      	movs	r2, #48	@ 0x30
 8006026:	9b03      	ldr	r3, [sp, #12]
 8006028:	454b      	cmp	r3, r9
 800602a:	d31e      	bcc.n	800606a <__cvt+0xc2>
 800602c:	9b03      	ldr	r3, [sp, #12]
 800602e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006030:	1b5b      	subs	r3, r3, r5
 8006032:	4628      	mov	r0, r5
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	b004      	add	sp, #16
 8006038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800603c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006040:	eb00 0904 	add.w	r9, r0, r4
 8006044:	d1e5      	bne.n	8006012 <__cvt+0x6a>
 8006046:	7803      	ldrb	r3, [r0, #0]
 8006048:	2b30      	cmp	r3, #48	@ 0x30
 800604a:	d10a      	bne.n	8006062 <__cvt+0xba>
 800604c:	2200      	movs	r2, #0
 800604e:	2300      	movs	r3, #0
 8006050:	4630      	mov	r0, r6
 8006052:	4639      	mov	r1, r7
 8006054:	f7fa fd38 	bl	8000ac8 <__aeabi_dcmpeq>
 8006058:	b918      	cbnz	r0, 8006062 <__cvt+0xba>
 800605a:	f1c4 0401 	rsb	r4, r4, #1
 800605e:	f8ca 4000 	str.w	r4, [sl]
 8006062:	f8da 3000 	ldr.w	r3, [sl]
 8006066:	4499      	add	r9, r3
 8006068:	e7d3      	b.n	8006012 <__cvt+0x6a>
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	9103      	str	r1, [sp, #12]
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e7d9      	b.n	8006026 <__cvt+0x7e>

08006072 <__exponent>:
 8006072:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006074:	2900      	cmp	r1, #0
 8006076:	bfba      	itte	lt
 8006078:	4249      	neglt	r1, r1
 800607a:	232d      	movlt	r3, #45	@ 0x2d
 800607c:	232b      	movge	r3, #43	@ 0x2b
 800607e:	2909      	cmp	r1, #9
 8006080:	7002      	strb	r2, [r0, #0]
 8006082:	7043      	strb	r3, [r0, #1]
 8006084:	dd29      	ble.n	80060da <__exponent+0x68>
 8006086:	f10d 0307 	add.w	r3, sp, #7
 800608a:	461d      	mov	r5, r3
 800608c:	270a      	movs	r7, #10
 800608e:	461a      	mov	r2, r3
 8006090:	fbb1 f6f7 	udiv	r6, r1, r7
 8006094:	fb07 1416 	mls	r4, r7, r6, r1
 8006098:	3430      	adds	r4, #48	@ 0x30
 800609a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800609e:	460c      	mov	r4, r1
 80060a0:	2c63      	cmp	r4, #99	@ 0x63
 80060a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060a6:	4631      	mov	r1, r6
 80060a8:	dcf1      	bgt.n	800608e <__exponent+0x1c>
 80060aa:	3130      	adds	r1, #48	@ 0x30
 80060ac:	1e94      	subs	r4, r2, #2
 80060ae:	f803 1c01 	strb.w	r1, [r3, #-1]
 80060b2:	1c41      	adds	r1, r0, #1
 80060b4:	4623      	mov	r3, r4
 80060b6:	42ab      	cmp	r3, r5
 80060b8:	d30a      	bcc.n	80060d0 <__exponent+0x5e>
 80060ba:	f10d 0309 	add.w	r3, sp, #9
 80060be:	1a9b      	subs	r3, r3, r2
 80060c0:	42ac      	cmp	r4, r5
 80060c2:	bf88      	it	hi
 80060c4:	2300      	movhi	r3, #0
 80060c6:	3302      	adds	r3, #2
 80060c8:	4403      	add	r3, r0
 80060ca:	1a18      	subs	r0, r3, r0
 80060cc:	b003      	add	sp, #12
 80060ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80060d4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80060d8:	e7ed      	b.n	80060b6 <__exponent+0x44>
 80060da:	2330      	movs	r3, #48	@ 0x30
 80060dc:	3130      	adds	r1, #48	@ 0x30
 80060de:	7083      	strb	r3, [r0, #2]
 80060e0:	70c1      	strb	r1, [r0, #3]
 80060e2:	1d03      	adds	r3, r0, #4
 80060e4:	e7f1      	b.n	80060ca <__exponent+0x58>
	...

080060e8 <_printf_float>:
 80060e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ec:	b08d      	sub	sp, #52	@ 0x34
 80060ee:	460c      	mov	r4, r1
 80060f0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80060f4:	4616      	mov	r6, r2
 80060f6:	461f      	mov	r7, r3
 80060f8:	4605      	mov	r5, r0
 80060fa:	f000 fcef 	bl	8006adc <_localeconv_r>
 80060fe:	6803      	ldr	r3, [r0, #0]
 8006100:	9304      	str	r3, [sp, #16]
 8006102:	4618      	mov	r0, r3
 8006104:	f7fa f8b4 	bl	8000270 <strlen>
 8006108:	2300      	movs	r3, #0
 800610a:	930a      	str	r3, [sp, #40]	@ 0x28
 800610c:	f8d8 3000 	ldr.w	r3, [r8]
 8006110:	9005      	str	r0, [sp, #20]
 8006112:	3307      	adds	r3, #7
 8006114:	f023 0307 	bic.w	r3, r3, #7
 8006118:	f103 0208 	add.w	r2, r3, #8
 800611c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006120:	f8d4 b000 	ldr.w	fp, [r4]
 8006124:	f8c8 2000 	str.w	r2, [r8]
 8006128:	e9d3 8900 	ldrd	r8, r9, [r3]
 800612c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006130:	9307      	str	r3, [sp, #28]
 8006132:	f8cd 8018 	str.w	r8, [sp, #24]
 8006136:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800613a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800613e:	4b9c      	ldr	r3, [pc, #624]	@ (80063b0 <_printf_float+0x2c8>)
 8006140:	f04f 32ff 	mov.w	r2, #4294967295
 8006144:	f7fa fcf2 	bl	8000b2c <__aeabi_dcmpun>
 8006148:	bb70      	cbnz	r0, 80061a8 <_printf_float+0xc0>
 800614a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800614e:	4b98      	ldr	r3, [pc, #608]	@ (80063b0 <_printf_float+0x2c8>)
 8006150:	f04f 32ff 	mov.w	r2, #4294967295
 8006154:	f7fa fccc 	bl	8000af0 <__aeabi_dcmple>
 8006158:	bb30      	cbnz	r0, 80061a8 <_printf_float+0xc0>
 800615a:	2200      	movs	r2, #0
 800615c:	2300      	movs	r3, #0
 800615e:	4640      	mov	r0, r8
 8006160:	4649      	mov	r1, r9
 8006162:	f7fa fcbb 	bl	8000adc <__aeabi_dcmplt>
 8006166:	b110      	cbz	r0, 800616e <_printf_float+0x86>
 8006168:	232d      	movs	r3, #45	@ 0x2d
 800616a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800616e:	4a91      	ldr	r2, [pc, #580]	@ (80063b4 <_printf_float+0x2cc>)
 8006170:	4b91      	ldr	r3, [pc, #580]	@ (80063b8 <_printf_float+0x2d0>)
 8006172:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006176:	bf94      	ite	ls
 8006178:	4690      	movls	r8, r2
 800617a:	4698      	movhi	r8, r3
 800617c:	2303      	movs	r3, #3
 800617e:	6123      	str	r3, [r4, #16]
 8006180:	f02b 0304 	bic.w	r3, fp, #4
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	f04f 0900 	mov.w	r9, #0
 800618a:	9700      	str	r7, [sp, #0]
 800618c:	4633      	mov	r3, r6
 800618e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006190:	4621      	mov	r1, r4
 8006192:	4628      	mov	r0, r5
 8006194:	f000 f9d2 	bl	800653c <_printf_common>
 8006198:	3001      	adds	r0, #1
 800619a:	f040 808d 	bne.w	80062b8 <_printf_float+0x1d0>
 800619e:	f04f 30ff 	mov.w	r0, #4294967295
 80061a2:	b00d      	add	sp, #52	@ 0x34
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	4640      	mov	r0, r8
 80061ae:	4649      	mov	r1, r9
 80061b0:	f7fa fcbc 	bl	8000b2c <__aeabi_dcmpun>
 80061b4:	b140      	cbz	r0, 80061c8 <_printf_float+0xe0>
 80061b6:	464b      	mov	r3, r9
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	bfbc      	itt	lt
 80061bc:	232d      	movlt	r3, #45	@ 0x2d
 80061be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80061c2:	4a7e      	ldr	r2, [pc, #504]	@ (80063bc <_printf_float+0x2d4>)
 80061c4:	4b7e      	ldr	r3, [pc, #504]	@ (80063c0 <_printf_float+0x2d8>)
 80061c6:	e7d4      	b.n	8006172 <_printf_float+0x8a>
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80061ce:	9206      	str	r2, [sp, #24]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	d13b      	bne.n	800624c <_printf_float+0x164>
 80061d4:	2306      	movs	r3, #6
 80061d6:	6063      	str	r3, [r4, #4]
 80061d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80061dc:	2300      	movs	r3, #0
 80061de:	6022      	str	r2, [r4, #0]
 80061e0:	9303      	str	r3, [sp, #12]
 80061e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80061e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80061e8:	ab09      	add	r3, sp, #36	@ 0x24
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	6861      	ldr	r1, [r4, #4]
 80061ee:	ec49 8b10 	vmov	d0, r8, r9
 80061f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80061f6:	4628      	mov	r0, r5
 80061f8:	f7ff fed6 	bl	8005fa8 <__cvt>
 80061fc:	9b06      	ldr	r3, [sp, #24]
 80061fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006200:	2b47      	cmp	r3, #71	@ 0x47
 8006202:	4680      	mov	r8, r0
 8006204:	d129      	bne.n	800625a <_printf_float+0x172>
 8006206:	1cc8      	adds	r0, r1, #3
 8006208:	db02      	blt.n	8006210 <_printf_float+0x128>
 800620a:	6863      	ldr	r3, [r4, #4]
 800620c:	4299      	cmp	r1, r3
 800620e:	dd41      	ble.n	8006294 <_printf_float+0x1ac>
 8006210:	f1aa 0a02 	sub.w	sl, sl, #2
 8006214:	fa5f fa8a 	uxtb.w	sl, sl
 8006218:	3901      	subs	r1, #1
 800621a:	4652      	mov	r2, sl
 800621c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006220:	9109      	str	r1, [sp, #36]	@ 0x24
 8006222:	f7ff ff26 	bl	8006072 <__exponent>
 8006226:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006228:	1813      	adds	r3, r2, r0
 800622a:	2a01      	cmp	r2, #1
 800622c:	4681      	mov	r9, r0
 800622e:	6123      	str	r3, [r4, #16]
 8006230:	dc02      	bgt.n	8006238 <_printf_float+0x150>
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	07d2      	lsls	r2, r2, #31
 8006236:	d501      	bpl.n	800623c <_printf_float+0x154>
 8006238:	3301      	adds	r3, #1
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0a2      	beq.n	800618a <_printf_float+0xa2>
 8006244:	232d      	movs	r3, #45	@ 0x2d
 8006246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800624a:	e79e      	b.n	800618a <_printf_float+0xa2>
 800624c:	9a06      	ldr	r2, [sp, #24]
 800624e:	2a47      	cmp	r2, #71	@ 0x47
 8006250:	d1c2      	bne.n	80061d8 <_printf_float+0xf0>
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1c0      	bne.n	80061d8 <_printf_float+0xf0>
 8006256:	2301      	movs	r3, #1
 8006258:	e7bd      	b.n	80061d6 <_printf_float+0xee>
 800625a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800625e:	d9db      	bls.n	8006218 <_printf_float+0x130>
 8006260:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006264:	d118      	bne.n	8006298 <_printf_float+0x1b0>
 8006266:	2900      	cmp	r1, #0
 8006268:	6863      	ldr	r3, [r4, #4]
 800626a:	dd0b      	ble.n	8006284 <_printf_float+0x19c>
 800626c:	6121      	str	r1, [r4, #16]
 800626e:	b913      	cbnz	r3, 8006276 <_printf_float+0x18e>
 8006270:	6822      	ldr	r2, [r4, #0]
 8006272:	07d0      	lsls	r0, r2, #31
 8006274:	d502      	bpl.n	800627c <_printf_float+0x194>
 8006276:	3301      	adds	r3, #1
 8006278:	440b      	add	r3, r1
 800627a:	6123      	str	r3, [r4, #16]
 800627c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800627e:	f04f 0900 	mov.w	r9, #0
 8006282:	e7db      	b.n	800623c <_printf_float+0x154>
 8006284:	b913      	cbnz	r3, 800628c <_printf_float+0x1a4>
 8006286:	6822      	ldr	r2, [r4, #0]
 8006288:	07d2      	lsls	r2, r2, #31
 800628a:	d501      	bpl.n	8006290 <_printf_float+0x1a8>
 800628c:	3302      	adds	r3, #2
 800628e:	e7f4      	b.n	800627a <_printf_float+0x192>
 8006290:	2301      	movs	r3, #1
 8006292:	e7f2      	b.n	800627a <_printf_float+0x192>
 8006294:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006298:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800629a:	4299      	cmp	r1, r3
 800629c:	db05      	blt.n	80062aa <_printf_float+0x1c2>
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	6121      	str	r1, [r4, #16]
 80062a2:	07d8      	lsls	r0, r3, #31
 80062a4:	d5ea      	bpl.n	800627c <_printf_float+0x194>
 80062a6:	1c4b      	adds	r3, r1, #1
 80062a8:	e7e7      	b.n	800627a <_printf_float+0x192>
 80062aa:	2900      	cmp	r1, #0
 80062ac:	bfd4      	ite	le
 80062ae:	f1c1 0202 	rsble	r2, r1, #2
 80062b2:	2201      	movgt	r2, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	e7e0      	b.n	800627a <_printf_float+0x192>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	055a      	lsls	r2, r3, #21
 80062bc:	d407      	bmi.n	80062ce <_printf_float+0x1e6>
 80062be:	6923      	ldr	r3, [r4, #16]
 80062c0:	4642      	mov	r2, r8
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	d12b      	bne.n	8006324 <_printf_float+0x23c>
 80062cc:	e767      	b.n	800619e <_printf_float+0xb6>
 80062ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80062d2:	f240 80dd 	bls.w	8006490 <_printf_float+0x3a8>
 80062d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062da:	2200      	movs	r2, #0
 80062dc:	2300      	movs	r3, #0
 80062de:	f7fa fbf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d033      	beq.n	800634e <_printf_float+0x266>
 80062e6:	4a37      	ldr	r2, [pc, #220]	@ (80063c4 <_printf_float+0x2dc>)
 80062e8:	2301      	movs	r3, #1
 80062ea:	4631      	mov	r1, r6
 80062ec:	4628      	mov	r0, r5
 80062ee:	47b8      	blx	r7
 80062f0:	3001      	adds	r0, #1
 80062f2:	f43f af54 	beq.w	800619e <_printf_float+0xb6>
 80062f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80062fa:	4543      	cmp	r3, r8
 80062fc:	db02      	blt.n	8006304 <_printf_float+0x21c>
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	07d8      	lsls	r0, r3, #31
 8006302:	d50f      	bpl.n	8006324 <_printf_float+0x23c>
 8006304:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006308:	4631      	mov	r1, r6
 800630a:	4628      	mov	r0, r5
 800630c:	47b8      	blx	r7
 800630e:	3001      	adds	r0, #1
 8006310:	f43f af45 	beq.w	800619e <_printf_float+0xb6>
 8006314:	f04f 0900 	mov.w	r9, #0
 8006318:	f108 38ff 	add.w	r8, r8, #4294967295
 800631c:	f104 0a1a 	add.w	sl, r4, #26
 8006320:	45c8      	cmp	r8, r9
 8006322:	dc09      	bgt.n	8006338 <_printf_float+0x250>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	079b      	lsls	r3, r3, #30
 8006328:	f100 8103 	bmi.w	8006532 <_printf_float+0x44a>
 800632c:	68e0      	ldr	r0, [r4, #12]
 800632e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006330:	4298      	cmp	r0, r3
 8006332:	bfb8      	it	lt
 8006334:	4618      	movlt	r0, r3
 8006336:	e734      	b.n	80061a2 <_printf_float+0xba>
 8006338:	2301      	movs	r3, #1
 800633a:	4652      	mov	r2, sl
 800633c:	4631      	mov	r1, r6
 800633e:	4628      	mov	r0, r5
 8006340:	47b8      	blx	r7
 8006342:	3001      	adds	r0, #1
 8006344:	f43f af2b 	beq.w	800619e <_printf_float+0xb6>
 8006348:	f109 0901 	add.w	r9, r9, #1
 800634c:	e7e8      	b.n	8006320 <_printf_float+0x238>
 800634e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006350:	2b00      	cmp	r3, #0
 8006352:	dc39      	bgt.n	80063c8 <_printf_float+0x2e0>
 8006354:	4a1b      	ldr	r2, [pc, #108]	@ (80063c4 <_printf_float+0x2dc>)
 8006356:	2301      	movs	r3, #1
 8006358:	4631      	mov	r1, r6
 800635a:	4628      	mov	r0, r5
 800635c:	47b8      	blx	r7
 800635e:	3001      	adds	r0, #1
 8006360:	f43f af1d 	beq.w	800619e <_printf_float+0xb6>
 8006364:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006368:	ea59 0303 	orrs.w	r3, r9, r3
 800636c:	d102      	bne.n	8006374 <_printf_float+0x28c>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	07d9      	lsls	r1, r3, #31
 8006372:	d5d7      	bpl.n	8006324 <_printf_float+0x23c>
 8006374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006378:	4631      	mov	r1, r6
 800637a:	4628      	mov	r0, r5
 800637c:	47b8      	blx	r7
 800637e:	3001      	adds	r0, #1
 8006380:	f43f af0d 	beq.w	800619e <_printf_float+0xb6>
 8006384:	f04f 0a00 	mov.w	sl, #0
 8006388:	f104 0b1a 	add.w	fp, r4, #26
 800638c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800638e:	425b      	negs	r3, r3
 8006390:	4553      	cmp	r3, sl
 8006392:	dc01      	bgt.n	8006398 <_printf_float+0x2b0>
 8006394:	464b      	mov	r3, r9
 8006396:	e793      	b.n	80062c0 <_printf_float+0x1d8>
 8006398:	2301      	movs	r3, #1
 800639a:	465a      	mov	r2, fp
 800639c:	4631      	mov	r1, r6
 800639e:	4628      	mov	r0, r5
 80063a0:	47b8      	blx	r7
 80063a2:	3001      	adds	r0, #1
 80063a4:	f43f aefb 	beq.w	800619e <_printf_float+0xb6>
 80063a8:	f10a 0a01 	add.w	sl, sl, #1
 80063ac:	e7ee      	b.n	800638c <_printf_float+0x2a4>
 80063ae:	bf00      	nop
 80063b0:	7fefffff 	.word	0x7fefffff
 80063b4:	08008e9c 	.word	0x08008e9c
 80063b8:	08008ea0 	.word	0x08008ea0
 80063bc:	08008ea4 	.word	0x08008ea4
 80063c0:	08008ea8 	.word	0x08008ea8
 80063c4:	08008eac 	.word	0x08008eac
 80063c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80063ce:	4553      	cmp	r3, sl
 80063d0:	bfa8      	it	ge
 80063d2:	4653      	movge	r3, sl
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	4699      	mov	r9, r3
 80063d8:	dc36      	bgt.n	8006448 <_printf_float+0x360>
 80063da:	f04f 0b00 	mov.w	fp, #0
 80063de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80063e2:	f104 021a 	add.w	r2, r4, #26
 80063e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80063e8:	9306      	str	r3, [sp, #24]
 80063ea:	eba3 0309 	sub.w	r3, r3, r9
 80063ee:	455b      	cmp	r3, fp
 80063f0:	dc31      	bgt.n	8006456 <_printf_float+0x36e>
 80063f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063f4:	459a      	cmp	sl, r3
 80063f6:	dc3a      	bgt.n	800646e <_printf_float+0x386>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	07da      	lsls	r2, r3, #31
 80063fc:	d437      	bmi.n	800646e <_printf_float+0x386>
 80063fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006400:	ebaa 0903 	sub.w	r9, sl, r3
 8006404:	9b06      	ldr	r3, [sp, #24]
 8006406:	ebaa 0303 	sub.w	r3, sl, r3
 800640a:	4599      	cmp	r9, r3
 800640c:	bfa8      	it	ge
 800640e:	4699      	movge	r9, r3
 8006410:	f1b9 0f00 	cmp.w	r9, #0
 8006414:	dc33      	bgt.n	800647e <_printf_float+0x396>
 8006416:	f04f 0800 	mov.w	r8, #0
 800641a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800641e:	f104 0b1a 	add.w	fp, r4, #26
 8006422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006424:	ebaa 0303 	sub.w	r3, sl, r3
 8006428:	eba3 0309 	sub.w	r3, r3, r9
 800642c:	4543      	cmp	r3, r8
 800642e:	f77f af79 	ble.w	8006324 <_printf_float+0x23c>
 8006432:	2301      	movs	r3, #1
 8006434:	465a      	mov	r2, fp
 8006436:	4631      	mov	r1, r6
 8006438:	4628      	mov	r0, r5
 800643a:	47b8      	blx	r7
 800643c:	3001      	adds	r0, #1
 800643e:	f43f aeae 	beq.w	800619e <_printf_float+0xb6>
 8006442:	f108 0801 	add.w	r8, r8, #1
 8006446:	e7ec      	b.n	8006422 <_printf_float+0x33a>
 8006448:	4642      	mov	r2, r8
 800644a:	4631      	mov	r1, r6
 800644c:	4628      	mov	r0, r5
 800644e:	47b8      	blx	r7
 8006450:	3001      	adds	r0, #1
 8006452:	d1c2      	bne.n	80063da <_printf_float+0x2f2>
 8006454:	e6a3      	b.n	800619e <_printf_float+0xb6>
 8006456:	2301      	movs	r3, #1
 8006458:	4631      	mov	r1, r6
 800645a:	4628      	mov	r0, r5
 800645c:	9206      	str	r2, [sp, #24]
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	f43f ae9c 	beq.w	800619e <_printf_float+0xb6>
 8006466:	9a06      	ldr	r2, [sp, #24]
 8006468:	f10b 0b01 	add.w	fp, fp, #1
 800646c:	e7bb      	b.n	80063e6 <_printf_float+0x2fe>
 800646e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006472:	4631      	mov	r1, r6
 8006474:	4628      	mov	r0, r5
 8006476:	47b8      	blx	r7
 8006478:	3001      	adds	r0, #1
 800647a:	d1c0      	bne.n	80063fe <_printf_float+0x316>
 800647c:	e68f      	b.n	800619e <_printf_float+0xb6>
 800647e:	9a06      	ldr	r2, [sp, #24]
 8006480:	464b      	mov	r3, r9
 8006482:	4442      	add	r2, r8
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	d1c3      	bne.n	8006416 <_printf_float+0x32e>
 800648e:	e686      	b.n	800619e <_printf_float+0xb6>
 8006490:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006494:	f1ba 0f01 	cmp.w	sl, #1
 8006498:	dc01      	bgt.n	800649e <_printf_float+0x3b6>
 800649a:	07db      	lsls	r3, r3, #31
 800649c:	d536      	bpl.n	800650c <_printf_float+0x424>
 800649e:	2301      	movs	r3, #1
 80064a0:	4642      	mov	r2, r8
 80064a2:	4631      	mov	r1, r6
 80064a4:	4628      	mov	r0, r5
 80064a6:	47b8      	blx	r7
 80064a8:	3001      	adds	r0, #1
 80064aa:	f43f ae78 	beq.w	800619e <_printf_float+0xb6>
 80064ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064b2:	4631      	mov	r1, r6
 80064b4:	4628      	mov	r0, r5
 80064b6:	47b8      	blx	r7
 80064b8:	3001      	adds	r0, #1
 80064ba:	f43f ae70 	beq.w	800619e <_printf_float+0xb6>
 80064be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064c2:	2200      	movs	r2, #0
 80064c4:	2300      	movs	r3, #0
 80064c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ca:	f7fa fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80064ce:	b9c0      	cbnz	r0, 8006502 <_printf_float+0x41a>
 80064d0:	4653      	mov	r3, sl
 80064d2:	f108 0201 	add.w	r2, r8, #1
 80064d6:	4631      	mov	r1, r6
 80064d8:	4628      	mov	r0, r5
 80064da:	47b8      	blx	r7
 80064dc:	3001      	adds	r0, #1
 80064de:	d10c      	bne.n	80064fa <_printf_float+0x412>
 80064e0:	e65d      	b.n	800619e <_printf_float+0xb6>
 80064e2:	2301      	movs	r3, #1
 80064e4:	465a      	mov	r2, fp
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	f43f ae56 	beq.w	800619e <_printf_float+0xb6>
 80064f2:	f108 0801 	add.w	r8, r8, #1
 80064f6:	45d0      	cmp	r8, sl
 80064f8:	dbf3      	blt.n	80064e2 <_printf_float+0x3fa>
 80064fa:	464b      	mov	r3, r9
 80064fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006500:	e6df      	b.n	80062c2 <_printf_float+0x1da>
 8006502:	f04f 0800 	mov.w	r8, #0
 8006506:	f104 0b1a 	add.w	fp, r4, #26
 800650a:	e7f4      	b.n	80064f6 <_printf_float+0x40e>
 800650c:	2301      	movs	r3, #1
 800650e:	4642      	mov	r2, r8
 8006510:	e7e1      	b.n	80064d6 <_printf_float+0x3ee>
 8006512:	2301      	movs	r3, #1
 8006514:	464a      	mov	r2, r9
 8006516:	4631      	mov	r1, r6
 8006518:	4628      	mov	r0, r5
 800651a:	47b8      	blx	r7
 800651c:	3001      	adds	r0, #1
 800651e:	f43f ae3e 	beq.w	800619e <_printf_float+0xb6>
 8006522:	f108 0801 	add.w	r8, r8, #1
 8006526:	68e3      	ldr	r3, [r4, #12]
 8006528:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800652a:	1a5b      	subs	r3, r3, r1
 800652c:	4543      	cmp	r3, r8
 800652e:	dcf0      	bgt.n	8006512 <_printf_float+0x42a>
 8006530:	e6fc      	b.n	800632c <_printf_float+0x244>
 8006532:	f04f 0800 	mov.w	r8, #0
 8006536:	f104 0919 	add.w	r9, r4, #25
 800653a:	e7f4      	b.n	8006526 <_printf_float+0x43e>

0800653c <_printf_common>:
 800653c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006540:	4616      	mov	r6, r2
 8006542:	4698      	mov	r8, r3
 8006544:	688a      	ldr	r2, [r1, #8]
 8006546:	690b      	ldr	r3, [r1, #16]
 8006548:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800654c:	4293      	cmp	r3, r2
 800654e:	bfb8      	it	lt
 8006550:	4613      	movlt	r3, r2
 8006552:	6033      	str	r3, [r6, #0]
 8006554:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006558:	4607      	mov	r7, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b10a      	cbz	r2, 8006562 <_printf_common+0x26>
 800655e:	3301      	adds	r3, #1
 8006560:	6033      	str	r3, [r6, #0]
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	0699      	lsls	r1, r3, #26
 8006566:	bf42      	ittt	mi
 8006568:	6833      	ldrmi	r3, [r6, #0]
 800656a:	3302      	addmi	r3, #2
 800656c:	6033      	strmi	r3, [r6, #0]
 800656e:	6825      	ldr	r5, [r4, #0]
 8006570:	f015 0506 	ands.w	r5, r5, #6
 8006574:	d106      	bne.n	8006584 <_printf_common+0x48>
 8006576:	f104 0a19 	add.w	sl, r4, #25
 800657a:	68e3      	ldr	r3, [r4, #12]
 800657c:	6832      	ldr	r2, [r6, #0]
 800657e:	1a9b      	subs	r3, r3, r2
 8006580:	42ab      	cmp	r3, r5
 8006582:	dc26      	bgt.n	80065d2 <_printf_common+0x96>
 8006584:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	3b00      	subs	r3, #0
 800658c:	bf18      	it	ne
 800658e:	2301      	movne	r3, #1
 8006590:	0692      	lsls	r2, r2, #26
 8006592:	d42b      	bmi.n	80065ec <_printf_common+0xb0>
 8006594:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006598:	4641      	mov	r1, r8
 800659a:	4638      	mov	r0, r7
 800659c:	47c8      	blx	r9
 800659e:	3001      	adds	r0, #1
 80065a0:	d01e      	beq.n	80065e0 <_printf_common+0xa4>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	6922      	ldr	r2, [r4, #16]
 80065a6:	f003 0306 	and.w	r3, r3, #6
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	bf02      	ittt	eq
 80065ae:	68e5      	ldreq	r5, [r4, #12]
 80065b0:	6833      	ldreq	r3, [r6, #0]
 80065b2:	1aed      	subeq	r5, r5, r3
 80065b4:	68a3      	ldr	r3, [r4, #8]
 80065b6:	bf0c      	ite	eq
 80065b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065bc:	2500      	movne	r5, #0
 80065be:	4293      	cmp	r3, r2
 80065c0:	bfc4      	itt	gt
 80065c2:	1a9b      	subgt	r3, r3, r2
 80065c4:	18ed      	addgt	r5, r5, r3
 80065c6:	2600      	movs	r6, #0
 80065c8:	341a      	adds	r4, #26
 80065ca:	42b5      	cmp	r5, r6
 80065cc:	d11a      	bne.n	8006604 <_printf_common+0xc8>
 80065ce:	2000      	movs	r0, #0
 80065d0:	e008      	b.n	80065e4 <_printf_common+0xa8>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4652      	mov	r2, sl
 80065d6:	4641      	mov	r1, r8
 80065d8:	4638      	mov	r0, r7
 80065da:	47c8      	blx	r9
 80065dc:	3001      	adds	r0, #1
 80065de:	d103      	bne.n	80065e8 <_printf_common+0xac>
 80065e0:	f04f 30ff 	mov.w	r0, #4294967295
 80065e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e8:	3501      	adds	r5, #1
 80065ea:	e7c6      	b.n	800657a <_printf_common+0x3e>
 80065ec:	18e1      	adds	r1, r4, r3
 80065ee:	1c5a      	adds	r2, r3, #1
 80065f0:	2030      	movs	r0, #48	@ 0x30
 80065f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80065f6:	4422      	add	r2, r4
 80065f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80065fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006600:	3302      	adds	r3, #2
 8006602:	e7c7      	b.n	8006594 <_printf_common+0x58>
 8006604:	2301      	movs	r3, #1
 8006606:	4622      	mov	r2, r4
 8006608:	4641      	mov	r1, r8
 800660a:	4638      	mov	r0, r7
 800660c:	47c8      	blx	r9
 800660e:	3001      	adds	r0, #1
 8006610:	d0e6      	beq.n	80065e0 <_printf_common+0xa4>
 8006612:	3601      	adds	r6, #1
 8006614:	e7d9      	b.n	80065ca <_printf_common+0x8e>
	...

08006618 <_printf_i>:
 8006618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800661c:	7e0f      	ldrb	r7, [r1, #24]
 800661e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006620:	2f78      	cmp	r7, #120	@ 0x78
 8006622:	4691      	mov	r9, r2
 8006624:	4680      	mov	r8, r0
 8006626:	460c      	mov	r4, r1
 8006628:	469a      	mov	sl, r3
 800662a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800662e:	d807      	bhi.n	8006640 <_printf_i+0x28>
 8006630:	2f62      	cmp	r7, #98	@ 0x62
 8006632:	d80a      	bhi.n	800664a <_printf_i+0x32>
 8006634:	2f00      	cmp	r7, #0
 8006636:	f000 80d2 	beq.w	80067de <_printf_i+0x1c6>
 800663a:	2f58      	cmp	r7, #88	@ 0x58
 800663c:	f000 80b9 	beq.w	80067b2 <_printf_i+0x19a>
 8006640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006644:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006648:	e03a      	b.n	80066c0 <_printf_i+0xa8>
 800664a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800664e:	2b15      	cmp	r3, #21
 8006650:	d8f6      	bhi.n	8006640 <_printf_i+0x28>
 8006652:	a101      	add	r1, pc, #4	@ (adr r1, 8006658 <_printf_i+0x40>)
 8006654:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006658:	080066b1 	.word	0x080066b1
 800665c:	080066c5 	.word	0x080066c5
 8006660:	08006641 	.word	0x08006641
 8006664:	08006641 	.word	0x08006641
 8006668:	08006641 	.word	0x08006641
 800666c:	08006641 	.word	0x08006641
 8006670:	080066c5 	.word	0x080066c5
 8006674:	08006641 	.word	0x08006641
 8006678:	08006641 	.word	0x08006641
 800667c:	08006641 	.word	0x08006641
 8006680:	08006641 	.word	0x08006641
 8006684:	080067c5 	.word	0x080067c5
 8006688:	080066ef 	.word	0x080066ef
 800668c:	0800677f 	.word	0x0800677f
 8006690:	08006641 	.word	0x08006641
 8006694:	08006641 	.word	0x08006641
 8006698:	080067e7 	.word	0x080067e7
 800669c:	08006641 	.word	0x08006641
 80066a0:	080066ef 	.word	0x080066ef
 80066a4:	08006641 	.word	0x08006641
 80066a8:	08006641 	.word	0x08006641
 80066ac:	08006787 	.word	0x08006787
 80066b0:	6833      	ldr	r3, [r6, #0]
 80066b2:	1d1a      	adds	r2, r3, #4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6032      	str	r2, [r6, #0]
 80066b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066c0:	2301      	movs	r3, #1
 80066c2:	e09d      	b.n	8006800 <_printf_i+0x1e8>
 80066c4:	6833      	ldr	r3, [r6, #0]
 80066c6:	6820      	ldr	r0, [r4, #0]
 80066c8:	1d19      	adds	r1, r3, #4
 80066ca:	6031      	str	r1, [r6, #0]
 80066cc:	0606      	lsls	r6, r0, #24
 80066ce:	d501      	bpl.n	80066d4 <_printf_i+0xbc>
 80066d0:	681d      	ldr	r5, [r3, #0]
 80066d2:	e003      	b.n	80066dc <_printf_i+0xc4>
 80066d4:	0645      	lsls	r5, r0, #25
 80066d6:	d5fb      	bpl.n	80066d0 <_printf_i+0xb8>
 80066d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066dc:	2d00      	cmp	r5, #0
 80066de:	da03      	bge.n	80066e8 <_printf_i+0xd0>
 80066e0:	232d      	movs	r3, #45	@ 0x2d
 80066e2:	426d      	negs	r5, r5
 80066e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066e8:	4859      	ldr	r0, [pc, #356]	@ (8006850 <_printf_i+0x238>)
 80066ea:	230a      	movs	r3, #10
 80066ec:	e011      	b.n	8006712 <_printf_i+0xfa>
 80066ee:	6821      	ldr	r1, [r4, #0]
 80066f0:	6833      	ldr	r3, [r6, #0]
 80066f2:	0608      	lsls	r0, r1, #24
 80066f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80066f8:	d402      	bmi.n	8006700 <_printf_i+0xe8>
 80066fa:	0649      	lsls	r1, r1, #25
 80066fc:	bf48      	it	mi
 80066fe:	b2ad      	uxthmi	r5, r5
 8006700:	2f6f      	cmp	r7, #111	@ 0x6f
 8006702:	4853      	ldr	r0, [pc, #332]	@ (8006850 <_printf_i+0x238>)
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	bf14      	ite	ne
 8006708:	230a      	movne	r3, #10
 800670a:	2308      	moveq	r3, #8
 800670c:	2100      	movs	r1, #0
 800670e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006712:	6866      	ldr	r6, [r4, #4]
 8006714:	60a6      	str	r6, [r4, #8]
 8006716:	2e00      	cmp	r6, #0
 8006718:	bfa2      	ittt	ge
 800671a:	6821      	ldrge	r1, [r4, #0]
 800671c:	f021 0104 	bicge.w	r1, r1, #4
 8006720:	6021      	strge	r1, [r4, #0]
 8006722:	b90d      	cbnz	r5, 8006728 <_printf_i+0x110>
 8006724:	2e00      	cmp	r6, #0
 8006726:	d04b      	beq.n	80067c0 <_printf_i+0x1a8>
 8006728:	4616      	mov	r6, r2
 800672a:	fbb5 f1f3 	udiv	r1, r5, r3
 800672e:	fb03 5711 	mls	r7, r3, r1, r5
 8006732:	5dc7      	ldrb	r7, [r0, r7]
 8006734:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006738:	462f      	mov	r7, r5
 800673a:	42bb      	cmp	r3, r7
 800673c:	460d      	mov	r5, r1
 800673e:	d9f4      	bls.n	800672a <_printf_i+0x112>
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10b      	bne.n	800675c <_printf_i+0x144>
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	07df      	lsls	r7, r3, #31
 8006748:	d508      	bpl.n	800675c <_printf_i+0x144>
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	6861      	ldr	r1, [r4, #4]
 800674e:	4299      	cmp	r1, r3
 8006750:	bfde      	ittt	le
 8006752:	2330      	movle	r3, #48	@ 0x30
 8006754:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006758:	f106 36ff 	addle.w	r6, r6, #4294967295
 800675c:	1b92      	subs	r2, r2, r6
 800675e:	6122      	str	r2, [r4, #16]
 8006760:	f8cd a000 	str.w	sl, [sp]
 8006764:	464b      	mov	r3, r9
 8006766:	aa03      	add	r2, sp, #12
 8006768:	4621      	mov	r1, r4
 800676a:	4640      	mov	r0, r8
 800676c:	f7ff fee6 	bl	800653c <_printf_common>
 8006770:	3001      	adds	r0, #1
 8006772:	d14a      	bne.n	800680a <_printf_i+0x1f2>
 8006774:	f04f 30ff 	mov.w	r0, #4294967295
 8006778:	b004      	add	sp, #16
 800677a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	f043 0320 	orr.w	r3, r3, #32
 8006784:	6023      	str	r3, [r4, #0]
 8006786:	4833      	ldr	r0, [pc, #204]	@ (8006854 <_printf_i+0x23c>)
 8006788:	2778      	movs	r7, #120	@ 0x78
 800678a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800678e:	6823      	ldr	r3, [r4, #0]
 8006790:	6831      	ldr	r1, [r6, #0]
 8006792:	061f      	lsls	r7, r3, #24
 8006794:	f851 5b04 	ldr.w	r5, [r1], #4
 8006798:	d402      	bmi.n	80067a0 <_printf_i+0x188>
 800679a:	065f      	lsls	r7, r3, #25
 800679c:	bf48      	it	mi
 800679e:	b2ad      	uxthmi	r5, r5
 80067a0:	6031      	str	r1, [r6, #0]
 80067a2:	07d9      	lsls	r1, r3, #31
 80067a4:	bf44      	itt	mi
 80067a6:	f043 0320 	orrmi.w	r3, r3, #32
 80067aa:	6023      	strmi	r3, [r4, #0]
 80067ac:	b11d      	cbz	r5, 80067b6 <_printf_i+0x19e>
 80067ae:	2310      	movs	r3, #16
 80067b0:	e7ac      	b.n	800670c <_printf_i+0xf4>
 80067b2:	4827      	ldr	r0, [pc, #156]	@ (8006850 <_printf_i+0x238>)
 80067b4:	e7e9      	b.n	800678a <_printf_i+0x172>
 80067b6:	6823      	ldr	r3, [r4, #0]
 80067b8:	f023 0320 	bic.w	r3, r3, #32
 80067bc:	6023      	str	r3, [r4, #0]
 80067be:	e7f6      	b.n	80067ae <_printf_i+0x196>
 80067c0:	4616      	mov	r6, r2
 80067c2:	e7bd      	b.n	8006740 <_printf_i+0x128>
 80067c4:	6833      	ldr	r3, [r6, #0]
 80067c6:	6825      	ldr	r5, [r4, #0]
 80067c8:	6961      	ldr	r1, [r4, #20]
 80067ca:	1d18      	adds	r0, r3, #4
 80067cc:	6030      	str	r0, [r6, #0]
 80067ce:	062e      	lsls	r6, r5, #24
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	d501      	bpl.n	80067d8 <_printf_i+0x1c0>
 80067d4:	6019      	str	r1, [r3, #0]
 80067d6:	e002      	b.n	80067de <_printf_i+0x1c6>
 80067d8:	0668      	lsls	r0, r5, #25
 80067da:	d5fb      	bpl.n	80067d4 <_printf_i+0x1bc>
 80067dc:	8019      	strh	r1, [r3, #0]
 80067de:	2300      	movs	r3, #0
 80067e0:	6123      	str	r3, [r4, #16]
 80067e2:	4616      	mov	r6, r2
 80067e4:	e7bc      	b.n	8006760 <_printf_i+0x148>
 80067e6:	6833      	ldr	r3, [r6, #0]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	6032      	str	r2, [r6, #0]
 80067ec:	681e      	ldr	r6, [r3, #0]
 80067ee:	6862      	ldr	r2, [r4, #4]
 80067f0:	2100      	movs	r1, #0
 80067f2:	4630      	mov	r0, r6
 80067f4:	f7f9 fcec 	bl	80001d0 <memchr>
 80067f8:	b108      	cbz	r0, 80067fe <_printf_i+0x1e6>
 80067fa:	1b80      	subs	r0, r0, r6
 80067fc:	6060      	str	r0, [r4, #4]
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	6123      	str	r3, [r4, #16]
 8006802:	2300      	movs	r3, #0
 8006804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006808:	e7aa      	b.n	8006760 <_printf_i+0x148>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	4632      	mov	r2, r6
 800680e:	4649      	mov	r1, r9
 8006810:	4640      	mov	r0, r8
 8006812:	47d0      	blx	sl
 8006814:	3001      	adds	r0, #1
 8006816:	d0ad      	beq.n	8006774 <_printf_i+0x15c>
 8006818:	6823      	ldr	r3, [r4, #0]
 800681a:	079b      	lsls	r3, r3, #30
 800681c:	d413      	bmi.n	8006846 <_printf_i+0x22e>
 800681e:	68e0      	ldr	r0, [r4, #12]
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	4298      	cmp	r0, r3
 8006824:	bfb8      	it	lt
 8006826:	4618      	movlt	r0, r3
 8006828:	e7a6      	b.n	8006778 <_printf_i+0x160>
 800682a:	2301      	movs	r3, #1
 800682c:	4632      	mov	r2, r6
 800682e:	4649      	mov	r1, r9
 8006830:	4640      	mov	r0, r8
 8006832:	47d0      	blx	sl
 8006834:	3001      	adds	r0, #1
 8006836:	d09d      	beq.n	8006774 <_printf_i+0x15c>
 8006838:	3501      	adds	r5, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9903      	ldr	r1, [sp, #12]
 800683e:	1a5b      	subs	r3, r3, r1
 8006840:	42ab      	cmp	r3, r5
 8006842:	dcf2      	bgt.n	800682a <_printf_i+0x212>
 8006844:	e7eb      	b.n	800681e <_printf_i+0x206>
 8006846:	2500      	movs	r5, #0
 8006848:	f104 0619 	add.w	r6, r4, #25
 800684c:	e7f5      	b.n	800683a <_printf_i+0x222>
 800684e:	bf00      	nop
 8006850:	08008eae 	.word	0x08008eae
 8006854:	08008ebf 	.word	0x08008ebf

08006858 <std>:
 8006858:	2300      	movs	r3, #0
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	e9c0 3300 	strd	r3, r3, [r0]
 8006862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006866:	6083      	str	r3, [r0, #8]
 8006868:	8181      	strh	r1, [r0, #12]
 800686a:	6643      	str	r3, [r0, #100]	@ 0x64
 800686c:	81c2      	strh	r2, [r0, #14]
 800686e:	6183      	str	r3, [r0, #24]
 8006870:	4619      	mov	r1, r3
 8006872:	2208      	movs	r2, #8
 8006874:	305c      	adds	r0, #92	@ 0x5c
 8006876:	f000 f928 	bl	8006aca <memset>
 800687a:	4b0d      	ldr	r3, [pc, #52]	@ (80068b0 <std+0x58>)
 800687c:	6263      	str	r3, [r4, #36]	@ 0x24
 800687e:	4b0d      	ldr	r3, [pc, #52]	@ (80068b4 <std+0x5c>)
 8006880:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006882:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <std+0x60>)
 8006884:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006886:	4b0d      	ldr	r3, [pc, #52]	@ (80068bc <std+0x64>)
 8006888:	6323      	str	r3, [r4, #48]	@ 0x30
 800688a:	4b0d      	ldr	r3, [pc, #52]	@ (80068c0 <std+0x68>)
 800688c:	6224      	str	r4, [r4, #32]
 800688e:	429c      	cmp	r4, r3
 8006890:	d006      	beq.n	80068a0 <std+0x48>
 8006892:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006896:	4294      	cmp	r4, r2
 8006898:	d002      	beq.n	80068a0 <std+0x48>
 800689a:	33d0      	adds	r3, #208	@ 0xd0
 800689c:	429c      	cmp	r4, r3
 800689e:	d105      	bne.n	80068ac <std+0x54>
 80068a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	f000 b9e2 	b.w	8006c70 <__retarget_lock_init_recursive>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	bf00      	nop
 80068b0:	08006a45 	.word	0x08006a45
 80068b4:	08006a67 	.word	0x08006a67
 80068b8:	08006a9f 	.word	0x08006a9f
 80068bc:	08006ac3 	.word	0x08006ac3
 80068c0:	20004d00 	.word	0x20004d00

080068c4 <stdio_exit_handler>:
 80068c4:	4a02      	ldr	r2, [pc, #8]	@ (80068d0 <stdio_exit_handler+0xc>)
 80068c6:	4903      	ldr	r1, [pc, #12]	@ (80068d4 <stdio_exit_handler+0x10>)
 80068c8:	4803      	ldr	r0, [pc, #12]	@ (80068d8 <stdio_exit_handler+0x14>)
 80068ca:	f000 b869 	b.w	80069a0 <_fwalk_sglue>
 80068ce:	bf00      	nop
 80068d0:	20000010 	.word	0x20000010
 80068d4:	080085ed 	.word	0x080085ed
 80068d8:	20000020 	.word	0x20000020

080068dc <cleanup_stdio>:
 80068dc:	6841      	ldr	r1, [r0, #4]
 80068de:	4b0c      	ldr	r3, [pc, #48]	@ (8006910 <cleanup_stdio+0x34>)
 80068e0:	4299      	cmp	r1, r3
 80068e2:	b510      	push	{r4, lr}
 80068e4:	4604      	mov	r4, r0
 80068e6:	d001      	beq.n	80068ec <cleanup_stdio+0x10>
 80068e8:	f001 fe80 	bl	80085ec <_fflush_r>
 80068ec:	68a1      	ldr	r1, [r4, #8]
 80068ee:	4b09      	ldr	r3, [pc, #36]	@ (8006914 <cleanup_stdio+0x38>)
 80068f0:	4299      	cmp	r1, r3
 80068f2:	d002      	beq.n	80068fa <cleanup_stdio+0x1e>
 80068f4:	4620      	mov	r0, r4
 80068f6:	f001 fe79 	bl	80085ec <_fflush_r>
 80068fa:	68e1      	ldr	r1, [r4, #12]
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <cleanup_stdio+0x3c>)
 80068fe:	4299      	cmp	r1, r3
 8006900:	d004      	beq.n	800690c <cleanup_stdio+0x30>
 8006902:	4620      	mov	r0, r4
 8006904:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006908:	f001 be70 	b.w	80085ec <_fflush_r>
 800690c:	bd10      	pop	{r4, pc}
 800690e:	bf00      	nop
 8006910:	20004d00 	.word	0x20004d00
 8006914:	20004d68 	.word	0x20004d68
 8006918:	20004dd0 	.word	0x20004dd0

0800691c <global_stdio_init.part.0>:
 800691c:	b510      	push	{r4, lr}
 800691e:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <global_stdio_init.part.0+0x30>)
 8006920:	4c0b      	ldr	r4, [pc, #44]	@ (8006950 <global_stdio_init.part.0+0x34>)
 8006922:	4a0c      	ldr	r2, [pc, #48]	@ (8006954 <global_stdio_init.part.0+0x38>)
 8006924:	601a      	str	r2, [r3, #0]
 8006926:	4620      	mov	r0, r4
 8006928:	2200      	movs	r2, #0
 800692a:	2104      	movs	r1, #4
 800692c:	f7ff ff94 	bl	8006858 <std>
 8006930:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006934:	2201      	movs	r2, #1
 8006936:	2109      	movs	r1, #9
 8006938:	f7ff ff8e 	bl	8006858 <std>
 800693c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006940:	2202      	movs	r2, #2
 8006942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006946:	2112      	movs	r1, #18
 8006948:	f7ff bf86 	b.w	8006858 <std>
 800694c:	20004e38 	.word	0x20004e38
 8006950:	20004d00 	.word	0x20004d00
 8006954:	080068c5 	.word	0x080068c5

08006958 <__sfp_lock_acquire>:
 8006958:	4801      	ldr	r0, [pc, #4]	@ (8006960 <__sfp_lock_acquire+0x8>)
 800695a:	f000 b98a 	b.w	8006c72 <__retarget_lock_acquire_recursive>
 800695e:	bf00      	nop
 8006960:	20004e41 	.word	0x20004e41

08006964 <__sfp_lock_release>:
 8006964:	4801      	ldr	r0, [pc, #4]	@ (800696c <__sfp_lock_release+0x8>)
 8006966:	f000 b985 	b.w	8006c74 <__retarget_lock_release_recursive>
 800696a:	bf00      	nop
 800696c:	20004e41 	.word	0x20004e41

08006970 <__sinit>:
 8006970:	b510      	push	{r4, lr}
 8006972:	4604      	mov	r4, r0
 8006974:	f7ff fff0 	bl	8006958 <__sfp_lock_acquire>
 8006978:	6a23      	ldr	r3, [r4, #32]
 800697a:	b11b      	cbz	r3, 8006984 <__sinit+0x14>
 800697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006980:	f7ff bff0 	b.w	8006964 <__sfp_lock_release>
 8006984:	4b04      	ldr	r3, [pc, #16]	@ (8006998 <__sinit+0x28>)
 8006986:	6223      	str	r3, [r4, #32]
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <__sinit+0x2c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1f5      	bne.n	800697c <__sinit+0xc>
 8006990:	f7ff ffc4 	bl	800691c <global_stdio_init.part.0>
 8006994:	e7f2      	b.n	800697c <__sinit+0xc>
 8006996:	bf00      	nop
 8006998:	080068dd 	.word	0x080068dd
 800699c:	20004e38 	.word	0x20004e38

080069a0 <_fwalk_sglue>:
 80069a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069a4:	4607      	mov	r7, r0
 80069a6:	4688      	mov	r8, r1
 80069a8:	4614      	mov	r4, r2
 80069aa:	2600      	movs	r6, #0
 80069ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069b0:	f1b9 0901 	subs.w	r9, r9, #1
 80069b4:	d505      	bpl.n	80069c2 <_fwalk_sglue+0x22>
 80069b6:	6824      	ldr	r4, [r4, #0]
 80069b8:	2c00      	cmp	r4, #0
 80069ba:	d1f7      	bne.n	80069ac <_fwalk_sglue+0xc>
 80069bc:	4630      	mov	r0, r6
 80069be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d907      	bls.n	80069d8 <_fwalk_sglue+0x38>
 80069c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80069cc:	3301      	adds	r3, #1
 80069ce:	d003      	beq.n	80069d8 <_fwalk_sglue+0x38>
 80069d0:	4629      	mov	r1, r5
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c0      	blx	r8
 80069d6:	4306      	orrs	r6, r0
 80069d8:	3568      	adds	r5, #104	@ 0x68
 80069da:	e7e9      	b.n	80069b0 <_fwalk_sglue+0x10>

080069dc <sniprintf>:
 80069dc:	b40c      	push	{r2, r3}
 80069de:	b530      	push	{r4, r5, lr}
 80069e0:	4b17      	ldr	r3, [pc, #92]	@ (8006a40 <sniprintf+0x64>)
 80069e2:	1e0c      	subs	r4, r1, #0
 80069e4:	681d      	ldr	r5, [r3, #0]
 80069e6:	b09d      	sub	sp, #116	@ 0x74
 80069e8:	da08      	bge.n	80069fc <sniprintf+0x20>
 80069ea:	238b      	movs	r3, #139	@ 0x8b
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f04f 30ff 	mov.w	r0, #4294967295
 80069f2:	b01d      	add	sp, #116	@ 0x74
 80069f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069f8:	b002      	add	sp, #8
 80069fa:	4770      	bx	lr
 80069fc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006a00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006a04:	bf14      	ite	ne
 8006a06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006a0a:	4623      	moveq	r3, r4
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	9006      	str	r0, [sp, #24]
 8006a18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006a1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006a1e:	ab21      	add	r3, sp, #132	@ 0x84
 8006a20:	a902      	add	r1, sp, #8
 8006a22:	4628      	mov	r0, r5
 8006a24:	9301      	str	r3, [sp, #4]
 8006a26:	f001 fc61 	bl	80082ec <_svfiprintf_r>
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	bfbc      	itt	lt
 8006a2e:	238b      	movlt	r3, #139	@ 0x8b
 8006a30:	602b      	strlt	r3, [r5, #0]
 8006a32:	2c00      	cmp	r4, #0
 8006a34:	d0dd      	beq.n	80069f2 <sniprintf+0x16>
 8006a36:	9b02      	ldr	r3, [sp, #8]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	701a      	strb	r2, [r3, #0]
 8006a3c:	e7d9      	b.n	80069f2 <sniprintf+0x16>
 8006a3e:	bf00      	nop
 8006a40:	2000001c 	.word	0x2000001c

08006a44 <__sread>:
 8006a44:	b510      	push	{r4, lr}
 8006a46:	460c      	mov	r4, r1
 8006a48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4c:	f000 f8c2 	bl	8006bd4 <_read_r>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	bfab      	itete	ge
 8006a54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006a56:	89a3      	ldrhlt	r3, [r4, #12]
 8006a58:	181b      	addge	r3, r3, r0
 8006a5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006a5e:	bfac      	ite	ge
 8006a60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006a62:	81a3      	strhlt	r3, [r4, #12]
 8006a64:	bd10      	pop	{r4, pc}

08006a66 <__swrite>:
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	461f      	mov	r7, r3
 8006a6c:	898b      	ldrh	r3, [r1, #12]
 8006a6e:	05db      	lsls	r3, r3, #23
 8006a70:	4605      	mov	r5, r0
 8006a72:	460c      	mov	r4, r1
 8006a74:	4616      	mov	r6, r2
 8006a76:	d505      	bpl.n	8006a84 <__swrite+0x1e>
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f000 f896 	bl	8006bb0 <_lseek_r>
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a8a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	4632      	mov	r2, r6
 8006a92:	463b      	mov	r3, r7
 8006a94:	4628      	mov	r0, r5
 8006a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	f000 b8ad 	b.w	8006bf8 <_write_r>

08006a9e <__sseek>:
 8006a9e:	b510      	push	{r4, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa6:	f000 f883 	bl	8006bb0 <_lseek_r>
 8006aaa:	1c43      	adds	r3, r0, #1
 8006aac:	89a3      	ldrh	r3, [r4, #12]
 8006aae:	bf15      	itete	ne
 8006ab0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ab2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ab6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006aba:	81a3      	strheq	r3, [r4, #12]
 8006abc:	bf18      	it	ne
 8006abe:	81a3      	strhne	r3, [r4, #12]
 8006ac0:	bd10      	pop	{r4, pc}

08006ac2 <__sclose>:
 8006ac2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac6:	f000 b80d 	b.w	8006ae4 <_close_r>

08006aca <memset>:
 8006aca:	4402      	add	r2, r0
 8006acc:	4603      	mov	r3, r0
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d100      	bne.n	8006ad4 <memset+0xa>
 8006ad2:	4770      	bx	lr
 8006ad4:	f803 1b01 	strb.w	r1, [r3], #1
 8006ad8:	e7f9      	b.n	8006ace <memset+0x4>
	...

08006adc <_localeconv_r>:
 8006adc:	4800      	ldr	r0, [pc, #0]	@ (8006ae0 <_localeconv_r+0x4>)
 8006ade:	4770      	bx	lr
 8006ae0:	2000015c 	.word	0x2000015c

08006ae4 <_close_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d06      	ldr	r5, [pc, #24]	@ (8006b00 <_close_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fa fd58 	bl	80015a4 <_close>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_close_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_close_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20004e3c 	.word	0x20004e3c

08006b04 <_reclaim_reent>:
 8006b04:	4b29      	ldr	r3, [pc, #164]	@ (8006bac <_reclaim_reent+0xa8>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4283      	cmp	r3, r0
 8006b0a:	b570      	push	{r4, r5, r6, lr}
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	d04b      	beq.n	8006ba8 <_reclaim_reent+0xa4>
 8006b10:	69c3      	ldr	r3, [r0, #28]
 8006b12:	b1ab      	cbz	r3, 8006b40 <_reclaim_reent+0x3c>
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	b16b      	cbz	r3, 8006b34 <_reclaim_reent+0x30>
 8006b18:	2500      	movs	r5, #0
 8006b1a:	69e3      	ldr	r3, [r4, #28]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	5959      	ldr	r1, [r3, r5]
 8006b20:	2900      	cmp	r1, #0
 8006b22:	d13b      	bne.n	8006b9c <_reclaim_reent+0x98>
 8006b24:	3504      	adds	r5, #4
 8006b26:	2d80      	cmp	r5, #128	@ 0x80
 8006b28:	d1f7      	bne.n	8006b1a <_reclaim_reent+0x16>
 8006b2a:	69e3      	ldr	r3, [r4, #28]
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	68d9      	ldr	r1, [r3, #12]
 8006b30:	f000 fefe 	bl	8007930 <_free_r>
 8006b34:	69e3      	ldr	r3, [r4, #28]
 8006b36:	6819      	ldr	r1, [r3, #0]
 8006b38:	b111      	cbz	r1, 8006b40 <_reclaim_reent+0x3c>
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	f000 fef8 	bl	8007930 <_free_r>
 8006b40:	6961      	ldr	r1, [r4, #20]
 8006b42:	b111      	cbz	r1, 8006b4a <_reclaim_reent+0x46>
 8006b44:	4620      	mov	r0, r4
 8006b46:	f000 fef3 	bl	8007930 <_free_r>
 8006b4a:	69e1      	ldr	r1, [r4, #28]
 8006b4c:	b111      	cbz	r1, 8006b54 <_reclaim_reent+0x50>
 8006b4e:	4620      	mov	r0, r4
 8006b50:	f000 feee 	bl	8007930 <_free_r>
 8006b54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006b56:	b111      	cbz	r1, 8006b5e <_reclaim_reent+0x5a>
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fee9 	bl	8007930 <_free_r>
 8006b5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b60:	b111      	cbz	r1, 8006b68 <_reclaim_reent+0x64>
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fee4 	bl	8007930 <_free_r>
 8006b68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b6a:	b111      	cbz	r1, 8006b72 <_reclaim_reent+0x6e>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 fedf 	bl	8007930 <_free_r>
 8006b72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b74:	b111      	cbz	r1, 8006b7c <_reclaim_reent+0x78>
 8006b76:	4620      	mov	r0, r4
 8006b78:	f000 feda 	bl	8007930 <_free_r>
 8006b7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b7e:	b111      	cbz	r1, 8006b86 <_reclaim_reent+0x82>
 8006b80:	4620      	mov	r0, r4
 8006b82:	f000 fed5 	bl	8007930 <_free_r>
 8006b86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b88:	b111      	cbz	r1, 8006b90 <_reclaim_reent+0x8c>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	f000 fed0 	bl	8007930 <_free_r>
 8006b90:	6a23      	ldr	r3, [r4, #32]
 8006b92:	b14b      	cbz	r3, 8006ba8 <_reclaim_reent+0xa4>
 8006b94:	4620      	mov	r0, r4
 8006b96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b9a:	4718      	bx	r3
 8006b9c:	680e      	ldr	r6, [r1, #0]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fec6 	bl	8007930 <_free_r>
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	e7bb      	b.n	8006b20 <_reclaim_reent+0x1c>
 8006ba8:	bd70      	pop	{r4, r5, r6, pc}
 8006baa:	bf00      	nop
 8006bac:	2000001c 	.word	0x2000001c

08006bb0 <_lseek_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4d07      	ldr	r5, [pc, #28]	@ (8006bd0 <_lseek_r+0x20>)
 8006bb4:	4604      	mov	r4, r0
 8006bb6:	4608      	mov	r0, r1
 8006bb8:	4611      	mov	r1, r2
 8006bba:	2200      	movs	r2, #0
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fa fd17 	bl	80015f2 <_lseek>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_lseek_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_lseek_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	20004e3c 	.word	0x20004e3c

08006bd4 <_read_r>:
 8006bd4:	b538      	push	{r3, r4, r5, lr}
 8006bd6:	4d07      	ldr	r5, [pc, #28]	@ (8006bf4 <_read_r+0x20>)
 8006bd8:	4604      	mov	r4, r0
 8006bda:	4608      	mov	r0, r1
 8006bdc:	4611      	mov	r1, r2
 8006bde:	2200      	movs	r2, #0
 8006be0:	602a      	str	r2, [r5, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f7fa fca5 	bl	8001532 <_read>
 8006be8:	1c43      	adds	r3, r0, #1
 8006bea:	d102      	bne.n	8006bf2 <_read_r+0x1e>
 8006bec:	682b      	ldr	r3, [r5, #0]
 8006bee:	b103      	cbz	r3, 8006bf2 <_read_r+0x1e>
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	bd38      	pop	{r3, r4, r5, pc}
 8006bf4:	20004e3c 	.word	0x20004e3c

08006bf8 <_write_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d07      	ldr	r5, [pc, #28]	@ (8006c18 <_write_r+0x20>)
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	4608      	mov	r0, r1
 8006c00:	4611      	mov	r1, r2
 8006c02:	2200      	movs	r2, #0
 8006c04:	602a      	str	r2, [r5, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	f7fa fcb0 	bl	800156c <_write>
 8006c0c:	1c43      	adds	r3, r0, #1
 8006c0e:	d102      	bne.n	8006c16 <_write_r+0x1e>
 8006c10:	682b      	ldr	r3, [r5, #0]
 8006c12:	b103      	cbz	r3, 8006c16 <_write_r+0x1e>
 8006c14:	6023      	str	r3, [r4, #0]
 8006c16:	bd38      	pop	{r3, r4, r5, pc}
 8006c18:	20004e3c 	.word	0x20004e3c

08006c1c <__errno>:
 8006c1c:	4b01      	ldr	r3, [pc, #4]	@ (8006c24 <__errno+0x8>)
 8006c1e:	6818      	ldr	r0, [r3, #0]
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	2000001c 	.word	0x2000001c

08006c28 <__libc_init_array>:
 8006c28:	b570      	push	{r4, r5, r6, lr}
 8006c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8006c60 <__libc_init_array+0x38>)
 8006c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8006c64 <__libc_init_array+0x3c>)
 8006c2e:	1b64      	subs	r4, r4, r5
 8006c30:	10a4      	asrs	r4, r4, #2
 8006c32:	2600      	movs	r6, #0
 8006c34:	42a6      	cmp	r6, r4
 8006c36:	d109      	bne.n	8006c4c <__libc_init_array+0x24>
 8006c38:	4d0b      	ldr	r5, [pc, #44]	@ (8006c68 <__libc_init_array+0x40>)
 8006c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8006c6c <__libc_init_array+0x44>)
 8006c3c:	f002 f866 	bl	8008d0c <_init>
 8006c40:	1b64      	subs	r4, r4, r5
 8006c42:	10a4      	asrs	r4, r4, #2
 8006c44:	2600      	movs	r6, #0
 8006c46:	42a6      	cmp	r6, r4
 8006c48:	d105      	bne.n	8006c56 <__libc_init_array+0x2e>
 8006c4a:	bd70      	pop	{r4, r5, r6, pc}
 8006c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c50:	4798      	blx	r3
 8006c52:	3601      	adds	r6, #1
 8006c54:	e7ee      	b.n	8006c34 <__libc_init_array+0xc>
 8006c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5a:	4798      	blx	r3
 8006c5c:	3601      	adds	r6, #1
 8006c5e:	e7f2      	b.n	8006c46 <__libc_init_array+0x1e>
 8006c60:	08009218 	.word	0x08009218
 8006c64:	08009218 	.word	0x08009218
 8006c68:	08009218 	.word	0x08009218
 8006c6c:	0800921c 	.word	0x0800921c

08006c70 <__retarget_lock_init_recursive>:
 8006c70:	4770      	bx	lr

08006c72 <__retarget_lock_acquire_recursive>:
 8006c72:	4770      	bx	lr

08006c74 <__retarget_lock_release_recursive>:
 8006c74:	4770      	bx	lr

08006c76 <memcpy>:
 8006c76:	440a      	add	r2, r1
 8006c78:	4291      	cmp	r1, r2
 8006c7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c7e:	d100      	bne.n	8006c82 <memcpy+0xc>
 8006c80:	4770      	bx	lr
 8006c82:	b510      	push	{r4, lr}
 8006c84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c8c:	4291      	cmp	r1, r2
 8006c8e:	d1f9      	bne.n	8006c84 <memcpy+0xe>
 8006c90:	bd10      	pop	{r4, pc}

08006c92 <quorem>:
 8006c92:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c96:	6903      	ldr	r3, [r0, #16]
 8006c98:	690c      	ldr	r4, [r1, #16]
 8006c9a:	42a3      	cmp	r3, r4
 8006c9c:	4607      	mov	r7, r0
 8006c9e:	db7e      	blt.n	8006d9e <quorem+0x10c>
 8006ca0:	3c01      	subs	r4, #1
 8006ca2:	f101 0814 	add.w	r8, r1, #20
 8006ca6:	00a3      	lsls	r3, r4, #2
 8006ca8:	f100 0514 	add.w	r5, r0, #20
 8006cac:	9300      	str	r3, [sp, #0]
 8006cae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cb2:	9301      	str	r3, [sp, #4]
 8006cb4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cc8:	d32e      	bcc.n	8006d28 <quorem+0x96>
 8006cca:	f04f 0a00 	mov.w	sl, #0
 8006cce:	46c4      	mov	ip, r8
 8006cd0:	46ae      	mov	lr, r5
 8006cd2:	46d3      	mov	fp, sl
 8006cd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006cd8:	b298      	uxth	r0, r3
 8006cda:	fb06 a000 	mla	r0, r6, r0, sl
 8006cde:	0c02      	lsrs	r2, r0, #16
 8006ce0:	0c1b      	lsrs	r3, r3, #16
 8006ce2:	fb06 2303 	mla	r3, r6, r3, r2
 8006ce6:	f8de 2000 	ldr.w	r2, [lr]
 8006cea:	b280      	uxth	r0, r0
 8006cec:	b292      	uxth	r2, r2
 8006cee:	1a12      	subs	r2, r2, r0
 8006cf0:	445a      	add	r2, fp
 8006cf2:	f8de 0000 	ldr.w	r0, [lr]
 8006cf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d00:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d04:	b292      	uxth	r2, r2
 8006d06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d0a:	45e1      	cmp	r9, ip
 8006d0c:	f84e 2b04 	str.w	r2, [lr], #4
 8006d10:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d14:	d2de      	bcs.n	8006cd4 <quorem+0x42>
 8006d16:	9b00      	ldr	r3, [sp, #0]
 8006d18:	58eb      	ldr	r3, [r5, r3]
 8006d1a:	b92b      	cbnz	r3, 8006d28 <quorem+0x96>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	3b04      	subs	r3, #4
 8006d20:	429d      	cmp	r5, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	d32f      	bcc.n	8006d86 <quorem+0xf4>
 8006d26:	613c      	str	r4, [r7, #16]
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f001 f97b 	bl	8008024 <__mcmp>
 8006d2e:	2800      	cmp	r0, #0
 8006d30:	db25      	blt.n	8006d7e <quorem+0xec>
 8006d32:	4629      	mov	r1, r5
 8006d34:	2000      	movs	r0, #0
 8006d36:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d3a:	f8d1 c000 	ldr.w	ip, [r1]
 8006d3e:	fa1f fe82 	uxth.w	lr, r2
 8006d42:	fa1f f38c 	uxth.w	r3, ip
 8006d46:	eba3 030e 	sub.w	r3, r3, lr
 8006d4a:	4403      	add	r3, r0
 8006d4c:	0c12      	lsrs	r2, r2, #16
 8006d4e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006d52:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d5c:	45c1      	cmp	r9, r8
 8006d5e:	f841 3b04 	str.w	r3, [r1], #4
 8006d62:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006d66:	d2e6      	bcs.n	8006d36 <quorem+0xa4>
 8006d68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d70:	b922      	cbnz	r2, 8006d7c <quorem+0xea>
 8006d72:	3b04      	subs	r3, #4
 8006d74:	429d      	cmp	r5, r3
 8006d76:	461a      	mov	r2, r3
 8006d78:	d30b      	bcc.n	8006d92 <quorem+0x100>
 8006d7a:	613c      	str	r4, [r7, #16]
 8006d7c:	3601      	adds	r6, #1
 8006d7e:	4630      	mov	r0, r6
 8006d80:	b003      	add	sp, #12
 8006d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d86:	6812      	ldr	r2, [r2, #0]
 8006d88:	3b04      	subs	r3, #4
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	d1cb      	bne.n	8006d26 <quorem+0x94>
 8006d8e:	3c01      	subs	r4, #1
 8006d90:	e7c6      	b.n	8006d20 <quorem+0x8e>
 8006d92:	6812      	ldr	r2, [r2, #0]
 8006d94:	3b04      	subs	r3, #4
 8006d96:	2a00      	cmp	r2, #0
 8006d98:	d1ef      	bne.n	8006d7a <quorem+0xe8>
 8006d9a:	3c01      	subs	r4, #1
 8006d9c:	e7ea      	b.n	8006d74 <quorem+0xe2>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e7ee      	b.n	8006d80 <quorem+0xee>
 8006da2:	0000      	movs	r0, r0
 8006da4:	0000      	movs	r0, r0
	...

08006da8 <_dtoa_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	69c7      	ldr	r7, [r0, #28]
 8006dae:	b099      	sub	sp, #100	@ 0x64
 8006db0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006db4:	ec55 4b10 	vmov	r4, r5, d0
 8006db8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006dba:	9109      	str	r1, [sp, #36]	@ 0x24
 8006dbc:	4683      	mov	fp, r0
 8006dbe:	920e      	str	r2, [sp, #56]	@ 0x38
 8006dc0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dc2:	b97f      	cbnz	r7, 8006de4 <_dtoa_r+0x3c>
 8006dc4:	2010      	movs	r0, #16
 8006dc6:	f000 fdfd 	bl	80079c4 <malloc>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f8cb 001c 	str.w	r0, [fp, #28]
 8006dd0:	b920      	cbnz	r0, 8006ddc <_dtoa_r+0x34>
 8006dd2:	4ba7      	ldr	r3, [pc, #668]	@ (8007070 <_dtoa_r+0x2c8>)
 8006dd4:	21ef      	movs	r1, #239	@ 0xef
 8006dd6:	48a7      	ldr	r0, [pc, #668]	@ (8007074 <_dtoa_r+0x2cc>)
 8006dd8:	f001 fc5a 	bl	8008690 <__assert_func>
 8006ddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006de0:	6007      	str	r7, [r0, #0]
 8006de2:	60c7      	str	r7, [r0, #12]
 8006de4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	b159      	cbz	r1, 8006e04 <_dtoa_r+0x5c>
 8006dec:	685a      	ldr	r2, [r3, #4]
 8006dee:	604a      	str	r2, [r1, #4]
 8006df0:	2301      	movs	r3, #1
 8006df2:	4093      	lsls	r3, r2
 8006df4:	608b      	str	r3, [r1, #8]
 8006df6:	4658      	mov	r0, fp
 8006df8:	f000 feda 	bl	8007bb0 <_Bfree>
 8006dfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e00:	2200      	movs	r2, #0
 8006e02:	601a      	str	r2, [r3, #0]
 8006e04:	1e2b      	subs	r3, r5, #0
 8006e06:	bfb9      	ittee	lt
 8006e08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e0c:	9303      	strlt	r3, [sp, #12]
 8006e0e:	2300      	movge	r3, #0
 8006e10:	6033      	strge	r3, [r6, #0]
 8006e12:	9f03      	ldr	r7, [sp, #12]
 8006e14:	4b98      	ldr	r3, [pc, #608]	@ (8007078 <_dtoa_r+0x2d0>)
 8006e16:	bfbc      	itt	lt
 8006e18:	2201      	movlt	r2, #1
 8006e1a:	6032      	strlt	r2, [r6, #0]
 8006e1c:	43bb      	bics	r3, r7
 8006e1e:	d112      	bne.n	8006e46 <_dtoa_r+0x9e>
 8006e20:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e26:	6013      	str	r3, [r2, #0]
 8006e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e2c:	4323      	orrs	r3, r4
 8006e2e:	f000 854d 	beq.w	80078cc <_dtoa_r+0xb24>
 8006e32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e34:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800708c <_dtoa_r+0x2e4>
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 854f 	beq.w	80078dc <_dtoa_r+0xb34>
 8006e3e:	f10a 0303 	add.w	r3, sl, #3
 8006e42:	f000 bd49 	b.w	80078d8 <_dtoa_r+0xb30>
 8006e46:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	ec51 0b17 	vmov	r0, r1, d7
 8006e50:	2300      	movs	r3, #0
 8006e52:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006e56:	f7f9 fe37 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e5a:	4680      	mov	r8, r0
 8006e5c:	b158      	cbz	r0, 8006e76 <_dtoa_r+0xce>
 8006e5e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e60:	2301      	movs	r3, #1
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e66:	b113      	cbz	r3, 8006e6e <_dtoa_r+0xc6>
 8006e68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e6a:	4b84      	ldr	r3, [pc, #528]	@ (800707c <_dtoa_r+0x2d4>)
 8006e6c:	6013      	str	r3, [r2, #0]
 8006e6e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007090 <_dtoa_r+0x2e8>
 8006e72:	f000 bd33 	b.w	80078dc <_dtoa_r+0xb34>
 8006e76:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006e7a:	aa16      	add	r2, sp, #88	@ 0x58
 8006e7c:	a917      	add	r1, sp, #92	@ 0x5c
 8006e7e:	4658      	mov	r0, fp
 8006e80:	f001 f980 	bl	8008184 <__d2b>
 8006e84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006e88:	4681      	mov	r9, r0
 8006e8a:	2e00      	cmp	r6, #0
 8006e8c:	d077      	beq.n	8006f7e <_dtoa_r+0x1d6>
 8006e8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006e90:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006ea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	2200      	movs	r2, #0
 8006eac:	4b74      	ldr	r3, [pc, #464]	@ (8007080 <_dtoa_r+0x2d8>)
 8006eae:	f7f9 f9eb 	bl	8000288 <__aeabi_dsub>
 8006eb2:	a369      	add	r3, pc, #420	@ (adr r3, 8007058 <_dtoa_r+0x2b0>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fb9e 	bl	80005f8 <__aeabi_dmul>
 8006ebc:	a368      	add	r3, pc, #416	@ (adr r3, 8007060 <_dtoa_r+0x2b8>)
 8006ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec2:	f7f9 f9e3 	bl	800028c <__adddf3>
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4630      	mov	r0, r6
 8006eca:	460d      	mov	r5, r1
 8006ecc:	f7f9 fb2a 	bl	8000524 <__aeabi_i2d>
 8006ed0:	a365      	add	r3, pc, #404	@ (adr r3, 8007068 <_dtoa_r+0x2c0>)
 8006ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed6:	f7f9 fb8f 	bl	80005f8 <__aeabi_dmul>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 f9d3 	bl	800028c <__adddf3>
 8006ee6:	4604      	mov	r4, r0
 8006ee8:	460d      	mov	r5, r1
 8006eea:	f7f9 fe35 	bl	8000b58 <__aeabi_d2iz>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4607      	mov	r7, r0
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	f7f9 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8006efc:	b140      	cbz	r0, 8006f10 <_dtoa_r+0x168>
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7f9 fb10 	bl	8000524 <__aeabi_i2d>
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	f7f9 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f0c:	b900      	cbnz	r0, 8006f10 <_dtoa_r+0x168>
 8006f0e:	3f01      	subs	r7, #1
 8006f10:	2f16      	cmp	r7, #22
 8006f12:	d851      	bhi.n	8006fb8 <_dtoa_r+0x210>
 8006f14:	4b5b      	ldr	r3, [pc, #364]	@ (8007084 <_dtoa_r+0x2dc>)
 8006f16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f22:	f7f9 fddb 	bl	8000adc <__aeabi_dcmplt>
 8006f26:	2800      	cmp	r0, #0
 8006f28:	d048      	beq.n	8006fbc <_dtoa_r+0x214>
 8006f2a:	3f01      	subs	r7, #1
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f30:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f32:	1b9b      	subs	r3, r3, r6
 8006f34:	1e5a      	subs	r2, r3, #1
 8006f36:	bf44      	itt	mi
 8006f38:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f3c:	2300      	movmi	r3, #0
 8006f3e:	9208      	str	r2, [sp, #32]
 8006f40:	bf54      	ite	pl
 8006f42:	f04f 0800 	movpl.w	r8, #0
 8006f46:	9308      	strmi	r3, [sp, #32]
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	db39      	blt.n	8006fc0 <_dtoa_r+0x218>
 8006f4c:	9b08      	ldr	r3, [sp, #32]
 8006f4e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006f50:	443b      	add	r3, r7
 8006f52:	9308      	str	r3, [sp, #32]
 8006f54:	2300      	movs	r3, #0
 8006f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f5a:	2b09      	cmp	r3, #9
 8006f5c:	d864      	bhi.n	8007028 <_dtoa_r+0x280>
 8006f5e:	2b05      	cmp	r3, #5
 8006f60:	bfc4      	itt	gt
 8006f62:	3b04      	subgt	r3, #4
 8006f64:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f68:	f1a3 0302 	sub.w	r3, r3, #2
 8006f6c:	bfcc      	ite	gt
 8006f6e:	2400      	movgt	r4, #0
 8006f70:	2401      	movle	r4, #1
 8006f72:	2b03      	cmp	r3, #3
 8006f74:	d863      	bhi.n	800703e <_dtoa_r+0x296>
 8006f76:	e8df f003 	tbb	[pc, r3]
 8006f7a:	372a      	.short	0x372a
 8006f7c:	5535      	.short	0x5535
 8006f7e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006f82:	441e      	add	r6, r3
 8006f84:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006f88:	2b20      	cmp	r3, #32
 8006f8a:	bfc1      	itttt	gt
 8006f8c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006f90:	409f      	lslgt	r7, r3
 8006f92:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006f96:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006f9a:	bfd6      	itet	le
 8006f9c:	f1c3 0320 	rsble	r3, r3, #32
 8006fa0:	ea47 0003 	orrgt.w	r0, r7, r3
 8006fa4:	fa04 f003 	lslle.w	r0, r4, r3
 8006fa8:	f7f9 faac 	bl	8000504 <__aeabi_ui2d>
 8006fac:	2201      	movs	r2, #1
 8006fae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006fb2:	3e01      	subs	r6, #1
 8006fb4:	9214      	str	r2, [sp, #80]	@ 0x50
 8006fb6:	e777      	b.n	8006ea8 <_dtoa_r+0x100>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e7b8      	b.n	8006f2e <_dtoa_r+0x186>
 8006fbc:	9012      	str	r0, [sp, #72]	@ 0x48
 8006fbe:	e7b7      	b.n	8006f30 <_dtoa_r+0x188>
 8006fc0:	427b      	negs	r3, r7
 8006fc2:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	eba8 0807 	sub.w	r8, r8, r7
 8006fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006fcc:	e7c4      	b.n	8006f58 <_dtoa_r+0x1b0>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	dc35      	bgt.n	8007044 <_dtoa_r+0x29c>
 8006fd8:	2301      	movs	r3, #1
 8006fda:	9300      	str	r3, [sp, #0]
 8006fdc:	9307      	str	r3, [sp, #28]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fe2:	e00b      	b.n	8006ffc <_dtoa_r+0x254>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	e7f3      	b.n	8006fd0 <_dtoa_r+0x228>
 8006fe8:	2300      	movs	r3, #0
 8006fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fee:	18fb      	adds	r3, r7, r3
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	9307      	str	r3, [sp, #28]
 8006ff8:	bfb8      	it	lt
 8006ffa:	2301      	movlt	r3, #1
 8006ffc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007000:	2100      	movs	r1, #0
 8007002:	2204      	movs	r2, #4
 8007004:	f102 0514 	add.w	r5, r2, #20
 8007008:	429d      	cmp	r5, r3
 800700a:	d91f      	bls.n	800704c <_dtoa_r+0x2a4>
 800700c:	6041      	str	r1, [r0, #4]
 800700e:	4658      	mov	r0, fp
 8007010:	f000 fd8e 	bl	8007b30 <_Balloc>
 8007014:	4682      	mov	sl, r0
 8007016:	2800      	cmp	r0, #0
 8007018:	d13c      	bne.n	8007094 <_dtoa_r+0x2ec>
 800701a:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <_dtoa_r+0x2e0>)
 800701c:	4602      	mov	r2, r0
 800701e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007022:	e6d8      	b.n	8006dd6 <_dtoa_r+0x2e>
 8007024:	2301      	movs	r3, #1
 8007026:	e7e0      	b.n	8006fea <_dtoa_r+0x242>
 8007028:	2401      	movs	r4, #1
 800702a:	2300      	movs	r3, #0
 800702c:	9309      	str	r3, [sp, #36]	@ 0x24
 800702e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007030:	f04f 33ff 	mov.w	r3, #4294967295
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	9307      	str	r3, [sp, #28]
 8007038:	2200      	movs	r2, #0
 800703a:	2312      	movs	r3, #18
 800703c:	e7d0      	b.n	8006fe0 <_dtoa_r+0x238>
 800703e:	2301      	movs	r3, #1
 8007040:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007042:	e7f5      	b.n	8007030 <_dtoa_r+0x288>
 8007044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007046:	9300      	str	r3, [sp, #0]
 8007048:	9307      	str	r3, [sp, #28]
 800704a:	e7d7      	b.n	8006ffc <_dtoa_r+0x254>
 800704c:	3101      	adds	r1, #1
 800704e:	0052      	lsls	r2, r2, #1
 8007050:	e7d8      	b.n	8007004 <_dtoa_r+0x25c>
 8007052:	bf00      	nop
 8007054:	f3af 8000 	nop.w
 8007058:	636f4361 	.word	0x636f4361
 800705c:	3fd287a7 	.word	0x3fd287a7
 8007060:	8b60c8b3 	.word	0x8b60c8b3
 8007064:	3fc68a28 	.word	0x3fc68a28
 8007068:	509f79fb 	.word	0x509f79fb
 800706c:	3fd34413 	.word	0x3fd34413
 8007070:	08008edd 	.word	0x08008edd
 8007074:	08008ef4 	.word	0x08008ef4
 8007078:	7ff00000 	.word	0x7ff00000
 800707c:	08008ead 	.word	0x08008ead
 8007080:	3ff80000 	.word	0x3ff80000
 8007084:	08008ff0 	.word	0x08008ff0
 8007088:	08008f4c 	.word	0x08008f4c
 800708c:	08008ed9 	.word	0x08008ed9
 8007090:	08008eac 	.word	0x08008eac
 8007094:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007098:	6018      	str	r0, [r3, #0]
 800709a:	9b07      	ldr	r3, [sp, #28]
 800709c:	2b0e      	cmp	r3, #14
 800709e:	f200 80a4 	bhi.w	80071ea <_dtoa_r+0x442>
 80070a2:	2c00      	cmp	r4, #0
 80070a4:	f000 80a1 	beq.w	80071ea <_dtoa_r+0x442>
 80070a8:	2f00      	cmp	r7, #0
 80070aa:	dd33      	ble.n	8007114 <_dtoa_r+0x36c>
 80070ac:	4bad      	ldr	r3, [pc, #692]	@ (8007364 <_dtoa_r+0x5bc>)
 80070ae:	f007 020f 	and.w	r2, r7, #15
 80070b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b6:	ed93 7b00 	vldr	d7, [r3]
 80070ba:	05f8      	lsls	r0, r7, #23
 80070bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80070c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80070c4:	d516      	bpl.n	80070f4 <_dtoa_r+0x34c>
 80070c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007368 <_dtoa_r+0x5c0>)
 80070c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80070d0:	f7f9 fbbc 	bl	800084c <__aeabi_ddiv>
 80070d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070d8:	f004 040f 	and.w	r4, r4, #15
 80070dc:	2603      	movs	r6, #3
 80070de:	4da2      	ldr	r5, [pc, #648]	@ (8007368 <_dtoa_r+0x5c0>)
 80070e0:	b954      	cbnz	r4, 80070f8 <_dtoa_r+0x350>
 80070e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070ea:	f7f9 fbaf 	bl	800084c <__aeabi_ddiv>
 80070ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070f2:	e028      	b.n	8007146 <_dtoa_r+0x39e>
 80070f4:	2602      	movs	r6, #2
 80070f6:	e7f2      	b.n	80070de <_dtoa_r+0x336>
 80070f8:	07e1      	lsls	r1, r4, #31
 80070fa:	d508      	bpl.n	800710e <_dtoa_r+0x366>
 80070fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007100:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007104:	f7f9 fa78 	bl	80005f8 <__aeabi_dmul>
 8007108:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800710c:	3601      	adds	r6, #1
 800710e:	1064      	asrs	r4, r4, #1
 8007110:	3508      	adds	r5, #8
 8007112:	e7e5      	b.n	80070e0 <_dtoa_r+0x338>
 8007114:	f000 80d2 	beq.w	80072bc <_dtoa_r+0x514>
 8007118:	427c      	negs	r4, r7
 800711a:	4b92      	ldr	r3, [pc, #584]	@ (8007364 <_dtoa_r+0x5bc>)
 800711c:	4d92      	ldr	r5, [pc, #584]	@ (8007368 <_dtoa_r+0x5c0>)
 800711e:	f004 020f 	and.w	r2, r4, #15
 8007122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800712e:	f7f9 fa63 	bl	80005f8 <__aeabi_dmul>
 8007132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007136:	1124      	asrs	r4, r4, #4
 8007138:	2300      	movs	r3, #0
 800713a:	2602      	movs	r6, #2
 800713c:	2c00      	cmp	r4, #0
 800713e:	f040 80b2 	bne.w	80072a6 <_dtoa_r+0x4fe>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1d3      	bne.n	80070ee <_dtoa_r+0x346>
 8007146:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007148:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80b7 	beq.w	80072c0 <_dtoa_r+0x518>
 8007152:	4b86      	ldr	r3, [pc, #536]	@ (800736c <_dtoa_r+0x5c4>)
 8007154:	2200      	movs	r2, #0
 8007156:	4620      	mov	r0, r4
 8007158:	4629      	mov	r1, r5
 800715a:	f7f9 fcbf 	bl	8000adc <__aeabi_dcmplt>
 800715e:	2800      	cmp	r0, #0
 8007160:	f000 80ae 	beq.w	80072c0 <_dtoa_r+0x518>
 8007164:	9b07      	ldr	r3, [sp, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	f000 80aa 	beq.w	80072c0 <_dtoa_r+0x518>
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	dd37      	ble.n	80071e2 <_dtoa_r+0x43a>
 8007172:	1e7b      	subs	r3, r7, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	4620      	mov	r0, r4
 8007178:	4b7d      	ldr	r3, [pc, #500]	@ (8007370 <_dtoa_r+0x5c8>)
 800717a:	2200      	movs	r2, #0
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fa3b 	bl	80005f8 <__aeabi_dmul>
 8007182:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007186:	9c00      	ldr	r4, [sp, #0]
 8007188:	3601      	adds	r6, #1
 800718a:	4630      	mov	r0, r6
 800718c:	f7f9 f9ca 	bl	8000524 <__aeabi_i2d>
 8007190:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007194:	f7f9 fa30 	bl	80005f8 <__aeabi_dmul>
 8007198:	4b76      	ldr	r3, [pc, #472]	@ (8007374 <_dtoa_r+0x5cc>)
 800719a:	2200      	movs	r2, #0
 800719c:	f7f9 f876 	bl	800028c <__adddf3>
 80071a0:	4605      	mov	r5, r0
 80071a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071a6:	2c00      	cmp	r4, #0
 80071a8:	f040 808d 	bne.w	80072c6 <_dtoa_r+0x51e>
 80071ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071b0:	4b71      	ldr	r3, [pc, #452]	@ (8007378 <_dtoa_r+0x5d0>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	f7f9 f868 	bl	8000288 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80071c0:	462a      	mov	r2, r5
 80071c2:	4633      	mov	r3, r6
 80071c4:	f7f9 fca8 	bl	8000b18 <__aeabi_dcmpgt>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	f040 828b 	bne.w	80076e4 <_dtoa_r+0x93c>
 80071ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80071d2:	462a      	mov	r2, r5
 80071d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80071d8:	f7f9 fc80 	bl	8000adc <__aeabi_dcmplt>
 80071dc:	2800      	cmp	r0, #0
 80071de:	f040 8128 	bne.w	8007432 <_dtoa_r+0x68a>
 80071e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80071e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80071ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f2c0 815a 	blt.w	80074a6 <_dtoa_r+0x6fe>
 80071f2:	2f0e      	cmp	r7, #14
 80071f4:	f300 8157 	bgt.w	80074a6 <_dtoa_r+0x6fe>
 80071f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007364 <_dtoa_r+0x5bc>)
 80071fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071fe:	ed93 7b00 	vldr	d7, [r3]
 8007202:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007204:	2b00      	cmp	r3, #0
 8007206:	ed8d 7b00 	vstr	d7, [sp]
 800720a:	da03      	bge.n	8007214 <_dtoa_r+0x46c>
 800720c:	9b07      	ldr	r3, [sp, #28]
 800720e:	2b00      	cmp	r3, #0
 8007210:	f340 8101 	ble.w	8007416 <_dtoa_r+0x66e>
 8007214:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007218:	4656      	mov	r6, sl
 800721a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800721e:	4620      	mov	r0, r4
 8007220:	4629      	mov	r1, r5
 8007222:	f7f9 fb13 	bl	800084c <__aeabi_ddiv>
 8007226:	f7f9 fc97 	bl	8000b58 <__aeabi_d2iz>
 800722a:	4680      	mov	r8, r0
 800722c:	f7f9 f97a 	bl	8000524 <__aeabi_i2d>
 8007230:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007234:	f7f9 f9e0 	bl	80005f8 <__aeabi_dmul>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4620      	mov	r0, r4
 800723e:	4629      	mov	r1, r5
 8007240:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007244:	f7f9 f820 	bl	8000288 <__aeabi_dsub>
 8007248:	f806 4b01 	strb.w	r4, [r6], #1
 800724c:	9d07      	ldr	r5, [sp, #28]
 800724e:	eba6 040a 	sub.w	r4, r6, sl
 8007252:	42a5      	cmp	r5, r4
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	f040 8117 	bne.w	800748a <_dtoa_r+0x6e2>
 800725c:	f7f9 f816 	bl	800028c <__adddf3>
 8007260:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007264:	4604      	mov	r4, r0
 8007266:	460d      	mov	r5, r1
 8007268:	f7f9 fc56 	bl	8000b18 <__aeabi_dcmpgt>
 800726c:	2800      	cmp	r0, #0
 800726e:	f040 80f9 	bne.w	8007464 <_dtoa_r+0x6bc>
 8007272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800727e:	b118      	cbz	r0, 8007288 <_dtoa_r+0x4e0>
 8007280:	f018 0f01 	tst.w	r8, #1
 8007284:	f040 80ee 	bne.w	8007464 <_dtoa_r+0x6bc>
 8007288:	4649      	mov	r1, r9
 800728a:	4658      	mov	r0, fp
 800728c:	f000 fc90 	bl	8007bb0 <_Bfree>
 8007290:	2300      	movs	r3, #0
 8007292:	7033      	strb	r3, [r6, #0]
 8007294:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007296:	3701      	adds	r7, #1
 8007298:	601f      	str	r7, [r3, #0]
 800729a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 831d 	beq.w	80078dc <_dtoa_r+0xb34>
 80072a2:	601e      	str	r6, [r3, #0]
 80072a4:	e31a      	b.n	80078dc <_dtoa_r+0xb34>
 80072a6:	07e2      	lsls	r2, r4, #31
 80072a8:	d505      	bpl.n	80072b6 <_dtoa_r+0x50e>
 80072aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80072ae:	f7f9 f9a3 	bl	80005f8 <__aeabi_dmul>
 80072b2:	3601      	adds	r6, #1
 80072b4:	2301      	movs	r3, #1
 80072b6:	1064      	asrs	r4, r4, #1
 80072b8:	3508      	adds	r5, #8
 80072ba:	e73f      	b.n	800713c <_dtoa_r+0x394>
 80072bc:	2602      	movs	r6, #2
 80072be:	e742      	b.n	8007146 <_dtoa_r+0x39e>
 80072c0:	9c07      	ldr	r4, [sp, #28]
 80072c2:	9704      	str	r7, [sp, #16]
 80072c4:	e761      	b.n	800718a <_dtoa_r+0x3e2>
 80072c6:	4b27      	ldr	r3, [pc, #156]	@ (8007364 <_dtoa_r+0x5bc>)
 80072c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80072ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80072ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80072d2:	4454      	add	r4, sl
 80072d4:	2900      	cmp	r1, #0
 80072d6:	d053      	beq.n	8007380 <_dtoa_r+0x5d8>
 80072d8:	4928      	ldr	r1, [pc, #160]	@ (800737c <_dtoa_r+0x5d4>)
 80072da:	2000      	movs	r0, #0
 80072dc:	f7f9 fab6 	bl	800084c <__aeabi_ddiv>
 80072e0:	4633      	mov	r3, r6
 80072e2:	462a      	mov	r2, r5
 80072e4:	f7f8 ffd0 	bl	8000288 <__aeabi_dsub>
 80072e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80072ec:	4656      	mov	r6, sl
 80072ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072f2:	f7f9 fc31 	bl	8000b58 <__aeabi_d2iz>
 80072f6:	4605      	mov	r5, r0
 80072f8:	f7f9 f914 	bl	8000524 <__aeabi_i2d>
 80072fc:	4602      	mov	r2, r0
 80072fe:	460b      	mov	r3, r1
 8007300:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007304:	f7f8 ffc0 	bl	8000288 <__aeabi_dsub>
 8007308:	3530      	adds	r5, #48	@ 0x30
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007312:	f806 5b01 	strb.w	r5, [r6], #1
 8007316:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800731a:	f7f9 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800731e:	2800      	cmp	r0, #0
 8007320:	d171      	bne.n	8007406 <_dtoa_r+0x65e>
 8007322:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007326:	4911      	ldr	r1, [pc, #68]	@ (800736c <_dtoa_r+0x5c4>)
 8007328:	2000      	movs	r0, #0
 800732a:	f7f8 ffad 	bl	8000288 <__aeabi_dsub>
 800732e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007332:	f7f9 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8007336:	2800      	cmp	r0, #0
 8007338:	f040 8095 	bne.w	8007466 <_dtoa_r+0x6be>
 800733c:	42a6      	cmp	r6, r4
 800733e:	f43f af50 	beq.w	80071e2 <_dtoa_r+0x43a>
 8007342:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007346:	4b0a      	ldr	r3, [pc, #40]	@ (8007370 <_dtoa_r+0x5c8>)
 8007348:	2200      	movs	r2, #0
 800734a:	f7f9 f955 	bl	80005f8 <__aeabi_dmul>
 800734e:	4b08      	ldr	r3, [pc, #32]	@ (8007370 <_dtoa_r+0x5c8>)
 8007350:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007354:	2200      	movs	r2, #0
 8007356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735a:	f7f9 f94d 	bl	80005f8 <__aeabi_dmul>
 800735e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007362:	e7c4      	b.n	80072ee <_dtoa_r+0x546>
 8007364:	08008ff0 	.word	0x08008ff0
 8007368:	08008fc8 	.word	0x08008fc8
 800736c:	3ff00000 	.word	0x3ff00000
 8007370:	40240000 	.word	0x40240000
 8007374:	401c0000 	.word	0x401c0000
 8007378:	40140000 	.word	0x40140000
 800737c:	3fe00000 	.word	0x3fe00000
 8007380:	4631      	mov	r1, r6
 8007382:	4628      	mov	r0, r5
 8007384:	f7f9 f938 	bl	80005f8 <__aeabi_dmul>
 8007388:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800738c:	9415      	str	r4, [sp, #84]	@ 0x54
 800738e:	4656      	mov	r6, sl
 8007390:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007394:	f7f9 fbe0 	bl	8000b58 <__aeabi_d2iz>
 8007398:	4605      	mov	r5, r0
 800739a:	f7f9 f8c3 	bl	8000524 <__aeabi_i2d>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073a6:	f7f8 ff6f 	bl	8000288 <__aeabi_dsub>
 80073aa:	3530      	adds	r5, #48	@ 0x30
 80073ac:	f806 5b01 	strb.w	r5, [r6], #1
 80073b0:	4602      	mov	r2, r0
 80073b2:	460b      	mov	r3, r1
 80073b4:	42a6      	cmp	r6, r4
 80073b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	d124      	bne.n	800740a <_dtoa_r+0x662>
 80073c0:	4bac      	ldr	r3, [pc, #688]	@ (8007674 <_dtoa_r+0x8cc>)
 80073c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073c6:	f7f8 ff61 	bl	800028c <__adddf3>
 80073ca:	4602      	mov	r2, r0
 80073cc:	460b      	mov	r3, r1
 80073ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073d2:	f7f9 fba1 	bl	8000b18 <__aeabi_dcmpgt>
 80073d6:	2800      	cmp	r0, #0
 80073d8:	d145      	bne.n	8007466 <_dtoa_r+0x6be>
 80073da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073de:	49a5      	ldr	r1, [pc, #660]	@ (8007674 <_dtoa_r+0x8cc>)
 80073e0:	2000      	movs	r0, #0
 80073e2:	f7f8 ff51 	bl	8000288 <__aeabi_dsub>
 80073e6:	4602      	mov	r2, r0
 80073e8:	460b      	mov	r3, r1
 80073ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ee:	f7f9 fb75 	bl	8000adc <__aeabi_dcmplt>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	f43f aef5 	beq.w	80071e2 <_dtoa_r+0x43a>
 80073f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80073fa:	1e73      	subs	r3, r6, #1
 80073fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80073fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007402:	2b30      	cmp	r3, #48	@ 0x30
 8007404:	d0f8      	beq.n	80073f8 <_dtoa_r+0x650>
 8007406:	9f04      	ldr	r7, [sp, #16]
 8007408:	e73e      	b.n	8007288 <_dtoa_r+0x4e0>
 800740a:	4b9b      	ldr	r3, [pc, #620]	@ (8007678 <_dtoa_r+0x8d0>)
 800740c:	f7f9 f8f4 	bl	80005f8 <__aeabi_dmul>
 8007410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007414:	e7bc      	b.n	8007390 <_dtoa_r+0x5e8>
 8007416:	d10c      	bne.n	8007432 <_dtoa_r+0x68a>
 8007418:	4b98      	ldr	r3, [pc, #608]	@ (800767c <_dtoa_r+0x8d4>)
 800741a:	2200      	movs	r2, #0
 800741c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007420:	f7f9 f8ea 	bl	80005f8 <__aeabi_dmul>
 8007424:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007428:	f7f9 fb6c 	bl	8000b04 <__aeabi_dcmpge>
 800742c:	2800      	cmp	r0, #0
 800742e:	f000 8157 	beq.w	80076e0 <_dtoa_r+0x938>
 8007432:	2400      	movs	r4, #0
 8007434:	4625      	mov	r5, r4
 8007436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007438:	43db      	mvns	r3, r3
 800743a:	9304      	str	r3, [sp, #16]
 800743c:	4656      	mov	r6, sl
 800743e:	2700      	movs	r7, #0
 8007440:	4621      	mov	r1, r4
 8007442:	4658      	mov	r0, fp
 8007444:	f000 fbb4 	bl	8007bb0 <_Bfree>
 8007448:	2d00      	cmp	r5, #0
 800744a:	d0dc      	beq.n	8007406 <_dtoa_r+0x65e>
 800744c:	b12f      	cbz	r7, 800745a <_dtoa_r+0x6b2>
 800744e:	42af      	cmp	r7, r5
 8007450:	d003      	beq.n	800745a <_dtoa_r+0x6b2>
 8007452:	4639      	mov	r1, r7
 8007454:	4658      	mov	r0, fp
 8007456:	f000 fbab 	bl	8007bb0 <_Bfree>
 800745a:	4629      	mov	r1, r5
 800745c:	4658      	mov	r0, fp
 800745e:	f000 fba7 	bl	8007bb0 <_Bfree>
 8007462:	e7d0      	b.n	8007406 <_dtoa_r+0x65e>
 8007464:	9704      	str	r7, [sp, #16]
 8007466:	4633      	mov	r3, r6
 8007468:	461e      	mov	r6, r3
 800746a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800746e:	2a39      	cmp	r2, #57	@ 0x39
 8007470:	d107      	bne.n	8007482 <_dtoa_r+0x6da>
 8007472:	459a      	cmp	sl, r3
 8007474:	d1f8      	bne.n	8007468 <_dtoa_r+0x6c0>
 8007476:	9a04      	ldr	r2, [sp, #16]
 8007478:	3201      	adds	r2, #1
 800747a:	9204      	str	r2, [sp, #16]
 800747c:	2230      	movs	r2, #48	@ 0x30
 800747e:	f88a 2000 	strb.w	r2, [sl]
 8007482:	781a      	ldrb	r2, [r3, #0]
 8007484:	3201      	adds	r2, #1
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	e7bd      	b.n	8007406 <_dtoa_r+0x65e>
 800748a:	4b7b      	ldr	r3, [pc, #492]	@ (8007678 <_dtoa_r+0x8d0>)
 800748c:	2200      	movs	r2, #0
 800748e:	f7f9 f8b3 	bl	80005f8 <__aeabi_dmul>
 8007492:	2200      	movs	r2, #0
 8007494:	2300      	movs	r3, #0
 8007496:	4604      	mov	r4, r0
 8007498:	460d      	mov	r5, r1
 800749a:	f7f9 fb15 	bl	8000ac8 <__aeabi_dcmpeq>
 800749e:	2800      	cmp	r0, #0
 80074a0:	f43f aebb 	beq.w	800721a <_dtoa_r+0x472>
 80074a4:	e6f0      	b.n	8007288 <_dtoa_r+0x4e0>
 80074a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	f000 80db 	beq.w	8007664 <_dtoa_r+0x8bc>
 80074ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074b0:	2a01      	cmp	r2, #1
 80074b2:	f300 80bf 	bgt.w	8007634 <_dtoa_r+0x88c>
 80074b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80074b8:	2a00      	cmp	r2, #0
 80074ba:	f000 80b7 	beq.w	800762c <_dtoa_r+0x884>
 80074be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80074c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80074c4:	4646      	mov	r6, r8
 80074c6:	9a08      	ldr	r2, [sp, #32]
 80074c8:	2101      	movs	r1, #1
 80074ca:	441a      	add	r2, r3
 80074cc:	4658      	mov	r0, fp
 80074ce:	4498      	add	r8, r3
 80074d0:	9208      	str	r2, [sp, #32]
 80074d2:	f000 fc21 	bl	8007d18 <__i2b>
 80074d6:	4605      	mov	r5, r0
 80074d8:	b15e      	cbz	r6, 80074f2 <_dtoa_r+0x74a>
 80074da:	9b08      	ldr	r3, [sp, #32]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd08      	ble.n	80074f2 <_dtoa_r+0x74a>
 80074e0:	42b3      	cmp	r3, r6
 80074e2:	9a08      	ldr	r2, [sp, #32]
 80074e4:	bfa8      	it	ge
 80074e6:	4633      	movge	r3, r6
 80074e8:	eba8 0803 	sub.w	r8, r8, r3
 80074ec:	1af6      	subs	r6, r6, r3
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	9308      	str	r3, [sp, #32]
 80074f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074f4:	b1f3      	cbz	r3, 8007534 <_dtoa_r+0x78c>
 80074f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80b7 	beq.w	800766c <_dtoa_r+0x8c4>
 80074fe:	b18c      	cbz	r4, 8007524 <_dtoa_r+0x77c>
 8007500:	4629      	mov	r1, r5
 8007502:	4622      	mov	r2, r4
 8007504:	4658      	mov	r0, fp
 8007506:	f000 fcc7 	bl	8007e98 <__pow5mult>
 800750a:	464a      	mov	r2, r9
 800750c:	4601      	mov	r1, r0
 800750e:	4605      	mov	r5, r0
 8007510:	4658      	mov	r0, fp
 8007512:	f000 fc17 	bl	8007d44 <__multiply>
 8007516:	4649      	mov	r1, r9
 8007518:	9004      	str	r0, [sp, #16]
 800751a:	4658      	mov	r0, fp
 800751c:	f000 fb48 	bl	8007bb0 <_Bfree>
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	4699      	mov	r9, r3
 8007524:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007526:	1b1a      	subs	r2, r3, r4
 8007528:	d004      	beq.n	8007534 <_dtoa_r+0x78c>
 800752a:	4649      	mov	r1, r9
 800752c:	4658      	mov	r0, fp
 800752e:	f000 fcb3 	bl	8007e98 <__pow5mult>
 8007532:	4681      	mov	r9, r0
 8007534:	2101      	movs	r1, #1
 8007536:	4658      	mov	r0, fp
 8007538:	f000 fbee 	bl	8007d18 <__i2b>
 800753c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800753e:	4604      	mov	r4, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 81cf 	beq.w	80078e4 <_dtoa_r+0xb3c>
 8007546:	461a      	mov	r2, r3
 8007548:	4601      	mov	r1, r0
 800754a:	4658      	mov	r0, fp
 800754c:	f000 fca4 	bl	8007e98 <__pow5mult>
 8007550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007552:	2b01      	cmp	r3, #1
 8007554:	4604      	mov	r4, r0
 8007556:	f300 8095 	bgt.w	8007684 <_dtoa_r+0x8dc>
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	2b00      	cmp	r3, #0
 800755e:	f040 8087 	bne.w	8007670 <_dtoa_r+0x8c8>
 8007562:	9b03      	ldr	r3, [sp, #12]
 8007564:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007568:	2b00      	cmp	r3, #0
 800756a:	f040 8089 	bne.w	8007680 <_dtoa_r+0x8d8>
 800756e:	9b03      	ldr	r3, [sp, #12]
 8007570:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007574:	0d1b      	lsrs	r3, r3, #20
 8007576:	051b      	lsls	r3, r3, #20
 8007578:	b12b      	cbz	r3, 8007586 <_dtoa_r+0x7de>
 800757a:	9b08      	ldr	r3, [sp, #32]
 800757c:	3301      	adds	r3, #1
 800757e:	9308      	str	r3, [sp, #32]
 8007580:	f108 0801 	add.w	r8, r8, #1
 8007584:	2301      	movs	r3, #1
 8007586:	930a      	str	r3, [sp, #40]	@ 0x28
 8007588:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800758a:	2b00      	cmp	r3, #0
 800758c:	f000 81b0 	beq.w	80078f0 <_dtoa_r+0xb48>
 8007590:	6923      	ldr	r3, [r4, #16]
 8007592:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007596:	6918      	ldr	r0, [r3, #16]
 8007598:	f000 fb72 	bl	8007c80 <__hi0bits>
 800759c:	f1c0 0020 	rsb	r0, r0, #32
 80075a0:	9b08      	ldr	r3, [sp, #32]
 80075a2:	4418      	add	r0, r3
 80075a4:	f010 001f 	ands.w	r0, r0, #31
 80075a8:	d077      	beq.n	800769a <_dtoa_r+0x8f2>
 80075aa:	f1c0 0320 	rsb	r3, r0, #32
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	dd6b      	ble.n	800768a <_dtoa_r+0x8e2>
 80075b2:	9b08      	ldr	r3, [sp, #32]
 80075b4:	f1c0 001c 	rsb	r0, r0, #28
 80075b8:	4403      	add	r3, r0
 80075ba:	4480      	add	r8, r0
 80075bc:	4406      	add	r6, r0
 80075be:	9308      	str	r3, [sp, #32]
 80075c0:	f1b8 0f00 	cmp.w	r8, #0
 80075c4:	dd05      	ble.n	80075d2 <_dtoa_r+0x82a>
 80075c6:	4649      	mov	r1, r9
 80075c8:	4642      	mov	r2, r8
 80075ca:	4658      	mov	r0, fp
 80075cc:	f000 fcbe 	bl	8007f4c <__lshift>
 80075d0:	4681      	mov	r9, r0
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dd05      	ble.n	80075e4 <_dtoa_r+0x83c>
 80075d8:	4621      	mov	r1, r4
 80075da:	461a      	mov	r2, r3
 80075dc:	4658      	mov	r0, fp
 80075de:	f000 fcb5 	bl	8007f4c <__lshift>
 80075e2:	4604      	mov	r4, r0
 80075e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d059      	beq.n	800769e <_dtoa_r+0x8f6>
 80075ea:	4621      	mov	r1, r4
 80075ec:	4648      	mov	r0, r9
 80075ee:	f000 fd19 	bl	8008024 <__mcmp>
 80075f2:	2800      	cmp	r0, #0
 80075f4:	da53      	bge.n	800769e <_dtoa_r+0x8f6>
 80075f6:	1e7b      	subs	r3, r7, #1
 80075f8:	9304      	str	r3, [sp, #16]
 80075fa:	4649      	mov	r1, r9
 80075fc:	2300      	movs	r3, #0
 80075fe:	220a      	movs	r2, #10
 8007600:	4658      	mov	r0, fp
 8007602:	f000 faf7 	bl	8007bf4 <__multadd>
 8007606:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007608:	4681      	mov	r9, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	f000 8172 	beq.w	80078f4 <_dtoa_r+0xb4c>
 8007610:	2300      	movs	r3, #0
 8007612:	4629      	mov	r1, r5
 8007614:	220a      	movs	r2, #10
 8007616:	4658      	mov	r0, fp
 8007618:	f000 faec 	bl	8007bf4 <__multadd>
 800761c:	9b00      	ldr	r3, [sp, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	4605      	mov	r5, r0
 8007622:	dc67      	bgt.n	80076f4 <_dtoa_r+0x94c>
 8007624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007626:	2b02      	cmp	r3, #2
 8007628:	dc41      	bgt.n	80076ae <_dtoa_r+0x906>
 800762a:	e063      	b.n	80076f4 <_dtoa_r+0x94c>
 800762c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800762e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007632:	e746      	b.n	80074c2 <_dtoa_r+0x71a>
 8007634:	9b07      	ldr	r3, [sp, #28]
 8007636:	1e5c      	subs	r4, r3, #1
 8007638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800763a:	42a3      	cmp	r3, r4
 800763c:	bfbf      	itttt	lt
 800763e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007640:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007642:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007644:	1ae3      	sublt	r3, r4, r3
 8007646:	bfb4      	ite	lt
 8007648:	18d2      	addlt	r2, r2, r3
 800764a:	1b1c      	subge	r4, r3, r4
 800764c:	9b07      	ldr	r3, [sp, #28]
 800764e:	bfbc      	itt	lt
 8007650:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007652:	2400      	movlt	r4, #0
 8007654:	2b00      	cmp	r3, #0
 8007656:	bfb5      	itete	lt
 8007658:	eba8 0603 	sublt.w	r6, r8, r3
 800765c:	9b07      	ldrge	r3, [sp, #28]
 800765e:	2300      	movlt	r3, #0
 8007660:	4646      	movge	r6, r8
 8007662:	e730      	b.n	80074c6 <_dtoa_r+0x71e>
 8007664:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007666:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007668:	4646      	mov	r6, r8
 800766a:	e735      	b.n	80074d8 <_dtoa_r+0x730>
 800766c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800766e:	e75c      	b.n	800752a <_dtoa_r+0x782>
 8007670:	2300      	movs	r3, #0
 8007672:	e788      	b.n	8007586 <_dtoa_r+0x7de>
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	40240000 	.word	0x40240000
 800767c:	40140000 	.word	0x40140000
 8007680:	9b02      	ldr	r3, [sp, #8]
 8007682:	e780      	b.n	8007586 <_dtoa_r+0x7de>
 8007684:	2300      	movs	r3, #0
 8007686:	930a      	str	r3, [sp, #40]	@ 0x28
 8007688:	e782      	b.n	8007590 <_dtoa_r+0x7e8>
 800768a:	d099      	beq.n	80075c0 <_dtoa_r+0x818>
 800768c:	9a08      	ldr	r2, [sp, #32]
 800768e:	331c      	adds	r3, #28
 8007690:	441a      	add	r2, r3
 8007692:	4498      	add	r8, r3
 8007694:	441e      	add	r6, r3
 8007696:	9208      	str	r2, [sp, #32]
 8007698:	e792      	b.n	80075c0 <_dtoa_r+0x818>
 800769a:	4603      	mov	r3, r0
 800769c:	e7f6      	b.n	800768c <_dtoa_r+0x8e4>
 800769e:	9b07      	ldr	r3, [sp, #28]
 80076a0:	9704      	str	r7, [sp, #16]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	dc20      	bgt.n	80076e8 <_dtoa_r+0x940>
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	dd1e      	ble.n	80076ec <_dtoa_r+0x944>
 80076ae:	9b00      	ldr	r3, [sp, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	f47f aec0 	bne.w	8007436 <_dtoa_r+0x68e>
 80076b6:	4621      	mov	r1, r4
 80076b8:	2205      	movs	r2, #5
 80076ba:	4658      	mov	r0, fp
 80076bc:	f000 fa9a 	bl	8007bf4 <__multadd>
 80076c0:	4601      	mov	r1, r0
 80076c2:	4604      	mov	r4, r0
 80076c4:	4648      	mov	r0, r9
 80076c6:	f000 fcad 	bl	8008024 <__mcmp>
 80076ca:	2800      	cmp	r0, #0
 80076cc:	f77f aeb3 	ble.w	8007436 <_dtoa_r+0x68e>
 80076d0:	4656      	mov	r6, sl
 80076d2:	2331      	movs	r3, #49	@ 0x31
 80076d4:	f806 3b01 	strb.w	r3, [r6], #1
 80076d8:	9b04      	ldr	r3, [sp, #16]
 80076da:	3301      	adds	r3, #1
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	e6ae      	b.n	800743e <_dtoa_r+0x696>
 80076e0:	9c07      	ldr	r4, [sp, #28]
 80076e2:	9704      	str	r7, [sp, #16]
 80076e4:	4625      	mov	r5, r4
 80076e6:	e7f3      	b.n	80076d0 <_dtoa_r+0x928>
 80076e8:	9b07      	ldr	r3, [sp, #28]
 80076ea:	9300      	str	r3, [sp, #0]
 80076ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f000 8104 	beq.w	80078fc <_dtoa_r+0xb54>
 80076f4:	2e00      	cmp	r6, #0
 80076f6:	dd05      	ble.n	8007704 <_dtoa_r+0x95c>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4632      	mov	r2, r6
 80076fc:	4658      	mov	r0, fp
 80076fe:	f000 fc25 	bl	8007f4c <__lshift>
 8007702:	4605      	mov	r5, r0
 8007704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007706:	2b00      	cmp	r3, #0
 8007708:	d05a      	beq.n	80077c0 <_dtoa_r+0xa18>
 800770a:	6869      	ldr	r1, [r5, #4]
 800770c:	4658      	mov	r0, fp
 800770e:	f000 fa0f 	bl	8007b30 <_Balloc>
 8007712:	4606      	mov	r6, r0
 8007714:	b928      	cbnz	r0, 8007722 <_dtoa_r+0x97a>
 8007716:	4b84      	ldr	r3, [pc, #528]	@ (8007928 <_dtoa_r+0xb80>)
 8007718:	4602      	mov	r2, r0
 800771a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800771e:	f7ff bb5a 	b.w	8006dd6 <_dtoa_r+0x2e>
 8007722:	692a      	ldr	r2, [r5, #16]
 8007724:	3202      	adds	r2, #2
 8007726:	0092      	lsls	r2, r2, #2
 8007728:	f105 010c 	add.w	r1, r5, #12
 800772c:	300c      	adds	r0, #12
 800772e:	f7ff faa2 	bl	8006c76 <memcpy>
 8007732:	2201      	movs	r2, #1
 8007734:	4631      	mov	r1, r6
 8007736:	4658      	mov	r0, fp
 8007738:	f000 fc08 	bl	8007f4c <__lshift>
 800773c:	f10a 0301 	add.w	r3, sl, #1
 8007740:	9307      	str	r3, [sp, #28]
 8007742:	9b00      	ldr	r3, [sp, #0]
 8007744:	4453      	add	r3, sl
 8007746:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007748:	9b02      	ldr	r3, [sp, #8]
 800774a:	f003 0301 	and.w	r3, r3, #1
 800774e:	462f      	mov	r7, r5
 8007750:	930a      	str	r3, [sp, #40]	@ 0x28
 8007752:	4605      	mov	r5, r0
 8007754:	9b07      	ldr	r3, [sp, #28]
 8007756:	4621      	mov	r1, r4
 8007758:	3b01      	subs	r3, #1
 800775a:	4648      	mov	r0, r9
 800775c:	9300      	str	r3, [sp, #0]
 800775e:	f7ff fa98 	bl	8006c92 <quorem>
 8007762:	4639      	mov	r1, r7
 8007764:	9002      	str	r0, [sp, #8]
 8007766:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800776a:	4648      	mov	r0, r9
 800776c:	f000 fc5a 	bl	8008024 <__mcmp>
 8007770:	462a      	mov	r2, r5
 8007772:	9008      	str	r0, [sp, #32]
 8007774:	4621      	mov	r1, r4
 8007776:	4658      	mov	r0, fp
 8007778:	f000 fc70 	bl	800805c <__mdiff>
 800777c:	68c2      	ldr	r2, [r0, #12]
 800777e:	4606      	mov	r6, r0
 8007780:	bb02      	cbnz	r2, 80077c4 <_dtoa_r+0xa1c>
 8007782:	4601      	mov	r1, r0
 8007784:	4648      	mov	r0, r9
 8007786:	f000 fc4d 	bl	8008024 <__mcmp>
 800778a:	4602      	mov	r2, r0
 800778c:	4631      	mov	r1, r6
 800778e:	4658      	mov	r0, fp
 8007790:	920e      	str	r2, [sp, #56]	@ 0x38
 8007792:	f000 fa0d 	bl	8007bb0 <_Bfree>
 8007796:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007798:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800779a:	9e07      	ldr	r6, [sp, #28]
 800779c:	ea43 0102 	orr.w	r1, r3, r2
 80077a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077a2:	4319      	orrs	r1, r3
 80077a4:	d110      	bne.n	80077c8 <_dtoa_r+0xa20>
 80077a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077aa:	d029      	beq.n	8007800 <_dtoa_r+0xa58>
 80077ac:	9b08      	ldr	r3, [sp, #32]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	dd02      	ble.n	80077b8 <_dtoa_r+0xa10>
 80077b2:	9b02      	ldr	r3, [sp, #8]
 80077b4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80077b8:	9b00      	ldr	r3, [sp, #0]
 80077ba:	f883 8000 	strb.w	r8, [r3]
 80077be:	e63f      	b.n	8007440 <_dtoa_r+0x698>
 80077c0:	4628      	mov	r0, r5
 80077c2:	e7bb      	b.n	800773c <_dtoa_r+0x994>
 80077c4:	2201      	movs	r2, #1
 80077c6:	e7e1      	b.n	800778c <_dtoa_r+0x9e4>
 80077c8:	9b08      	ldr	r3, [sp, #32]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	db04      	blt.n	80077d8 <_dtoa_r+0xa30>
 80077ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077d0:	430b      	orrs	r3, r1
 80077d2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077d4:	430b      	orrs	r3, r1
 80077d6:	d120      	bne.n	800781a <_dtoa_r+0xa72>
 80077d8:	2a00      	cmp	r2, #0
 80077da:	dded      	ble.n	80077b8 <_dtoa_r+0xa10>
 80077dc:	4649      	mov	r1, r9
 80077de:	2201      	movs	r2, #1
 80077e0:	4658      	mov	r0, fp
 80077e2:	f000 fbb3 	bl	8007f4c <__lshift>
 80077e6:	4621      	mov	r1, r4
 80077e8:	4681      	mov	r9, r0
 80077ea:	f000 fc1b 	bl	8008024 <__mcmp>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	dc03      	bgt.n	80077fa <_dtoa_r+0xa52>
 80077f2:	d1e1      	bne.n	80077b8 <_dtoa_r+0xa10>
 80077f4:	f018 0f01 	tst.w	r8, #1
 80077f8:	d0de      	beq.n	80077b8 <_dtoa_r+0xa10>
 80077fa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80077fe:	d1d8      	bne.n	80077b2 <_dtoa_r+0xa0a>
 8007800:	9a00      	ldr	r2, [sp, #0]
 8007802:	2339      	movs	r3, #57	@ 0x39
 8007804:	7013      	strb	r3, [r2, #0]
 8007806:	4633      	mov	r3, r6
 8007808:	461e      	mov	r6, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007810:	2a39      	cmp	r2, #57	@ 0x39
 8007812:	d052      	beq.n	80078ba <_dtoa_r+0xb12>
 8007814:	3201      	adds	r2, #1
 8007816:	701a      	strb	r2, [r3, #0]
 8007818:	e612      	b.n	8007440 <_dtoa_r+0x698>
 800781a:	2a00      	cmp	r2, #0
 800781c:	dd07      	ble.n	800782e <_dtoa_r+0xa86>
 800781e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007822:	d0ed      	beq.n	8007800 <_dtoa_r+0xa58>
 8007824:	9a00      	ldr	r2, [sp, #0]
 8007826:	f108 0301 	add.w	r3, r8, #1
 800782a:	7013      	strb	r3, [r2, #0]
 800782c:	e608      	b.n	8007440 <_dtoa_r+0x698>
 800782e:	9b07      	ldr	r3, [sp, #28]
 8007830:	9a07      	ldr	r2, [sp, #28]
 8007832:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007838:	4293      	cmp	r3, r2
 800783a:	d028      	beq.n	800788e <_dtoa_r+0xae6>
 800783c:	4649      	mov	r1, r9
 800783e:	2300      	movs	r3, #0
 8007840:	220a      	movs	r2, #10
 8007842:	4658      	mov	r0, fp
 8007844:	f000 f9d6 	bl	8007bf4 <__multadd>
 8007848:	42af      	cmp	r7, r5
 800784a:	4681      	mov	r9, r0
 800784c:	f04f 0300 	mov.w	r3, #0
 8007850:	f04f 020a 	mov.w	r2, #10
 8007854:	4639      	mov	r1, r7
 8007856:	4658      	mov	r0, fp
 8007858:	d107      	bne.n	800786a <_dtoa_r+0xac2>
 800785a:	f000 f9cb 	bl	8007bf4 <__multadd>
 800785e:	4607      	mov	r7, r0
 8007860:	4605      	mov	r5, r0
 8007862:	9b07      	ldr	r3, [sp, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	e774      	b.n	8007754 <_dtoa_r+0x9ac>
 800786a:	f000 f9c3 	bl	8007bf4 <__multadd>
 800786e:	4629      	mov	r1, r5
 8007870:	4607      	mov	r7, r0
 8007872:	2300      	movs	r3, #0
 8007874:	220a      	movs	r2, #10
 8007876:	4658      	mov	r0, fp
 8007878:	f000 f9bc 	bl	8007bf4 <__multadd>
 800787c:	4605      	mov	r5, r0
 800787e:	e7f0      	b.n	8007862 <_dtoa_r+0xaba>
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfcc      	ite	gt
 8007886:	461e      	movgt	r6, r3
 8007888:	2601      	movle	r6, #1
 800788a:	4456      	add	r6, sl
 800788c:	2700      	movs	r7, #0
 800788e:	4649      	mov	r1, r9
 8007890:	2201      	movs	r2, #1
 8007892:	4658      	mov	r0, fp
 8007894:	f000 fb5a 	bl	8007f4c <__lshift>
 8007898:	4621      	mov	r1, r4
 800789a:	4681      	mov	r9, r0
 800789c:	f000 fbc2 	bl	8008024 <__mcmp>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	dcb0      	bgt.n	8007806 <_dtoa_r+0xa5e>
 80078a4:	d102      	bne.n	80078ac <_dtoa_r+0xb04>
 80078a6:	f018 0f01 	tst.w	r8, #1
 80078aa:	d1ac      	bne.n	8007806 <_dtoa_r+0xa5e>
 80078ac:	4633      	mov	r3, r6
 80078ae:	461e      	mov	r6, r3
 80078b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078b4:	2a30      	cmp	r2, #48	@ 0x30
 80078b6:	d0fa      	beq.n	80078ae <_dtoa_r+0xb06>
 80078b8:	e5c2      	b.n	8007440 <_dtoa_r+0x698>
 80078ba:	459a      	cmp	sl, r3
 80078bc:	d1a4      	bne.n	8007808 <_dtoa_r+0xa60>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	3301      	adds	r3, #1
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	2331      	movs	r3, #49	@ 0x31
 80078c6:	f88a 3000 	strb.w	r3, [sl]
 80078ca:	e5b9      	b.n	8007440 <_dtoa_r+0x698>
 80078cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80078ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800792c <_dtoa_r+0xb84>
 80078d2:	b11b      	cbz	r3, 80078dc <_dtoa_r+0xb34>
 80078d4:	f10a 0308 	add.w	r3, sl, #8
 80078d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80078da:	6013      	str	r3, [r2, #0]
 80078dc:	4650      	mov	r0, sl
 80078de:	b019      	add	sp, #100	@ 0x64
 80078e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e6:	2b01      	cmp	r3, #1
 80078e8:	f77f ae37 	ble.w	800755a <_dtoa_r+0x7b2>
 80078ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f0:	2001      	movs	r0, #1
 80078f2:	e655      	b.n	80075a0 <_dtoa_r+0x7f8>
 80078f4:	9b00      	ldr	r3, [sp, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f77f aed6 	ble.w	80076a8 <_dtoa_r+0x900>
 80078fc:	4656      	mov	r6, sl
 80078fe:	4621      	mov	r1, r4
 8007900:	4648      	mov	r0, r9
 8007902:	f7ff f9c6 	bl	8006c92 <quorem>
 8007906:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800790a:	f806 8b01 	strb.w	r8, [r6], #1
 800790e:	9b00      	ldr	r3, [sp, #0]
 8007910:	eba6 020a 	sub.w	r2, r6, sl
 8007914:	4293      	cmp	r3, r2
 8007916:	ddb3      	ble.n	8007880 <_dtoa_r+0xad8>
 8007918:	4649      	mov	r1, r9
 800791a:	2300      	movs	r3, #0
 800791c:	220a      	movs	r2, #10
 800791e:	4658      	mov	r0, fp
 8007920:	f000 f968 	bl	8007bf4 <__multadd>
 8007924:	4681      	mov	r9, r0
 8007926:	e7ea      	b.n	80078fe <_dtoa_r+0xb56>
 8007928:	08008f4c 	.word	0x08008f4c
 800792c:	08008ed0 	.word	0x08008ed0

08007930 <_free_r>:
 8007930:	b538      	push	{r3, r4, r5, lr}
 8007932:	4605      	mov	r5, r0
 8007934:	2900      	cmp	r1, #0
 8007936:	d041      	beq.n	80079bc <_free_r+0x8c>
 8007938:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800793c:	1f0c      	subs	r4, r1, #4
 800793e:	2b00      	cmp	r3, #0
 8007940:	bfb8      	it	lt
 8007942:	18e4      	addlt	r4, r4, r3
 8007944:	f000 f8e8 	bl	8007b18 <__malloc_lock>
 8007948:	4a1d      	ldr	r2, [pc, #116]	@ (80079c0 <_free_r+0x90>)
 800794a:	6813      	ldr	r3, [r2, #0]
 800794c:	b933      	cbnz	r3, 800795c <_free_r+0x2c>
 800794e:	6063      	str	r3, [r4, #4]
 8007950:	6014      	str	r4, [r2, #0]
 8007952:	4628      	mov	r0, r5
 8007954:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007958:	f000 b8e4 	b.w	8007b24 <__malloc_unlock>
 800795c:	42a3      	cmp	r3, r4
 800795e:	d908      	bls.n	8007972 <_free_r+0x42>
 8007960:	6820      	ldr	r0, [r4, #0]
 8007962:	1821      	adds	r1, r4, r0
 8007964:	428b      	cmp	r3, r1
 8007966:	bf01      	itttt	eq
 8007968:	6819      	ldreq	r1, [r3, #0]
 800796a:	685b      	ldreq	r3, [r3, #4]
 800796c:	1809      	addeq	r1, r1, r0
 800796e:	6021      	streq	r1, [r4, #0]
 8007970:	e7ed      	b.n	800794e <_free_r+0x1e>
 8007972:	461a      	mov	r2, r3
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	b10b      	cbz	r3, 800797c <_free_r+0x4c>
 8007978:	42a3      	cmp	r3, r4
 800797a:	d9fa      	bls.n	8007972 <_free_r+0x42>
 800797c:	6811      	ldr	r1, [r2, #0]
 800797e:	1850      	adds	r0, r2, r1
 8007980:	42a0      	cmp	r0, r4
 8007982:	d10b      	bne.n	800799c <_free_r+0x6c>
 8007984:	6820      	ldr	r0, [r4, #0]
 8007986:	4401      	add	r1, r0
 8007988:	1850      	adds	r0, r2, r1
 800798a:	4283      	cmp	r3, r0
 800798c:	6011      	str	r1, [r2, #0]
 800798e:	d1e0      	bne.n	8007952 <_free_r+0x22>
 8007990:	6818      	ldr	r0, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	6053      	str	r3, [r2, #4]
 8007996:	4408      	add	r0, r1
 8007998:	6010      	str	r0, [r2, #0]
 800799a:	e7da      	b.n	8007952 <_free_r+0x22>
 800799c:	d902      	bls.n	80079a4 <_free_r+0x74>
 800799e:	230c      	movs	r3, #12
 80079a0:	602b      	str	r3, [r5, #0]
 80079a2:	e7d6      	b.n	8007952 <_free_r+0x22>
 80079a4:	6820      	ldr	r0, [r4, #0]
 80079a6:	1821      	adds	r1, r4, r0
 80079a8:	428b      	cmp	r3, r1
 80079aa:	bf04      	itt	eq
 80079ac:	6819      	ldreq	r1, [r3, #0]
 80079ae:	685b      	ldreq	r3, [r3, #4]
 80079b0:	6063      	str	r3, [r4, #4]
 80079b2:	bf04      	itt	eq
 80079b4:	1809      	addeq	r1, r1, r0
 80079b6:	6021      	streq	r1, [r4, #0]
 80079b8:	6054      	str	r4, [r2, #4]
 80079ba:	e7ca      	b.n	8007952 <_free_r+0x22>
 80079bc:	bd38      	pop	{r3, r4, r5, pc}
 80079be:	bf00      	nop
 80079c0:	20004e48 	.word	0x20004e48

080079c4 <malloc>:
 80079c4:	4b02      	ldr	r3, [pc, #8]	@ (80079d0 <malloc+0xc>)
 80079c6:	4601      	mov	r1, r0
 80079c8:	6818      	ldr	r0, [r3, #0]
 80079ca:	f000 b825 	b.w	8007a18 <_malloc_r>
 80079ce:	bf00      	nop
 80079d0:	2000001c 	.word	0x2000001c

080079d4 <sbrk_aligned>:
 80079d4:	b570      	push	{r4, r5, r6, lr}
 80079d6:	4e0f      	ldr	r6, [pc, #60]	@ (8007a14 <sbrk_aligned+0x40>)
 80079d8:	460c      	mov	r4, r1
 80079da:	6831      	ldr	r1, [r6, #0]
 80079dc:	4605      	mov	r5, r0
 80079de:	b911      	cbnz	r1, 80079e6 <sbrk_aligned+0x12>
 80079e0:	f000 fe46 	bl	8008670 <_sbrk_r>
 80079e4:	6030      	str	r0, [r6, #0]
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f000 fe41 	bl	8008670 <_sbrk_r>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d103      	bne.n	80079fa <sbrk_aligned+0x26>
 80079f2:	f04f 34ff 	mov.w	r4, #4294967295
 80079f6:	4620      	mov	r0, r4
 80079f8:	bd70      	pop	{r4, r5, r6, pc}
 80079fa:	1cc4      	adds	r4, r0, #3
 80079fc:	f024 0403 	bic.w	r4, r4, #3
 8007a00:	42a0      	cmp	r0, r4
 8007a02:	d0f8      	beq.n	80079f6 <sbrk_aligned+0x22>
 8007a04:	1a21      	subs	r1, r4, r0
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 fe32 	bl	8008670 <_sbrk_r>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	d1f2      	bne.n	80079f6 <sbrk_aligned+0x22>
 8007a10:	e7ef      	b.n	80079f2 <sbrk_aligned+0x1e>
 8007a12:	bf00      	nop
 8007a14:	20004e44 	.word	0x20004e44

08007a18 <_malloc_r>:
 8007a18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a1c:	1ccd      	adds	r5, r1, #3
 8007a1e:	f025 0503 	bic.w	r5, r5, #3
 8007a22:	3508      	adds	r5, #8
 8007a24:	2d0c      	cmp	r5, #12
 8007a26:	bf38      	it	cc
 8007a28:	250c      	movcc	r5, #12
 8007a2a:	2d00      	cmp	r5, #0
 8007a2c:	4606      	mov	r6, r0
 8007a2e:	db01      	blt.n	8007a34 <_malloc_r+0x1c>
 8007a30:	42a9      	cmp	r1, r5
 8007a32:	d904      	bls.n	8007a3e <_malloc_r+0x26>
 8007a34:	230c      	movs	r3, #12
 8007a36:	6033      	str	r3, [r6, #0]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b14 <_malloc_r+0xfc>
 8007a42:	f000 f869 	bl	8007b18 <__malloc_lock>
 8007a46:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4a:	461c      	mov	r4, r3
 8007a4c:	bb44      	cbnz	r4, 8007aa0 <_malloc_r+0x88>
 8007a4e:	4629      	mov	r1, r5
 8007a50:	4630      	mov	r0, r6
 8007a52:	f7ff ffbf 	bl	80079d4 <sbrk_aligned>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	4604      	mov	r4, r0
 8007a5a:	d158      	bne.n	8007b0e <_malloc_r+0xf6>
 8007a5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007a60:	4627      	mov	r7, r4
 8007a62:	2f00      	cmp	r7, #0
 8007a64:	d143      	bne.n	8007aee <_malloc_r+0xd6>
 8007a66:	2c00      	cmp	r4, #0
 8007a68:	d04b      	beq.n	8007b02 <_malloc_r+0xea>
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	4630      	mov	r0, r6
 8007a70:	eb04 0903 	add.w	r9, r4, r3
 8007a74:	f000 fdfc 	bl	8008670 <_sbrk_r>
 8007a78:	4581      	cmp	r9, r0
 8007a7a:	d142      	bne.n	8007b02 <_malloc_r+0xea>
 8007a7c:	6821      	ldr	r1, [r4, #0]
 8007a7e:	1a6d      	subs	r5, r5, r1
 8007a80:	4629      	mov	r1, r5
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7ff ffa6 	bl	80079d4 <sbrk_aligned>
 8007a88:	3001      	adds	r0, #1
 8007a8a:	d03a      	beq.n	8007b02 <_malloc_r+0xea>
 8007a8c:	6823      	ldr	r3, [r4, #0]
 8007a8e:	442b      	add	r3, r5
 8007a90:	6023      	str	r3, [r4, #0]
 8007a92:	f8d8 3000 	ldr.w	r3, [r8]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	bb62      	cbnz	r2, 8007af4 <_malloc_r+0xdc>
 8007a9a:	f8c8 7000 	str.w	r7, [r8]
 8007a9e:	e00f      	b.n	8007ac0 <_malloc_r+0xa8>
 8007aa0:	6822      	ldr	r2, [r4, #0]
 8007aa2:	1b52      	subs	r2, r2, r5
 8007aa4:	d420      	bmi.n	8007ae8 <_malloc_r+0xd0>
 8007aa6:	2a0b      	cmp	r2, #11
 8007aa8:	d917      	bls.n	8007ada <_malloc_r+0xc2>
 8007aaa:	1961      	adds	r1, r4, r5
 8007aac:	42a3      	cmp	r3, r4
 8007aae:	6025      	str	r5, [r4, #0]
 8007ab0:	bf18      	it	ne
 8007ab2:	6059      	strne	r1, [r3, #4]
 8007ab4:	6863      	ldr	r3, [r4, #4]
 8007ab6:	bf08      	it	eq
 8007ab8:	f8c8 1000 	streq.w	r1, [r8]
 8007abc:	5162      	str	r2, [r4, r5]
 8007abe:	604b      	str	r3, [r1, #4]
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f82f 	bl	8007b24 <__malloc_unlock>
 8007ac6:	f104 000b 	add.w	r0, r4, #11
 8007aca:	1d23      	adds	r3, r4, #4
 8007acc:	f020 0007 	bic.w	r0, r0, #7
 8007ad0:	1ac2      	subs	r2, r0, r3
 8007ad2:	bf1c      	itt	ne
 8007ad4:	1a1b      	subne	r3, r3, r0
 8007ad6:	50a3      	strne	r3, [r4, r2]
 8007ad8:	e7af      	b.n	8007a3a <_malloc_r+0x22>
 8007ada:	6862      	ldr	r2, [r4, #4]
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	bf0c      	ite	eq
 8007ae0:	f8c8 2000 	streq.w	r2, [r8]
 8007ae4:	605a      	strne	r2, [r3, #4]
 8007ae6:	e7eb      	b.n	8007ac0 <_malloc_r+0xa8>
 8007ae8:	4623      	mov	r3, r4
 8007aea:	6864      	ldr	r4, [r4, #4]
 8007aec:	e7ae      	b.n	8007a4c <_malloc_r+0x34>
 8007aee:	463c      	mov	r4, r7
 8007af0:	687f      	ldr	r7, [r7, #4]
 8007af2:	e7b6      	b.n	8007a62 <_malloc_r+0x4a>
 8007af4:	461a      	mov	r2, r3
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	42a3      	cmp	r3, r4
 8007afa:	d1fb      	bne.n	8007af4 <_malloc_r+0xdc>
 8007afc:	2300      	movs	r3, #0
 8007afe:	6053      	str	r3, [r2, #4]
 8007b00:	e7de      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6033      	str	r3, [r6, #0]
 8007b06:	4630      	mov	r0, r6
 8007b08:	f000 f80c 	bl	8007b24 <__malloc_unlock>
 8007b0c:	e794      	b.n	8007a38 <_malloc_r+0x20>
 8007b0e:	6005      	str	r5, [r0, #0]
 8007b10:	e7d6      	b.n	8007ac0 <_malloc_r+0xa8>
 8007b12:	bf00      	nop
 8007b14:	20004e48 	.word	0x20004e48

08007b18 <__malloc_lock>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__malloc_lock+0x8>)
 8007b1a:	f7ff b8aa 	b.w	8006c72 <__retarget_lock_acquire_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20004e40 	.word	0x20004e40

08007b24 <__malloc_unlock>:
 8007b24:	4801      	ldr	r0, [pc, #4]	@ (8007b2c <__malloc_unlock+0x8>)
 8007b26:	f7ff b8a5 	b.w	8006c74 <__retarget_lock_release_recursive>
 8007b2a:	bf00      	nop
 8007b2c:	20004e40 	.word	0x20004e40

08007b30 <_Balloc>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	69c6      	ldr	r6, [r0, #28]
 8007b34:	4604      	mov	r4, r0
 8007b36:	460d      	mov	r5, r1
 8007b38:	b976      	cbnz	r6, 8007b58 <_Balloc+0x28>
 8007b3a:	2010      	movs	r0, #16
 8007b3c:	f7ff ff42 	bl	80079c4 <malloc>
 8007b40:	4602      	mov	r2, r0
 8007b42:	61e0      	str	r0, [r4, #28]
 8007b44:	b920      	cbnz	r0, 8007b50 <_Balloc+0x20>
 8007b46:	4b18      	ldr	r3, [pc, #96]	@ (8007ba8 <_Balloc+0x78>)
 8007b48:	4818      	ldr	r0, [pc, #96]	@ (8007bac <_Balloc+0x7c>)
 8007b4a:	216b      	movs	r1, #107	@ 0x6b
 8007b4c:	f000 fda0 	bl	8008690 <__assert_func>
 8007b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b54:	6006      	str	r6, [r0, #0]
 8007b56:	60c6      	str	r6, [r0, #12]
 8007b58:	69e6      	ldr	r6, [r4, #28]
 8007b5a:	68f3      	ldr	r3, [r6, #12]
 8007b5c:	b183      	cbz	r3, 8007b80 <_Balloc+0x50>
 8007b5e:	69e3      	ldr	r3, [r4, #28]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b66:	b9b8      	cbnz	r0, 8007b98 <_Balloc+0x68>
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007b6e:	1d72      	adds	r2, r6, #5
 8007b70:	0092      	lsls	r2, r2, #2
 8007b72:	4620      	mov	r0, r4
 8007b74:	f000 fdaa 	bl	80086cc <_calloc_r>
 8007b78:	b160      	cbz	r0, 8007b94 <_Balloc+0x64>
 8007b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b7e:	e00e      	b.n	8007b9e <_Balloc+0x6e>
 8007b80:	2221      	movs	r2, #33	@ 0x21
 8007b82:	2104      	movs	r1, #4
 8007b84:	4620      	mov	r0, r4
 8007b86:	f000 fda1 	bl	80086cc <_calloc_r>
 8007b8a:	69e3      	ldr	r3, [r4, #28]
 8007b8c:	60f0      	str	r0, [r6, #12]
 8007b8e:	68db      	ldr	r3, [r3, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1e4      	bne.n	8007b5e <_Balloc+0x2e>
 8007b94:	2000      	movs	r0, #0
 8007b96:	bd70      	pop	{r4, r5, r6, pc}
 8007b98:	6802      	ldr	r2, [r0, #0]
 8007b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ba4:	e7f7      	b.n	8007b96 <_Balloc+0x66>
 8007ba6:	bf00      	nop
 8007ba8:	08008edd 	.word	0x08008edd
 8007bac:	08008f5d 	.word	0x08008f5d

08007bb0 <_Bfree>:
 8007bb0:	b570      	push	{r4, r5, r6, lr}
 8007bb2:	69c6      	ldr	r6, [r0, #28]
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b976      	cbnz	r6, 8007bd8 <_Bfree+0x28>
 8007bba:	2010      	movs	r0, #16
 8007bbc:	f7ff ff02 	bl	80079c4 <malloc>
 8007bc0:	4602      	mov	r2, r0
 8007bc2:	61e8      	str	r0, [r5, #28]
 8007bc4:	b920      	cbnz	r0, 8007bd0 <_Bfree+0x20>
 8007bc6:	4b09      	ldr	r3, [pc, #36]	@ (8007bec <_Bfree+0x3c>)
 8007bc8:	4809      	ldr	r0, [pc, #36]	@ (8007bf0 <_Bfree+0x40>)
 8007bca:	218f      	movs	r1, #143	@ 0x8f
 8007bcc:	f000 fd60 	bl	8008690 <__assert_func>
 8007bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bd4:	6006      	str	r6, [r0, #0]
 8007bd6:	60c6      	str	r6, [r0, #12]
 8007bd8:	b13c      	cbz	r4, 8007bea <_Bfree+0x3a>
 8007bda:	69eb      	ldr	r3, [r5, #28]
 8007bdc:	6862      	ldr	r2, [r4, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007be4:	6021      	str	r1, [r4, #0]
 8007be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007bea:	bd70      	pop	{r4, r5, r6, pc}
 8007bec:	08008edd 	.word	0x08008edd
 8007bf0:	08008f5d 	.word	0x08008f5d

08007bf4 <__multadd>:
 8007bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bf8:	690d      	ldr	r5, [r1, #16]
 8007bfa:	4607      	mov	r7, r0
 8007bfc:	460c      	mov	r4, r1
 8007bfe:	461e      	mov	r6, r3
 8007c00:	f101 0c14 	add.w	ip, r1, #20
 8007c04:	2000      	movs	r0, #0
 8007c06:	f8dc 3000 	ldr.w	r3, [ip]
 8007c0a:	b299      	uxth	r1, r3
 8007c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007c10:	0c1e      	lsrs	r6, r3, #16
 8007c12:	0c0b      	lsrs	r3, r1, #16
 8007c14:	fb02 3306 	mla	r3, r2, r6, r3
 8007c18:	b289      	uxth	r1, r1
 8007c1a:	3001      	adds	r0, #1
 8007c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c20:	4285      	cmp	r5, r0
 8007c22:	f84c 1b04 	str.w	r1, [ip], #4
 8007c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c2a:	dcec      	bgt.n	8007c06 <__multadd+0x12>
 8007c2c:	b30e      	cbz	r6, 8007c72 <__multadd+0x7e>
 8007c2e:	68a3      	ldr	r3, [r4, #8]
 8007c30:	42ab      	cmp	r3, r5
 8007c32:	dc19      	bgt.n	8007c68 <__multadd+0x74>
 8007c34:	6861      	ldr	r1, [r4, #4]
 8007c36:	4638      	mov	r0, r7
 8007c38:	3101      	adds	r1, #1
 8007c3a:	f7ff ff79 	bl	8007b30 <_Balloc>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	b928      	cbnz	r0, 8007c4e <__multadd+0x5a>
 8007c42:	4602      	mov	r2, r0
 8007c44:	4b0c      	ldr	r3, [pc, #48]	@ (8007c78 <__multadd+0x84>)
 8007c46:	480d      	ldr	r0, [pc, #52]	@ (8007c7c <__multadd+0x88>)
 8007c48:	21ba      	movs	r1, #186	@ 0xba
 8007c4a:	f000 fd21 	bl	8008690 <__assert_func>
 8007c4e:	6922      	ldr	r2, [r4, #16]
 8007c50:	3202      	adds	r2, #2
 8007c52:	f104 010c 	add.w	r1, r4, #12
 8007c56:	0092      	lsls	r2, r2, #2
 8007c58:	300c      	adds	r0, #12
 8007c5a:	f7ff f80c 	bl	8006c76 <memcpy>
 8007c5e:	4621      	mov	r1, r4
 8007c60:	4638      	mov	r0, r7
 8007c62:	f7ff ffa5 	bl	8007bb0 <_Bfree>
 8007c66:	4644      	mov	r4, r8
 8007c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c6c:	3501      	adds	r5, #1
 8007c6e:	615e      	str	r6, [r3, #20]
 8007c70:	6125      	str	r5, [r4, #16]
 8007c72:	4620      	mov	r0, r4
 8007c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c78:	08008f4c 	.word	0x08008f4c
 8007c7c:	08008f5d 	.word	0x08008f5d

08007c80 <__hi0bits>:
 8007c80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007c84:	4603      	mov	r3, r0
 8007c86:	bf36      	itet	cc
 8007c88:	0403      	lslcc	r3, r0, #16
 8007c8a:	2000      	movcs	r0, #0
 8007c8c:	2010      	movcc	r0, #16
 8007c8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c92:	bf3c      	itt	cc
 8007c94:	021b      	lslcc	r3, r3, #8
 8007c96:	3008      	addcc	r0, #8
 8007c98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007c9c:	bf3c      	itt	cc
 8007c9e:	011b      	lslcc	r3, r3, #4
 8007ca0:	3004      	addcc	r0, #4
 8007ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ca6:	bf3c      	itt	cc
 8007ca8:	009b      	lslcc	r3, r3, #2
 8007caa:	3002      	addcc	r0, #2
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	db05      	blt.n	8007cbc <__hi0bits+0x3c>
 8007cb0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007cb4:	f100 0001 	add.w	r0, r0, #1
 8007cb8:	bf08      	it	eq
 8007cba:	2020      	moveq	r0, #32
 8007cbc:	4770      	bx	lr

08007cbe <__lo0bits>:
 8007cbe:	6803      	ldr	r3, [r0, #0]
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	f013 0007 	ands.w	r0, r3, #7
 8007cc6:	d00b      	beq.n	8007ce0 <__lo0bits+0x22>
 8007cc8:	07d9      	lsls	r1, r3, #31
 8007cca:	d421      	bmi.n	8007d10 <__lo0bits+0x52>
 8007ccc:	0798      	lsls	r0, r3, #30
 8007cce:	bf49      	itett	mi
 8007cd0:	085b      	lsrmi	r3, r3, #1
 8007cd2:	089b      	lsrpl	r3, r3, #2
 8007cd4:	2001      	movmi	r0, #1
 8007cd6:	6013      	strmi	r3, [r2, #0]
 8007cd8:	bf5c      	itt	pl
 8007cda:	6013      	strpl	r3, [r2, #0]
 8007cdc:	2002      	movpl	r0, #2
 8007cde:	4770      	bx	lr
 8007ce0:	b299      	uxth	r1, r3
 8007ce2:	b909      	cbnz	r1, 8007ce8 <__lo0bits+0x2a>
 8007ce4:	0c1b      	lsrs	r3, r3, #16
 8007ce6:	2010      	movs	r0, #16
 8007ce8:	b2d9      	uxtb	r1, r3
 8007cea:	b909      	cbnz	r1, 8007cf0 <__lo0bits+0x32>
 8007cec:	3008      	adds	r0, #8
 8007cee:	0a1b      	lsrs	r3, r3, #8
 8007cf0:	0719      	lsls	r1, r3, #28
 8007cf2:	bf04      	itt	eq
 8007cf4:	091b      	lsreq	r3, r3, #4
 8007cf6:	3004      	addeq	r0, #4
 8007cf8:	0799      	lsls	r1, r3, #30
 8007cfa:	bf04      	itt	eq
 8007cfc:	089b      	lsreq	r3, r3, #2
 8007cfe:	3002      	addeq	r0, #2
 8007d00:	07d9      	lsls	r1, r3, #31
 8007d02:	d403      	bmi.n	8007d0c <__lo0bits+0x4e>
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	f100 0001 	add.w	r0, r0, #1
 8007d0a:	d003      	beq.n	8007d14 <__lo0bits+0x56>
 8007d0c:	6013      	str	r3, [r2, #0]
 8007d0e:	4770      	bx	lr
 8007d10:	2000      	movs	r0, #0
 8007d12:	4770      	bx	lr
 8007d14:	2020      	movs	r0, #32
 8007d16:	4770      	bx	lr

08007d18 <__i2b>:
 8007d18:	b510      	push	{r4, lr}
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	f7ff ff07 	bl	8007b30 <_Balloc>
 8007d22:	4602      	mov	r2, r0
 8007d24:	b928      	cbnz	r0, 8007d32 <__i2b+0x1a>
 8007d26:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <__i2b+0x24>)
 8007d28:	4805      	ldr	r0, [pc, #20]	@ (8007d40 <__i2b+0x28>)
 8007d2a:	f240 1145 	movw	r1, #325	@ 0x145
 8007d2e:	f000 fcaf 	bl	8008690 <__assert_func>
 8007d32:	2301      	movs	r3, #1
 8007d34:	6144      	str	r4, [r0, #20]
 8007d36:	6103      	str	r3, [r0, #16]
 8007d38:	bd10      	pop	{r4, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08008f4c 	.word	0x08008f4c
 8007d40:	08008f5d 	.word	0x08008f5d

08007d44 <__multiply>:
 8007d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d48:	4614      	mov	r4, r2
 8007d4a:	690a      	ldr	r2, [r1, #16]
 8007d4c:	6923      	ldr	r3, [r4, #16]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	bfa8      	it	ge
 8007d52:	4623      	movge	r3, r4
 8007d54:	460f      	mov	r7, r1
 8007d56:	bfa4      	itt	ge
 8007d58:	460c      	movge	r4, r1
 8007d5a:	461f      	movge	r7, r3
 8007d5c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007d60:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	6861      	ldr	r1, [r4, #4]
 8007d68:	eb0a 0609 	add.w	r6, sl, r9
 8007d6c:	42b3      	cmp	r3, r6
 8007d6e:	b085      	sub	sp, #20
 8007d70:	bfb8      	it	lt
 8007d72:	3101      	addlt	r1, #1
 8007d74:	f7ff fedc 	bl	8007b30 <_Balloc>
 8007d78:	b930      	cbnz	r0, 8007d88 <__multiply+0x44>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	4b44      	ldr	r3, [pc, #272]	@ (8007e90 <__multiply+0x14c>)
 8007d7e:	4845      	ldr	r0, [pc, #276]	@ (8007e94 <__multiply+0x150>)
 8007d80:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007d84:	f000 fc84 	bl	8008690 <__assert_func>
 8007d88:	f100 0514 	add.w	r5, r0, #20
 8007d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d90:	462b      	mov	r3, r5
 8007d92:	2200      	movs	r2, #0
 8007d94:	4543      	cmp	r3, r8
 8007d96:	d321      	bcc.n	8007ddc <__multiply+0x98>
 8007d98:	f107 0114 	add.w	r1, r7, #20
 8007d9c:	f104 0214 	add.w	r2, r4, #20
 8007da0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007da4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	1b13      	subs	r3, r2, r4
 8007dac:	3b15      	subs	r3, #21
 8007dae:	f023 0303 	bic.w	r3, r3, #3
 8007db2:	3304      	adds	r3, #4
 8007db4:	f104 0715 	add.w	r7, r4, #21
 8007db8:	42ba      	cmp	r2, r7
 8007dba:	bf38      	it	cc
 8007dbc:	2304      	movcc	r3, #4
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	9103      	str	r1, [sp, #12]
 8007dc4:	428b      	cmp	r3, r1
 8007dc6:	d80c      	bhi.n	8007de2 <__multiply+0x9e>
 8007dc8:	2e00      	cmp	r6, #0
 8007dca:	dd03      	ble.n	8007dd4 <__multiply+0x90>
 8007dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d05b      	beq.n	8007e8c <__multiply+0x148>
 8007dd4:	6106      	str	r6, [r0, #16]
 8007dd6:	b005      	add	sp, #20
 8007dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ddc:	f843 2b04 	str.w	r2, [r3], #4
 8007de0:	e7d8      	b.n	8007d94 <__multiply+0x50>
 8007de2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007de6:	f1ba 0f00 	cmp.w	sl, #0
 8007dea:	d024      	beq.n	8007e36 <__multiply+0xf2>
 8007dec:	f104 0e14 	add.w	lr, r4, #20
 8007df0:	46a9      	mov	r9, r5
 8007df2:	f04f 0c00 	mov.w	ip, #0
 8007df6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007dfa:	f8d9 3000 	ldr.w	r3, [r9]
 8007dfe:	fa1f fb87 	uxth.w	fp, r7
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e08:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e0c:	f8d9 7000 	ldr.w	r7, [r9]
 8007e10:	4463      	add	r3, ip
 8007e12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e16:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e1a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e24:	4572      	cmp	r2, lr
 8007e26:	f849 3b04 	str.w	r3, [r9], #4
 8007e2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e2e:	d8e2      	bhi.n	8007df6 <__multiply+0xb2>
 8007e30:	9b01      	ldr	r3, [sp, #4]
 8007e32:	f845 c003 	str.w	ip, [r5, r3]
 8007e36:	9b03      	ldr	r3, [sp, #12]
 8007e38:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e3c:	3104      	adds	r1, #4
 8007e3e:	f1b9 0f00 	cmp.w	r9, #0
 8007e42:	d021      	beq.n	8007e88 <__multiply+0x144>
 8007e44:	682b      	ldr	r3, [r5, #0]
 8007e46:	f104 0c14 	add.w	ip, r4, #20
 8007e4a:	46ae      	mov	lr, r5
 8007e4c:	f04f 0a00 	mov.w	sl, #0
 8007e50:	f8bc b000 	ldrh.w	fp, [ip]
 8007e54:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007e58:	fb09 770b 	mla	r7, r9, fp, r7
 8007e5c:	4457      	add	r7, sl
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e64:	f84e 3b04 	str.w	r3, [lr], #4
 8007e68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007e6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e70:	f8be 3000 	ldrh.w	r3, [lr]
 8007e74:	fb09 330a 	mla	r3, r9, sl, r3
 8007e78:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007e7c:	4562      	cmp	r2, ip
 8007e7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e82:	d8e5      	bhi.n	8007e50 <__multiply+0x10c>
 8007e84:	9f01      	ldr	r7, [sp, #4]
 8007e86:	51eb      	str	r3, [r5, r7]
 8007e88:	3504      	adds	r5, #4
 8007e8a:	e799      	b.n	8007dc0 <__multiply+0x7c>
 8007e8c:	3e01      	subs	r6, #1
 8007e8e:	e79b      	b.n	8007dc8 <__multiply+0x84>
 8007e90:	08008f4c 	.word	0x08008f4c
 8007e94:	08008f5d 	.word	0x08008f5d

08007e98 <__pow5mult>:
 8007e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	f012 0203 	ands.w	r2, r2, #3
 8007ea2:	4607      	mov	r7, r0
 8007ea4:	460e      	mov	r6, r1
 8007ea6:	d007      	beq.n	8007eb8 <__pow5mult+0x20>
 8007ea8:	4c25      	ldr	r4, [pc, #148]	@ (8007f40 <__pow5mult+0xa8>)
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	2300      	movs	r3, #0
 8007eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007eb2:	f7ff fe9f 	bl	8007bf4 <__multadd>
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	10ad      	asrs	r5, r5, #2
 8007eba:	d03d      	beq.n	8007f38 <__pow5mult+0xa0>
 8007ebc:	69fc      	ldr	r4, [r7, #28]
 8007ebe:	b97c      	cbnz	r4, 8007ee0 <__pow5mult+0x48>
 8007ec0:	2010      	movs	r0, #16
 8007ec2:	f7ff fd7f 	bl	80079c4 <malloc>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	61f8      	str	r0, [r7, #28]
 8007eca:	b928      	cbnz	r0, 8007ed8 <__pow5mult+0x40>
 8007ecc:	4b1d      	ldr	r3, [pc, #116]	@ (8007f44 <__pow5mult+0xac>)
 8007ece:	481e      	ldr	r0, [pc, #120]	@ (8007f48 <__pow5mult+0xb0>)
 8007ed0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ed4:	f000 fbdc 	bl	8008690 <__assert_func>
 8007ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007edc:	6004      	str	r4, [r0, #0]
 8007ede:	60c4      	str	r4, [r0, #12]
 8007ee0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ee8:	b94c      	cbnz	r4, 8007efe <__pow5mult+0x66>
 8007eea:	f240 2171 	movw	r1, #625	@ 0x271
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff ff12 	bl	8007d18 <__i2b>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007efa:	4604      	mov	r4, r0
 8007efc:	6003      	str	r3, [r0, #0]
 8007efe:	f04f 0900 	mov.w	r9, #0
 8007f02:	07eb      	lsls	r3, r5, #31
 8007f04:	d50a      	bpl.n	8007f1c <__pow5mult+0x84>
 8007f06:	4631      	mov	r1, r6
 8007f08:	4622      	mov	r2, r4
 8007f0a:	4638      	mov	r0, r7
 8007f0c:	f7ff ff1a 	bl	8007d44 <__multiply>
 8007f10:	4631      	mov	r1, r6
 8007f12:	4680      	mov	r8, r0
 8007f14:	4638      	mov	r0, r7
 8007f16:	f7ff fe4b 	bl	8007bb0 <_Bfree>
 8007f1a:	4646      	mov	r6, r8
 8007f1c:	106d      	asrs	r5, r5, #1
 8007f1e:	d00b      	beq.n	8007f38 <__pow5mult+0xa0>
 8007f20:	6820      	ldr	r0, [r4, #0]
 8007f22:	b938      	cbnz	r0, 8007f34 <__pow5mult+0x9c>
 8007f24:	4622      	mov	r2, r4
 8007f26:	4621      	mov	r1, r4
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff ff0b 	bl	8007d44 <__multiply>
 8007f2e:	6020      	str	r0, [r4, #0]
 8007f30:	f8c0 9000 	str.w	r9, [r0]
 8007f34:	4604      	mov	r4, r0
 8007f36:	e7e4      	b.n	8007f02 <__pow5mult+0x6a>
 8007f38:	4630      	mov	r0, r6
 8007f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f3e:	bf00      	nop
 8007f40:	08008fb8 	.word	0x08008fb8
 8007f44:	08008edd 	.word	0x08008edd
 8007f48:	08008f5d 	.word	0x08008f5d

08007f4c <__lshift>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	460c      	mov	r4, r1
 8007f52:	6849      	ldr	r1, [r1, #4]
 8007f54:	6923      	ldr	r3, [r4, #16]
 8007f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	4691      	mov	r9, r2
 8007f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f64:	f108 0601 	add.w	r6, r8, #1
 8007f68:	42b3      	cmp	r3, r6
 8007f6a:	db0b      	blt.n	8007f84 <__lshift+0x38>
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7ff fddf 	bl	8007b30 <_Balloc>
 8007f72:	4605      	mov	r5, r0
 8007f74:	b948      	cbnz	r0, 8007f8a <__lshift+0x3e>
 8007f76:	4602      	mov	r2, r0
 8007f78:	4b28      	ldr	r3, [pc, #160]	@ (800801c <__lshift+0xd0>)
 8007f7a:	4829      	ldr	r0, [pc, #164]	@ (8008020 <__lshift+0xd4>)
 8007f7c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007f80:	f000 fb86 	bl	8008690 <__assert_func>
 8007f84:	3101      	adds	r1, #1
 8007f86:	005b      	lsls	r3, r3, #1
 8007f88:	e7ee      	b.n	8007f68 <__lshift+0x1c>
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	f100 0114 	add.w	r1, r0, #20
 8007f90:	f100 0210 	add.w	r2, r0, #16
 8007f94:	4618      	mov	r0, r3
 8007f96:	4553      	cmp	r3, sl
 8007f98:	db33      	blt.n	8008002 <__lshift+0xb6>
 8007f9a:	6920      	ldr	r0, [r4, #16]
 8007f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fa0:	f104 0314 	add.w	r3, r4, #20
 8007fa4:	f019 091f 	ands.w	r9, r9, #31
 8007fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007fb0:	d02b      	beq.n	800800a <__lshift+0xbe>
 8007fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8007fb6:	468a      	mov	sl, r1
 8007fb8:	2200      	movs	r2, #0
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	fa00 f009 	lsl.w	r0, r0, r9
 8007fc0:	4310      	orrs	r0, r2
 8007fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8007fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fca:	459c      	cmp	ip, r3
 8007fcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007fd0:	d8f3      	bhi.n	8007fba <__lshift+0x6e>
 8007fd2:	ebac 0304 	sub.w	r3, ip, r4
 8007fd6:	3b15      	subs	r3, #21
 8007fd8:	f023 0303 	bic.w	r3, r3, #3
 8007fdc:	3304      	adds	r3, #4
 8007fde:	f104 0015 	add.w	r0, r4, #21
 8007fe2:	4584      	cmp	ip, r0
 8007fe4:	bf38      	it	cc
 8007fe6:	2304      	movcc	r3, #4
 8007fe8:	50ca      	str	r2, [r1, r3]
 8007fea:	b10a      	cbz	r2, 8007ff0 <__lshift+0xa4>
 8007fec:	f108 0602 	add.w	r6, r8, #2
 8007ff0:	3e01      	subs	r6, #1
 8007ff2:	4638      	mov	r0, r7
 8007ff4:	612e      	str	r6, [r5, #16]
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	f7ff fdda 	bl	8007bb0 <_Bfree>
 8007ffc:	4628      	mov	r0, r5
 8007ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008002:	f842 0f04 	str.w	r0, [r2, #4]!
 8008006:	3301      	adds	r3, #1
 8008008:	e7c5      	b.n	8007f96 <__lshift+0x4a>
 800800a:	3904      	subs	r1, #4
 800800c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008010:	f841 2f04 	str.w	r2, [r1, #4]!
 8008014:	459c      	cmp	ip, r3
 8008016:	d8f9      	bhi.n	800800c <__lshift+0xc0>
 8008018:	e7ea      	b.n	8007ff0 <__lshift+0xa4>
 800801a:	bf00      	nop
 800801c:	08008f4c 	.word	0x08008f4c
 8008020:	08008f5d 	.word	0x08008f5d

08008024 <__mcmp>:
 8008024:	690a      	ldr	r2, [r1, #16]
 8008026:	4603      	mov	r3, r0
 8008028:	6900      	ldr	r0, [r0, #16]
 800802a:	1a80      	subs	r0, r0, r2
 800802c:	b530      	push	{r4, r5, lr}
 800802e:	d10e      	bne.n	800804e <__mcmp+0x2a>
 8008030:	3314      	adds	r3, #20
 8008032:	3114      	adds	r1, #20
 8008034:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008038:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800803c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008040:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008044:	4295      	cmp	r5, r2
 8008046:	d003      	beq.n	8008050 <__mcmp+0x2c>
 8008048:	d205      	bcs.n	8008056 <__mcmp+0x32>
 800804a:	f04f 30ff 	mov.w	r0, #4294967295
 800804e:	bd30      	pop	{r4, r5, pc}
 8008050:	42a3      	cmp	r3, r4
 8008052:	d3f3      	bcc.n	800803c <__mcmp+0x18>
 8008054:	e7fb      	b.n	800804e <__mcmp+0x2a>
 8008056:	2001      	movs	r0, #1
 8008058:	e7f9      	b.n	800804e <__mcmp+0x2a>
	...

0800805c <__mdiff>:
 800805c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	4689      	mov	r9, r1
 8008062:	4606      	mov	r6, r0
 8008064:	4611      	mov	r1, r2
 8008066:	4648      	mov	r0, r9
 8008068:	4614      	mov	r4, r2
 800806a:	f7ff ffdb 	bl	8008024 <__mcmp>
 800806e:	1e05      	subs	r5, r0, #0
 8008070:	d112      	bne.n	8008098 <__mdiff+0x3c>
 8008072:	4629      	mov	r1, r5
 8008074:	4630      	mov	r0, r6
 8008076:	f7ff fd5b 	bl	8007b30 <_Balloc>
 800807a:	4602      	mov	r2, r0
 800807c:	b928      	cbnz	r0, 800808a <__mdiff+0x2e>
 800807e:	4b3f      	ldr	r3, [pc, #252]	@ (800817c <__mdiff+0x120>)
 8008080:	f240 2137 	movw	r1, #567	@ 0x237
 8008084:	483e      	ldr	r0, [pc, #248]	@ (8008180 <__mdiff+0x124>)
 8008086:	f000 fb03 	bl	8008690 <__assert_func>
 800808a:	2301      	movs	r3, #1
 800808c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008090:	4610      	mov	r0, r2
 8008092:	b003      	add	sp, #12
 8008094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008098:	bfbc      	itt	lt
 800809a:	464b      	movlt	r3, r9
 800809c:	46a1      	movlt	r9, r4
 800809e:	4630      	mov	r0, r6
 80080a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080a4:	bfba      	itte	lt
 80080a6:	461c      	movlt	r4, r3
 80080a8:	2501      	movlt	r5, #1
 80080aa:	2500      	movge	r5, #0
 80080ac:	f7ff fd40 	bl	8007b30 <_Balloc>
 80080b0:	4602      	mov	r2, r0
 80080b2:	b918      	cbnz	r0, 80080bc <__mdiff+0x60>
 80080b4:	4b31      	ldr	r3, [pc, #196]	@ (800817c <__mdiff+0x120>)
 80080b6:	f240 2145 	movw	r1, #581	@ 0x245
 80080ba:	e7e3      	b.n	8008084 <__mdiff+0x28>
 80080bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80080c0:	6926      	ldr	r6, [r4, #16]
 80080c2:	60c5      	str	r5, [r0, #12]
 80080c4:	f109 0310 	add.w	r3, r9, #16
 80080c8:	f109 0514 	add.w	r5, r9, #20
 80080cc:	f104 0e14 	add.w	lr, r4, #20
 80080d0:	f100 0b14 	add.w	fp, r0, #20
 80080d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80080d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	46d9      	mov	r9, fp
 80080e0:	f04f 0c00 	mov.w	ip, #0
 80080e4:	9b01      	ldr	r3, [sp, #4]
 80080e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80080ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80080ee:	9301      	str	r3, [sp, #4]
 80080f0:	fa1f f38a 	uxth.w	r3, sl
 80080f4:	4619      	mov	r1, r3
 80080f6:	b283      	uxth	r3, r0
 80080f8:	1acb      	subs	r3, r1, r3
 80080fa:	0c00      	lsrs	r0, r0, #16
 80080fc:	4463      	add	r3, ip
 80080fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008102:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008106:	b29b      	uxth	r3, r3
 8008108:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800810c:	4576      	cmp	r6, lr
 800810e:	f849 3b04 	str.w	r3, [r9], #4
 8008112:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008116:	d8e5      	bhi.n	80080e4 <__mdiff+0x88>
 8008118:	1b33      	subs	r3, r6, r4
 800811a:	3b15      	subs	r3, #21
 800811c:	f023 0303 	bic.w	r3, r3, #3
 8008120:	3415      	adds	r4, #21
 8008122:	3304      	adds	r3, #4
 8008124:	42a6      	cmp	r6, r4
 8008126:	bf38      	it	cc
 8008128:	2304      	movcc	r3, #4
 800812a:	441d      	add	r5, r3
 800812c:	445b      	add	r3, fp
 800812e:	461e      	mov	r6, r3
 8008130:	462c      	mov	r4, r5
 8008132:	4544      	cmp	r4, r8
 8008134:	d30e      	bcc.n	8008154 <__mdiff+0xf8>
 8008136:	f108 0103 	add.w	r1, r8, #3
 800813a:	1b49      	subs	r1, r1, r5
 800813c:	f021 0103 	bic.w	r1, r1, #3
 8008140:	3d03      	subs	r5, #3
 8008142:	45a8      	cmp	r8, r5
 8008144:	bf38      	it	cc
 8008146:	2100      	movcc	r1, #0
 8008148:	440b      	add	r3, r1
 800814a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800814e:	b191      	cbz	r1, 8008176 <__mdiff+0x11a>
 8008150:	6117      	str	r7, [r2, #16]
 8008152:	e79d      	b.n	8008090 <__mdiff+0x34>
 8008154:	f854 1b04 	ldr.w	r1, [r4], #4
 8008158:	46e6      	mov	lr, ip
 800815a:	0c08      	lsrs	r0, r1, #16
 800815c:	fa1c fc81 	uxtah	ip, ip, r1
 8008160:	4471      	add	r1, lr
 8008162:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008166:	b289      	uxth	r1, r1
 8008168:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800816c:	f846 1b04 	str.w	r1, [r6], #4
 8008170:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008174:	e7dd      	b.n	8008132 <__mdiff+0xd6>
 8008176:	3f01      	subs	r7, #1
 8008178:	e7e7      	b.n	800814a <__mdiff+0xee>
 800817a:	bf00      	nop
 800817c:	08008f4c 	.word	0x08008f4c
 8008180:	08008f5d 	.word	0x08008f5d

08008184 <__d2b>:
 8008184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008188:	460f      	mov	r7, r1
 800818a:	2101      	movs	r1, #1
 800818c:	ec59 8b10 	vmov	r8, r9, d0
 8008190:	4616      	mov	r6, r2
 8008192:	f7ff fccd 	bl	8007b30 <_Balloc>
 8008196:	4604      	mov	r4, r0
 8008198:	b930      	cbnz	r0, 80081a8 <__d2b+0x24>
 800819a:	4602      	mov	r2, r0
 800819c:	4b23      	ldr	r3, [pc, #140]	@ (800822c <__d2b+0xa8>)
 800819e:	4824      	ldr	r0, [pc, #144]	@ (8008230 <__d2b+0xac>)
 80081a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80081a4:	f000 fa74 	bl	8008690 <__assert_func>
 80081a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80081ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081b0:	b10d      	cbz	r5, 80081b6 <__d2b+0x32>
 80081b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	f1b8 0300 	subs.w	r3, r8, #0
 80081bc:	d023      	beq.n	8008206 <__d2b+0x82>
 80081be:	4668      	mov	r0, sp
 80081c0:	9300      	str	r3, [sp, #0]
 80081c2:	f7ff fd7c 	bl	8007cbe <__lo0bits>
 80081c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80081ca:	b1d0      	cbz	r0, 8008202 <__d2b+0x7e>
 80081cc:	f1c0 0320 	rsb	r3, r0, #32
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	430b      	orrs	r3, r1
 80081d6:	40c2      	lsrs	r2, r0
 80081d8:	6163      	str	r3, [r4, #20]
 80081da:	9201      	str	r2, [sp, #4]
 80081dc:	9b01      	ldr	r3, [sp, #4]
 80081de:	61a3      	str	r3, [r4, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	bf0c      	ite	eq
 80081e4:	2201      	moveq	r2, #1
 80081e6:	2202      	movne	r2, #2
 80081e8:	6122      	str	r2, [r4, #16]
 80081ea:	b1a5      	cbz	r5, 8008216 <__d2b+0x92>
 80081ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80081f0:	4405      	add	r5, r0
 80081f2:	603d      	str	r5, [r7, #0]
 80081f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80081f8:	6030      	str	r0, [r6, #0]
 80081fa:	4620      	mov	r0, r4
 80081fc:	b003      	add	sp, #12
 80081fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008202:	6161      	str	r1, [r4, #20]
 8008204:	e7ea      	b.n	80081dc <__d2b+0x58>
 8008206:	a801      	add	r0, sp, #4
 8008208:	f7ff fd59 	bl	8007cbe <__lo0bits>
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	3020      	adds	r0, #32
 8008212:	2201      	movs	r2, #1
 8008214:	e7e8      	b.n	80081e8 <__d2b+0x64>
 8008216:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800821a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800821e:	6038      	str	r0, [r7, #0]
 8008220:	6918      	ldr	r0, [r3, #16]
 8008222:	f7ff fd2d 	bl	8007c80 <__hi0bits>
 8008226:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800822a:	e7e5      	b.n	80081f8 <__d2b+0x74>
 800822c:	08008f4c 	.word	0x08008f4c
 8008230:	08008f5d 	.word	0x08008f5d

08008234 <__ssputs_r>:
 8008234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008238:	688e      	ldr	r6, [r1, #8]
 800823a:	461f      	mov	r7, r3
 800823c:	42be      	cmp	r6, r7
 800823e:	680b      	ldr	r3, [r1, #0]
 8008240:	4682      	mov	sl, r0
 8008242:	460c      	mov	r4, r1
 8008244:	4690      	mov	r8, r2
 8008246:	d82d      	bhi.n	80082a4 <__ssputs_r+0x70>
 8008248:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800824c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008250:	d026      	beq.n	80082a0 <__ssputs_r+0x6c>
 8008252:	6965      	ldr	r5, [r4, #20]
 8008254:	6909      	ldr	r1, [r1, #16]
 8008256:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800825a:	eba3 0901 	sub.w	r9, r3, r1
 800825e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008262:	1c7b      	adds	r3, r7, #1
 8008264:	444b      	add	r3, r9
 8008266:	106d      	asrs	r5, r5, #1
 8008268:	429d      	cmp	r5, r3
 800826a:	bf38      	it	cc
 800826c:	461d      	movcc	r5, r3
 800826e:	0553      	lsls	r3, r2, #21
 8008270:	d527      	bpl.n	80082c2 <__ssputs_r+0x8e>
 8008272:	4629      	mov	r1, r5
 8008274:	f7ff fbd0 	bl	8007a18 <_malloc_r>
 8008278:	4606      	mov	r6, r0
 800827a:	b360      	cbz	r0, 80082d6 <__ssputs_r+0xa2>
 800827c:	6921      	ldr	r1, [r4, #16]
 800827e:	464a      	mov	r2, r9
 8008280:	f7fe fcf9 	bl	8006c76 <memcpy>
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800828a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800828e:	81a3      	strh	r3, [r4, #12]
 8008290:	6126      	str	r6, [r4, #16]
 8008292:	6165      	str	r5, [r4, #20]
 8008294:	444e      	add	r6, r9
 8008296:	eba5 0509 	sub.w	r5, r5, r9
 800829a:	6026      	str	r6, [r4, #0]
 800829c:	60a5      	str	r5, [r4, #8]
 800829e:	463e      	mov	r6, r7
 80082a0:	42be      	cmp	r6, r7
 80082a2:	d900      	bls.n	80082a6 <__ssputs_r+0x72>
 80082a4:	463e      	mov	r6, r7
 80082a6:	6820      	ldr	r0, [r4, #0]
 80082a8:	4632      	mov	r2, r6
 80082aa:	4641      	mov	r1, r8
 80082ac:	f000 f9c6 	bl	800863c <memmove>
 80082b0:	68a3      	ldr	r3, [r4, #8]
 80082b2:	1b9b      	subs	r3, r3, r6
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	4433      	add	r3, r6
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	2000      	movs	r0, #0
 80082be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082c2:	462a      	mov	r2, r5
 80082c4:	f000 fa28 	bl	8008718 <_realloc_r>
 80082c8:	4606      	mov	r6, r0
 80082ca:	2800      	cmp	r0, #0
 80082cc:	d1e0      	bne.n	8008290 <__ssputs_r+0x5c>
 80082ce:	6921      	ldr	r1, [r4, #16]
 80082d0:	4650      	mov	r0, sl
 80082d2:	f7ff fb2d 	bl	8007930 <_free_r>
 80082d6:	230c      	movs	r3, #12
 80082d8:	f8ca 3000 	str.w	r3, [sl]
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e2:	81a3      	strh	r3, [r4, #12]
 80082e4:	f04f 30ff 	mov.w	r0, #4294967295
 80082e8:	e7e9      	b.n	80082be <__ssputs_r+0x8a>
	...

080082ec <_svfiprintf_r>:
 80082ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082f0:	4698      	mov	r8, r3
 80082f2:	898b      	ldrh	r3, [r1, #12]
 80082f4:	061b      	lsls	r3, r3, #24
 80082f6:	b09d      	sub	sp, #116	@ 0x74
 80082f8:	4607      	mov	r7, r0
 80082fa:	460d      	mov	r5, r1
 80082fc:	4614      	mov	r4, r2
 80082fe:	d510      	bpl.n	8008322 <_svfiprintf_r+0x36>
 8008300:	690b      	ldr	r3, [r1, #16]
 8008302:	b973      	cbnz	r3, 8008322 <_svfiprintf_r+0x36>
 8008304:	2140      	movs	r1, #64	@ 0x40
 8008306:	f7ff fb87 	bl	8007a18 <_malloc_r>
 800830a:	6028      	str	r0, [r5, #0]
 800830c:	6128      	str	r0, [r5, #16]
 800830e:	b930      	cbnz	r0, 800831e <_svfiprintf_r+0x32>
 8008310:	230c      	movs	r3, #12
 8008312:	603b      	str	r3, [r7, #0]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	b01d      	add	sp, #116	@ 0x74
 800831a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800831e:	2340      	movs	r3, #64	@ 0x40
 8008320:	616b      	str	r3, [r5, #20]
 8008322:	2300      	movs	r3, #0
 8008324:	9309      	str	r3, [sp, #36]	@ 0x24
 8008326:	2320      	movs	r3, #32
 8008328:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800832c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008330:	2330      	movs	r3, #48	@ 0x30
 8008332:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80084d0 <_svfiprintf_r+0x1e4>
 8008336:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800833a:	f04f 0901 	mov.w	r9, #1
 800833e:	4623      	mov	r3, r4
 8008340:	469a      	mov	sl, r3
 8008342:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008346:	b10a      	cbz	r2, 800834c <_svfiprintf_r+0x60>
 8008348:	2a25      	cmp	r2, #37	@ 0x25
 800834a:	d1f9      	bne.n	8008340 <_svfiprintf_r+0x54>
 800834c:	ebba 0b04 	subs.w	fp, sl, r4
 8008350:	d00b      	beq.n	800836a <_svfiprintf_r+0x7e>
 8008352:	465b      	mov	r3, fp
 8008354:	4622      	mov	r2, r4
 8008356:	4629      	mov	r1, r5
 8008358:	4638      	mov	r0, r7
 800835a:	f7ff ff6b 	bl	8008234 <__ssputs_r>
 800835e:	3001      	adds	r0, #1
 8008360:	f000 80a7 	beq.w	80084b2 <_svfiprintf_r+0x1c6>
 8008364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008366:	445a      	add	r2, fp
 8008368:	9209      	str	r2, [sp, #36]	@ 0x24
 800836a:	f89a 3000 	ldrb.w	r3, [sl]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 809f 	beq.w	80084b2 <_svfiprintf_r+0x1c6>
 8008374:	2300      	movs	r3, #0
 8008376:	f04f 32ff 	mov.w	r2, #4294967295
 800837a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837e:	f10a 0a01 	add.w	sl, sl, #1
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	9307      	str	r3, [sp, #28]
 8008386:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800838a:	931a      	str	r3, [sp, #104]	@ 0x68
 800838c:	4654      	mov	r4, sl
 800838e:	2205      	movs	r2, #5
 8008390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008394:	484e      	ldr	r0, [pc, #312]	@ (80084d0 <_svfiprintf_r+0x1e4>)
 8008396:	f7f7 ff1b 	bl	80001d0 <memchr>
 800839a:	9a04      	ldr	r2, [sp, #16]
 800839c:	b9d8      	cbnz	r0, 80083d6 <_svfiprintf_r+0xea>
 800839e:	06d0      	lsls	r0, r2, #27
 80083a0:	bf44      	itt	mi
 80083a2:	2320      	movmi	r3, #32
 80083a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083a8:	0711      	lsls	r1, r2, #28
 80083aa:	bf44      	itt	mi
 80083ac:	232b      	movmi	r3, #43	@ 0x2b
 80083ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083b2:	f89a 3000 	ldrb.w	r3, [sl]
 80083b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083b8:	d015      	beq.n	80083e6 <_svfiprintf_r+0xfa>
 80083ba:	9a07      	ldr	r2, [sp, #28]
 80083bc:	4654      	mov	r4, sl
 80083be:	2000      	movs	r0, #0
 80083c0:	f04f 0c0a 	mov.w	ip, #10
 80083c4:	4621      	mov	r1, r4
 80083c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083ca:	3b30      	subs	r3, #48	@ 0x30
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d94b      	bls.n	8008468 <_svfiprintf_r+0x17c>
 80083d0:	b1b0      	cbz	r0, 8008400 <_svfiprintf_r+0x114>
 80083d2:	9207      	str	r2, [sp, #28]
 80083d4:	e014      	b.n	8008400 <_svfiprintf_r+0x114>
 80083d6:	eba0 0308 	sub.w	r3, r0, r8
 80083da:	fa09 f303 	lsl.w	r3, r9, r3
 80083de:	4313      	orrs	r3, r2
 80083e0:	9304      	str	r3, [sp, #16]
 80083e2:	46a2      	mov	sl, r4
 80083e4:	e7d2      	b.n	800838c <_svfiprintf_r+0xa0>
 80083e6:	9b03      	ldr	r3, [sp, #12]
 80083e8:	1d19      	adds	r1, r3, #4
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	9103      	str	r1, [sp, #12]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	bfbb      	ittet	lt
 80083f2:	425b      	neglt	r3, r3
 80083f4:	f042 0202 	orrlt.w	r2, r2, #2
 80083f8:	9307      	strge	r3, [sp, #28]
 80083fa:	9307      	strlt	r3, [sp, #28]
 80083fc:	bfb8      	it	lt
 80083fe:	9204      	strlt	r2, [sp, #16]
 8008400:	7823      	ldrb	r3, [r4, #0]
 8008402:	2b2e      	cmp	r3, #46	@ 0x2e
 8008404:	d10a      	bne.n	800841c <_svfiprintf_r+0x130>
 8008406:	7863      	ldrb	r3, [r4, #1]
 8008408:	2b2a      	cmp	r3, #42	@ 0x2a
 800840a:	d132      	bne.n	8008472 <_svfiprintf_r+0x186>
 800840c:	9b03      	ldr	r3, [sp, #12]
 800840e:	1d1a      	adds	r2, r3, #4
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	9203      	str	r2, [sp, #12]
 8008414:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008418:	3402      	adds	r4, #2
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80084e0 <_svfiprintf_r+0x1f4>
 8008420:	7821      	ldrb	r1, [r4, #0]
 8008422:	2203      	movs	r2, #3
 8008424:	4650      	mov	r0, sl
 8008426:	f7f7 fed3 	bl	80001d0 <memchr>
 800842a:	b138      	cbz	r0, 800843c <_svfiprintf_r+0x150>
 800842c:	9b04      	ldr	r3, [sp, #16]
 800842e:	eba0 000a 	sub.w	r0, r0, sl
 8008432:	2240      	movs	r2, #64	@ 0x40
 8008434:	4082      	lsls	r2, r0
 8008436:	4313      	orrs	r3, r2
 8008438:	3401      	adds	r4, #1
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008440:	4824      	ldr	r0, [pc, #144]	@ (80084d4 <_svfiprintf_r+0x1e8>)
 8008442:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008446:	2206      	movs	r2, #6
 8008448:	f7f7 fec2 	bl	80001d0 <memchr>
 800844c:	2800      	cmp	r0, #0
 800844e:	d036      	beq.n	80084be <_svfiprintf_r+0x1d2>
 8008450:	4b21      	ldr	r3, [pc, #132]	@ (80084d8 <_svfiprintf_r+0x1ec>)
 8008452:	bb1b      	cbnz	r3, 800849c <_svfiprintf_r+0x1b0>
 8008454:	9b03      	ldr	r3, [sp, #12]
 8008456:	3307      	adds	r3, #7
 8008458:	f023 0307 	bic.w	r3, r3, #7
 800845c:	3308      	adds	r3, #8
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008462:	4433      	add	r3, r6
 8008464:	9309      	str	r3, [sp, #36]	@ 0x24
 8008466:	e76a      	b.n	800833e <_svfiprintf_r+0x52>
 8008468:	fb0c 3202 	mla	r2, ip, r2, r3
 800846c:	460c      	mov	r4, r1
 800846e:	2001      	movs	r0, #1
 8008470:	e7a8      	b.n	80083c4 <_svfiprintf_r+0xd8>
 8008472:	2300      	movs	r3, #0
 8008474:	3401      	adds	r4, #1
 8008476:	9305      	str	r3, [sp, #20]
 8008478:	4619      	mov	r1, r3
 800847a:	f04f 0c0a 	mov.w	ip, #10
 800847e:	4620      	mov	r0, r4
 8008480:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008484:	3a30      	subs	r2, #48	@ 0x30
 8008486:	2a09      	cmp	r2, #9
 8008488:	d903      	bls.n	8008492 <_svfiprintf_r+0x1a6>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d0c6      	beq.n	800841c <_svfiprintf_r+0x130>
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	e7c4      	b.n	800841c <_svfiprintf_r+0x130>
 8008492:	fb0c 2101 	mla	r1, ip, r1, r2
 8008496:	4604      	mov	r4, r0
 8008498:	2301      	movs	r3, #1
 800849a:	e7f0      	b.n	800847e <_svfiprintf_r+0x192>
 800849c:	ab03      	add	r3, sp, #12
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	462a      	mov	r2, r5
 80084a2:	4b0e      	ldr	r3, [pc, #56]	@ (80084dc <_svfiprintf_r+0x1f0>)
 80084a4:	a904      	add	r1, sp, #16
 80084a6:	4638      	mov	r0, r7
 80084a8:	f7fd fe1e 	bl	80060e8 <_printf_float>
 80084ac:	1c42      	adds	r2, r0, #1
 80084ae:	4606      	mov	r6, r0
 80084b0:	d1d6      	bne.n	8008460 <_svfiprintf_r+0x174>
 80084b2:	89ab      	ldrh	r3, [r5, #12]
 80084b4:	065b      	lsls	r3, r3, #25
 80084b6:	f53f af2d 	bmi.w	8008314 <_svfiprintf_r+0x28>
 80084ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084bc:	e72c      	b.n	8008318 <_svfiprintf_r+0x2c>
 80084be:	ab03      	add	r3, sp, #12
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	462a      	mov	r2, r5
 80084c4:	4b05      	ldr	r3, [pc, #20]	@ (80084dc <_svfiprintf_r+0x1f0>)
 80084c6:	a904      	add	r1, sp, #16
 80084c8:	4638      	mov	r0, r7
 80084ca:	f7fe f8a5 	bl	8006618 <_printf_i>
 80084ce:	e7ed      	b.n	80084ac <_svfiprintf_r+0x1c0>
 80084d0:	080090b8 	.word	0x080090b8
 80084d4:	080090c2 	.word	0x080090c2
 80084d8:	080060e9 	.word	0x080060e9
 80084dc:	08008235 	.word	0x08008235
 80084e0:	080090be 	.word	0x080090be

080084e4 <__sflush_r>:
 80084e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80084e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ec:	0716      	lsls	r6, r2, #28
 80084ee:	4605      	mov	r5, r0
 80084f0:	460c      	mov	r4, r1
 80084f2:	d454      	bmi.n	800859e <__sflush_r+0xba>
 80084f4:	684b      	ldr	r3, [r1, #4]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	dc02      	bgt.n	8008500 <__sflush_r+0x1c>
 80084fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dd48      	ble.n	8008592 <__sflush_r+0xae>
 8008500:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008502:	2e00      	cmp	r6, #0
 8008504:	d045      	beq.n	8008592 <__sflush_r+0xae>
 8008506:	2300      	movs	r3, #0
 8008508:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800850c:	682f      	ldr	r7, [r5, #0]
 800850e:	6a21      	ldr	r1, [r4, #32]
 8008510:	602b      	str	r3, [r5, #0]
 8008512:	d030      	beq.n	8008576 <__sflush_r+0x92>
 8008514:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008516:	89a3      	ldrh	r3, [r4, #12]
 8008518:	0759      	lsls	r1, r3, #29
 800851a:	d505      	bpl.n	8008528 <__sflush_r+0x44>
 800851c:	6863      	ldr	r3, [r4, #4]
 800851e:	1ad2      	subs	r2, r2, r3
 8008520:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008522:	b10b      	cbz	r3, 8008528 <__sflush_r+0x44>
 8008524:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008526:	1ad2      	subs	r2, r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800852c:	6a21      	ldr	r1, [r4, #32]
 800852e:	4628      	mov	r0, r5
 8008530:	47b0      	blx	r6
 8008532:	1c43      	adds	r3, r0, #1
 8008534:	89a3      	ldrh	r3, [r4, #12]
 8008536:	d106      	bne.n	8008546 <__sflush_r+0x62>
 8008538:	6829      	ldr	r1, [r5, #0]
 800853a:	291d      	cmp	r1, #29
 800853c:	d82b      	bhi.n	8008596 <__sflush_r+0xb2>
 800853e:	4a2a      	ldr	r2, [pc, #168]	@ (80085e8 <__sflush_r+0x104>)
 8008540:	410a      	asrs	r2, r1
 8008542:	07d6      	lsls	r6, r2, #31
 8008544:	d427      	bmi.n	8008596 <__sflush_r+0xb2>
 8008546:	2200      	movs	r2, #0
 8008548:	6062      	str	r2, [r4, #4]
 800854a:	04d9      	lsls	r1, r3, #19
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	6022      	str	r2, [r4, #0]
 8008550:	d504      	bpl.n	800855c <__sflush_r+0x78>
 8008552:	1c42      	adds	r2, r0, #1
 8008554:	d101      	bne.n	800855a <__sflush_r+0x76>
 8008556:	682b      	ldr	r3, [r5, #0]
 8008558:	b903      	cbnz	r3, 800855c <__sflush_r+0x78>
 800855a:	6560      	str	r0, [r4, #84]	@ 0x54
 800855c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800855e:	602f      	str	r7, [r5, #0]
 8008560:	b1b9      	cbz	r1, 8008592 <__sflush_r+0xae>
 8008562:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008566:	4299      	cmp	r1, r3
 8008568:	d002      	beq.n	8008570 <__sflush_r+0x8c>
 800856a:	4628      	mov	r0, r5
 800856c:	f7ff f9e0 	bl	8007930 <_free_r>
 8008570:	2300      	movs	r3, #0
 8008572:	6363      	str	r3, [r4, #52]	@ 0x34
 8008574:	e00d      	b.n	8008592 <__sflush_r+0xae>
 8008576:	2301      	movs	r3, #1
 8008578:	4628      	mov	r0, r5
 800857a:	47b0      	blx	r6
 800857c:	4602      	mov	r2, r0
 800857e:	1c50      	adds	r0, r2, #1
 8008580:	d1c9      	bne.n	8008516 <__sflush_r+0x32>
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d0c6      	beq.n	8008516 <__sflush_r+0x32>
 8008588:	2b1d      	cmp	r3, #29
 800858a:	d001      	beq.n	8008590 <__sflush_r+0xac>
 800858c:	2b16      	cmp	r3, #22
 800858e:	d11e      	bne.n	80085ce <__sflush_r+0xea>
 8008590:	602f      	str	r7, [r5, #0]
 8008592:	2000      	movs	r0, #0
 8008594:	e022      	b.n	80085dc <__sflush_r+0xf8>
 8008596:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800859a:	b21b      	sxth	r3, r3
 800859c:	e01b      	b.n	80085d6 <__sflush_r+0xf2>
 800859e:	690f      	ldr	r7, [r1, #16]
 80085a0:	2f00      	cmp	r7, #0
 80085a2:	d0f6      	beq.n	8008592 <__sflush_r+0xae>
 80085a4:	0793      	lsls	r3, r2, #30
 80085a6:	680e      	ldr	r6, [r1, #0]
 80085a8:	bf08      	it	eq
 80085aa:	694b      	ldreq	r3, [r1, #20]
 80085ac:	600f      	str	r7, [r1, #0]
 80085ae:	bf18      	it	ne
 80085b0:	2300      	movne	r3, #0
 80085b2:	eba6 0807 	sub.w	r8, r6, r7
 80085b6:	608b      	str	r3, [r1, #8]
 80085b8:	f1b8 0f00 	cmp.w	r8, #0
 80085bc:	dde9      	ble.n	8008592 <__sflush_r+0xae>
 80085be:	6a21      	ldr	r1, [r4, #32]
 80085c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085c2:	4643      	mov	r3, r8
 80085c4:	463a      	mov	r2, r7
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b0      	blx	r6
 80085ca:	2800      	cmp	r0, #0
 80085cc:	dc08      	bgt.n	80085e0 <__sflush_r+0xfc>
 80085ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085d6:	81a3      	strh	r3, [r4, #12]
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295
 80085dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085e0:	4407      	add	r7, r0
 80085e2:	eba8 0800 	sub.w	r8, r8, r0
 80085e6:	e7e7      	b.n	80085b8 <__sflush_r+0xd4>
 80085e8:	dfbffffe 	.word	0xdfbffffe

080085ec <_fflush_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	4605      	mov	r5, r0
 80085f2:	460c      	mov	r4, r1
 80085f4:	b913      	cbnz	r3, 80085fc <_fflush_r+0x10>
 80085f6:	2500      	movs	r5, #0
 80085f8:	4628      	mov	r0, r5
 80085fa:	bd38      	pop	{r3, r4, r5, pc}
 80085fc:	b118      	cbz	r0, 8008606 <_fflush_r+0x1a>
 80085fe:	6a03      	ldr	r3, [r0, #32]
 8008600:	b90b      	cbnz	r3, 8008606 <_fflush_r+0x1a>
 8008602:	f7fe f9b5 	bl	8006970 <__sinit>
 8008606:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d0f3      	beq.n	80085f6 <_fflush_r+0xa>
 800860e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008610:	07d0      	lsls	r0, r2, #31
 8008612:	d404      	bmi.n	800861e <_fflush_r+0x32>
 8008614:	0599      	lsls	r1, r3, #22
 8008616:	d402      	bmi.n	800861e <_fflush_r+0x32>
 8008618:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800861a:	f7fe fb2a 	bl	8006c72 <__retarget_lock_acquire_recursive>
 800861e:	4628      	mov	r0, r5
 8008620:	4621      	mov	r1, r4
 8008622:	f7ff ff5f 	bl	80084e4 <__sflush_r>
 8008626:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008628:	07da      	lsls	r2, r3, #31
 800862a:	4605      	mov	r5, r0
 800862c:	d4e4      	bmi.n	80085f8 <_fflush_r+0xc>
 800862e:	89a3      	ldrh	r3, [r4, #12]
 8008630:	059b      	lsls	r3, r3, #22
 8008632:	d4e1      	bmi.n	80085f8 <_fflush_r+0xc>
 8008634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008636:	f7fe fb1d 	bl	8006c74 <__retarget_lock_release_recursive>
 800863a:	e7dd      	b.n	80085f8 <_fflush_r+0xc>

0800863c <memmove>:
 800863c:	4288      	cmp	r0, r1
 800863e:	b510      	push	{r4, lr}
 8008640:	eb01 0402 	add.w	r4, r1, r2
 8008644:	d902      	bls.n	800864c <memmove+0x10>
 8008646:	4284      	cmp	r4, r0
 8008648:	4623      	mov	r3, r4
 800864a:	d807      	bhi.n	800865c <memmove+0x20>
 800864c:	1e43      	subs	r3, r0, #1
 800864e:	42a1      	cmp	r1, r4
 8008650:	d008      	beq.n	8008664 <memmove+0x28>
 8008652:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008656:	f803 2f01 	strb.w	r2, [r3, #1]!
 800865a:	e7f8      	b.n	800864e <memmove+0x12>
 800865c:	4402      	add	r2, r0
 800865e:	4601      	mov	r1, r0
 8008660:	428a      	cmp	r2, r1
 8008662:	d100      	bne.n	8008666 <memmove+0x2a>
 8008664:	bd10      	pop	{r4, pc}
 8008666:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800866a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800866e:	e7f7      	b.n	8008660 <memmove+0x24>

08008670 <_sbrk_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4d06      	ldr	r5, [pc, #24]	@ (800868c <_sbrk_r+0x1c>)
 8008674:	2300      	movs	r3, #0
 8008676:	4604      	mov	r4, r0
 8008678:	4608      	mov	r0, r1
 800867a:	602b      	str	r3, [r5, #0]
 800867c:	f7f8 ffc6 	bl	800160c <_sbrk>
 8008680:	1c43      	adds	r3, r0, #1
 8008682:	d102      	bne.n	800868a <_sbrk_r+0x1a>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	b103      	cbz	r3, 800868a <_sbrk_r+0x1a>
 8008688:	6023      	str	r3, [r4, #0]
 800868a:	bd38      	pop	{r3, r4, r5, pc}
 800868c:	20004e3c 	.word	0x20004e3c

08008690 <__assert_func>:
 8008690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008692:	4614      	mov	r4, r2
 8008694:	461a      	mov	r2, r3
 8008696:	4b09      	ldr	r3, [pc, #36]	@ (80086bc <__assert_func+0x2c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4605      	mov	r5, r0
 800869c:	68d8      	ldr	r0, [r3, #12]
 800869e:	b954      	cbnz	r4, 80086b6 <__assert_func+0x26>
 80086a0:	4b07      	ldr	r3, [pc, #28]	@ (80086c0 <__assert_func+0x30>)
 80086a2:	461c      	mov	r4, r3
 80086a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086a8:	9100      	str	r1, [sp, #0]
 80086aa:	462b      	mov	r3, r5
 80086ac:	4905      	ldr	r1, [pc, #20]	@ (80086c4 <__assert_func+0x34>)
 80086ae:	f000 f86f 	bl	8008790 <fiprintf>
 80086b2:	f000 f87f 	bl	80087b4 <abort>
 80086b6:	4b04      	ldr	r3, [pc, #16]	@ (80086c8 <__assert_func+0x38>)
 80086b8:	e7f4      	b.n	80086a4 <__assert_func+0x14>
 80086ba:	bf00      	nop
 80086bc:	2000001c 	.word	0x2000001c
 80086c0:	0800910e 	.word	0x0800910e
 80086c4:	080090e0 	.word	0x080090e0
 80086c8:	080090d3 	.word	0x080090d3

080086cc <_calloc_r>:
 80086cc:	b570      	push	{r4, r5, r6, lr}
 80086ce:	fba1 5402 	umull	r5, r4, r1, r2
 80086d2:	b93c      	cbnz	r4, 80086e4 <_calloc_r+0x18>
 80086d4:	4629      	mov	r1, r5
 80086d6:	f7ff f99f 	bl	8007a18 <_malloc_r>
 80086da:	4606      	mov	r6, r0
 80086dc:	b928      	cbnz	r0, 80086ea <_calloc_r+0x1e>
 80086de:	2600      	movs	r6, #0
 80086e0:	4630      	mov	r0, r6
 80086e2:	bd70      	pop	{r4, r5, r6, pc}
 80086e4:	220c      	movs	r2, #12
 80086e6:	6002      	str	r2, [r0, #0]
 80086e8:	e7f9      	b.n	80086de <_calloc_r+0x12>
 80086ea:	462a      	mov	r2, r5
 80086ec:	4621      	mov	r1, r4
 80086ee:	f7fe f9ec 	bl	8006aca <memset>
 80086f2:	e7f5      	b.n	80086e0 <_calloc_r+0x14>

080086f4 <__ascii_mbtowc>:
 80086f4:	b082      	sub	sp, #8
 80086f6:	b901      	cbnz	r1, 80086fa <__ascii_mbtowc+0x6>
 80086f8:	a901      	add	r1, sp, #4
 80086fa:	b142      	cbz	r2, 800870e <__ascii_mbtowc+0x1a>
 80086fc:	b14b      	cbz	r3, 8008712 <__ascii_mbtowc+0x1e>
 80086fe:	7813      	ldrb	r3, [r2, #0]
 8008700:	600b      	str	r3, [r1, #0]
 8008702:	7812      	ldrb	r2, [r2, #0]
 8008704:	1e10      	subs	r0, r2, #0
 8008706:	bf18      	it	ne
 8008708:	2001      	movne	r0, #1
 800870a:	b002      	add	sp, #8
 800870c:	4770      	bx	lr
 800870e:	4610      	mov	r0, r2
 8008710:	e7fb      	b.n	800870a <__ascii_mbtowc+0x16>
 8008712:	f06f 0001 	mvn.w	r0, #1
 8008716:	e7f8      	b.n	800870a <__ascii_mbtowc+0x16>

08008718 <_realloc_r>:
 8008718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871c:	4680      	mov	r8, r0
 800871e:	4615      	mov	r5, r2
 8008720:	460c      	mov	r4, r1
 8008722:	b921      	cbnz	r1, 800872e <_realloc_r+0x16>
 8008724:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008728:	4611      	mov	r1, r2
 800872a:	f7ff b975 	b.w	8007a18 <_malloc_r>
 800872e:	b92a      	cbnz	r2, 800873c <_realloc_r+0x24>
 8008730:	f7ff f8fe 	bl	8007930 <_free_r>
 8008734:	2400      	movs	r4, #0
 8008736:	4620      	mov	r0, r4
 8008738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800873c:	f000 f841 	bl	80087c2 <_malloc_usable_size_r>
 8008740:	4285      	cmp	r5, r0
 8008742:	4606      	mov	r6, r0
 8008744:	d802      	bhi.n	800874c <_realloc_r+0x34>
 8008746:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800874a:	d8f4      	bhi.n	8008736 <_realloc_r+0x1e>
 800874c:	4629      	mov	r1, r5
 800874e:	4640      	mov	r0, r8
 8008750:	f7ff f962 	bl	8007a18 <_malloc_r>
 8008754:	4607      	mov	r7, r0
 8008756:	2800      	cmp	r0, #0
 8008758:	d0ec      	beq.n	8008734 <_realloc_r+0x1c>
 800875a:	42b5      	cmp	r5, r6
 800875c:	462a      	mov	r2, r5
 800875e:	4621      	mov	r1, r4
 8008760:	bf28      	it	cs
 8008762:	4632      	movcs	r2, r6
 8008764:	f7fe fa87 	bl	8006c76 <memcpy>
 8008768:	4621      	mov	r1, r4
 800876a:	4640      	mov	r0, r8
 800876c:	f7ff f8e0 	bl	8007930 <_free_r>
 8008770:	463c      	mov	r4, r7
 8008772:	e7e0      	b.n	8008736 <_realloc_r+0x1e>

08008774 <__ascii_wctomb>:
 8008774:	4603      	mov	r3, r0
 8008776:	4608      	mov	r0, r1
 8008778:	b141      	cbz	r1, 800878c <__ascii_wctomb+0x18>
 800877a:	2aff      	cmp	r2, #255	@ 0xff
 800877c:	d904      	bls.n	8008788 <__ascii_wctomb+0x14>
 800877e:	228a      	movs	r2, #138	@ 0x8a
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f04f 30ff 	mov.w	r0, #4294967295
 8008786:	4770      	bx	lr
 8008788:	700a      	strb	r2, [r1, #0]
 800878a:	2001      	movs	r0, #1
 800878c:	4770      	bx	lr
	...

08008790 <fiprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	b503      	push	{r0, r1, lr}
 8008794:	4601      	mov	r1, r0
 8008796:	ab03      	add	r3, sp, #12
 8008798:	4805      	ldr	r0, [pc, #20]	@ (80087b0 <fiprintf+0x20>)
 800879a:	f853 2b04 	ldr.w	r2, [r3], #4
 800879e:	6800      	ldr	r0, [r0, #0]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	f000 f83f 	bl	8008824 <_vfiprintf_r>
 80087a6:	b002      	add	sp, #8
 80087a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ac:	b003      	add	sp, #12
 80087ae:	4770      	bx	lr
 80087b0:	2000001c 	.word	0x2000001c

080087b4 <abort>:
 80087b4:	b508      	push	{r3, lr}
 80087b6:	2006      	movs	r0, #6
 80087b8:	f000 fa08 	bl	8008bcc <raise>
 80087bc:	2001      	movs	r0, #1
 80087be:	f7f8 fead 	bl	800151c <_exit>

080087c2 <_malloc_usable_size_r>:
 80087c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c6:	1f18      	subs	r0, r3, #4
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	bfbc      	itt	lt
 80087cc:	580b      	ldrlt	r3, [r1, r0]
 80087ce:	18c0      	addlt	r0, r0, r3
 80087d0:	4770      	bx	lr

080087d2 <__sfputc_r>:
 80087d2:	6893      	ldr	r3, [r2, #8]
 80087d4:	3b01      	subs	r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	b410      	push	{r4}
 80087da:	6093      	str	r3, [r2, #8]
 80087dc:	da08      	bge.n	80087f0 <__sfputc_r+0x1e>
 80087de:	6994      	ldr	r4, [r2, #24]
 80087e0:	42a3      	cmp	r3, r4
 80087e2:	db01      	blt.n	80087e8 <__sfputc_r+0x16>
 80087e4:	290a      	cmp	r1, #10
 80087e6:	d103      	bne.n	80087f0 <__sfputc_r+0x1e>
 80087e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087ec:	f000 b932 	b.w	8008a54 <__swbuf_r>
 80087f0:	6813      	ldr	r3, [r2, #0]
 80087f2:	1c58      	adds	r0, r3, #1
 80087f4:	6010      	str	r0, [r2, #0]
 80087f6:	7019      	strb	r1, [r3, #0]
 80087f8:	4608      	mov	r0, r1
 80087fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <__sfputs_r>:
 8008800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008802:	4606      	mov	r6, r0
 8008804:	460f      	mov	r7, r1
 8008806:	4614      	mov	r4, r2
 8008808:	18d5      	adds	r5, r2, r3
 800880a:	42ac      	cmp	r4, r5
 800880c:	d101      	bne.n	8008812 <__sfputs_r+0x12>
 800880e:	2000      	movs	r0, #0
 8008810:	e007      	b.n	8008822 <__sfputs_r+0x22>
 8008812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008816:	463a      	mov	r2, r7
 8008818:	4630      	mov	r0, r6
 800881a:	f7ff ffda 	bl	80087d2 <__sfputc_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d1f3      	bne.n	800880a <__sfputs_r+0xa>
 8008822:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008824 <_vfiprintf_r>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	460d      	mov	r5, r1
 800882a:	b09d      	sub	sp, #116	@ 0x74
 800882c:	4614      	mov	r4, r2
 800882e:	4698      	mov	r8, r3
 8008830:	4606      	mov	r6, r0
 8008832:	b118      	cbz	r0, 800883c <_vfiprintf_r+0x18>
 8008834:	6a03      	ldr	r3, [r0, #32]
 8008836:	b90b      	cbnz	r3, 800883c <_vfiprintf_r+0x18>
 8008838:	f7fe f89a 	bl	8006970 <__sinit>
 800883c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800883e:	07d9      	lsls	r1, r3, #31
 8008840:	d405      	bmi.n	800884e <_vfiprintf_r+0x2a>
 8008842:	89ab      	ldrh	r3, [r5, #12]
 8008844:	059a      	lsls	r2, r3, #22
 8008846:	d402      	bmi.n	800884e <_vfiprintf_r+0x2a>
 8008848:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800884a:	f7fe fa12 	bl	8006c72 <__retarget_lock_acquire_recursive>
 800884e:	89ab      	ldrh	r3, [r5, #12]
 8008850:	071b      	lsls	r3, r3, #28
 8008852:	d501      	bpl.n	8008858 <_vfiprintf_r+0x34>
 8008854:	692b      	ldr	r3, [r5, #16]
 8008856:	b99b      	cbnz	r3, 8008880 <_vfiprintf_r+0x5c>
 8008858:	4629      	mov	r1, r5
 800885a:	4630      	mov	r0, r6
 800885c:	f000 f938 	bl	8008ad0 <__swsetup_r>
 8008860:	b170      	cbz	r0, 8008880 <_vfiprintf_r+0x5c>
 8008862:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008864:	07dc      	lsls	r4, r3, #31
 8008866:	d504      	bpl.n	8008872 <_vfiprintf_r+0x4e>
 8008868:	f04f 30ff 	mov.w	r0, #4294967295
 800886c:	b01d      	add	sp, #116	@ 0x74
 800886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008872:	89ab      	ldrh	r3, [r5, #12]
 8008874:	0598      	lsls	r0, r3, #22
 8008876:	d4f7      	bmi.n	8008868 <_vfiprintf_r+0x44>
 8008878:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800887a:	f7fe f9fb 	bl	8006c74 <__retarget_lock_release_recursive>
 800887e:	e7f3      	b.n	8008868 <_vfiprintf_r+0x44>
 8008880:	2300      	movs	r3, #0
 8008882:	9309      	str	r3, [sp, #36]	@ 0x24
 8008884:	2320      	movs	r3, #32
 8008886:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800888a:	f8cd 800c 	str.w	r8, [sp, #12]
 800888e:	2330      	movs	r3, #48	@ 0x30
 8008890:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a40 <_vfiprintf_r+0x21c>
 8008894:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008898:	f04f 0901 	mov.w	r9, #1
 800889c:	4623      	mov	r3, r4
 800889e:	469a      	mov	sl, r3
 80088a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088a4:	b10a      	cbz	r2, 80088aa <_vfiprintf_r+0x86>
 80088a6:	2a25      	cmp	r2, #37	@ 0x25
 80088a8:	d1f9      	bne.n	800889e <_vfiprintf_r+0x7a>
 80088aa:	ebba 0b04 	subs.w	fp, sl, r4
 80088ae:	d00b      	beq.n	80088c8 <_vfiprintf_r+0xa4>
 80088b0:	465b      	mov	r3, fp
 80088b2:	4622      	mov	r2, r4
 80088b4:	4629      	mov	r1, r5
 80088b6:	4630      	mov	r0, r6
 80088b8:	f7ff ffa2 	bl	8008800 <__sfputs_r>
 80088bc:	3001      	adds	r0, #1
 80088be:	f000 80a7 	beq.w	8008a10 <_vfiprintf_r+0x1ec>
 80088c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088c4:	445a      	add	r2, fp
 80088c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80088c8:	f89a 3000 	ldrb.w	r3, [sl]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 809f 	beq.w	8008a10 <_vfiprintf_r+0x1ec>
 80088d2:	2300      	movs	r3, #0
 80088d4:	f04f 32ff 	mov.w	r2, #4294967295
 80088d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088dc:	f10a 0a01 	add.w	sl, sl, #1
 80088e0:	9304      	str	r3, [sp, #16]
 80088e2:	9307      	str	r3, [sp, #28]
 80088e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80088e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80088ea:	4654      	mov	r4, sl
 80088ec:	2205      	movs	r2, #5
 80088ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088f2:	4853      	ldr	r0, [pc, #332]	@ (8008a40 <_vfiprintf_r+0x21c>)
 80088f4:	f7f7 fc6c 	bl	80001d0 <memchr>
 80088f8:	9a04      	ldr	r2, [sp, #16]
 80088fa:	b9d8      	cbnz	r0, 8008934 <_vfiprintf_r+0x110>
 80088fc:	06d1      	lsls	r1, r2, #27
 80088fe:	bf44      	itt	mi
 8008900:	2320      	movmi	r3, #32
 8008902:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008906:	0713      	lsls	r3, r2, #28
 8008908:	bf44      	itt	mi
 800890a:	232b      	movmi	r3, #43	@ 0x2b
 800890c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008910:	f89a 3000 	ldrb.w	r3, [sl]
 8008914:	2b2a      	cmp	r3, #42	@ 0x2a
 8008916:	d015      	beq.n	8008944 <_vfiprintf_r+0x120>
 8008918:	9a07      	ldr	r2, [sp, #28]
 800891a:	4654      	mov	r4, sl
 800891c:	2000      	movs	r0, #0
 800891e:	f04f 0c0a 	mov.w	ip, #10
 8008922:	4621      	mov	r1, r4
 8008924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008928:	3b30      	subs	r3, #48	@ 0x30
 800892a:	2b09      	cmp	r3, #9
 800892c:	d94b      	bls.n	80089c6 <_vfiprintf_r+0x1a2>
 800892e:	b1b0      	cbz	r0, 800895e <_vfiprintf_r+0x13a>
 8008930:	9207      	str	r2, [sp, #28]
 8008932:	e014      	b.n	800895e <_vfiprintf_r+0x13a>
 8008934:	eba0 0308 	sub.w	r3, r0, r8
 8008938:	fa09 f303 	lsl.w	r3, r9, r3
 800893c:	4313      	orrs	r3, r2
 800893e:	9304      	str	r3, [sp, #16]
 8008940:	46a2      	mov	sl, r4
 8008942:	e7d2      	b.n	80088ea <_vfiprintf_r+0xc6>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	1d19      	adds	r1, r3, #4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	9103      	str	r1, [sp, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	bfbb      	ittet	lt
 8008950:	425b      	neglt	r3, r3
 8008952:	f042 0202 	orrlt.w	r2, r2, #2
 8008956:	9307      	strge	r3, [sp, #28]
 8008958:	9307      	strlt	r3, [sp, #28]
 800895a:	bfb8      	it	lt
 800895c:	9204      	strlt	r2, [sp, #16]
 800895e:	7823      	ldrb	r3, [r4, #0]
 8008960:	2b2e      	cmp	r3, #46	@ 0x2e
 8008962:	d10a      	bne.n	800897a <_vfiprintf_r+0x156>
 8008964:	7863      	ldrb	r3, [r4, #1]
 8008966:	2b2a      	cmp	r3, #42	@ 0x2a
 8008968:	d132      	bne.n	80089d0 <_vfiprintf_r+0x1ac>
 800896a:	9b03      	ldr	r3, [sp, #12]
 800896c:	1d1a      	adds	r2, r3, #4
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9203      	str	r2, [sp, #12]
 8008972:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008976:	3402      	adds	r4, #2
 8008978:	9305      	str	r3, [sp, #20]
 800897a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a50 <_vfiprintf_r+0x22c>
 800897e:	7821      	ldrb	r1, [r4, #0]
 8008980:	2203      	movs	r2, #3
 8008982:	4650      	mov	r0, sl
 8008984:	f7f7 fc24 	bl	80001d0 <memchr>
 8008988:	b138      	cbz	r0, 800899a <_vfiprintf_r+0x176>
 800898a:	9b04      	ldr	r3, [sp, #16]
 800898c:	eba0 000a 	sub.w	r0, r0, sl
 8008990:	2240      	movs	r2, #64	@ 0x40
 8008992:	4082      	lsls	r2, r0
 8008994:	4313      	orrs	r3, r2
 8008996:	3401      	adds	r4, #1
 8008998:	9304      	str	r3, [sp, #16]
 800899a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899e:	4829      	ldr	r0, [pc, #164]	@ (8008a44 <_vfiprintf_r+0x220>)
 80089a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089a4:	2206      	movs	r2, #6
 80089a6:	f7f7 fc13 	bl	80001d0 <memchr>
 80089aa:	2800      	cmp	r0, #0
 80089ac:	d03f      	beq.n	8008a2e <_vfiprintf_r+0x20a>
 80089ae:	4b26      	ldr	r3, [pc, #152]	@ (8008a48 <_vfiprintf_r+0x224>)
 80089b0:	bb1b      	cbnz	r3, 80089fa <_vfiprintf_r+0x1d6>
 80089b2:	9b03      	ldr	r3, [sp, #12]
 80089b4:	3307      	adds	r3, #7
 80089b6:	f023 0307 	bic.w	r3, r3, #7
 80089ba:	3308      	adds	r3, #8
 80089bc:	9303      	str	r3, [sp, #12]
 80089be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089c0:	443b      	add	r3, r7
 80089c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80089c4:	e76a      	b.n	800889c <_vfiprintf_r+0x78>
 80089c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80089ca:	460c      	mov	r4, r1
 80089cc:	2001      	movs	r0, #1
 80089ce:	e7a8      	b.n	8008922 <_vfiprintf_r+0xfe>
 80089d0:	2300      	movs	r3, #0
 80089d2:	3401      	adds	r4, #1
 80089d4:	9305      	str	r3, [sp, #20]
 80089d6:	4619      	mov	r1, r3
 80089d8:	f04f 0c0a 	mov.w	ip, #10
 80089dc:	4620      	mov	r0, r4
 80089de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089e2:	3a30      	subs	r2, #48	@ 0x30
 80089e4:	2a09      	cmp	r2, #9
 80089e6:	d903      	bls.n	80089f0 <_vfiprintf_r+0x1cc>
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d0c6      	beq.n	800897a <_vfiprintf_r+0x156>
 80089ec:	9105      	str	r1, [sp, #20]
 80089ee:	e7c4      	b.n	800897a <_vfiprintf_r+0x156>
 80089f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80089f4:	4604      	mov	r4, r0
 80089f6:	2301      	movs	r3, #1
 80089f8:	e7f0      	b.n	80089dc <_vfiprintf_r+0x1b8>
 80089fa:	ab03      	add	r3, sp, #12
 80089fc:	9300      	str	r3, [sp, #0]
 80089fe:	462a      	mov	r2, r5
 8008a00:	4b12      	ldr	r3, [pc, #72]	@ (8008a4c <_vfiprintf_r+0x228>)
 8008a02:	a904      	add	r1, sp, #16
 8008a04:	4630      	mov	r0, r6
 8008a06:	f7fd fb6f 	bl	80060e8 <_printf_float>
 8008a0a:	4607      	mov	r7, r0
 8008a0c:	1c78      	adds	r0, r7, #1
 8008a0e:	d1d6      	bne.n	80089be <_vfiprintf_r+0x19a>
 8008a10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a12:	07d9      	lsls	r1, r3, #31
 8008a14:	d405      	bmi.n	8008a22 <_vfiprintf_r+0x1fe>
 8008a16:	89ab      	ldrh	r3, [r5, #12]
 8008a18:	059a      	lsls	r2, r3, #22
 8008a1a:	d402      	bmi.n	8008a22 <_vfiprintf_r+0x1fe>
 8008a1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a1e:	f7fe f929 	bl	8006c74 <__retarget_lock_release_recursive>
 8008a22:	89ab      	ldrh	r3, [r5, #12]
 8008a24:	065b      	lsls	r3, r3, #25
 8008a26:	f53f af1f 	bmi.w	8008868 <_vfiprintf_r+0x44>
 8008a2a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a2c:	e71e      	b.n	800886c <_vfiprintf_r+0x48>
 8008a2e:	ab03      	add	r3, sp, #12
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	462a      	mov	r2, r5
 8008a34:	4b05      	ldr	r3, [pc, #20]	@ (8008a4c <_vfiprintf_r+0x228>)
 8008a36:	a904      	add	r1, sp, #16
 8008a38:	4630      	mov	r0, r6
 8008a3a:	f7fd fded 	bl	8006618 <_printf_i>
 8008a3e:	e7e4      	b.n	8008a0a <_vfiprintf_r+0x1e6>
 8008a40:	080090b8 	.word	0x080090b8
 8008a44:	080090c2 	.word	0x080090c2
 8008a48:	080060e9 	.word	0x080060e9
 8008a4c:	08008801 	.word	0x08008801
 8008a50:	080090be 	.word	0x080090be

08008a54 <__swbuf_r>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	460e      	mov	r6, r1
 8008a58:	4614      	mov	r4, r2
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	b118      	cbz	r0, 8008a66 <__swbuf_r+0x12>
 8008a5e:	6a03      	ldr	r3, [r0, #32]
 8008a60:	b90b      	cbnz	r3, 8008a66 <__swbuf_r+0x12>
 8008a62:	f7fd ff85 	bl	8006970 <__sinit>
 8008a66:	69a3      	ldr	r3, [r4, #24]
 8008a68:	60a3      	str	r3, [r4, #8]
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	071a      	lsls	r2, r3, #28
 8008a6e:	d501      	bpl.n	8008a74 <__swbuf_r+0x20>
 8008a70:	6923      	ldr	r3, [r4, #16]
 8008a72:	b943      	cbnz	r3, 8008a86 <__swbuf_r+0x32>
 8008a74:	4621      	mov	r1, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	f000 f82a 	bl	8008ad0 <__swsetup_r>
 8008a7c:	b118      	cbz	r0, 8008a86 <__swbuf_r+0x32>
 8008a7e:	f04f 37ff 	mov.w	r7, #4294967295
 8008a82:	4638      	mov	r0, r7
 8008a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a86:	6823      	ldr	r3, [r4, #0]
 8008a88:	6922      	ldr	r2, [r4, #16]
 8008a8a:	1a98      	subs	r0, r3, r2
 8008a8c:	6963      	ldr	r3, [r4, #20]
 8008a8e:	b2f6      	uxtb	r6, r6
 8008a90:	4283      	cmp	r3, r0
 8008a92:	4637      	mov	r7, r6
 8008a94:	dc05      	bgt.n	8008aa2 <__swbuf_r+0x4e>
 8008a96:	4621      	mov	r1, r4
 8008a98:	4628      	mov	r0, r5
 8008a9a:	f7ff fda7 	bl	80085ec <_fflush_r>
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d1ed      	bne.n	8008a7e <__swbuf_r+0x2a>
 8008aa2:	68a3      	ldr	r3, [r4, #8]
 8008aa4:	3b01      	subs	r3, #1
 8008aa6:	60a3      	str	r3, [r4, #8]
 8008aa8:	6823      	ldr	r3, [r4, #0]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	6022      	str	r2, [r4, #0]
 8008aae:	701e      	strb	r6, [r3, #0]
 8008ab0:	6962      	ldr	r2, [r4, #20]
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d004      	beq.n	8008ac2 <__swbuf_r+0x6e>
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d5e1      	bpl.n	8008a82 <__swbuf_r+0x2e>
 8008abe:	2e0a      	cmp	r6, #10
 8008ac0:	d1df      	bne.n	8008a82 <__swbuf_r+0x2e>
 8008ac2:	4621      	mov	r1, r4
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f7ff fd91 	bl	80085ec <_fflush_r>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	d0d9      	beq.n	8008a82 <__swbuf_r+0x2e>
 8008ace:	e7d6      	b.n	8008a7e <__swbuf_r+0x2a>

08008ad0 <__swsetup_r>:
 8008ad0:	b538      	push	{r3, r4, r5, lr}
 8008ad2:	4b29      	ldr	r3, [pc, #164]	@ (8008b78 <__swsetup_r+0xa8>)
 8008ad4:	4605      	mov	r5, r0
 8008ad6:	6818      	ldr	r0, [r3, #0]
 8008ad8:	460c      	mov	r4, r1
 8008ada:	b118      	cbz	r0, 8008ae4 <__swsetup_r+0x14>
 8008adc:	6a03      	ldr	r3, [r0, #32]
 8008ade:	b90b      	cbnz	r3, 8008ae4 <__swsetup_r+0x14>
 8008ae0:	f7fd ff46 	bl	8006970 <__sinit>
 8008ae4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ae8:	0719      	lsls	r1, r3, #28
 8008aea:	d422      	bmi.n	8008b32 <__swsetup_r+0x62>
 8008aec:	06da      	lsls	r2, r3, #27
 8008aee:	d407      	bmi.n	8008b00 <__swsetup_r+0x30>
 8008af0:	2209      	movs	r2, #9
 8008af2:	602a      	str	r2, [r5, #0]
 8008af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008af8:	81a3      	strh	r3, [r4, #12]
 8008afa:	f04f 30ff 	mov.w	r0, #4294967295
 8008afe:	e033      	b.n	8008b68 <__swsetup_r+0x98>
 8008b00:	0758      	lsls	r0, r3, #29
 8008b02:	d512      	bpl.n	8008b2a <__swsetup_r+0x5a>
 8008b04:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b06:	b141      	cbz	r1, 8008b1a <__swsetup_r+0x4a>
 8008b08:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b0c:	4299      	cmp	r1, r3
 8008b0e:	d002      	beq.n	8008b16 <__swsetup_r+0x46>
 8008b10:	4628      	mov	r0, r5
 8008b12:	f7fe ff0d 	bl	8007930 <_free_r>
 8008b16:	2300      	movs	r3, #0
 8008b18:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b1a:	89a3      	ldrh	r3, [r4, #12]
 8008b1c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008b20:	81a3      	strh	r3, [r4, #12]
 8008b22:	2300      	movs	r3, #0
 8008b24:	6063      	str	r3, [r4, #4]
 8008b26:	6923      	ldr	r3, [r4, #16]
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f043 0308 	orr.w	r3, r3, #8
 8008b30:	81a3      	strh	r3, [r4, #12]
 8008b32:	6923      	ldr	r3, [r4, #16]
 8008b34:	b94b      	cbnz	r3, 8008b4a <__swsetup_r+0x7a>
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008b3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b40:	d003      	beq.n	8008b4a <__swsetup_r+0x7a>
 8008b42:	4621      	mov	r1, r4
 8008b44:	4628      	mov	r0, r5
 8008b46:	f000 f883 	bl	8008c50 <__smakebuf_r>
 8008b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b4e:	f013 0201 	ands.w	r2, r3, #1
 8008b52:	d00a      	beq.n	8008b6a <__swsetup_r+0x9a>
 8008b54:	2200      	movs	r2, #0
 8008b56:	60a2      	str	r2, [r4, #8]
 8008b58:	6962      	ldr	r2, [r4, #20]
 8008b5a:	4252      	negs	r2, r2
 8008b5c:	61a2      	str	r2, [r4, #24]
 8008b5e:	6922      	ldr	r2, [r4, #16]
 8008b60:	b942      	cbnz	r2, 8008b74 <__swsetup_r+0xa4>
 8008b62:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b66:	d1c5      	bne.n	8008af4 <__swsetup_r+0x24>
 8008b68:	bd38      	pop	{r3, r4, r5, pc}
 8008b6a:	0799      	lsls	r1, r3, #30
 8008b6c:	bf58      	it	pl
 8008b6e:	6962      	ldrpl	r2, [r4, #20]
 8008b70:	60a2      	str	r2, [r4, #8]
 8008b72:	e7f4      	b.n	8008b5e <__swsetup_r+0x8e>
 8008b74:	2000      	movs	r0, #0
 8008b76:	e7f7      	b.n	8008b68 <__swsetup_r+0x98>
 8008b78:	2000001c 	.word	0x2000001c

08008b7c <_raise_r>:
 8008b7c:	291f      	cmp	r1, #31
 8008b7e:	b538      	push	{r3, r4, r5, lr}
 8008b80:	4605      	mov	r5, r0
 8008b82:	460c      	mov	r4, r1
 8008b84:	d904      	bls.n	8008b90 <_raise_r+0x14>
 8008b86:	2316      	movs	r3, #22
 8008b88:	6003      	str	r3, [r0, #0]
 8008b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b8e:	bd38      	pop	{r3, r4, r5, pc}
 8008b90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008b92:	b112      	cbz	r2, 8008b9a <_raise_r+0x1e>
 8008b94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008b98:	b94b      	cbnz	r3, 8008bae <_raise_r+0x32>
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	f000 f830 	bl	8008c00 <_getpid_r>
 8008ba0:	4622      	mov	r2, r4
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008baa:	f000 b817 	b.w	8008bdc <_kill_r>
 8008bae:	2b01      	cmp	r3, #1
 8008bb0:	d00a      	beq.n	8008bc8 <_raise_r+0x4c>
 8008bb2:	1c59      	adds	r1, r3, #1
 8008bb4:	d103      	bne.n	8008bbe <_raise_r+0x42>
 8008bb6:	2316      	movs	r3, #22
 8008bb8:	6003      	str	r3, [r0, #0]
 8008bba:	2001      	movs	r0, #1
 8008bbc:	e7e7      	b.n	8008b8e <_raise_r+0x12>
 8008bbe:	2100      	movs	r1, #0
 8008bc0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	4798      	blx	r3
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e7e0      	b.n	8008b8e <_raise_r+0x12>

08008bcc <raise>:
 8008bcc:	4b02      	ldr	r3, [pc, #8]	@ (8008bd8 <raise+0xc>)
 8008bce:	4601      	mov	r1, r0
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f7ff bfd3 	b.w	8008b7c <_raise_r>
 8008bd6:	bf00      	nop
 8008bd8:	2000001c 	.word	0x2000001c

08008bdc <_kill_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d07      	ldr	r5, [pc, #28]	@ (8008bfc <_kill_r+0x20>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	602b      	str	r3, [r5, #0]
 8008bea:	f7f8 fc87 	bl	80014fc <_kill>
 8008bee:	1c43      	adds	r3, r0, #1
 8008bf0:	d102      	bne.n	8008bf8 <_kill_r+0x1c>
 8008bf2:	682b      	ldr	r3, [r5, #0]
 8008bf4:	b103      	cbz	r3, 8008bf8 <_kill_r+0x1c>
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	bd38      	pop	{r3, r4, r5, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20004e3c 	.word	0x20004e3c

08008c00 <_getpid_r>:
 8008c00:	f7f8 bc74 	b.w	80014ec <_getpid>

08008c04 <__swhatbuf_r>:
 8008c04:	b570      	push	{r4, r5, r6, lr}
 8008c06:	460c      	mov	r4, r1
 8008c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c0c:	2900      	cmp	r1, #0
 8008c0e:	b096      	sub	sp, #88	@ 0x58
 8008c10:	4615      	mov	r5, r2
 8008c12:	461e      	mov	r6, r3
 8008c14:	da0d      	bge.n	8008c32 <__swhatbuf_r+0x2e>
 8008c16:	89a3      	ldrh	r3, [r4, #12]
 8008c18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c1c:	f04f 0100 	mov.w	r1, #0
 8008c20:	bf14      	ite	ne
 8008c22:	2340      	movne	r3, #64	@ 0x40
 8008c24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c28:	2000      	movs	r0, #0
 8008c2a:	6031      	str	r1, [r6, #0]
 8008c2c:	602b      	str	r3, [r5, #0]
 8008c2e:	b016      	add	sp, #88	@ 0x58
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	466a      	mov	r2, sp
 8008c34:	f000 f848 	bl	8008cc8 <_fstat_r>
 8008c38:	2800      	cmp	r0, #0
 8008c3a:	dbec      	blt.n	8008c16 <__swhatbuf_r+0x12>
 8008c3c:	9901      	ldr	r1, [sp, #4]
 8008c3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c46:	4259      	negs	r1, r3
 8008c48:	4159      	adcs	r1, r3
 8008c4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c4e:	e7eb      	b.n	8008c28 <__swhatbuf_r+0x24>

08008c50 <__smakebuf_r>:
 8008c50:	898b      	ldrh	r3, [r1, #12]
 8008c52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c54:	079d      	lsls	r5, r3, #30
 8008c56:	4606      	mov	r6, r0
 8008c58:	460c      	mov	r4, r1
 8008c5a:	d507      	bpl.n	8008c6c <__smakebuf_r+0x1c>
 8008c5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008c60:	6023      	str	r3, [r4, #0]
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	2301      	movs	r3, #1
 8008c66:	6163      	str	r3, [r4, #20]
 8008c68:	b003      	add	sp, #12
 8008c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c6c:	ab01      	add	r3, sp, #4
 8008c6e:	466a      	mov	r2, sp
 8008c70:	f7ff ffc8 	bl	8008c04 <__swhatbuf_r>
 8008c74:	9f00      	ldr	r7, [sp, #0]
 8008c76:	4605      	mov	r5, r0
 8008c78:	4639      	mov	r1, r7
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7fe fecc 	bl	8007a18 <_malloc_r>
 8008c80:	b948      	cbnz	r0, 8008c96 <__smakebuf_r+0x46>
 8008c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c86:	059a      	lsls	r2, r3, #22
 8008c88:	d4ee      	bmi.n	8008c68 <__smakebuf_r+0x18>
 8008c8a:	f023 0303 	bic.w	r3, r3, #3
 8008c8e:	f043 0302 	orr.w	r3, r3, #2
 8008c92:	81a3      	strh	r3, [r4, #12]
 8008c94:	e7e2      	b.n	8008c5c <__smakebuf_r+0xc>
 8008c96:	89a3      	ldrh	r3, [r4, #12]
 8008c98:	6020      	str	r0, [r4, #0]
 8008c9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	9b01      	ldr	r3, [sp, #4]
 8008ca2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ca6:	b15b      	cbz	r3, 8008cc0 <__smakebuf_r+0x70>
 8008ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 f81d 	bl	8008cec <_isatty_r>
 8008cb2:	b128      	cbz	r0, 8008cc0 <__smakebuf_r+0x70>
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	f043 0301 	orr.w	r3, r3, #1
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	431d      	orrs	r5, r3
 8008cc4:	81a5      	strh	r5, [r4, #12]
 8008cc6:	e7cf      	b.n	8008c68 <__smakebuf_r+0x18>

08008cc8 <_fstat_r>:
 8008cc8:	b538      	push	{r3, r4, r5, lr}
 8008cca:	4d07      	ldr	r5, [pc, #28]	@ (8008ce8 <_fstat_r+0x20>)
 8008ccc:	2300      	movs	r3, #0
 8008cce:	4604      	mov	r4, r0
 8008cd0:	4608      	mov	r0, r1
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	f7f8 fc71 	bl	80015bc <_fstat>
 8008cda:	1c43      	adds	r3, r0, #1
 8008cdc:	d102      	bne.n	8008ce4 <_fstat_r+0x1c>
 8008cde:	682b      	ldr	r3, [r5, #0]
 8008ce0:	b103      	cbz	r3, 8008ce4 <_fstat_r+0x1c>
 8008ce2:	6023      	str	r3, [r4, #0]
 8008ce4:	bd38      	pop	{r3, r4, r5, pc}
 8008ce6:	bf00      	nop
 8008ce8:	20004e3c 	.word	0x20004e3c

08008cec <_isatty_r>:
 8008cec:	b538      	push	{r3, r4, r5, lr}
 8008cee:	4d06      	ldr	r5, [pc, #24]	@ (8008d08 <_isatty_r+0x1c>)
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	4608      	mov	r0, r1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	f7f8 fc70 	bl	80015dc <_isatty>
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	d102      	bne.n	8008d06 <_isatty_r+0x1a>
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	b103      	cbz	r3, 8008d06 <_isatty_r+0x1a>
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	bd38      	pop	{r3, r4, r5, pc}
 8008d08:	20004e3c 	.word	0x20004e3c

08008d0c <_init>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr

08008d18 <_fini>:
 8008d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d1a:	bf00      	nop
 8008d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d1e:	bc08      	pop	{r3}
 8008d20:	469e      	mov	lr, r3
 8008d22:	4770      	bx	lr
