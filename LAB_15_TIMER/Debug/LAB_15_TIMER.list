
LAB_15_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006240  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  080063d0  080063d0  000073d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066fc  080066fc  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080066fc  080066fc  000076fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006704  08006704  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006704  08006704  00007704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800670c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008064  2**0
                  CONTENTS
 10 .bss          00004c5c  20000064  20000064  00008064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cc0  20004cc0  00008064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d71  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003224  00000000  00000000  0001fe05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  00023030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f88  00000000  00000000  00024428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000038af  00000000  00000000  000253b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016014  00000000  00000000  00028c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5dec  00000000  00000000  0003ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114a5f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005950  00000000  00000000  00114aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0011a3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080063b8 	.word	0x080063b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080063b8 	.word	0x080063b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <PrintData>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PrintData(const char *format, ...)
{
 8000560:	b40f      	push	{r0, r1, r2, r3}
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, format);
 8000568:	f107 0314 	add.w	r3, r7, #20
 800056c:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(uartBuffer, sizeof(uartBuffer), format, args);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	2164      	movs	r1, #100	@ 0x64
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <PrintData+0x40>)
 8000576:	f005 fa3b 	bl	80059f0 <vsniprintf>
 800057a:	6078      	str	r0, [r7, #4]
    va_end(args);
    if (len > 0)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b00      	cmp	r3, #0
 8000580:	dd07      	ble.n	8000592 <PrintData+0x32>
    {
        HAL_UART_Transmit(&huart2, (uint8_t*)uartBuffer, len, HAL_MAX_DELAY);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	b29a      	uxth	r2, r3
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	4905      	ldr	r1, [pc, #20]	@ (80005a0 <PrintData+0x40>)
 800058c:	4805      	ldr	r0, [pc, #20]	@ (80005a4 <PrintData+0x44>)
 800058e:	f001 fe4b 	bl	8002228 <HAL_UART_Transmit>
    }
}
 8000592:	bf00      	nop
 8000594:	3708      	adds	r7, #8
 8000596:	46bd      	mov	sp, r7
 8000598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800059c:	b004      	add	sp, #16
 800059e:	4770      	bx	lr
 80005a0:	200000dc 	.word	0x200000dc
 80005a4:	20000080 	.word	0x20000080

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fbd4 	bl	8000d58 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f858 	bl	8000664 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f8de 	bl	8000774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f8b2 	bl	8000720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  PrintData("\r\n=== FreeRTOS Dynamic Timer ===\r\n");
 80005bc:	4819      	ldr	r0, [pc, #100]	@ (8000624 <main+0x7c>)
 80005be:	f7ff ffcf 	bl	8000560 <PrintData>
  PrintData("Press PA0 Button To Decrease LED Toggle Time\r\n");
 80005c2:	4819      	ldr	r0, [pc, #100]	@ (8000628 <main+0x80>)
 80005c4:	f7ff ffcc 	bl	8000560 <PrintData>
  PrintData("Range : 1000ms -> 100ms (Decrement By 100ms Each Press)\r\n");
 80005c8:	4818      	ldr	r0, [pc, #96]	@ (800062c <main+0x84>)
 80005ca:	f7ff ffc9 	bl	8000560 <PrintData>
  PrintData("\r\n=============================================\r\n");
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <main+0x88>)
 80005d0:	f7ff ffc6 	bl	8000560 <PrintData>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005d4:	f002 fa28 	bl	8002a28 <osKernelInitialize>
  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of myTimer01 */
  myTimer01Handle = osTimerNew(Callback01, osTimerPeriodic, NULL, &myTimer01_attributes);
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <main+0x8c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	2101      	movs	r1, #1
 80005de:	4816      	ldr	r0, [pc, #88]	@ (8000638 <main+0x90>)
 80005e0:	f002 fb44 	bl	8002c6c <osTimerNew>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a15      	ldr	r2, [pc, #84]	@ (800063c <main+0x94>)
 80005e8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_QUEUES */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005ea:	4a15      	ldr	r2, [pc, #84]	@ (8000640 <main+0x98>)
 80005ec:	2100      	movs	r1, #0
 80005ee:	4815      	ldr	r0, [pc, #84]	@ (8000644 <main+0x9c>)
 80005f0:	f002 fa79 	bl	8002ae6 <osThreadNew>
 80005f4:	4603      	mov	r3, r0
 80005f6:	4a14      	ldr	r2, [pc, #80]	@ (8000648 <main+0xa0>)
 80005f8:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 80005fa:	4a14      	ldr	r2, [pc, #80]	@ (800064c <main+0xa4>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4814      	ldr	r0, [pc, #80]	@ (8000650 <main+0xa8>)
 8000600:	f002 fa71 	bl	8002ae6 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a13      	ldr	r2, [pc, #76]	@ (8000654 <main+0xac>)
 8000608:	6013      	str	r3, [r2, #0]

  /* creation of BTNTask */
  BTNTaskHandle = osThreadNew(StartBTNTask, NULL, &BTNTask_attributes);
 800060a:	4a13      	ldr	r2, [pc, #76]	@ (8000658 <main+0xb0>)
 800060c:	2100      	movs	r1, #0
 800060e:	4813      	ldr	r0, [pc, #76]	@ (800065c <main+0xb4>)
 8000610:	f002 fa69 	bl	8002ae6 <osThreadNew>
 8000614:	4603      	mov	r3, r0
 8000616:	4a12      	ldr	r2, [pc, #72]	@ (8000660 <main+0xb8>)
 8000618:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800061a:	f002 fa29 	bl	8002a70 <osKernelStart>
 800061e:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000620:	4618      	mov	r0, r3
 8000622:	bd80      	pop	{r7, pc}
 8000624:	080063f8 	.word	0x080063f8
 8000628:	0800641c 	.word	0x0800641c
 800062c:	0800644c 	.word	0x0800644c
 8000630:	08006488 	.word	0x08006488
 8000634:	080066a0 	.word	0x080066a0
 8000638:	080009cd 	.word	0x080009cd
 800063c:	200000d4 	.word	0x200000d4
 8000640:	08006634 	.word	0x08006634
 8000644:	08000871 	.word	0x08000871
 8000648:	200000c8 	.word	0x200000c8
 800064c:	08006658 	.word	0x08006658
 8000650:	080008ad 	.word	0x080008ad
 8000654:	200000cc 	.word	0x200000cc
 8000658:	0800667c 	.word	0x0800667c
 800065c:	080008f9 	.word	0x080008f9
 8000660:	200000d0 	.word	0x200000d0

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b094      	sub	sp, #80	@ 0x50
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0320 	add.w	r3, r7, #32
 800066e:	2230      	movs	r2, #48	@ 0x30
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 f9ca 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xb4>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xb4>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xb4>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a4:	2300      	movs	r3, #0
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	4b1c      	ldr	r3, [pc, #112]	@ (800071c <SystemClock_Config+0xb8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <SystemClock_Config+0xb8>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <SystemClock_Config+0xb8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fe31 	bl	800133c <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e0:	f000 f9ae 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f8:	f107 030c 	add.w	r3, r7, #12
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 f894 	bl	800182c <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800070a:	f000 f999 	bl	8000a40 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	@ 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000724:	4b11      	ldr	r3, [pc, #68]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000726:	4a12      	ldr	r2, [pc, #72]	@ (8000770 <MX_USART2_UART_Init+0x50>)
 8000728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800072a:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800072c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000732:	4b0e      	ldr	r3, [pc, #56]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000738:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073e:	4b0b      	ldr	r3, [pc, #44]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000746:	220c      	movs	r2, #12
 8000748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074a:	4b08      	ldr	r3, [pc, #32]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_USART2_UART_Init+0x4c>)
 8000758:	f001 fd16 	bl	8002188 <HAL_UART_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000762:	f000 f96d 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000080 	.word	0x20000080
 8000770:	40004400 	.word	0x40004400

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 030c 	add.w	r3, r7, #12
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b2b      	ldr	r3, [pc, #172]	@ (800083c <MX_GPIO_Init+0xc8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a2a      	ldr	r2, [pc, #168]	@ (800083c <MX_GPIO_Init+0xc8>)
 8000794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b28      	ldr	r3, [pc, #160]	@ (800083c <MX_GPIO_Init+0xc8>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b24      	ldr	r3, [pc, #144]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a23      	ldr	r2, [pc, #140]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_GPIO_Init+0xc8>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80007e4:	4816      	ldr	r0, [pc, #88]	@ (8000840 <MX_GPIO_Init+0xcc>)
 80007e6:	f000 fd77 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ea:	2301      	movs	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007ee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	4619      	mov	r1, r3
 80007fe:	4811      	ldr	r0, [pc, #68]	@ (8000844 <MX_GPIO_Init+0xd0>)
 8000800:	f000 fbce 	bl	8000fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000804:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000808:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	4619      	mov	r1, r3
 800081c:	4808      	ldr	r0, [pc, #32]	@ (8000840 <MX_GPIO_Init+0xcc>)
 800081e:	f000 fbbf 	bl	8000fa0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	2100      	movs	r1, #0
 8000826:	2006      	movs	r0, #6
 8000828:	f000 fb90 	bl	8000f4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800082c:	2006      	movs	r0, #6
 800082e:	f000 fba9 	bl	8000f84 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000832:	bf00      	nop
 8000834:	3720      	adds	r7, #32
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800
 8000840:	40020c00 	.word	0x40020c00
 8000844:	40020000 	.word	0x40020000

08000848 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8000852:	88fb      	ldrh	r3, [r7, #6]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d102      	bne.n	800085e <HAL_GPIO_EXTI_Callback+0x16>
    {
        buttonPressed = 1;
 8000858:	4b04      	ldr	r3, [pc, #16]	@ (800086c <HAL_GPIO_EXTI_Callback+0x24>)
 800085a:	2201      	movs	r2, #1
 800085c:	701a      	strb	r2, [r3, #0]
    }
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	200000d8 	.word	0x200000d8

08000870 <StartDefaultTask>:
/* USER CODE END 4 */

/* USER CODE BEGIN Header_StartDefaultTask */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	PrintData("\r\n=== FreeRTOS Timer/LED Demo Started ===\r\n");
 8000878:	4808      	ldr	r0, [pc, #32]	@ (800089c <StartDefaultTask+0x2c>)
 800087a:	f7ff fe71 	bl	8000560 <PrintData>
	PrintData("\r\n================================\r\n");
 800087e:	4808      	ldr	r0, [pc, #32]	@ (80008a0 <StartDefaultTask+0x30>)
 8000880:	f7ff fe6e 	bl	8000560 <PrintData>
	for(;;)
	{
		PrintData("System Running : Current Toggle Period : %lu ms\r\n", togglePeriod);
 8000884:	4b07      	ldr	r3, [pc, #28]	@ (80008a4 <StartDefaultTask+0x34>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <StartDefaultTask+0x38>)
 800088c:	f7ff fe68 	bl	8000560 <PrintData>
		osDelay(5000);
 8000890:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000894:	f002 f9b9 	bl	8002c0a <osDelay>
		PrintData("System Running : Current Toggle Period : %lu ms\r\n", togglePeriod);
 8000898:	bf00      	nop
 800089a:	e7f3      	b.n	8000884 <StartDefaultTask+0x14>
 800089c:	080064bc 	.word	0x080064bc
 80008a0:	080064e8 	.word	0x080064e8
 80008a4:	20000000 	.word	0x20000000
 80008a8:	08006510 	.word	0x08006510

080008ac <StartLEDTask>:
}

/* USER CODE BEGIN Header_StartLEDTask */
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
	HAL_GPIO_WritePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN | LED4_PIN, GPIO_PIN_RESET);
 80008b4:	2200      	movs	r2, #0
 80008b6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80008ba:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <StartLEDTask+0x3c>)
 80008bc:	f000 fd0c 	bl	80012d8 <HAL_GPIO_WritePin>
	osTimerStart(myTimer01Handle, togglePeriod);
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <StartLEDTask+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <StartLEDTask+0x44>)
 80008c6:	6812      	ldr	r2, [r2, #0]
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fa4a 	bl	8002d64 <osTimerStart>
	PrintData("Timer Started With Period : %lu ms\r\n", togglePeriod);
 80008d0:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <StartLEDTask+0x44>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4619      	mov	r1, r3
 80008d6:	4807      	ldr	r0, [pc, #28]	@ (80008f4 <StartLEDTask+0x48>)
 80008d8:	f7ff fe42 	bl	8000560 <PrintData>
	for(;;)
	{
		osDelay(1000);
 80008dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008e0:	f002 f993 	bl	8002c0a <osDelay>
 80008e4:	e7fa      	b.n	80008dc <StartLEDTask+0x30>
 80008e6:	bf00      	nop
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	200000d4 	.word	0x200000d4
 80008f0:	20000000 	.word	0x20000000
 80008f4:	08006544 	.word	0x08006544

080008f8 <StartBTNTask>:
}

/* USER CODE BEGIN Header_StartBTNTask */
/* USER CODE END Header_StartBTNTask */
void StartBTNTask(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBTNTask */
    uint32_t lastPressTime = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
    PrintData("Initial Toggle Period : %lu ms\r\n", togglePeriod);
 8000904:	4b29      	ldr	r3, [pc, #164]	@ (80009ac <StartBTNTask+0xb4>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	4829      	ldr	r0, [pc, #164]	@ (80009b0 <StartBTNTask+0xb8>)
 800090c:	f7ff fe28 	bl	8000560 <PrintData>
    PrintData("Press PA0 To Decrease Toggle Time (1000ms -> 100ms)\r\n");
 8000910:	4828      	ldr	r0, [pc, #160]	@ (80009b4 <StartBTNTask+0xbc>)
 8000912:	f7ff fe25 	bl	8000560 <PrintData>
    for(;;)
    {
        if (buttonPressed)
 8000916:	4b28      	ldr	r3, [pc, #160]	@ (80009b8 <StartBTNTask+0xc0>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d041      	beq.n	80009a2 <StartBTNTask+0xaa>
        {
            uint32_t currentTime = osKernelGetTickCount();
 800091e:	f002 f8cd 	bl	8002abc <osKernelGetTickCount>
 8000922:	60b8      	str	r0, [r7, #8]
            if ((currentTime - lastPressTime) > 200)
 8000924:	68ba      	ldr	r2, [r7, #8]
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	2bc8      	cmp	r3, #200	@ 0xc8
 800092c:	d936      	bls.n	800099c <StartBTNTask+0xa4>
            {
                lastPressTime = currentTime;
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	60fb      	str	r3, [r7, #12]
                if (togglePeriod > MIN_TOGGLE_TIME)
 8000932:	4b1e      	ldr	r3, [pc, #120]	@ (80009ac <StartBTNTask+0xb4>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2b64      	cmp	r3, #100	@ 0x64
 8000938:	d905      	bls.n	8000946 <StartBTNTask+0x4e>
                {
                    togglePeriod -= DECREMENT_STEP;
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <StartBTNTask+0xb4>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	3b64      	subs	r3, #100	@ 0x64
 8000940:	4a1a      	ldr	r2, [pc, #104]	@ (80009ac <StartBTNTask+0xb4>)
 8000942:	6013      	str	r3, [r2, #0]
 8000944:	e008      	b.n	8000958 <StartBTNTask+0x60>
                }
                else
                {
                    togglePeriod = MIN_TOGGLE_TIME;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <StartBTNTask+0xb4>)
 8000948:	2264      	movs	r2, #100	@ 0x64
 800094a:	601a      	str	r2, [r3, #0]
                    PrintData("Minimum Toggle Time Reached : (%lu ms)\r\n", togglePeriod);
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <StartBTNTask+0xb4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	481a      	ldr	r0, [pc, #104]	@ (80009bc <StartBTNTask+0xc4>)
 8000954:	f7ff fe04 	bl	8000560 <PrintData>
                }
                osTimerStop(myTimer01Handle);
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <StartBTNTask+0xc8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4618      	mov	r0, r3
 800095e:	f002 fa2f 	bl	8002dc0 <osTimerStop>
                osTimerStart(myTimer01Handle, togglePeriod);
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <StartBTNTask+0xc8>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <StartBTNTask+0xb4>)
 8000968:	6812      	ldr	r2, [r2, #0]
 800096a:	4611      	mov	r1, r2
 800096c:	4618      	mov	r0, r3
 800096e:	f002 f9f9 	bl	8002d64 <osTimerStart>
                PrintData("Toggle Period Decreased To : %lu ms\r\n", togglePeriod);
 8000972:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <StartBTNTask+0xb4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	@ (80009c4 <StartBTNTask+0xcc>)
 800097a:	f7ff fdf1 	bl	8000560 <PrintData>
                HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000984:	4810      	ldr	r0, [pc, #64]	@ (80009c8 <StartBTNTask+0xd0>)
 8000986:	f000 fca7 	bl	80012d8 <HAL_GPIO_WritePin>
                osDelay(50);
 800098a:	2032      	movs	r0, #50	@ 0x32
 800098c:	f002 f93d 	bl	8002c0a <osDelay>
                HAL_GPIO_WritePin(LED_PORT, LED1_PIN, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000996:	480c      	ldr	r0, [pc, #48]	@ (80009c8 <StartBTNTask+0xd0>)
 8000998:	f000 fc9e 	bl	80012d8 <HAL_GPIO_WritePin>
            }
            buttonPressed = 0; // Reset flag
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <StartBTNTask+0xc0>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]
        }
        osDelay(10); // Check button every 10ms
 80009a2:	200a      	movs	r0, #10
 80009a4:	f002 f931 	bl	8002c0a <osDelay>
        if (buttonPressed)
 80009a8:	e7b5      	b.n	8000916 <StartBTNTask+0x1e>
 80009aa:	bf00      	nop
 80009ac:	20000000 	.word	0x20000000
 80009b0:	0800656c 	.word	0x0800656c
 80009b4:	08006590 	.word	0x08006590
 80009b8:	200000d8 	.word	0x200000d8
 80009bc:	080065c8 	.word	0x080065c8
 80009c0:	200000d4 	.word	0x200000d4
 80009c4:	080065f4 	.word	0x080065f4
 80009c8:	40020c00 	.word	0x40020c00

080009cc <Callback01>:
  /* USER CODE END StartBTNTask */
}

/* Callback01 function */
void Callback01(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
    ledState = !ledState;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a14 <Callback01+0x48>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bf0c      	ite	eq
 80009dc:	2301      	moveq	r3, #1
 80009de:	2300      	movne	r3, #0
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <Callback01+0x48>)
 80009e6:	701a      	strb	r2, [r3, #0]
    if (ledState)
 80009e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <Callback01+0x48>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d006      	beq.n	80009fe <Callback01+0x32>
    {
        HAL_GPIO_WritePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN | LED4_PIN, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009f6:	4808      	ldr	r0, [pc, #32]	@ (8000a18 <Callback01+0x4c>)
 80009f8:	f000 fc6e 	bl	80012d8 <HAL_GPIO_WritePin>
    else
    {
        HAL_GPIO_WritePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN | LED4_PIN, GPIO_PIN_RESET);
    }
  /* USER CODE END Callback01 */
}
 80009fc:	e005      	b.n	8000a0a <Callback01+0x3e>
        HAL_GPIO_WritePin(LED_PORT, LED1_PIN | LED2_PIN | LED3_PIN | LED4_PIN, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <Callback01+0x4c>)
 8000a06:	f000 fc67 	bl	80012d8 <HAL_GPIO_WritePin>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000d9 	.word	0x200000d9
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a04      	ldr	r2, [pc, #16]	@ (8000a3c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d101      	bne.n	8000a32 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a2e:	f000 f9b5 	bl	8000d9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40010000 	.word	0x40010000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a5e:	4a11      	ldr	r2, [pc, #68]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a66:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x54>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fa59 	bl	8000f4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_UART_MspInit+0x8c>)
 8000b1e:	f000 fa3f 	bl	8000fa0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	@ 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b44:	2300      	movs	r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b50:	4a2d      	ldr	r2, [pc, #180]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b58:	4b2b      	ldr	r3, [pc, #172]	@ (8000c08 <HAL_InitTick+0xd0>)
 8000b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b5c:	f003 0301 	and.w	r3, r3, #1
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b64:	f107 020c 	add.w	r2, r7, #12
 8000b68:	f107 0310 	add.w	r3, r7, #16
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f001 f83c 	bl	8001bec <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b74:	f001 f826 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 8000b78:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b7c:	4a23      	ldr	r2, [pc, #140]	@ (8000c0c <HAL_InitTick+0xd4>)
 8000b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b82:	0c9b      	lsrs	r3, r3, #18
 8000b84:	3b01      	subs	r3, #1
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b88:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b8a:	4a22      	ldr	r2, [pc, #136]	@ (8000c14 <HAL_InitTick+0xdc>)
 8000b8c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b8e:	4b20      	ldr	r3, [pc, #128]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b94:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b96:	4a1e      	ldr	r2, [pc, #120]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b19      	ldr	r3, [pc, #100]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000bae:	4818      	ldr	r0, [pc, #96]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000bb0:	f001 f84e 	bl	8001c50 <HAL_TIM_Base_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d11b      	bne.n	8000bfa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000bc2:	4813      	ldr	r0, [pc, #76]	@ (8000c10 <HAL_InitTick+0xd8>)
 8000bc4:	f001 f89e 	bl	8001d04 <HAL_TIM_Base_Start_IT>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000bce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d111      	bne.n	8000bfa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bd6:	2019      	movs	r0, #25
 8000bd8:	f000 f9d4 	bl	8000f84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0f      	cmp	r3, #15
 8000be0:	d808      	bhi.n	8000bf4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000be2:	2200      	movs	r2, #0
 8000be4:	6879      	ldr	r1, [r7, #4]
 8000be6:	2019      	movs	r0, #25
 8000be8:	f000 f9b0 	bl	8000f4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bec:	4a0a      	ldr	r2, [pc, #40]	@ (8000c18 <HAL_InitTick+0xe0>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
 8000bf2:	e002      	b.n	8000bfa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3730      	adds	r7, #48	@ 0x30
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	431bde83 	.word	0x431bde83
 8000c10:	20000140 	.word	0x20000140
 8000c14:	40010000 	.word	0x40010000
 8000c18:	20000008 	.word	0x20000008

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 fb58 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c66:	f001 f8bd 	bl	8001de4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000140 	.word	0x20000140

08000c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c7c:	4a14      	ldr	r2, [pc, #80]	@ (8000cd0 <_sbrk+0x5c>)
 8000c7e:	4b15      	ldr	r3, [pc, #84]	@ (8000cd4 <_sbrk+0x60>)
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c88:	4b13      	ldr	r3, [pc, #76]	@ (8000cd8 <_sbrk+0x64>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d102      	bne.n	8000c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c90:	4b11      	ldr	r3, [pc, #68]	@ (8000cd8 <_sbrk+0x64>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	@ (8000cdc <_sbrk+0x68>)
 8000c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c96:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <_sbrk+0x64>)
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d207      	bcs.n	8000cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca4:	f004 ff10 	bl	8005ac8 <__errno>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	220c      	movs	r2, #12
 8000cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	e009      	b.n	8000cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb4:	4b08      	ldr	r3, [pc, #32]	@ (8000cd8 <_sbrk+0x64>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cba:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <_sbrk+0x64>)
 8000cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20020000 	.word	0x20020000
 8000cd4:	00000400 	.word	0x00000400
 8000cd8:	20000188 	.word	0x20000188
 8000cdc:	20004cc0 	.word	0x20004cc0

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <SystemInit+0x20>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cea:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <SystemInit+0x20>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d08:	f7ff ffea 	bl	8000ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480c      	ldr	r0, [pc, #48]	@ (8000d40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d0e:	490d      	ldr	r1, [pc, #52]	@ (8000d44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d24:	4c0a      	ldr	r4, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f004 fecf 	bl	8005ad4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d36:	f7ff fc37 	bl	80005a8 <main>
  bx  lr    
 8000d3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d44:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d48:	0800670c 	.word	0x0800670c
  ldr r2, =_sbss
 8000d4c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d50:	20004cc0 	.word	0x20004cc0

08000d54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC_IRQHandler>
	...

08000d58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d98 <HAL_Init+0x40>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a0d      	ldr	r2, [pc, #52]	@ (8000d98 <HAL_Init+0x40>)
 8000d62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d68:	4b0b      	ldr	r3, [pc, #44]	@ (8000d98 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d98 <HAL_Init+0x40>)
 8000d6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	@ (8000d98 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a07      	ldr	r2, [pc, #28]	@ (8000d98 <HAL_Init+0x40>)
 8000d7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d80:	2003      	movs	r0, #3
 8000d82:	f000 f8d8 	bl	8000f36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d86:	200f      	movs	r0, #15
 8000d88:	f7ff fed6 	bl	8000b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d8c:	f7ff fe60 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	40023c00 	.word	0x40023c00

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	@ (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000000c 	.word	0x2000000c
 8000dc0:	2000018c 	.word	0x2000018c

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	2000018c 	.word	0x2000018c

08000ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b085      	sub	sp, #20
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dec:	4b0c      	ldr	r3, [pc, #48]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000df2:	68ba      	ldr	r2, [r7, #8]
 8000df4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0e:	4a04      	ldr	r2, [pc, #16]	@ (8000e20 <__NVIC_SetPriorityGrouping+0x44>)
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	60d3      	str	r3, [r2, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e28:	4b04      	ldr	r3, [pc, #16]	@ (8000e3c <__NVIC_GetPriorityGrouping+0x18>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	0a1b      	lsrs	r3, r3, #8
 8000e2e:	f003 0307 	and.w	r3, r3, #7
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	db0b      	blt.n	8000e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	f003 021f 	and.w	r2, r3, #31
 8000e58:	4907      	ldr	r1, [pc, #28]	@ (8000e78 <__NVIC_EnableIRQ+0x38>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	095b      	lsrs	r3, r3, #5
 8000e60:	2001      	movs	r0, #1
 8000e62:	fa00 f202 	lsl.w	r2, r0, r2
 8000e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000e100 	.word	0xe000e100

08000e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	6039      	str	r1, [r7, #0]
 8000e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	db0a      	blt.n	8000ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	490c      	ldr	r1, [pc, #48]	@ (8000ec8 <__NVIC_SetPriority+0x4c>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	0112      	lsls	r2, r2, #4
 8000e9c:	b2d2      	uxtb	r2, r2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea4:	e00a      	b.n	8000ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4908      	ldr	r1, [pc, #32]	@ (8000ecc <__NVIC_SetPriority+0x50>)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f003 030f 	and.w	r3, r3, #15
 8000eb2:	3b04      	subs	r3, #4
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	440b      	add	r3, r1
 8000eba:	761a      	strb	r2, [r3, #24]
}
 8000ebc:	bf00      	nop
 8000ebe:	370c      	adds	r7, #12
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000e100 	.word	0xe000e100
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	f1c3 0307 	rsb	r3, r3, #7
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	bf28      	it	cs
 8000eee:	2304      	movcs	r3, #4
 8000ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3304      	adds	r3, #4
 8000ef6:	2b06      	cmp	r3, #6
 8000ef8:	d902      	bls.n	8000f00 <NVIC_EncodePriority+0x30>
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	3b03      	subs	r3, #3
 8000efe:	e000      	b.n	8000f02 <NVIC_EncodePriority+0x32>
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	401a      	ands	r2, r3
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	43d9      	mvns	r1, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f28:	4313      	orrs	r3, r2
         );
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3724      	adds	r7, #36	@ 0x24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff4c 	bl	8000ddc <__NVIC_SetPriorityGrouping>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	60b9      	str	r1, [r7, #8]
 8000f56:	607a      	str	r2, [r7, #4]
 8000f58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5e:	f7ff ff61 	bl	8000e24 <__NVIC_GetPriorityGrouping>
 8000f62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	68b9      	ldr	r1, [r7, #8]
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f7ff ffb1 	bl	8000ed0 <NVIC_EncodePriority>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff80 	bl	8000e7c <__NVIC_SetPriority>
}
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ff54 	bl	8000e40 <__NVIC_EnableIRQ>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b089      	sub	sp, #36	@ 0x24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
 8000fba:	e16b      	b.n	8001294 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	f040 815a 	bne.w	800128e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d005      	beq.n	8000ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d130      	bne.n	8001054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	68da      	ldr	r2, [r3, #12]
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001028:	2201      	movs	r2, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 0201 	and.w	r2, r3, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	f003 0303 	and.w	r3, r3, #3
 800105c:	2b03      	cmp	r3, #3
 800105e:	d017      	beq.n	8001090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d123      	bne.n	80010e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	f003 0307 	and.w	r3, r3, #7
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	691a      	ldr	r2, [r3, #16]
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	08da      	lsrs	r2, r3, #3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3208      	adds	r2, #8
 80010de:	69b9      	ldr	r1, [r7, #24]
 80010e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f003 0203 	and.w	r2, r3, #3
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001120:	2b00      	cmp	r3, #0
 8001122:	f000 80b4 	beq.w	800128e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b60      	ldr	r3, [pc, #384]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 8001130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001134:	6453      	str	r3, [r2, #68]	@ 0x44
 8001136:	4b5d      	ldr	r3, [pc, #372]	@ (80012ac <HAL_GPIO_Init+0x30c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001142:	4a5b      	ldr	r2, [pc, #364]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	089b      	lsrs	r3, r3, #2
 8001148:	3302      	adds	r3, #2
 800114a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f003 0303 	and.w	r3, r3, #3
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	220f      	movs	r2, #15
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43db      	mvns	r3, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4013      	ands	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a52      	ldr	r2, [pc, #328]	@ (80012b4 <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x226>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a51      	ldr	r2, [pc, #324]	@ (80012b8 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d025      	beq.n	80011c2 <HAL_GPIO_Init+0x222>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a50      	ldr	r2, [pc, #320]	@ (80012bc <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d01f      	beq.n	80011be <HAL_GPIO_Init+0x21e>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d019      	beq.n	80011ba <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <HAL_GPIO_Init+0x324>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d013      	beq.n	80011b6 <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_GPIO_Init+0x328>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00d      	beq.n	80011b2 <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x32c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x330>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d101      	bne.n	80011aa <HAL_GPIO_Init+0x20a>
 80011a6:	2307      	movs	r3, #7
 80011a8:	e00e      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011aa:	2308      	movs	r3, #8
 80011ac:	e00c      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011ae:	2306      	movs	r3, #6
 80011b0:	e00a      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011b2:	2305      	movs	r3, #5
 80011b4:	e008      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011b6:	2304      	movs	r3, #4
 80011b8:	e006      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011ba:	2303      	movs	r3, #3
 80011bc:	e004      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011be:	2302      	movs	r3, #2
 80011c0:	e002      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_GPIO_Init+0x228>
 80011c6:	2300      	movs	r3, #0
 80011c8:	69fa      	ldr	r2, [r7, #28]
 80011ca:	f002 0203 	and.w	r2, r2, #3
 80011ce:	0092      	lsls	r2, r2, #2
 80011d0:	4093      	lsls	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d8:	4935      	ldr	r1, [pc, #212]	@ (80012b0 <HAL_GPIO_Init+0x310>)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011e6:	4b3b      	ldr	r3, [pc, #236]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4013      	ands	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800120a:	4a32      	ldr	r2, [pc, #200]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001210:	4b30      	ldr	r3, [pc, #192]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	43db      	mvns	r3, r3
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	4013      	ands	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001234:	4a27      	ldr	r2, [pc, #156]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800123a:	4b26      	ldr	r3, [pc, #152]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800125e:	4a1d      	ldr	r2, [pc, #116]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001264:	4b1b      	ldr	r3, [pc, #108]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001288:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <HAL_GPIO_Init+0x334>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	3301      	adds	r3, #1
 8001292:	61fb      	str	r3, [r7, #28]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	2b0f      	cmp	r3, #15
 8001298:	f67f ae90 	bls.w	8000fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40013800 	.word	0x40013800
 80012b4:	40020000 	.word	0x40020000
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40020800 	.word	0x40020800
 80012c0:	40020c00 	.word	0x40020c00
 80012c4:	40021000 	.word	0x40021000
 80012c8:	40021400 	.word	0x40021400
 80012cc:	40021800 	.word	0x40021800
 80012d0:	40021c00 	.word	0x40021c00
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fa8c 	bl	8000848 <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e267      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d075      	beq.n	8001446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800135a:	4b88      	ldr	r3, [pc, #544]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b04      	cmp	r3, #4
 8001364:	d00c      	beq.n	8001380 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001366:	4b85      	ldr	r3, [pc, #532]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800136e:	2b08      	cmp	r3, #8
 8001370:	d112      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001372:	4b82      	ldr	r3, [pc, #520]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800137a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800137e:	d10b      	bne.n	8001398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	4b7e      	ldr	r3, [pc, #504]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d05b      	beq.n	8001444 <HAL_RCC_OscConfig+0x108>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d157      	bne.n	8001444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e242      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013a0:	d106      	bne.n	80013b0 <HAL_RCC_OscConfig+0x74>
 80013a2:	4b76      	ldr	r3, [pc, #472]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a75      	ldr	r2, [pc, #468]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e01d      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013b8:	d10c      	bne.n	80013d4 <HAL_RCC_OscConfig+0x98>
 80013ba:	4b70      	ldr	r3, [pc, #448]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a6f      	ldr	r2, [pc, #444]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	4b6d      	ldr	r3, [pc, #436]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a6c      	ldr	r2, [pc, #432]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e00b      	b.n	80013ec <HAL_RCC_OscConfig+0xb0>
 80013d4:	4b69      	ldr	r3, [pc, #420]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a68      	ldr	r2, [pc, #416]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	4b66      	ldr	r3, [pc, #408]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a65      	ldr	r2, [pc, #404]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80013e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d013      	beq.n	800141c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fce6 	bl	8000dc4 <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013fc:	f7ff fce2 	bl	8000dc4 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b64      	cmp	r3, #100	@ 0x64
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e207      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140e:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0xc0>
 800141a:	e014      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fcd2 	bl	8000dc4 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fcce 	bl	8000dc4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e1f3      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001436:	4b51      	ldr	r3, [pc, #324]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0xe8>
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d063      	beq.n	800151a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001452:	4b4a      	ldr	r3, [pc, #296]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00b      	beq.n	8001476 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800145e:	4b47      	ldr	r3, [pc, #284]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001466:	2b08      	cmp	r3, #8
 8001468:	d11c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800146a:	4b44      	ldr	r3, [pc, #272]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d116      	bne.n	80014a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001476:	4b41      	ldr	r3, [pc, #260]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d005      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b01      	cmp	r3, #1
 8001488:	d001      	beq.n	800148e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e1c7      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	4937      	ldr	r1, [pc, #220]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	e03a      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d020      	beq.n	80014ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ac:	4b34      	ldr	r3, [pc, #208]	@ (8001580 <HAL_RCC_OscConfig+0x244>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b2:	f7ff fc87 	bl	8000dc4 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc83 	bl	8000dc4 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e1a8      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0302 	and.w	r3, r3, #2
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f0      	beq.n	80014ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b28      	ldr	r3, [pc, #160]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	691b      	ldr	r3, [r3, #16]
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	4925      	ldr	r1, [pc, #148]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 80014e8:	4313      	orrs	r3, r2
 80014ea:	600b      	str	r3, [r1, #0]
 80014ec:	e015      	b.n	800151a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ee:	4b24      	ldr	r3, [pc, #144]	@ (8001580 <HAL_RCC_OscConfig+0x244>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f4:	f7ff fc66 	bl	8000dc4 <HAL_GetTick>
 80014f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014fa:	e008      	b.n	800150e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fc:	f7ff fc62 	bl	8000dc4 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b02      	cmp	r3, #2
 8001508:	d901      	bls.n	800150e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e187      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800150e:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0308 	and.w	r3, r3, #8
 8001522:	2b00      	cmp	r3, #0
 8001524:	d036      	beq.n	8001594 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d016      	beq.n	800155c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <HAL_RCC_OscConfig+0x248>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001534:	f7ff fc46 	bl	8000dc4 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153c:	f7ff fc42 	bl	8000dc4 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e167      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800154e:	4b0b      	ldr	r3, [pc, #44]	@ (800157c <HAL_RCC_OscConfig+0x240>)
 8001550:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x200>
 800155a:	e01b      	b.n	8001594 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <HAL_RCC_OscConfig+0x248>)
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001562:	f7ff fc2f 	bl	8000dc4 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001568:	e00e      	b.n	8001588 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fc2b 	bl	8000dc4 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d907      	bls.n	8001588 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e150      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 800157c:	40023800 	.word	0x40023800
 8001580:	42470000 	.word	0x42470000
 8001584:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001588:	4b88      	ldr	r3, [pc, #544]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800158a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ea      	bne.n	800156a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 8097 	beq.w	80016d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015a6:	4b81      	ldr	r3, [pc, #516]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10f      	bne.n	80015d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	4b7d      	ldr	r3, [pc, #500]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ba:	4a7c      	ldr	r2, [pc, #496]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c2:	4b7a      	ldr	r3, [pc, #488]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	60bb      	str	r3, [r7, #8]
 80015cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	4b77      	ldr	r3, [pc, #476]	@ (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d118      	bne.n	8001610 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015de:	4b74      	ldr	r3, [pc, #464]	@ (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a73      	ldr	r2, [pc, #460]	@ (80017b0 <HAL_RCC_OscConfig+0x474>)
 80015e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fbeb 	bl	8000dc4 <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015f2:	f7ff fbe7 	bl	8000dc4 <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e10c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001604:	4b6a      	ldr	r3, [pc, #424]	@ (80017b0 <HAL_RCC_OscConfig+0x474>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800160c:	2b00      	cmp	r3, #0
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d106      	bne.n	8001626 <HAL_RCC_OscConfig+0x2ea>
 8001618:	4b64      	ldr	r3, [pc, #400]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800161a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800161c:	4a63      	ldr	r2, [pc, #396]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6713      	str	r3, [r2, #112]	@ 0x70
 8001624:	e01c      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2b05      	cmp	r3, #5
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x30c>
 800162e:	4b5f      	ldr	r3, [pc, #380]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001630:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001632:	4a5e      	ldr	r2, [pc, #376]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001634:	f043 0304 	orr.w	r3, r3, #4
 8001638:	6713      	str	r3, [r2, #112]	@ 0x70
 800163a:	4b5c      	ldr	r3, [pc, #368]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800163c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800163e:	4a5b      	ldr	r2, [pc, #364]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6713      	str	r3, [r2, #112]	@ 0x70
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0x324>
 8001648:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800164a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164c:	4a57      	ldr	r2, [pc, #348]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800164e:	f023 0301 	bic.w	r3, r3, #1
 8001652:	6713      	str	r3, [r2, #112]	@ 0x70
 8001654:	4b55      	ldr	r3, [pc, #340]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001656:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001658:	4a54      	ldr	r2, [pc, #336]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 800165a:	f023 0304 	bic.w	r3, r3, #4
 800165e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d015      	beq.n	8001694 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001668:	f7ff fbac 	bl	8000dc4 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166e:	e00a      	b.n	8001686 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001670:	f7ff fba8 	bl	8000dc4 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e0cb      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	4b49      	ldr	r3, [pc, #292]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168a:	f003 0302 	and.w	r3, r3, #2
 800168e:	2b00      	cmp	r3, #0
 8001690:	d0ee      	beq.n	8001670 <HAL_RCC_OscConfig+0x334>
 8001692:	e014      	b.n	80016be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001694:	f7ff fb96 	bl	8000dc4 <HAL_GetTick>
 8001698:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169c:	f7ff fb92 	bl	8000dc4 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b5      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	4b3e      	ldr	r3, [pc, #248]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016be:	7dfb      	ldrb	r3, [r7, #23]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d105      	bne.n	80016d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	4a38      	ldr	r2, [pc, #224]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80016ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	f000 80a1 	beq.w	800181c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016da:	4b34      	ldr	r3, [pc, #208]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 030c 	and.w	r3, r3, #12
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d05c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d141      	bne.n	8001772 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ee:	4b31      	ldr	r3, [pc, #196]	@ (80017b4 <HAL_RCC_OscConfig+0x478>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f4:	f7ff fb66 	bl	8000dc4 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fc:	f7ff fb62 	bl	8000dc4 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b02      	cmp	r3, #2
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e087      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800170e:	4b27      	ldr	r3, [pc, #156]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69da      	ldr	r2, [r3, #28]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	019b      	lsls	r3, r3, #6
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	085b      	lsrs	r3, r3, #1
 8001732:	3b01      	subs	r3, #1
 8001734:	041b      	lsls	r3, r3, #16
 8001736:	431a      	orrs	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800173c:	061b      	lsls	r3, r3, #24
 800173e:	491b      	ldr	r1, [pc, #108]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174a:	f7ff fb3b 	bl	8000dc4 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001750:	e008      	b.n	8001764 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001752:	f7ff fb37 	bl	8000dc4 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e05c      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001764:	4b11      	ldr	r3, [pc, #68]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0f0      	beq.n	8001752 <HAL_RCC_OscConfig+0x416>
 8001770:	e054      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001772:	4b10      	ldr	r3, [pc, #64]	@ (80017b4 <HAL_RCC_OscConfig+0x478>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff fb24 	bl	8000dc4 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001780:	f7ff fb20 	bl	8000dc4 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e045      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_RCC_OscConfig+0x470>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x444>
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017a8:	2301      	movs	r3, #1
 80017aa:	e038      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000
 80017b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_RCC_OscConfig+0x4ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d028      	beq.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d121      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	429a      	cmp	r2, r3
 80017e0:	d11a      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80017ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d111      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fe:	085b      	lsrs	r3, r3, #1
 8001800:	3b01      	subs	r3, #1
 8001802:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001804:	429a      	cmp	r2, r3
 8001806:	d107      	bne.n	8001818 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001812:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800

0800182c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e0cc      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001840:	4b68      	ldr	r3, [pc, #416]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0307 	and.w	r3, r3, #7
 8001848:	683a      	ldr	r2, [r7, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d90c      	bls.n	8001868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184e:	4b65      	ldr	r3, [pc, #404]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001856:	4b63      	ldr	r3, [pc, #396]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d001      	beq.n	8001868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e0b8      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d020      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001880:	4b59      	ldr	r3, [pc, #356]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	4a58      	ldr	r2, [pc, #352]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800188a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0308 	and.w	r3, r3, #8
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001898:	4b53      	ldr	r3, [pc, #332]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a52      	ldr	r2, [pc, #328]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a4:	4b50      	ldr	r3, [pc, #320]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	494d      	ldr	r1, [pc, #308]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d044      	beq.n	800194c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ca:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d119      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e07f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d003      	beq.n	80018ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018e6:	2b03      	cmp	r3, #3
 80018e8:	d107      	bne.n	80018fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ea:	4b3f      	ldr	r3, [pc, #252]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e06f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fa:	4b3b      	ldr	r3, [pc, #236]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e067      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800190a:	4b37      	ldr	r3, [pc, #220]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f023 0203 	bic.w	r2, r3, #3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	4934      	ldr	r1, [pc, #208]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800191c:	f7ff fa52 	bl	8000dc4 <HAL_GetTick>
 8001920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001922:	e00a      	b.n	800193a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001924:	f7ff fa4e 	bl	8000dc4 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001932:	4293      	cmp	r3, r2
 8001934:	d901      	bls.n	800193a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e04f      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	4b2b      	ldr	r3, [pc, #172]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f003 020c 	and.w	r2, r3, #12
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	429a      	cmp	r2, r3
 800194a:	d1eb      	bne.n	8001924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0307 	and.w	r3, r3, #7
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d20c      	bcs.n	8001974 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b22      	ldr	r3, [pc, #136]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001962:	4b20      	ldr	r3, [pc, #128]	@ (80019e4 <HAL_RCC_ClockConfig+0x1b8>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	429a      	cmp	r2, r3
 800196e:	d001      	beq.n	8001974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e032      	b.n	80019da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	4916      	ldr	r1, [pc, #88]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 800198e:	4313      	orrs	r3, r2
 8001990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0308 	and.w	r3, r3, #8
 800199a:	2b00      	cmp	r3, #0
 800199c:	d009      	beq.n	80019b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	4b12      	ldr	r3, [pc, #72]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	691b      	ldr	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	490e      	ldr	r1, [pc, #56]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b2:	f000 f821 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b6:	4602      	mov	r2, r0
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	091b      	lsrs	r3, r3, #4
 80019be:	f003 030f 	and.w	r3, r3, #15
 80019c2:	490a      	ldr	r1, [pc, #40]	@ (80019ec <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	5ccb      	ldrb	r3, [r1, r3]
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019ce:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1c8>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7ff f8b0 	bl	8000b38 <HAL_InitTick>

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023c00 	.word	0x40023c00
 80019e8:	40023800 	.word	0x40023800
 80019ec:	080066b0 	.word	0x080066b0
 80019f0:	20000004 	.word	0x20000004
 80019f4:	20000008 	.word	0x20000008

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019fc:	b090      	sub	sp, #64	@ 0x40
 80019fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a00:	2300      	movs	r3, #0
 8001a02:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001a04:	2300      	movs	r3, #0
 8001a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a10:	4b59      	ldr	r3, [pc, #356]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d00d      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x40>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	f200 80a1 	bhi.w	8001b64 <HAL_RCC_GetSysClockFreq+0x16c>
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d002      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d003      	beq.n	8001a32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001a2a:	e09b      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a2c:	4b53      	ldr	r3, [pc, #332]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a30:	e09b      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a32:	4b53      	ldr	r3, [pc, #332]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001a36:	e098      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a38:	4b4f      	ldr	r3, [pc, #316]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a42:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d028      	beq.n	8001aa0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a4e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	099b      	lsrs	r3, r3, #6
 8001a54:	2200      	movs	r2, #0
 8001a56:	623b      	str	r3, [r7, #32]
 8001a58:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a5a:	6a3b      	ldr	r3, [r7, #32]
 8001a5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a60:	2100      	movs	r1, #0
 8001a62:	4b47      	ldr	r3, [pc, #284]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a64:	fb03 f201 	mul.w	r2, r3, r1
 8001a68:	2300      	movs	r3, #0
 8001a6a:	fb00 f303 	mul.w	r3, r0, r3
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a43      	ldr	r2, [pc, #268]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x188>)
 8001a72:	fba0 1202 	umull	r1, r2, r0, r2
 8001a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a78:	460a      	mov	r2, r1
 8001a7a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001a7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a7e:	4413      	add	r3, r2
 8001a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a84:	2200      	movs	r2, #0
 8001a86:	61bb      	str	r3, [r7, #24]
 8001a88:	61fa      	str	r2, [r7, #28]
 8001a8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a92:	f7fe fbed 	bl	8000270 <__aeabi_uldivmod>
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a9e:	e053      	b.n	8001b48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aa0:	4b35      	ldr	r3, [pc, #212]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	099b      	lsrs	r3, r3, #6
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	617a      	str	r2, [r7, #20]
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001ab2:	f04f 0b00 	mov.w	fp, #0
 8001ab6:	4652      	mov	r2, sl
 8001ab8:	465b      	mov	r3, fp
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ebb2 080a 	subs.w	r8, r2, sl
 8001ad2:	eb63 090b 	sbc.w	r9, r3, fp
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	f04f 0300 	mov.w	r3, #0
 8001ade:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ae2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ae6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001aea:	ebb2 0408 	subs.w	r4, r2, r8
 8001aee:	eb63 0509 	sbc.w	r5, r3, r9
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	f04f 0300 	mov.w	r3, #0
 8001afa:	00eb      	lsls	r3, r5, #3
 8001afc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b00:	00e2      	lsls	r2, r4, #3
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	eb14 030a 	adds.w	r3, r4, sl
 8001b0a:	603b      	str	r3, [r7, #0]
 8001b0c:	eb45 030b 	adc.w	r3, r5, fp
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	f04f 0300 	mov.w	r3, #0
 8001b1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b1e:	4629      	mov	r1, r5
 8001b20:	028b      	lsls	r3, r1, #10
 8001b22:	4621      	mov	r1, r4
 8001b24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b28:	4621      	mov	r1, r4
 8001b2a:	028a      	lsls	r2, r1, #10
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b32:	2200      	movs	r2, #0
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	60fa      	str	r2, [r7, #12]
 8001b38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b3c:	f7fe fb98 	bl	8000270 <__aeabi_uldivmod>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4613      	mov	r3, r2
 8001b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f003 0303 	and.w	r3, r3, #3
 8001b52:	3301      	adds	r3, #1
 8001b54:	005b      	lsls	r3, r3, #1
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001b58:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b62:	e002      	b.n	8001b6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b64:	4b05      	ldr	r3, [pc, #20]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x184>)
 8001b66:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3740      	adds	r7, #64	@ 0x40
 8001b70:	46bd      	mov	sp, r7
 8001b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	00f42400 	.word	0x00f42400
 8001b80:	017d7840 	.word	0x017d7840

08001b84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b88:	4b03      	ldr	r3, [pc, #12]	@ (8001b98 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000004 	.word	0x20000004

08001b9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ba0:	f7ff fff0 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	4b05      	ldr	r3, [pc, #20]	@ (8001bbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	0a9b      	lsrs	r3, r3, #10
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	4903      	ldr	r1, [pc, #12]	@ (8001bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bb2:	5ccb      	ldrb	r3, [r1, r3]
 8001bb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	080066c0 	.word	0x080066c0

08001bc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bc8:	f7ff ffdc 	bl	8001b84 <HAL_RCC_GetHCLKFreq>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	0b5b      	lsrs	r3, r3, #13
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	4903      	ldr	r1, [pc, #12]	@ (8001be8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bda:	5ccb      	ldrb	r3, [r1, r3]
 8001bdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40023800 	.word	0x40023800
 8001be8:	080066c0 	.word	0x080066c0

08001bec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001bfc:	4b12      	ldr	r3, [pc, #72]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0203 	and.w	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c08:	4b0f      	ldr	r3, [pc, #60]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c20:	4b09      	ldr	r3, [pc, #36]	@ (8001c48 <HAL_RCC_GetClockConfig+0x5c>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	08db      	lsrs	r3, r3, #3
 8001c26:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c2e:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <HAL_RCC_GetClockConfig+0x60>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0207 	and.w	r2, r3, #7
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	601a      	str	r2, [r3, #0]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e041      	b.n	8001ce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d106      	bne.n	8001c7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f839 	bl	8001cee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4610      	mov	r0, r2
 8001c90:	f000 f9c0 	bl	8002014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}

08001cee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	b083      	sub	sp, #12
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cf6:	bf00      	nop
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d001      	beq.n	8001d1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e04e      	b.n	8001dba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f042 0201 	orr.w	r2, r2, #1
 8001d32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a23      	ldr	r2, [pc, #140]	@ (8001dc8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d022      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d46:	d01d      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dcc <HAL_TIM_Base_Start_IT+0xc8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d018      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d013      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a1c      	ldr	r2, [pc, #112]	@ (8001dd4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d00e      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d009      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d004      	beq.n	8001d84 <HAL_TIM_Base_Start_IT+0x80>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d111      	bne.n	8001da8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d010      	beq.n	8001db8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0201 	orr.w	r2, r2, #1
 8001da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da6:	e007      	b.n	8001db8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0201 	orr.w	r2, r2, #1
 8001db6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40000400 	.word	0x40000400
 8001dd0:	40000800 	.word	0x40000800
 8001dd4:	40000c00 	.word	0x40000c00
 8001dd8:	40010400 	.word	0x40010400
 8001ddc:	40014000 	.word	0x40014000
 8001de0:	40001800 	.word	0x40001800

08001de4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d020      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d01b      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0202 	mvn.w	r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8d2 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8c4 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8d5 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d020      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01b      	beq.n	8001e94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f06f 0204 	mvn.w	r2, #4
 8001e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f8ac 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001e80:	e005      	b.n	8001e8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f89e 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f000 f8af 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d020      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d01b      	beq.n	8001ee0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0208 	mvn.w	r2, #8
 8001eb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f886 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001ecc:	e005      	b.n	8001eda <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f878 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed4:	6878      	ldr	r0, [r7, #4]
 8001ed6:	f000 f889 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d020      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d01b      	beq.n	8001f2c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0210 	mvn.w	r2, #16
 8001efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2208      	movs	r2, #8
 8001f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 f860 	bl	8001fd8 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f852 	bl	8001fc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f863 	bl	8001fec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00c      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d007      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f06f 0201 	mvn.w	r2, #1
 8001f48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fd66 	bl	8000a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00c      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f900 	bl	8002174 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f834 	bl	8002000 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f003 0320 	and.w	r3, r3, #32
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d007      	beq.n	8001fbc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f06f 0220 	mvn.w	r2, #32
 8001fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8d2 	bl	8002160 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ff4:	bf00      	nop
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a43      	ldr	r2, [pc, #268]	@ (8002134 <TIM_Base_SetConfig+0x120>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d013      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002032:	d00f      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a40      	ldr	r2, [pc, #256]	@ (8002138 <TIM_Base_SetConfig+0x124>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d00b      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a3f      	ldr	r2, [pc, #252]	@ (800213c <TIM_Base_SetConfig+0x128>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d007      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3e      	ldr	r2, [pc, #248]	@ (8002140 <TIM_Base_SetConfig+0x12c>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3d      	ldr	r2, [pc, #244]	@ (8002144 <TIM_Base_SetConfig+0x130>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a32      	ldr	r2, [pc, #200]	@ (8002134 <TIM_Base_SetConfig+0x120>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002074:	d027      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2f      	ldr	r2, [pc, #188]	@ (8002138 <TIM_Base_SetConfig+0x124>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d023      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2e      	ldr	r2, [pc, #184]	@ (800213c <TIM_Base_SetConfig+0x128>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2d      	ldr	r2, [pc, #180]	@ (8002140 <TIM_Base_SetConfig+0x12c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2c      	ldr	r2, [pc, #176]	@ (8002144 <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d017      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2b      	ldr	r2, [pc, #172]	@ (8002148 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2a      	ldr	r2, [pc, #168]	@ (800214c <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00f      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a29      	ldr	r2, [pc, #164]	@ (8002150 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00b      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a28      	ldr	r2, [pc, #160]	@ (8002154 <TIM_Base_SetConfig+0x140>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a27      	ldr	r2, [pc, #156]	@ (8002158 <TIM_Base_SetConfig+0x144>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d003      	beq.n	80020c6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a26      	ldr	r2, [pc, #152]	@ (800215c <TIM_Base_SetConfig+0x148>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d108      	bne.n	80020d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <TIM_Base_SetConfig+0x120>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d003      	beq.n	8002106 <TIM_Base_SetConfig+0xf2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a10      	ldr	r2, [pc, #64]	@ (8002144 <TIM_Base_SetConfig+0x130>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d103      	bne.n	800210e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f043 0204 	orr.w	r2, r3, #4
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40010000 	.word	0x40010000
 8002138:	40000400 	.word	0x40000400
 800213c:	40000800 	.word	0x40000800
 8002140:	40000c00 	.word	0x40000c00
 8002144:	40010400 	.word	0x40010400
 8002148:	40014000 	.word	0x40014000
 800214c:	40014400 	.word	0x40014400
 8002150:	40014800 	.word	0x40014800
 8002154:	40001800 	.word	0x40001800
 8002158:	40001c00 	.word	0x40001c00
 800215c:	40002000 	.word	0x40002000

08002160 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e042      	b.n	8002220 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d106      	bne.n	80021b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fc7a 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2224      	movs	r2, #36	@ 0x24
 80021b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f973 	bl	80024b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80021e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695a      	ldr	r2, [r3, #20]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80021f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002200:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	4613      	mov	r3, r2
 8002236:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b20      	cmp	r3, #32
 8002246:	d175      	bne.n	8002334 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <HAL_UART_Transmit+0x2c>
 800224e:	88fb      	ldrh	r3, [r7, #6]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e06e      	b.n	8002336 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2221      	movs	r2, #33	@ 0x21
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002266:	f7fe fdad 	bl	8000dc4 <HAL_GetTick>
 800226a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	88fa      	ldrh	r2, [r7, #6]
 8002270:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	88fa      	ldrh	r2, [r7, #6]
 8002276:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002280:	d108      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d104      	bne.n	8002294 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	e003      	b.n	800229c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800229c:	e02e      	b.n	80022fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2200      	movs	r2, #0
 80022a6:	2180      	movs	r1, #128	@ 0x80
 80022a8:	68f8      	ldr	r0, [r7, #12]
 80022aa:	f000 f848 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2220      	movs	r2, #32
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e03a      	b.n	8002336 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80022d6:	69bb      	ldr	r3, [r7, #24]
 80022d8:	3302      	adds	r3, #2
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e007      	b.n	80022ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	781a      	ldrb	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	3301      	adds	r3, #1
 80022ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1cb      	bne.n	800229e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	2140      	movs	r1, #64	@ 0x40
 8002310:	68f8      	ldr	r0, [r7, #12]
 8002312:	f000 f814 	bl	800233e <UART_WaitOnFlagUntilTimeout>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e006      	b.n	8002336 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3720      	adds	r7, #32
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b086      	sub	sp, #24
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	603b      	str	r3, [r7, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800234e:	e03b      	b.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002350:	6a3b      	ldr	r3, [r7, #32]
 8002352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002356:	d037      	beq.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002358:	f7fe fd34 	bl	8000dc4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	6a3a      	ldr	r2, [r7, #32]
 8002364:	429a      	cmp	r2, r3
 8002366:	d302      	bcc.n	800236e <UART_WaitOnFlagUntilTimeout+0x30>
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e03a      	b.n	80023e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0304 	and.w	r3, r3, #4
 800237c:	2b00      	cmp	r3, #0
 800237e:	d023      	beq.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	2b80      	cmp	r3, #128	@ 0x80
 8002384:	d020      	beq.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b40      	cmp	r3, #64	@ 0x40
 800238a:	d01d      	beq.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d116      	bne.n	80023c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 f81d 	bl	80023f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2208      	movs	r2, #8
 80023ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e00f      	b.n	80023e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d0b4      	beq.n	8002350 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3718      	adds	r7, #24
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b095      	sub	sp, #84	@ 0x54
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	330c      	adds	r3, #12
 80023fe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002400:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002402:	e853 3f00 	ldrex	r3, [r3]
 8002406:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800240e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	330c      	adds	r3, #12
 8002416:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002418:	643a      	str	r2, [r7, #64]	@ 0x40
 800241a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800241e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002420:	e841 2300 	strex	r3, r2, [r1]
 8002424:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1e5      	bne.n	80023f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3314      	adds	r3, #20
 8002432:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	e853 3f00 	ldrex	r3, [r3]
 800243a:	61fb      	str	r3, [r7, #28]
   return(result);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f023 0301 	bic.w	r3, r3, #1
 8002442:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	3314      	adds	r3, #20
 800244a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800244c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002452:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e5      	bne.n	800242c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002464:	2b01      	cmp	r3, #1
 8002466:	d119      	bne.n	800249c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	330c      	adds	r3, #12
 800246e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	e853 3f00 	ldrex	r3, [r3]
 8002476:	60bb      	str	r3, [r7, #8]
   return(result);
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	f023 0310 	bic.w	r3, r3, #16
 800247e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	330c      	adds	r3, #12
 8002486:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002488:	61ba      	str	r2, [r7, #24]
 800248a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	613b      	str	r3, [r7, #16]
   return(result);
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e5      	bne.n	8002468 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80024aa:	bf00      	nop
 80024ac:	3754      	adds	r7, #84	@ 0x54
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024bc:	b0c0      	sub	sp, #256	@ 0x100
 80024be:	af00      	add	r7, sp, #0
 80024c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	68d9      	ldr	r1, [r3, #12]
 80024d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	ea40 0301 	orr.w	r3, r0, r1
 80024e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80024e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	431a      	orrs	r2, r3
 80024f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002510:	f021 010c 	bic.w	r1, r1, #12
 8002514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800251e:	430b      	orrs	r3, r1
 8002520:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800252e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002532:	6999      	ldr	r1, [r3, #24]
 8002534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	ea40 0301 	orr.w	r3, r0, r1
 800253e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	4b8f      	ldr	r3, [pc, #572]	@ (8002784 <UART_SetConfig+0x2cc>)
 8002548:	429a      	cmp	r2, r3
 800254a:	d005      	beq.n	8002558 <UART_SetConfig+0xa0>
 800254c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4b8d      	ldr	r3, [pc, #564]	@ (8002788 <UART_SetConfig+0x2d0>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d104      	bne.n	8002562 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002558:	f7ff fb34 	bl	8001bc4 <HAL_RCC_GetPCLK2Freq>
 800255c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002560:	e003      	b.n	800256a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002562:	f7ff fb1b 	bl	8001b9c <HAL_RCC_GetPCLK1Freq>
 8002566:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800256a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002574:	f040 810c 	bne.w	8002790 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002578:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800257c:	2200      	movs	r2, #0
 800257e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002582:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002586:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	1891      	adds	r1, r2, r2
 8002590:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002592:	415b      	adcs	r3, r3
 8002594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002596:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800259a:	4621      	mov	r1, r4
 800259c:	eb12 0801 	adds.w	r8, r2, r1
 80025a0:	4629      	mov	r1, r5
 80025a2:	eb43 0901 	adc.w	r9, r3, r1
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	4623      	mov	r3, r4
 80025c0:	eb18 0303 	adds.w	r3, r8, r3
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80025c8:	462b      	mov	r3, r5
 80025ca:	eb49 0303 	adc.w	r3, r9, r3
 80025ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80025d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80025de:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80025e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80025e6:	460b      	mov	r3, r1
 80025e8:	18db      	adds	r3, r3, r3
 80025ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80025ec:	4613      	mov	r3, r2
 80025ee:	eb42 0303 	adc.w	r3, r2, r3
 80025f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80025f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80025f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80025fc:	f7fd fe38 	bl	8000270 <__aeabi_uldivmod>
 8002600:	4602      	mov	r2, r0
 8002602:	460b      	mov	r3, r1
 8002604:	4b61      	ldr	r3, [pc, #388]	@ (800278c <UART_SetConfig+0x2d4>)
 8002606:	fba3 2302 	umull	r2, r3, r3, r2
 800260a:	095b      	lsrs	r3, r3, #5
 800260c:	011c      	lsls	r4, r3, #4
 800260e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002612:	2200      	movs	r2, #0
 8002614:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002618:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800261c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002620:	4642      	mov	r2, r8
 8002622:	464b      	mov	r3, r9
 8002624:	1891      	adds	r1, r2, r2
 8002626:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002628:	415b      	adcs	r3, r3
 800262a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800262c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002630:	4641      	mov	r1, r8
 8002632:	eb12 0a01 	adds.w	sl, r2, r1
 8002636:	4649      	mov	r1, r9
 8002638:	eb43 0b01 	adc.w	fp, r3, r1
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002648:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800264c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002650:	4692      	mov	sl, r2
 8002652:	469b      	mov	fp, r3
 8002654:	4643      	mov	r3, r8
 8002656:	eb1a 0303 	adds.w	r3, sl, r3
 800265a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800265e:	464b      	mov	r3, r9
 8002660:	eb4b 0303 	adc.w	r3, fp, r3
 8002664:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002674:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002678:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800267c:	460b      	mov	r3, r1
 800267e:	18db      	adds	r3, r3, r3
 8002680:	643b      	str	r3, [r7, #64]	@ 0x40
 8002682:	4613      	mov	r3, r2
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	647b      	str	r3, [r7, #68]	@ 0x44
 800268a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800268e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002692:	f7fd fded 	bl	8000270 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4611      	mov	r1, r2
 800269c:	4b3b      	ldr	r3, [pc, #236]	@ (800278c <UART_SetConfig+0x2d4>)
 800269e:	fba3 2301 	umull	r2, r3, r3, r1
 80026a2:	095b      	lsrs	r3, r3, #5
 80026a4:	2264      	movs	r2, #100	@ 0x64
 80026a6:	fb02 f303 	mul.w	r3, r2, r3
 80026aa:	1acb      	subs	r3, r1, r3
 80026ac:	00db      	lsls	r3, r3, #3
 80026ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80026b2:	4b36      	ldr	r3, [pc, #216]	@ (800278c <UART_SetConfig+0x2d4>)
 80026b4:	fba3 2302 	umull	r2, r3, r3, r2
 80026b8:	095b      	lsrs	r3, r3, #5
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80026c0:	441c      	add	r4, r3
 80026c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80026c6:	2200      	movs	r2, #0
 80026c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80026cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80026d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80026d4:	4642      	mov	r2, r8
 80026d6:	464b      	mov	r3, r9
 80026d8:	1891      	adds	r1, r2, r2
 80026da:	63b9      	str	r1, [r7, #56]	@ 0x38
 80026dc:	415b      	adcs	r3, r3
 80026de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80026e4:	4641      	mov	r1, r8
 80026e6:	1851      	adds	r1, r2, r1
 80026e8:	6339      	str	r1, [r7, #48]	@ 0x30
 80026ea:	4649      	mov	r1, r9
 80026ec:	414b      	adcs	r3, r1
 80026ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80026fc:	4659      	mov	r1, fp
 80026fe:	00cb      	lsls	r3, r1, #3
 8002700:	4651      	mov	r1, sl
 8002702:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002706:	4651      	mov	r1, sl
 8002708:	00ca      	lsls	r2, r1, #3
 800270a:	4610      	mov	r0, r2
 800270c:	4619      	mov	r1, r3
 800270e:	4603      	mov	r3, r0
 8002710:	4642      	mov	r2, r8
 8002712:	189b      	adds	r3, r3, r2
 8002714:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002718:	464b      	mov	r3, r9
 800271a:	460a      	mov	r2, r1
 800271c:	eb42 0303 	adc.w	r3, r2, r3
 8002720:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002730:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002734:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002738:	460b      	mov	r3, r1
 800273a:	18db      	adds	r3, r3, r3
 800273c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800273e:	4613      	mov	r3, r2
 8002740:	eb42 0303 	adc.w	r3, r2, r3
 8002744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800274a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800274e:	f7fd fd8f 	bl	8000270 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4b0d      	ldr	r3, [pc, #52]	@ (800278c <UART_SetConfig+0x2d4>)
 8002758:	fba3 1302 	umull	r1, r3, r3, r2
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	2164      	movs	r1, #100	@ 0x64
 8002760:	fb01 f303 	mul.w	r3, r1, r3
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	3332      	adds	r3, #50	@ 0x32
 800276a:	4a08      	ldr	r2, [pc, #32]	@ (800278c <UART_SetConfig+0x2d4>)
 800276c:	fba2 2303 	umull	r2, r3, r2, r3
 8002770:	095b      	lsrs	r3, r3, #5
 8002772:	f003 0207 	and.w	r2, r3, #7
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4422      	add	r2, r4
 800277e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002780:	e106      	b.n	8002990 <UART_SetConfig+0x4d8>
 8002782:	bf00      	nop
 8002784:	40011000 	.word	0x40011000
 8002788:	40011400 	.word	0x40011400
 800278c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800279a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800279e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80027a2:	4642      	mov	r2, r8
 80027a4:	464b      	mov	r3, r9
 80027a6:	1891      	adds	r1, r2, r2
 80027a8:	6239      	str	r1, [r7, #32]
 80027aa:	415b      	adcs	r3, r3
 80027ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80027b2:	4641      	mov	r1, r8
 80027b4:	1854      	adds	r4, r2, r1
 80027b6:	4649      	mov	r1, r9
 80027b8:	eb43 0501 	adc.w	r5, r3, r1
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	00eb      	lsls	r3, r5, #3
 80027c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027ca:	00e2      	lsls	r2, r4, #3
 80027cc:	4614      	mov	r4, r2
 80027ce:	461d      	mov	r5, r3
 80027d0:	4643      	mov	r3, r8
 80027d2:	18e3      	adds	r3, r4, r3
 80027d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80027d8:	464b      	mov	r3, r9
 80027da:	eb45 0303 	adc.w	r3, r5, r3
 80027de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80027ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80027fe:	4629      	mov	r1, r5
 8002800:	008b      	lsls	r3, r1, #2
 8002802:	4621      	mov	r1, r4
 8002804:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002808:	4621      	mov	r1, r4
 800280a:	008a      	lsls	r2, r1, #2
 800280c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002810:	f7fd fd2e 	bl	8000270 <__aeabi_uldivmod>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4b60      	ldr	r3, [pc, #384]	@ (800299c <UART_SetConfig+0x4e4>)
 800281a:	fba3 2302 	umull	r2, r3, r3, r2
 800281e:	095b      	lsrs	r3, r3, #5
 8002820:	011c      	lsls	r4, r3, #4
 8002822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002826:	2200      	movs	r2, #0
 8002828:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800282c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002830:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002834:	4642      	mov	r2, r8
 8002836:	464b      	mov	r3, r9
 8002838:	1891      	adds	r1, r2, r2
 800283a:	61b9      	str	r1, [r7, #24]
 800283c:	415b      	adcs	r3, r3
 800283e:	61fb      	str	r3, [r7, #28]
 8002840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002844:	4641      	mov	r1, r8
 8002846:	1851      	adds	r1, r2, r1
 8002848:	6139      	str	r1, [r7, #16]
 800284a:	4649      	mov	r1, r9
 800284c:	414b      	adcs	r3, r1
 800284e:	617b      	str	r3, [r7, #20]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800285c:	4659      	mov	r1, fp
 800285e:	00cb      	lsls	r3, r1, #3
 8002860:	4651      	mov	r1, sl
 8002862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002866:	4651      	mov	r1, sl
 8002868:	00ca      	lsls	r2, r1, #3
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	4603      	mov	r3, r0
 8002870:	4642      	mov	r2, r8
 8002872:	189b      	adds	r3, r3, r2
 8002874:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002878:	464b      	mov	r3, r9
 800287a:	460a      	mov	r2, r1
 800287c:	eb42 0303 	adc.w	r3, r2, r3
 8002880:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800288e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002890:	f04f 0200 	mov.w	r2, #0
 8002894:	f04f 0300 	mov.w	r3, #0
 8002898:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800289c:	4649      	mov	r1, r9
 800289e:	008b      	lsls	r3, r1, #2
 80028a0:	4641      	mov	r1, r8
 80028a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80028a6:	4641      	mov	r1, r8
 80028a8:	008a      	lsls	r2, r1, #2
 80028aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80028ae:	f7fd fcdf 	bl	8000270 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4611      	mov	r1, r2
 80028b8:	4b38      	ldr	r3, [pc, #224]	@ (800299c <UART_SetConfig+0x4e4>)
 80028ba:	fba3 2301 	umull	r2, r3, r3, r1
 80028be:	095b      	lsrs	r3, r3, #5
 80028c0:	2264      	movs	r2, #100	@ 0x64
 80028c2:	fb02 f303 	mul.w	r3, r2, r3
 80028c6:	1acb      	subs	r3, r1, r3
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	3332      	adds	r3, #50	@ 0x32
 80028cc:	4a33      	ldr	r2, [pc, #204]	@ (800299c <UART_SetConfig+0x4e4>)
 80028ce:	fba2 2303 	umull	r2, r3, r2, r3
 80028d2:	095b      	lsrs	r3, r3, #5
 80028d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028d8:	441c      	add	r4, r3
 80028da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028de:	2200      	movs	r2, #0
 80028e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80028e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80028e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80028e8:	4642      	mov	r2, r8
 80028ea:	464b      	mov	r3, r9
 80028ec:	1891      	adds	r1, r2, r2
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	415b      	adcs	r3, r3
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f8:	4641      	mov	r1, r8
 80028fa:	1851      	adds	r1, r2, r1
 80028fc:	6039      	str	r1, [r7, #0]
 80028fe:	4649      	mov	r1, r9
 8002900:	414b      	adcs	r3, r1
 8002902:	607b      	str	r3, [r7, #4]
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002910:	4659      	mov	r1, fp
 8002912:	00cb      	lsls	r3, r1, #3
 8002914:	4651      	mov	r1, sl
 8002916:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800291a:	4651      	mov	r1, sl
 800291c:	00ca      	lsls	r2, r1, #3
 800291e:	4610      	mov	r0, r2
 8002920:	4619      	mov	r1, r3
 8002922:	4603      	mov	r3, r0
 8002924:	4642      	mov	r2, r8
 8002926:	189b      	adds	r3, r3, r2
 8002928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800292a:	464b      	mov	r3, r9
 800292c:	460a      	mov	r2, r1
 800292e:	eb42 0303 	adc.w	r3, r2, r3
 8002932:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	663b      	str	r3, [r7, #96]	@ 0x60
 800293e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800294c:	4649      	mov	r1, r9
 800294e:	008b      	lsls	r3, r1, #2
 8002950:	4641      	mov	r1, r8
 8002952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002956:	4641      	mov	r1, r8
 8002958:	008a      	lsls	r2, r1, #2
 800295a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800295e:	f7fd fc87 	bl	8000270 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <UART_SetConfig+0x4e4>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	@ 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	3332      	adds	r3, #50	@ 0x32
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <UART_SetConfig+0x4e4>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 020f 	and.w	r2, r3, #15
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4422      	add	r2, r4
 800298e:	609a      	str	r2, [r3, #8]
}
 8002990:	bf00      	nop
 8002992:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299c:	51eb851f 	.word	0x51eb851f

080029a0 <__NVIC_SetPriority>:
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	4603      	mov	r3, r0
 80029a8:	6039      	str	r1, [r7, #0]
 80029aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	db0a      	blt.n	80029ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	490c      	ldr	r1, [pc, #48]	@ (80029ec <__NVIC_SetPriority+0x4c>)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	0112      	lsls	r2, r2, #4
 80029c0:	b2d2      	uxtb	r2, r2
 80029c2:	440b      	add	r3, r1
 80029c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029c8:	e00a      	b.n	80029e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4908      	ldr	r1, [pc, #32]	@ (80029f0 <__NVIC_SetPriority+0x50>)
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	3b04      	subs	r3, #4
 80029d8:	0112      	lsls	r2, r2, #4
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	440b      	add	r3, r1
 80029de:	761a      	strb	r2, [r3, #24]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	e000e100 	.word	0xe000e100
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <SysTick_Handler+0x1c>)
 80029fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80029fc:	f001 fe64 	bl	80046c8 <xTaskGetSchedulerState>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d001      	beq.n	8002a0a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a06:	f002 fd47 	bl	8005498 <xPortSysTickHandler>
  }
}
 8002a0a:	bf00      	nop
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	e000e010 	.word	0xe000e010

08002a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	f06f 0004 	mvn.w	r0, #4
 8002a1e:	f7ff ffbf 	bl	80029a0 <__NVIC_SetPriority>
#endif
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a2e:	f3ef 8305 	mrs	r3, IPSR
 8002a32:	603b      	str	r3, [r7, #0]
  return(result);
 8002a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a3a:	f06f 0305 	mvn.w	r3, #5
 8002a3e:	607b      	str	r3, [r7, #4]
 8002a40:	e00c      	b.n	8002a5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <osKernelInitialize+0x44>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d105      	bne.n	8002a56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <osKernelInitialize+0x44>)
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a50:	2300      	movs	r3, #0
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	e002      	b.n	8002a5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a56:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a5c:	687b      	ldr	r3, [r7, #4]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20000190 	.word	0x20000190

08002a70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a76:	f3ef 8305 	mrs	r3, IPSR
 8002a7a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002a82:	f06f 0305 	mvn.w	r3, #5
 8002a86:	607b      	str	r3, [r7, #4]
 8002a88:	e010      	b.n	8002aac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <osKernelStart+0x48>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d109      	bne.n	8002aa6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002a92:	f7ff ffbf 	bl	8002a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <osKernelStart+0x48>)
 8002a98:	2202      	movs	r2, #2
 8002a9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a9c:	f001 f99e 	bl	8003ddc <vTaskStartScheduler>
      stat = osOK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	e002      	b.n	8002aac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aaa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000190 	.word	0x20000190

08002abc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ac2:	f3ef 8305 	mrs	r3, IPSR
 8002ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8002ac8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002ace:	f001 fab1 	bl	8004034 <xTaskGetTickCountFromISR>
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	e002      	b.n	8002adc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002ad6:	f001 fa9d 	bl	8004014 <xTaskGetTickCount>
 8002ada:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002adc:	687b      	ldr	r3, [r7, #4]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b08e      	sub	sp, #56	@ 0x38
 8002aea:	af04      	add	r7, sp, #16
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002af6:	f3ef 8305 	mrs	r3, IPSR
 8002afa:	617b      	str	r3, [r7, #20]
  return(result);
 8002afc:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d17e      	bne.n	8002c00 <osThreadNew+0x11a>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d07b      	beq.n	8002c00 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b08:	2380      	movs	r3, #128	@ 0x80
 8002b0a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b0c:	2318      	movs	r3, #24
 8002b0e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d045      	beq.n	8002bac <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d002      	beq.n	8002b2e <osThreadNew+0x48>
        name = attr->name;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <osThreadNew+0x6e>
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	2b38      	cmp	r3, #56	@ 0x38
 8002b46:	d805      	bhi.n	8002b54 <osThreadNew+0x6e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <osThreadNew+0x72>
        return (NULL);
 8002b54:	2300      	movs	r3, #0
 8002b56:	e054      	b.n	8002c02 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	695b      	ldr	r3, [r3, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	089b      	lsrs	r3, r3, #2
 8002b66:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d00e      	beq.n	8002b8e <osThreadNew+0xa8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2ba7      	cmp	r3, #167	@ 0xa7
 8002b76:	d90a      	bls.n	8002b8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d006      	beq.n	8002b8e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d002      	beq.n	8002b8e <osThreadNew+0xa8>
        mem = 1;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	61bb      	str	r3, [r7, #24]
 8002b8c:	e010      	b.n	8002bb0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10c      	bne.n	8002bb0 <osThreadNew+0xca>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <osThreadNew+0xca>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691b      	ldr	r3, [r3, #16]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d104      	bne.n	8002bb0 <osThreadNew+0xca>
          mem = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
 8002baa:	e001      	b.n	8002bb0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d110      	bne.n	8002bd8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bbe:	9202      	str	r2, [sp, #8]
 8002bc0:	9301      	str	r3, [sp, #4]
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 ff11 	bl	80039f4 <xTaskCreateStatic>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e013      	b.n	8002c00 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d110      	bne.n	8002c00 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f107 0310 	add.w	r3, r7, #16
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bf0:	68f8      	ldr	r0, [r7, #12]
 8002bf2:	f000 ff5f 	bl	8003ab4 <xTaskCreate>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d001      	beq.n	8002c00 <osThreadNew+0x11a>
            hTask = NULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c00:	693b      	ldr	r3, [r7, #16]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3728      	adds	r7, #40	@ 0x28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c12:	f3ef 8305 	mrs	r3, IPSR
 8002c16:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c18:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <osDelay+0x1c>
    stat = osErrorISR;
 8002c1e:	f06f 0305 	mvn.w	r3, #5
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	e007      	b.n	8002c36 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d002      	beq.n	8002c36 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f001 f89d 	bl	8003d70 <vTaskDelay>
    }
  }

  return (stat);
 8002c36:	68fb      	ldr	r3, [r7, #12]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f002 fa41 	bl	80050d0 <pvTimerGetTimerID>
 8002c4e:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <TimerCallback+0x22>
    callb->func (callb->arg);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	6852      	ldr	r2, [r2, #4]
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4798      	blx	r3
  }
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	@ 0x30
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c80:	f3ef 8305 	mrs	r3, IPSR
 8002c84:	613b      	str	r3, [r7, #16]
  return(result);
 8002c86:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d163      	bne.n	8002d54 <osTimerNew+0xe8>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d060      	beq.n	8002d54 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8002c92:	2008      	movs	r0, #8
 8002c94:	f002 fc92 	bl	80055bc <pvPortMalloc>
 8002c98:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d059      	beq.n	8002d54 <osTimerNew+0xe8>
      callb->func = func;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8002cac:	7afb      	ldrb	r3, [r7, #11]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
 8002cb6:	e001      	b.n	8002cbc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8002cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01c      	beq.n	8002d06 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <osTimerNew+0x6e>
          name = attr->name;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d006      	beq.n	8002cf0 <osTimerNew+0x84>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	2b2b      	cmp	r3, #43	@ 0x2b
 8002ce8:	d902      	bls.n	8002cf0 <osTimerNew+0x84>
          mem = 1;
 8002cea:	2301      	movs	r3, #1
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	e00c      	b.n	8002d0a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d108      	bne.n	8002d0a <osTimerNew+0x9e>
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <osTimerNew+0x9e>
            mem = 0;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e001      	b.n	8002d0a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10c      	bne.n	8002d2a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	9301      	str	r3, [sp, #4]
 8002d16:	4b12      	ldr	r3, [pc, #72]	@ (8002d60 <osTimerNew+0xf4>)
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d22:	f001 fe1e 	bl	8004962 <xTimerCreateStatic>
 8002d26:	6238      	str	r0, [r7, #32]
 8002d28:	e00b      	b.n	8002d42 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d108      	bne.n	8002d42 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8002d30:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <osTimerNew+0xf4>)
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	69fa      	ldr	r2, [r7, #28]
 8002d38:	2101      	movs	r1, #1
 8002d3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002d3c:	f001 fdf0 	bl	8004920 <xTimerCreate>
 8002d40:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d105      	bne.n	8002d54 <osTimerNew+0xe8>
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <osTimerNew+0xe8>
        vPortFree (callb);
 8002d4e:	6978      	ldr	r0, [r7, #20]
 8002d50:	f002 fd02 	bl	8005758 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8002d54:	6a3b      	ldr	r3, [r7, #32]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3728      	adds	r7, #40	@ 0x28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	08002c41 	.word	0x08002c41

08002d64 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b088      	sub	sp, #32
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d72:	f3ef 8305 	mrs	r3, IPSR
 8002d76:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d78:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <osTimerStart+0x22>
    stat = osErrorISR;
 8002d7e:	f06f 0305 	mvn.w	r3, #5
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	e017      	b.n	8002db6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d103      	bne.n	8002d94 <osTimerStart+0x30>
    stat = osErrorParameter;
 8002d8c:	f06f 0303 	mvn.w	r3, #3
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e010      	b.n	8002db6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8002d94:	2300      	movs	r3, #0
 8002d96:	9300      	str	r3, [sp, #0]
 8002d98:	2300      	movs	r3, #0
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	6938      	ldr	r0, [r7, #16]
 8002da0:	f001 fe5c 	bl	8004a5c <xTimerGenericCommand>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d102      	bne.n	8002db0 <osTimerStart+0x4c>
      stat = osOK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	e002      	b.n	8002db6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8002db0:	f06f 0302 	mvn.w	r3, #2
 8002db4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002db6:	697b      	ldr	r3, [r7, #20]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dcc:	f3ef 8305 	mrs	r3, IPSR
 8002dd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <osTimerStop+0x20>
    stat = osErrorISR;
 8002dd8:	f06f 0305 	mvn.w	r3, #5
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e021      	b.n	8002e24 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <osTimerStop+0x2e>
    stat = osErrorParameter;
 8002de6:	f06f 0303 	mvn.w	r3, #3
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e01a      	b.n	8002e24 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8002dee:	6938      	ldr	r0, [r7, #16]
 8002df0:	f002 f944 	bl	800507c <xTimerIsTimerActive>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d103      	bne.n	8002e02 <osTimerStop+0x42>
      stat = osErrorResource;
 8002dfa:	f06f 0302 	mvn.w	r3, #2
 8002dfe:	617b      	str	r3, [r7, #20]
 8002e00:	e010      	b.n	8002e24 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2103      	movs	r1, #3
 8002e0c:	6938      	ldr	r0, [r7, #16]
 8002e0e:	f001 fe25 	bl	8004a5c <xTimerGenericCommand>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d102      	bne.n	8002e1e <osTimerStop+0x5e>
        stat = osOK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	e002      	b.n	8002e24 <osTimerStop+0x64>
      } else {
        stat = osError;
 8002e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e22:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002e24:	697b      	ldr	r3, [r7, #20]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	4a07      	ldr	r2, [pc, #28]	@ (8002e5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002e40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	4a06      	ldr	r2, [pc, #24]	@ (8002e60 <vApplicationGetIdleTaskMemory+0x30>)
 8002e46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2280      	movs	r2, #128	@ 0x80
 8002e4c:	601a      	str	r2, [r3, #0]
}
 8002e4e:	bf00      	nop
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000194 	.word	0x20000194
 8002e60:	2000023c 	.word	0x2000023c

08002e64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4a07      	ldr	r2, [pc, #28]	@ (8002e90 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	4a06      	ldr	r2, [pc, #24]	@ (8002e94 <vApplicationGetTimerTaskMemory+0x30>)
 8002e7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e82:	601a      	str	r2, [r3, #0]
}
 8002e84:	bf00      	nop
 8002e86:	3714      	adds	r7, #20
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	2000043c 	.word	0x2000043c
 8002e94:	200004e4 	.word	0x200004e4

08002e98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f103 0208 	add.w	r2, r3, #8
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295
 8002eb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f103 0208 	add.w	r2, r3, #8
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f103 0208 	add.w	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	601a      	str	r2, [r3, #0]
}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b085      	sub	sp, #20
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d103      	bne.n	8002f5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	e00c      	b.n	8002f74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	e002      	b.n	8002f68 <vListInsert+0x2e>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d2f6      	bcs.n	8002f62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	601a      	str	r2, [r3, #0]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6892      	ldr	r2, [r2, #8]
 8002fc2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6852      	ldr	r2, [r2, #4]
 8002fcc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d103      	bne.n	8002fe0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	1e5a      	subs	r2, r3, #1
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10b      	bne.n	800302c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800302c:	f002 f9a4 	bl	8005378 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003038:	68f9      	ldr	r1, [r7, #12]
 800303a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800303c:	fb01 f303 	mul.w	r3, r1, r3
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800305c:	3b01      	subs	r3, #1
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003062:	fb01 f303 	mul.w	r3, r1, r3
 8003066:	441a      	add	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	22ff      	movs	r2, #255	@ 0xff
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	22ff      	movs	r2, #255	@ 0xff
 8003078:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d114      	bne.n	80030ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d01a      	beq.n	80030c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3310      	adds	r3, #16
 800308e:	4618      	mov	r0, r3
 8003090:	f001 f954 	bl	800433c <xTaskRemoveFromEventList>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d012      	beq.n	80030c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800309a:	4b0d      	ldr	r3, [pc, #52]	@ (80030d0 <xQueueGenericReset+0xd0>)
 800309c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030a0:	601a      	str	r2, [r3, #0]
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	e009      	b.n	80030c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3310      	adds	r3, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff fef1 	bl	8002e98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3324      	adds	r3, #36	@ 0x24
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7ff feec 	bl	8002e98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030c0:	f002 f98c 	bl	80053dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030c4:	2301      	movs	r3, #1
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	e000ed04 	.word	0xe000ed04

080030d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08e      	sub	sp, #56	@ 0x38
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <xQueueGenericCreateStatic+0x56>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <xQueueGenericCreateStatic+0x5a>
 800312a:	2301      	movs	r3, #1
 800312c:	e000      	b.n	8003130 <xQueueGenericCreateStatic+0x5c>
 800312e:	2300      	movs	r3, #0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	623b      	str	r3, [r7, #32]
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d102      	bne.n	8003158 <xQueueGenericCreateStatic+0x84>
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <xQueueGenericCreateStatic+0x88>
 8003158:	2301      	movs	r3, #1
 800315a:	e000      	b.n	800315e <xQueueGenericCreateStatic+0x8a>
 800315c:	2300      	movs	r3, #0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10b      	bne.n	800317a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	61fb      	str	r3, [r7, #28]
}
 8003174:	bf00      	nop
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800317a:	2350      	movs	r3, #80	@ 0x50
 800317c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b50      	cmp	r3, #80	@ 0x50
 8003182:	d00b      	beq.n	800319c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003188:	f383 8811 	msr	BASEPRI, r3
 800318c:	f3bf 8f6f 	isb	sy
 8003190:	f3bf 8f4f 	dsb	sy
 8003194:	61bb      	str	r3, [r7, #24]
}
 8003196:	bf00      	nop
 8003198:	bf00      	nop
 800319a:	e7fd      	b.n	8003198 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800319c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80031a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d00d      	beq.n	80031c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80031b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b6:	9300      	str	r3, [sp, #0]
 80031b8:	4613      	mov	r3, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	68b9      	ldr	r1, [r7, #8]
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f805 	bl	80031ce <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3730      	adds	r7, #48	@ 0x30
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b084      	sub	sp, #16
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	60f8      	str	r0, [r7, #12]
 80031d6:	60b9      	str	r1, [r7, #8]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d103      	bne.n	80031ea <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	e002      	b.n	80031f0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031fc:	2101      	movs	r1, #1
 80031fe:	69b8      	ldr	r0, [r7, #24]
 8003200:	f7ff fefe 	bl	8003000 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800320c:	bf00      	nop
 800320e:	3710      	adds	r7, #16
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b08e      	sub	sp, #56	@ 0x38
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
 8003220:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003222:	2300      	movs	r3, #0
 8003224:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800322a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10b      	bne.n	8003248 <xQueueGenericSend+0x34>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <xQueueGenericSend+0x42>
 800324e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <xQueueGenericSend+0x46>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <xQueueGenericSend+0x48>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <xQueueGenericSend+0x64>
	__asm volatile
 8003260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003272:	bf00      	nop
 8003274:	bf00      	nop
 8003276:	e7fd      	b.n	8003274 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d103      	bne.n	8003286 <xQueueGenericSend+0x72>
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <xQueueGenericSend+0x76>
 8003286:	2301      	movs	r3, #1
 8003288:	e000      	b.n	800328c <xQueueGenericSend+0x78>
 800328a:	2300      	movs	r3, #0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d10b      	bne.n	80032a8 <xQueueGenericSend+0x94>
	__asm volatile
 8003290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	623b      	str	r3, [r7, #32]
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	e7fd      	b.n	80032a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a8:	f001 fa0e 	bl	80046c8 <xTaskGetSchedulerState>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d102      	bne.n	80032b8 <xQueueGenericSend+0xa4>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <xQueueGenericSend+0xa8>
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <xQueueGenericSend+0xaa>
 80032bc:	2300      	movs	r3, #0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10b      	bne.n	80032da <xQueueGenericSend+0xc6>
	__asm volatile
 80032c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c6:	f383 8811 	msr	BASEPRI, r3
 80032ca:	f3bf 8f6f 	isb	sy
 80032ce:	f3bf 8f4f 	dsb	sy
 80032d2:	61fb      	str	r3, [r7, #28]
}
 80032d4:	bf00      	nop
 80032d6:	bf00      	nop
 80032d8:	e7fd      	b.n	80032d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032da:	f002 f84d 	bl	8005378 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d302      	bcc.n	80032f0 <xQueueGenericSend+0xdc>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d129      	bne.n	8003344 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80032f6:	f000 fa0f 	bl	8003718 <prvCopyDataToQueue>
 80032fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	2b00      	cmp	r3, #0
 8003302:	d010      	beq.n	8003326 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003306:	3324      	adds	r3, #36	@ 0x24
 8003308:	4618      	mov	r0, r3
 800330a:	f001 f817 	bl	800433c <xTaskRemoveFromEventList>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003314:	4b3f      	ldr	r3, [pc, #252]	@ (8003414 <xQueueGenericSend+0x200>)
 8003316:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	e00a      	b.n	800333c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800332c:	4b39      	ldr	r3, [pc, #228]	@ (8003414 <xQueueGenericSend+0x200>)
 800332e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800333c:	f002 f84e 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 8003340:	2301      	movs	r3, #1
 8003342:	e063      	b.n	800340c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800334a:	f002 f847 	bl	80053dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800334e:	2300      	movs	r3, #0
 8003350:	e05c      	b.n	800340c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003352:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003354:	2b00      	cmp	r3, #0
 8003356:	d106      	bne.n	8003366 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4618      	mov	r0, r3
 800335e:	f001 f851 	bl	8004404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003362:	2301      	movs	r3, #1
 8003364:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003366:	f002 f839 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800336a:	f000 fda7 	bl	8003ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800336e:	f002 f803 	bl	8005378 <vPortEnterCritical>
 8003372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003374:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003378:	b25b      	sxtb	r3, r3
 800337a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337e:	d103      	bne.n	8003388 <xQueueGenericSend+0x174>
 8003380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800338e:	b25b      	sxtb	r3, r3
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003394:	d103      	bne.n	800339e <xQueueGenericSend+0x18a>
 8003396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800339e:	f002 f81d 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033a2:	1d3a      	adds	r2, r7, #4
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	4611      	mov	r1, r2
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 f840 	bl	8004430 <xTaskCheckForTimeOut>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d124      	bne.n	8003400 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033b8:	f000 faa6 	bl	8003908 <prvIsQueueFull>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d018      	beq.n	80033f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	3310      	adds	r3, #16
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	4611      	mov	r1, r2
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 ff64 	bl	8004298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033d2:	f000 fa31 	bl	8003838 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033d6:	f000 fd7f 	bl	8003ed8 <xTaskResumeAll>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f47f af7c 	bne.w	80032da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <xQueueGenericSend+0x200>)
 80033e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033e8:	601a      	str	r2, [r3, #0]
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	e772      	b.n	80032da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033f6:	f000 fa1f 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033fa:	f000 fd6d 	bl	8003ed8 <xTaskResumeAll>
 80033fe:	e76c      	b.n	80032da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003400:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003402:	f000 fa19 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003406:	f000 fd67 	bl	8003ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800340a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800340c:	4618      	mov	r0, r3
 800340e:	3738      	adds	r7, #56	@ 0x38
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}
 8003414:	e000ed04 	.word	0xe000ed04

08003418 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b090      	sub	sp, #64	@ 0x40
 800341c:	af00      	add	r7, sp, #0
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800342a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10b      	bne.n	8003448 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003434:	f383 8811 	msr	BASEPRI, r3
 8003438:	f3bf 8f6f 	isb	sy
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	e7fd      	b.n	8003444 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d103      	bne.n	8003456 <xQueueGenericSendFromISR+0x3e>
 800344e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <xQueueGenericSendFromISR+0x42>
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <xQueueGenericSendFromISR+0x44>
 800345a:	2300      	movs	r3, #0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10b      	bne.n	8003478 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003464:	f383 8811 	msr	BASEPRI, r3
 8003468:	f3bf 8f6f 	isb	sy
 800346c:	f3bf 8f4f 	dsb	sy
 8003470:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	e7fd      	b.n	8003474 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d103      	bne.n	8003486 <xQueueGenericSendFromISR+0x6e>
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003482:	2b01      	cmp	r3, #1
 8003484:	d101      	bne.n	800348a <xQueueGenericSendFromISR+0x72>
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <xQueueGenericSendFromISR+0x74>
 800348a:	2300      	movs	r3, #0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10b      	bne.n	80034a8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	623b      	str	r3, [r7, #32]
}
 80034a2:	bf00      	nop
 80034a4:	bf00      	nop
 80034a6:	e7fd      	b.n	80034a4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034a8:	f002 f846 	bl	8005538 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034ac:	f3ef 8211 	mrs	r2, BASEPRI
 80034b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	61fa      	str	r2, [r7, #28]
 80034c2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034c4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034c6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d302      	bcc.n	80034da <xQueueGenericSendFromISR+0xc2>
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d12f      	bne.n	800353a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	68b9      	ldr	r1, [r7, #8]
 80034ee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80034f0:	f000 f912 	bl	8003718 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d112      	bne.n	8003524 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003508:	3324      	adds	r3, #36	@ 0x24
 800350a:	4618      	mov	r0, r3
 800350c:	f000 ff16 	bl	800433c <xTaskRemoveFromEventList>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00e      	beq.n	8003534 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	e007      	b.n	8003534 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003524:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003528:	3301      	adds	r3, #1
 800352a:	b2db      	uxtb	r3, r3
 800352c:	b25a      	sxtb	r2, r3
 800352e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003534:	2301      	movs	r3, #1
 8003536:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003538:	e001      	b.n	800353e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800353a:	2300      	movs	r3, #0
 800353c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003548:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800354a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800354c:	4618      	mov	r0, r3
 800354e:	3740      	adds	r7, #64	@ 0x40
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08c      	sub	sp, #48	@ 0x30
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003560:	2300      	movs	r3, #0
 8003562:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10b      	bne.n	8003586 <xQueueReceive+0x32>
	__asm volatile
 800356e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003572:	f383 8811 	msr	BASEPRI, r3
 8003576:	f3bf 8f6f 	isb	sy
 800357a:	f3bf 8f4f 	dsb	sy
 800357e:	623b      	str	r3, [r7, #32]
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	e7fd      	b.n	8003582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d103      	bne.n	8003594 <xQueueReceive+0x40>
 800358c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <xQueueReceive+0x44>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <xQueueReceive+0x46>
 8003598:	2300      	movs	r3, #0
 800359a:	2b00      	cmp	r3, #0
 800359c:	d10b      	bne.n	80035b6 <xQueueReceive+0x62>
	__asm volatile
 800359e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a2:	f383 8811 	msr	BASEPRI, r3
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	f3bf 8f4f 	dsb	sy
 80035ae:	61fb      	str	r3, [r7, #28]
}
 80035b0:	bf00      	nop
 80035b2:	bf00      	nop
 80035b4:	e7fd      	b.n	80035b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035b6:	f001 f887 	bl	80046c8 <xTaskGetSchedulerState>
 80035ba:	4603      	mov	r3, r0
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d102      	bne.n	80035c6 <xQueueReceive+0x72>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <xQueueReceive+0x76>
 80035c6:	2301      	movs	r3, #1
 80035c8:	e000      	b.n	80035cc <xQueueReceive+0x78>
 80035ca:	2300      	movs	r3, #0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <xQueueReceive+0x94>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61bb      	str	r3, [r7, #24]
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	e7fd      	b.n	80035e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80035e8:	f001 fec6 	bl	8005378 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d01f      	beq.n	8003638 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80035fc:	f000 f8f6 	bl	80037ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003602:	1e5a      	subs	r2, r3, #1
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00f      	beq.n	8003630 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	3310      	adds	r3, #16
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fe91 	bl	800433c <xTaskRemoveFromEventList>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d007      	beq.n	8003630 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003620:	4b3c      	ldr	r3, [pc, #240]	@ (8003714 <xQueueReceive+0x1c0>)
 8003622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	f3bf 8f4f 	dsb	sy
 800362c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003630:	f001 fed4 	bl	80053dc <vPortExitCritical>
				return pdPASS;
 8003634:	2301      	movs	r3, #1
 8003636:	e069      	b.n	800370c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d103      	bne.n	8003646 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800363e:	f001 fecd 	bl	80053dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003642:	2300      	movs	r3, #0
 8003644:	e062      	b.n	800370c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003648:	2b00      	cmp	r3, #0
 800364a:	d106      	bne.n	800365a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800364c:	f107 0310 	add.w	r3, r7, #16
 8003650:	4618      	mov	r0, r3
 8003652:	f000 fed7 	bl	8004404 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003656:	2301      	movs	r3, #1
 8003658:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800365a:	f001 febf 	bl	80053dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800365e:	f000 fc2d 	bl	8003ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003662:	f001 fe89 	bl	8005378 <vPortEnterCritical>
 8003666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003668:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800366c:	b25b      	sxtb	r3, r3
 800366e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003672:	d103      	bne.n	800367c <xQueueReceive+0x128>
 8003674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800367c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800367e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003682:	b25b      	sxtb	r3, r3
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d103      	bne.n	8003692 <xQueueReceive+0x13e>
 800368a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368c:	2200      	movs	r2, #0
 800368e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003692:	f001 fea3 	bl	80053dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003696:	1d3a      	adds	r2, r7, #4
 8003698:	f107 0310 	add.w	r3, r7, #16
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fec6 	bl	8004430 <xTaskCheckForTimeOut>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d123      	bne.n	80036f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036ac:	f000 f916 	bl	80038dc <prvIsQueueEmpty>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d017      	beq.n	80036e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b8:	3324      	adds	r3, #36	@ 0x24
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4611      	mov	r1, r2
 80036be:	4618      	mov	r0, r3
 80036c0:	f000 fdea 	bl	8004298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c6:	f000 f8b7 	bl	8003838 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036ca:	f000 fc05 	bl	8003ed8 <xTaskResumeAll>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d189      	bne.n	80035e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80036d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003714 <xQueueReceive+0x1c0>)
 80036d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	e780      	b.n	80035e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80036e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036e8:	f000 f8a6 	bl	8003838 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80036ec:	f000 fbf4 	bl	8003ed8 <xTaskResumeAll>
 80036f0:	e77a      	b.n	80035e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80036f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036f4:	f000 f8a0 	bl	8003838 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036f8:	f000 fbee 	bl	8003ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036fe:	f000 f8ed 	bl	80038dc <prvIsQueueEmpty>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	f43f af6f 	beq.w	80035e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800370a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800370c:	4618      	mov	r0, r3
 800370e:	3730      	adds	r7, #48	@ 0x30
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	e000ed04 	.word	0xe000ed04

08003718 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b086      	sub	sp, #24
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003724:	2300      	movs	r3, #0
 8003726:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d14d      	bne.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	4618      	mov	r0, r3
 8003744:	f000 ffde 	bl	8004704 <xTaskPriorityDisinherit>
 8003748:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e043      	b.n	80037da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d119      	bne.n	800378c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6858      	ldr	r0, [r3, #4]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	461a      	mov	r2, r3
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	f002 f9dc 	bl	8005b20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	441a      	add	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	429a      	cmp	r2, r3
 8003780:	d32b      	bcc.n	80037da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	e026      	b.n	80037da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	68d8      	ldr	r0, [r3, #12]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	461a      	mov	r2, r3
 8003796:	68b9      	ldr	r1, [r7, #8]
 8003798:	f002 f9c2 	bl	8005b20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68da      	ldr	r2, [r3, #12]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	425b      	negs	r3, r3
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d207      	bcs.n	80037c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	425b      	negs	r3, r3
 80037c2:	441a      	add	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d105      	bne.n	80037da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80037e2:	697b      	ldr	r3, [r7, #20]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d018      	beq.n	8003830 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68da      	ldr	r2, [r3, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003806:	441a      	add	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	429a      	cmp	r2, r3
 8003816:	d303      	bcc.n	8003820 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68d9      	ldr	r1, [r3, #12]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	461a      	mov	r2, r3
 800382a:	6838      	ldr	r0, [r7, #0]
 800382c:	f002 f978 	bl	8005b20 <memcpy>
	}
}
 8003830:	bf00      	nop
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003840:	f001 fd9a 	bl	8005378 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800384a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800384c:	e011      	b.n	8003872 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3324      	adds	r3, #36	@ 0x24
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fd6e 	bl	800433c <xTaskRemoveFromEventList>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003866:	f000 fe47 	bl	80044f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800386a:	7bfb      	ldrb	r3, [r7, #15]
 800386c:	3b01      	subs	r3, #1
 800386e:	b2db      	uxtb	r3, r3
 8003870:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003876:	2b00      	cmp	r3, #0
 8003878:	dce9      	bgt.n	800384e <prvUnlockQueue+0x16>
 800387a:	e000      	b.n	800387e <prvUnlockQueue+0x46>
					break;
 800387c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	22ff      	movs	r2, #255	@ 0xff
 8003882:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003886:	f001 fda9 	bl	80053dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800388a:	f001 fd75 	bl	8005378 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003894:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003896:	e011      	b.n	80038bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d012      	beq.n	80038c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3310      	adds	r3, #16
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 fd49 	bl	800433c <xTaskRemoveFromEventList>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038b0:	f000 fe22 	bl	80044f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038b4:	7bbb      	ldrb	r3, [r7, #14]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	dce9      	bgt.n	8003898 <prvUnlockQueue+0x60>
 80038c4:	e000      	b.n	80038c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	22ff      	movs	r2, #255	@ 0xff
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80038d0:	f001 fd84 	bl	80053dc <vPortExitCritical>
}
 80038d4:	bf00      	nop
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038e4:	f001 fd48 	bl	8005378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d102      	bne.n	80038f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038f0:	2301      	movs	r3, #1
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	e001      	b.n	80038fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038f6:	2300      	movs	r3, #0
 80038f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038fa:	f001 fd6f 	bl	80053dc <vPortExitCritical>

	return xReturn;
 80038fe:	68fb      	ldr	r3, [r7, #12]
}
 8003900:	4618      	mov	r0, r3
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003910:	f001 fd32 	bl	8005378 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391c:	429a      	cmp	r2, r3
 800391e:	d102      	bne.n	8003926 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003920:	2301      	movs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800392a:	f001 fd57 	bl	80053dc <vPortExitCritical>

	return xReturn;
 800392e:	68fb      	ldr	r3, [r7, #12]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003942:	2300      	movs	r3, #0
 8003944:	60fb      	str	r3, [r7, #12]
 8003946:	e014      	b.n	8003972 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003948:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <vQueueAddToRegistry+0x50>)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003954:	490c      	ldr	r1, [pc, #48]	@ (8003988 <vQueueAddToRegistry+0x50>)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800395e:	4a0a      	ldr	r2, [pc, #40]	@ (8003988 <vQueueAddToRegistry+0x50>)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800396a:	e006      	b.n	800397a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2b07      	cmp	r3, #7
 8003976:	d9e7      	bls.n	8003948 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003978:	bf00      	nop
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	200008e4 	.word	0x200008e4

0800398c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800399c:	f001 fcec 	bl	8005378 <vPortEnterCritical>
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ac:	d103      	bne.n	80039b6 <vQueueWaitForMessageRestricted+0x2a>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c2:	d103      	bne.n	80039cc <vQueueWaitForMessageRestricted+0x40>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039cc:	f001 fd06 	bl	80053dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d106      	bne.n	80039e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	3324      	adds	r3, #36	@ 0x24
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	68b9      	ldr	r1, [r7, #8]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 fc7f 	bl	80042e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff26 	bl	8003838 <prvUnlockQueue>
	}
 80039ec:	bf00      	nop
 80039ee:	3718      	adds	r7, #24
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08e      	sub	sp, #56	@ 0x38
 80039f8:	af04      	add	r7, sp, #16
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d10b      	bne.n	8003a20 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	623b      	str	r3, [r7, #32]
}
 8003a1a:	bf00      	nop
 8003a1c:	bf00      	nop
 8003a1e:	e7fd      	b.n	8003a1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10b      	bne.n	8003a3e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	61fb      	str	r3, [r7, #28]
}
 8003a38:	bf00      	nop
 8003a3a:	bf00      	nop
 8003a3c:	e7fd      	b.n	8003a3a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a3e:	23a8      	movs	r3, #168	@ 0xa8
 8003a40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	2ba8      	cmp	r3, #168	@ 0xa8
 8003a46:	d00b      	beq.n	8003a60 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	61bb      	str	r3, [r7, #24]
}
 8003a5a:	bf00      	nop
 8003a5c:	bf00      	nop
 8003a5e:	e7fd      	b.n	8003a5c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003a60:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d01e      	beq.n	8003aa6 <xTaskCreateStatic+0xb2>
 8003a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01b      	beq.n	8003aa6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a70:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a74:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a76:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a80:	2300      	movs	r3, #0
 8003a82:	9303      	str	r3, [sp, #12]
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	9302      	str	r3, [sp, #8]
 8003a88:	f107 0314 	add.w	r3, r7, #20
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	68b9      	ldr	r1, [r7, #8]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f851 	bl	8003b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003aa0:	f000 f8f6 	bl	8003c90 <prvAddNewTaskToReadyList>
 8003aa4:	e001      	b.n	8003aaa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003aaa:	697b      	ldr	r3, [r7, #20]
	}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08c      	sub	sp, #48	@ 0x30
 8003ab8:	af04      	add	r7, sp, #16
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003ac4:	88fb      	ldrh	r3, [r7, #6]
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f001 fd77 	bl	80055bc <pvPortMalloc>
 8003ace:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00e      	beq.n	8003af4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003ad6:	20a8      	movs	r0, #168	@ 0xa8
 8003ad8:	f001 fd70 	bl	80055bc <pvPortMalloc>
 8003adc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	631a      	str	r2, [r3, #48]	@ 0x30
 8003aea:	e005      	b.n	8003af8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003aec:	6978      	ldr	r0, [r7, #20]
 8003aee:	f001 fe33 	bl	8005758 <vPortFree>
 8003af2:	e001      	b.n	8003af8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d017      	beq.n	8003b2e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9303      	str	r3, [sp, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	9302      	str	r3, [sp, #8]
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	9301      	str	r3, [sp, #4]
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 f80f 	bl	8003b40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b22:	69f8      	ldr	r0, [r7, #28]
 8003b24:	f000 f8b4 	bl	8003c90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e002      	b.n	8003b34 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b32:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b34:	69bb      	ldr	r3, [r7, #24]
	}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3720      	adds	r7, #32
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	461a      	mov	r2, r3
 8003b58:	21a5      	movs	r1, #165	@ 0xa5
 8003b5a:	f001 ff57 	bl	8005a0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f023 0307 	bic.w	r3, r3, #7
 8003b76:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00b      	beq.n	8003b9a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	617b      	str	r3, [r7, #20]
}
 8003b94:	bf00      	nop
 8003b96:	bf00      	nop
 8003b98:	e7fd      	b.n	8003b96 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01f      	beq.n	8003be0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e012      	b.n	8003bcc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	7819      	ldrb	r1, [r3, #0]
 8003bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	3334      	adds	r3, #52	@ 0x34
 8003bb6:	460a      	mov	r2, r1
 8003bb8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	61fb      	str	r3, [r7, #28]
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b0f      	cmp	r3, #15
 8003bd0:	d9e9      	bls.n	8003ba6 <prvInitialiseNewTask+0x66>
 8003bd2:	e000      	b.n	8003bd6 <prvInitialiseNewTask+0x96>
			{
				break;
 8003bd4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003bde:	e003      	b.n	8003be8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bea:	2b37      	cmp	r3, #55	@ 0x37
 8003bec:	d901      	bls.n	8003bf2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003bee:	2337      	movs	r3, #55	@ 0x37
 8003bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bf6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c00:	2200      	movs	r2, #0
 8003c02:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c06:	3304      	adds	r3, #4
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff f965 	bl	8002ed8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	3318      	adds	r3, #24
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7ff f960 	bl	8002ed8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c20:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c2c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	2200      	movs	r2, #0
 8003c32:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c40:	3354      	adds	r3, #84	@ 0x54
 8003c42:	224c      	movs	r2, #76	@ 0x4c
 8003c44:	2100      	movs	r1, #0
 8003c46:	4618      	mov	r0, r3
 8003c48:	f001 fee0 	bl	8005a0c <memset>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c84 <prvInitialiseNewTask+0x144>)
 8003c50:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	4a0c      	ldr	r2, [pc, #48]	@ (8003c88 <prvInitialiseNewTask+0x148>)
 8003c56:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8003c8c <prvInitialiseNewTask+0x14c>)
 8003c5c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	68f9      	ldr	r1, [r7, #12]
 8003c62:	69b8      	ldr	r0, [r7, #24]
 8003c64:	f001 fa56 	bl	8005114 <pxPortInitialiseStack>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c7a:	bf00      	nop
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20004b78 	.word	0x20004b78
 8003c88:	20004be0 	.word	0x20004be0
 8003c8c:	20004c48 	.word	0x20004c48

08003c90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003c98:	f001 fb6e 	bl	8005378 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003ca4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cae:	4a2a      	ldr	r2, [pc, #168]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <prvAddNewTaskToReadyList+0xc4>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d110      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003cbc:	f000 fc40 	bl	8004540 <prvInitialiseTaskLists>
 8003cc0:	e00d      	b.n	8003cde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cc2:	4b26      	ldr	r3, [pc, #152]	@ (8003d5c <prvAddNewTaskToReadyList+0xcc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cca:	4b23      	ldr	r3, [pc, #140]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d802      	bhi.n	8003cde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003ce6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d60 <prvAddNewTaskToReadyList+0xd0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d64 <prvAddNewTaskToReadyList+0xd4>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d903      	bls.n	8003d04 <prvAddNewTaskToReadyList+0x74>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d00:	4a18      	ldr	r2, [pc, #96]	@ (8003d64 <prvAddNewTaskToReadyList+0xd4>)
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d08:	4613      	mov	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4413      	add	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4a15      	ldr	r2, [pc, #84]	@ (8003d68 <prvAddNewTaskToReadyList+0xd8>)
 8003d12:	441a      	add	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3304      	adds	r3, #4
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	f7ff f8e9 	bl	8002ef2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d20:	f001 fb5c 	bl	80053dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d24:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <prvAddNewTaskToReadyList+0xcc>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <prvAddNewTaskToReadyList+0xc8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d207      	bcs.n	8003d4a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <prvAddNewTaskToReadyList+0xdc>)
 8003d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	f3bf 8f4f 	dsb	sy
 8003d46:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	20000df8 	.word	0x20000df8
 8003d58:	20000924 	.word	0x20000924
 8003d5c:	20000e04 	.word	0x20000e04
 8003d60:	20000e14 	.word	0x20000e14
 8003d64:	20000e00 	.word	0x20000e00
 8003d68:	20000928 	.word	0x20000928
 8003d6c:	e000ed04 	.word	0xe000ed04

08003d70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d018      	beq.n	8003db4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d82:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <vTaskDelay+0x64>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00b      	beq.n	8003da2 <vTaskDelay+0x32>
	__asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	60bb      	str	r3, [r7, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	bf00      	nop
 8003da0:	e7fd      	b.n	8003d9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003da2:	f000 f88b 	bl	8003ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003da6:	2100      	movs	r1, #0
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fd1b 	bl	80047e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dae:	f000 f893 	bl	8003ed8 <xTaskResumeAll>
 8003db2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d107      	bne.n	8003dca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003dba:	4b07      	ldr	r3, [pc, #28]	@ (8003dd8 <vTaskDelay+0x68>)
 8003dbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000e20 	.word	0x20000e20
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08a      	sub	sp, #40	@ 0x28
 8003de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003dea:	463a      	mov	r2, r7
 8003dec:	1d39      	adds	r1, r7, #4
 8003dee:	f107 0308 	add.w	r3, r7, #8
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7ff f81c 	bl	8002e30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	9202      	str	r2, [sp, #8]
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	2300      	movs	r3, #0
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	2300      	movs	r3, #0
 8003e08:	460a      	mov	r2, r1
 8003e0a:	4924      	ldr	r1, [pc, #144]	@ (8003e9c <vTaskStartScheduler+0xc0>)
 8003e0c:	4824      	ldr	r0, [pc, #144]	@ (8003ea0 <vTaskStartScheduler+0xc4>)
 8003e0e:	f7ff fdf1 	bl	80039f4 <xTaskCreateStatic>
 8003e12:	4603      	mov	r3, r0
 8003e14:	4a23      	ldr	r2, [pc, #140]	@ (8003ea4 <vTaskStartScheduler+0xc8>)
 8003e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e18:	4b22      	ldr	r3, [pc, #136]	@ (8003ea4 <vTaskStartScheduler+0xc8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e20:	2301      	movs	r3, #1
 8003e22:	617b      	str	r3, [r7, #20]
 8003e24:	e001      	b.n	8003e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	d102      	bne.n	8003e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e30:	f000 fd2c 	bl	800488c <xTimerCreateTimerTask>
 8003e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d11b      	bne.n	8003e74 <vTaskStartScheduler+0x98>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	613b      	str	r3, [r7, #16]
}
 8003e4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003e50:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <vTaskStartScheduler+0xcc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3354      	adds	r3, #84	@ 0x54
 8003e56:	4a15      	ldr	r2, [pc, #84]	@ (8003eac <vTaskStartScheduler+0xd0>)
 8003e58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e5a:	4b15      	ldr	r3, [pc, #84]	@ (8003eb0 <vTaskStartScheduler+0xd4>)
 8003e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e62:	4b14      	ldr	r3, [pc, #80]	@ (8003eb4 <vTaskStartScheduler+0xd8>)
 8003e64:	2201      	movs	r2, #1
 8003e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003e68:	4b13      	ldr	r3, [pc, #76]	@ (8003eb8 <vTaskStartScheduler+0xdc>)
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e6e:	f001 f9df 	bl	8005230 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e72:	e00f      	b.n	8003e94 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7a:	d10b      	bne.n	8003e94 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <vTaskStartScheduler+0xb4>
}
 8003e94:	bf00      	nop
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	0800661c 	.word	0x0800661c
 8003ea0:	08004511 	.word	0x08004511
 8003ea4:	20000e1c 	.word	0x20000e1c
 8003ea8:	20000924 	.word	0x20000924
 8003eac:	20000014 	.word	0x20000014
 8003eb0:	20000e18 	.word	0x20000e18
 8003eb4:	20000e04 	.word	0x20000e04
 8003eb8:	20000dfc 	.word	0x20000dfc

08003ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ec0:	4b04      	ldr	r3, [pc, #16]	@ (8003ed4 <vTaskSuspendAll+0x18>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	4a03      	ldr	r2, [pc, #12]	@ (8003ed4 <vTaskSuspendAll+0x18>)
 8003ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003eca:	bf00      	nop
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	20000e20 	.word	0x20000e20

08003ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ee6:	4b42      	ldr	r3, [pc, #264]	@ (8003ff0 <xTaskResumeAll+0x118>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <xTaskResumeAll+0x2e>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	603b      	str	r3, [r7, #0]
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003f06:	f001 fa37 	bl	8005378 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f0a:	4b39      	ldr	r3, [pc, #228]	@ (8003ff0 <xTaskResumeAll+0x118>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	4a37      	ldr	r2, [pc, #220]	@ (8003ff0 <xTaskResumeAll+0x118>)
 8003f12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f14:	4b36      	ldr	r3, [pc, #216]	@ (8003ff0 <xTaskResumeAll+0x118>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d162      	bne.n	8003fe2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f1c:	4b35      	ldr	r3, [pc, #212]	@ (8003ff4 <xTaskResumeAll+0x11c>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d05e      	beq.n	8003fe2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f24:	e02f      	b.n	8003f86 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f26:	4b34      	ldr	r3, [pc, #208]	@ (8003ff8 <xTaskResumeAll+0x120>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3318      	adds	r3, #24
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f83a 	bl	8002fac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff f835 	bl	8002fac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f46:	4b2d      	ldr	r3, [pc, #180]	@ (8003ffc <xTaskResumeAll+0x124>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d903      	bls.n	8003f56 <xTaskResumeAll+0x7e>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f52:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <xTaskResumeAll+0x124>)
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	4a27      	ldr	r2, [pc, #156]	@ (8004000 <xTaskResumeAll+0x128>)
 8003f64:	441a      	add	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	3304      	adds	r3, #4
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	f7fe ffc0 	bl	8002ef2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f76:	4b23      	ldr	r3, [pc, #140]	@ (8004004 <xTaskResumeAll+0x12c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d302      	bcc.n	8003f86 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003f80:	4b21      	ldr	r3, [pc, #132]	@ (8004008 <xTaskResumeAll+0x130>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f86:	4b1c      	ldr	r3, [pc, #112]	@ (8003ff8 <xTaskResumeAll+0x120>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1cb      	bne.n	8003f26 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f94:	f000 fb78 	bl	8004688 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003f98:	4b1c      	ldr	r3, [pc, #112]	@ (800400c <xTaskResumeAll+0x134>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003fa4:	f000 f858 	bl	8004058 <xTaskIncrementTick>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003fae:	4b16      	ldr	r3, [pc, #88]	@ (8004008 <xTaskResumeAll+0x130>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3b01      	subs	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f1      	bne.n	8003fa4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	@ (800400c <xTaskResumeAll+0x134>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fc6:	4b10      	ldr	r3, [pc, #64]	@ (8004008 <xTaskResumeAll+0x130>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d009      	beq.n	8003fe2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <xTaskResumeAll+0x138>)
 8003fd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f3bf 8f4f 	dsb	sy
 8003fde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fe2:	f001 f9fb 	bl	80053dc <vPortExitCritical>

	return xAlreadyYielded;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	20000e20 	.word	0x20000e20
 8003ff4:	20000df8 	.word	0x20000df8
 8003ff8:	20000db8 	.word	0x20000db8
 8003ffc:	20000e00 	.word	0x20000e00
 8004000:	20000928 	.word	0x20000928
 8004004:	20000924 	.word	0x20000924
 8004008:	20000e0c 	.word	0x20000e0c
 800400c:	20000e08 	.word	0x20000e08
 8004010:	e000ed04 	.word	0xe000ed04

08004014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800401a:	4b05      	ldr	r3, [pc, #20]	@ (8004030 <xTaskGetTickCount+0x1c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004020:	687b      	ldr	r3, [r7, #4]
}
 8004022:	4618      	mov	r0, r3
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	20000dfc 	.word	0x20000dfc

08004034 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800403a:	f001 fa7d 	bl	8005538 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800403e:	2300      	movs	r3, #0
 8004040:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004042:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <xTaskGetTickCountFromISR+0x20>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004048:	683b      	ldr	r3, [r7, #0]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000dfc 	.word	0x20000dfc

08004058 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b086      	sub	sp, #24
 800405c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004062:	4b4f      	ldr	r3, [pc, #316]	@ (80041a0 <xTaskIncrementTick+0x148>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2b00      	cmp	r3, #0
 8004068:	f040 8090 	bne.w	800418c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800406c:	4b4d      	ldr	r3, [pc, #308]	@ (80041a4 <xTaskIncrementTick+0x14c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3301      	adds	r3, #1
 8004072:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004074:	4a4b      	ldr	r2, [pc, #300]	@ (80041a4 <xTaskIncrementTick+0x14c>)
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d121      	bne.n	80040c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004080:	4b49      	ldr	r3, [pc, #292]	@ (80041a8 <xTaskIncrementTick+0x150>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00b      	beq.n	80040a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800408a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800408e:	f383 8811 	msr	BASEPRI, r3
 8004092:	f3bf 8f6f 	isb	sy
 8004096:	f3bf 8f4f 	dsb	sy
 800409a:	603b      	str	r3, [r7, #0]
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	e7fd      	b.n	800409e <xTaskIncrementTick+0x46>
 80040a2:	4b41      	ldr	r3, [pc, #260]	@ (80041a8 <xTaskIncrementTick+0x150>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	4b40      	ldr	r3, [pc, #256]	@ (80041ac <xTaskIncrementTick+0x154>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a3e      	ldr	r2, [pc, #248]	@ (80041a8 <xTaskIncrementTick+0x150>)
 80040ae:	6013      	str	r3, [r2, #0]
 80040b0:	4a3e      	ldr	r2, [pc, #248]	@ (80041ac <xTaskIncrementTick+0x154>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	4b3e      	ldr	r3, [pc, #248]	@ (80041b0 <xTaskIncrementTick+0x158>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3301      	adds	r3, #1
 80040bc:	4a3c      	ldr	r2, [pc, #240]	@ (80041b0 <xTaskIncrementTick+0x158>)
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	f000 fae2 	bl	8004688 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <xTaskIncrementTick+0x15c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d349      	bcc.n	8004162 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040ce:	4b36      	ldr	r3, [pc, #216]	@ (80041a8 <xTaskIncrementTick+0x150>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d104      	bne.n	80040e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040d8:	4b36      	ldr	r3, [pc, #216]	@ (80041b4 <xTaskIncrementTick+0x15c>)
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	601a      	str	r2, [r3, #0]
					break;
 80040e0:	e03f      	b.n	8004162 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040e2:	4b31      	ldr	r3, [pc, #196]	@ (80041a8 <xTaskIncrementTick+0x150>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	429a      	cmp	r2, r3
 80040f8:	d203      	bcs.n	8004102 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040fa:	4a2e      	ldr	r2, [pc, #184]	@ (80041b4 <xTaskIncrementTick+0x15c>)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004100:	e02f      	b.n	8004162 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3304      	adds	r3, #4
 8004106:	4618      	mov	r0, r3
 8004108:	f7fe ff50 	bl	8002fac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	3318      	adds	r3, #24
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe ff47 	bl	8002fac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004122:	4b25      	ldr	r3, [pc, #148]	@ (80041b8 <xTaskIncrementTick+0x160>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d903      	bls.n	8004132 <xTaskIncrementTick+0xda>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	4a22      	ldr	r2, [pc, #136]	@ (80041b8 <xTaskIncrementTick+0x160>)
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a1f      	ldr	r2, [pc, #124]	@ (80041bc <xTaskIncrementTick+0x164>)
 8004140:	441a      	add	r2, r3
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	3304      	adds	r3, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4610      	mov	r0, r2
 800414a:	f7fe fed2 	bl	8002ef2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004152:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <xTaskIncrementTick+0x168>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	429a      	cmp	r2, r3
 800415a:	d3b8      	bcc.n	80040ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800415c:	2301      	movs	r3, #1
 800415e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004160:	e7b5      	b.n	80040ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004162:	4b17      	ldr	r3, [pc, #92]	@ (80041c0 <xTaskIncrementTick+0x168>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004168:	4914      	ldr	r1, [pc, #80]	@ (80041bc <xTaskIncrementTick+0x164>)
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b01      	cmp	r3, #1
 8004178:	d901      	bls.n	800417e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800417a:	2301      	movs	r3, #1
 800417c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800417e:	4b11      	ldr	r3, [pc, #68]	@ (80041c4 <xTaskIncrementTick+0x16c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e004      	b.n	8004196 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800418c:	4b0e      	ldr	r3, [pc, #56]	@ (80041c8 <xTaskIncrementTick+0x170>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	3301      	adds	r3, #1
 8004192:	4a0d      	ldr	r2, [pc, #52]	@ (80041c8 <xTaskIncrementTick+0x170>)
 8004194:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004196:	697b      	ldr	r3, [r7, #20]
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	20000e20 	.word	0x20000e20
 80041a4:	20000dfc 	.word	0x20000dfc
 80041a8:	20000db0 	.word	0x20000db0
 80041ac:	20000db4 	.word	0x20000db4
 80041b0:	20000e10 	.word	0x20000e10
 80041b4:	20000e18 	.word	0x20000e18
 80041b8:	20000e00 	.word	0x20000e00
 80041bc:	20000928 	.word	0x20000928
 80041c0:	20000924 	.word	0x20000924
 80041c4:	20000e0c 	.word	0x20000e0c
 80041c8:	20000e08 	.word	0x20000e08

080041cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004280 <vTaskSwitchContext+0xb4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d003      	beq.n	80041e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041da:	4b2a      	ldr	r3, [pc, #168]	@ (8004284 <vTaskSwitchContext+0xb8>)
 80041dc:	2201      	movs	r2, #1
 80041de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041e0:	e047      	b.n	8004272 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80041e2:	4b28      	ldr	r3, [pc, #160]	@ (8004284 <vTaskSwitchContext+0xb8>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e8:	4b27      	ldr	r3, [pc, #156]	@ (8004288 <vTaskSwitchContext+0xbc>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]
 80041ee:	e011      	b.n	8004214 <vTaskSwitchContext+0x48>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10b      	bne.n	800420e <vTaskSwitchContext+0x42>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	607b      	str	r3, [r7, #4]
}
 8004208:	bf00      	nop
 800420a:	bf00      	nop
 800420c:	e7fd      	b.n	800420a <vTaskSwitchContext+0x3e>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	3b01      	subs	r3, #1
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	491d      	ldr	r1, [pc, #116]	@ (800428c <vTaskSwitchContext+0xc0>)
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0e3      	beq.n	80041f0 <vTaskSwitchContext+0x24>
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4a16      	ldr	r2, [pc, #88]	@ (800428c <vTaskSwitchContext+0xc0>)
 8004234:	4413      	add	r3, r2
 8004236:	60bb      	str	r3, [r7, #8]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3308      	adds	r3, #8
 800424a:	429a      	cmp	r2, r3
 800424c:	d104      	bne.n	8004258 <vTaskSwitchContext+0x8c>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	605a      	str	r2, [r3, #4]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4a0c      	ldr	r2, [pc, #48]	@ (8004290 <vTaskSwitchContext+0xc4>)
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	4a09      	ldr	r2, [pc, #36]	@ (8004288 <vTaskSwitchContext+0xbc>)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004268:	4b09      	ldr	r3, [pc, #36]	@ (8004290 <vTaskSwitchContext+0xc4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3354      	adds	r3, #84	@ 0x54
 800426e:	4a09      	ldr	r2, [pc, #36]	@ (8004294 <vTaskSwitchContext+0xc8>)
 8004270:	6013      	str	r3, [r2, #0]
}
 8004272:	bf00      	nop
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000e20 	.word	0x20000e20
 8004284:	20000e0c 	.word	0x20000e0c
 8004288:	20000e00 	.word	0x20000e00
 800428c:	20000928 	.word	0x20000928
 8004290:	20000924 	.word	0x20000924
 8004294:	20000014 	.word	0x20000014

08004298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10b      	bne.n	80042c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	bf00      	nop
 80042be:	e7fd      	b.n	80042bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042c0:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <vTaskPlaceOnEventList+0x48>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3318      	adds	r3, #24
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f7fe fe36 	bl	8002f3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80042ce:	2101      	movs	r1, #1
 80042d0:	6838      	ldr	r0, [r7, #0]
 80042d2:	f000 fa87 	bl	80047e4 <prvAddCurrentTaskToDelayedList>
}
 80042d6:	bf00      	nop
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000924 	.word	0x20000924

080042e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	617b      	str	r3, [r7, #20]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800430e:	4b0a      	ldr	r3, [pc, #40]	@ (8004338 <vTaskPlaceOnEventListRestricted+0x54>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3318      	adds	r3, #24
 8004314:	4619      	mov	r1, r3
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f7fe fdeb 	bl	8002ef2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004322:	f04f 33ff 	mov.w	r3, #4294967295
 8004326:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	68b8      	ldr	r0, [r7, #8]
 800432c:	f000 fa5a 	bl	80047e4 <prvAddCurrentTaskToDelayedList>
	}
 8004330:	bf00      	nop
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20000924 	.word	0x20000924

0800433c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10b      	bne.n	800436a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	60fb      	str	r3, [r7, #12]
}
 8004364:	bf00      	nop
 8004366:	bf00      	nop
 8004368:	e7fd      	b.n	8004366 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	3318      	adds	r3, #24
 800436e:	4618      	mov	r0, r3
 8004370:	f7fe fe1c 	bl	8002fac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004374:	4b1d      	ldr	r3, [pc, #116]	@ (80043ec <xTaskRemoveFromEventList+0xb0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11d      	bne.n	80043b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	3304      	adds	r3, #4
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fe13 	bl	8002fac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438a:	4b19      	ldr	r3, [pc, #100]	@ (80043f0 <xTaskRemoveFromEventList+0xb4>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d903      	bls.n	800439a <xTaskRemoveFromEventList+0x5e>
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004396:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <xTaskRemoveFromEventList+0xb4>)
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4a13      	ldr	r2, [pc, #76]	@ (80043f4 <xTaskRemoveFromEventList+0xb8>)
 80043a8:	441a      	add	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	3304      	adds	r3, #4
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f7fe fd9e 	bl	8002ef2 <vListInsertEnd>
 80043b6:	e005      	b.n	80043c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	3318      	adds	r3, #24
 80043bc:	4619      	mov	r1, r3
 80043be:	480e      	ldr	r0, [pc, #56]	@ (80043f8 <xTaskRemoveFromEventList+0xbc>)
 80043c0:	f7fe fd97 	bl	8002ef2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c8:	4b0c      	ldr	r3, [pc, #48]	@ (80043fc <xTaskRemoveFromEventList+0xc0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d905      	bls.n	80043de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80043d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004400 <xTaskRemoveFromEventList+0xc4>)
 80043d8:	2201      	movs	r2, #1
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	e001      	b.n	80043e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80043e2:	697b      	ldr	r3, [r7, #20]
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000e20 	.word	0x20000e20
 80043f0:	20000e00 	.word	0x20000e00
 80043f4:	20000928 	.word	0x20000928
 80043f8:	20000db8 	.word	0x20000db8
 80043fc:	20000924 	.word	0x20000924
 8004400:	20000e0c 	.word	0x20000e0c

08004404 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <vTaskInternalSetTimeOutState+0x24>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004414:	4b05      	ldr	r3, [pc, #20]	@ (800442c <vTaskInternalSetTimeOutState+0x28>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	605a      	str	r2, [r3, #4]
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	20000e10 	.word	0x20000e10
 800442c:	20000dfc 	.word	0x20000dfc

08004430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b088      	sub	sp, #32
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10b      	bne.n	8004458 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	613b      	str	r3, [r7, #16]
}
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004462:	f383 8811 	msr	BASEPRI, r3
 8004466:	f3bf 8f6f 	isb	sy
 800446a:	f3bf 8f4f 	dsb	sy
 800446e:	60fb      	str	r3, [r7, #12]
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	e7fd      	b.n	8004472 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004476:	f000 ff7f 	bl	8005378 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800447a:	4b1d      	ldr	r3, [pc, #116]	@ (80044f0 <xTaskCheckForTimeOut+0xc0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004492:	d102      	bne.n	800449a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004494:	2300      	movs	r3, #0
 8004496:	61fb      	str	r3, [r7, #28]
 8004498:	e023      	b.n	80044e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b15      	ldr	r3, [pc, #84]	@ (80044f4 <xTaskCheckForTimeOut+0xc4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d007      	beq.n	80044b6 <xTaskCheckForTimeOut+0x86>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d302      	bcc.n	80044b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80044b0:	2301      	movs	r3, #1
 80044b2:	61fb      	str	r3, [r7, #28]
 80044b4:	e015      	b.n	80044e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d20b      	bcs.n	80044d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad2      	subs	r2, r2, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff99 	bl	8004404 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80044d2:	2300      	movs	r3, #0
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	e004      	b.n	80044e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2200      	movs	r2, #0
 80044dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80044e2:	f000 ff7b 	bl	80053dc <vPortExitCritical>

	return xReturn;
 80044e6:	69fb      	ldr	r3, [r7, #28]
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	20000dfc 	.word	0x20000dfc
 80044f4:	20000e10 	.word	0x20000e10

080044f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044fc:	4b03      	ldr	r3, [pc, #12]	@ (800450c <vTaskMissedYield+0x14>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	bf00      	nop
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr
 800450c:	20000e0c 	.word	0x20000e0c

08004510 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004518:	f000 f852 	bl	80045c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800451c:	4b06      	ldr	r3, [pc, #24]	@ (8004538 <prvIdleTask+0x28>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d9f9      	bls.n	8004518 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <prvIdleTask+0x2c>)
 8004526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004534:	e7f0      	b.n	8004518 <prvIdleTask+0x8>
 8004536:	bf00      	nop
 8004538:	20000928 	.word	0x20000928
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004546:	2300      	movs	r3, #0
 8004548:	607b      	str	r3, [r7, #4]
 800454a:	e00c      	b.n	8004566 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	4613      	mov	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4413      	add	r3, r2
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	4a12      	ldr	r2, [pc, #72]	@ (80045a0 <prvInitialiseTaskLists+0x60>)
 8004558:	4413      	add	r3, r2
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fc9c 	bl	8002e98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	3301      	adds	r3, #1
 8004564:	607b      	str	r3, [r7, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b37      	cmp	r3, #55	@ 0x37
 800456a:	d9ef      	bls.n	800454c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800456c:	480d      	ldr	r0, [pc, #52]	@ (80045a4 <prvInitialiseTaskLists+0x64>)
 800456e:	f7fe fc93 	bl	8002e98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004572:	480d      	ldr	r0, [pc, #52]	@ (80045a8 <prvInitialiseTaskLists+0x68>)
 8004574:	f7fe fc90 	bl	8002e98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004578:	480c      	ldr	r0, [pc, #48]	@ (80045ac <prvInitialiseTaskLists+0x6c>)
 800457a:	f7fe fc8d 	bl	8002e98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800457e:	480c      	ldr	r0, [pc, #48]	@ (80045b0 <prvInitialiseTaskLists+0x70>)
 8004580:	f7fe fc8a 	bl	8002e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004584:	480b      	ldr	r0, [pc, #44]	@ (80045b4 <prvInitialiseTaskLists+0x74>)
 8004586:	f7fe fc87 	bl	8002e98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800458a:	4b0b      	ldr	r3, [pc, #44]	@ (80045b8 <prvInitialiseTaskLists+0x78>)
 800458c:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <prvInitialiseTaskLists+0x64>)
 800458e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004590:	4b0a      	ldr	r3, [pc, #40]	@ (80045bc <prvInitialiseTaskLists+0x7c>)
 8004592:	4a05      	ldr	r2, [pc, #20]	@ (80045a8 <prvInitialiseTaskLists+0x68>)
 8004594:	601a      	str	r2, [r3, #0]
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	20000928 	.word	0x20000928
 80045a4:	20000d88 	.word	0x20000d88
 80045a8:	20000d9c 	.word	0x20000d9c
 80045ac:	20000db8 	.word	0x20000db8
 80045b0:	20000dcc 	.word	0x20000dcc
 80045b4:	20000de4 	.word	0x20000de4
 80045b8:	20000db0 	.word	0x20000db0
 80045bc:	20000db4 	.word	0x20000db4

080045c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c6:	e019      	b.n	80045fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80045c8:	f000 fed6 	bl	8005378 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045cc:	4b10      	ldr	r3, [pc, #64]	@ (8004610 <prvCheckTasksWaitingTermination+0x50>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3304      	adds	r3, #4
 80045d8:	4618      	mov	r0, r3
 80045da:	f7fe fce7 	bl	8002fac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <prvCheckTasksWaitingTermination+0x54>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004614 <prvCheckTasksWaitingTermination+0x54>)
 80045e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	3b01      	subs	r3, #1
 80045ee:	4a0a      	ldr	r2, [pc, #40]	@ (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045f2:	f000 fef3 	bl	80053dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f810 	bl	800461c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045fc:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <prvCheckTasksWaitingTermination+0x58>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1e1      	bne.n	80045c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	20000dcc 	.word	0x20000dcc
 8004614:	20000df8 	.word	0x20000df8
 8004618:	20000de0 	.word	0x20000de0

0800461c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800461c:	b580      	push	{r7, lr}
 800461e:	b084      	sub	sp, #16
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	3354      	adds	r3, #84	@ 0x54
 8004628:	4618      	mov	r0, r3
 800462a:	f001 f9f7 	bl	8005a1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004634:	2b00      	cmp	r3, #0
 8004636:	d108      	bne.n	800464a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800463c:	4618      	mov	r0, r3
 800463e:	f001 f88b 	bl	8005758 <vPortFree>
				vPortFree( pxTCB );
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f001 f888 	bl	8005758 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004648:	e019      	b.n	800467e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004650:	2b01      	cmp	r3, #1
 8004652:	d103      	bne.n	800465c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 f87f 	bl	8005758 <vPortFree>
	}
 800465a:	e010      	b.n	800467e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004662:	2b02      	cmp	r3, #2
 8004664:	d00b      	beq.n	800467e <prvDeleteTCB+0x62>
	__asm volatile
 8004666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800466a:	f383 8811 	msr	BASEPRI, r3
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f3bf 8f4f 	dsb	sy
 8004676:	60fb      	str	r3, [r7, #12]
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop
 800467c:	e7fd      	b.n	800467a <prvDeleteTCB+0x5e>
	}
 800467e:	bf00      	nop
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800468e:	4b0c      	ldr	r3, [pc, #48]	@ (80046c0 <prvResetNextTaskUnblockTime+0x38>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d104      	bne.n	80046a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004698:	4b0a      	ldr	r3, [pc, #40]	@ (80046c4 <prvResetNextTaskUnblockTime+0x3c>)
 800469a:	f04f 32ff 	mov.w	r2, #4294967295
 800469e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80046a0:	e008      	b.n	80046b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046a2:	4b07      	ldr	r3, [pc, #28]	@ (80046c0 <prvResetNextTaskUnblockTime+0x38>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	4a04      	ldr	r2, [pc, #16]	@ (80046c4 <prvResetNextTaskUnblockTime+0x3c>)
 80046b2:	6013      	str	r3, [r2, #0]
}
 80046b4:	bf00      	nop
 80046b6:	370c      	adds	r7, #12
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	20000db0 	.word	0x20000db0
 80046c4:	20000e18 	.word	0x20000e18

080046c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046ce:	4b0b      	ldr	r3, [pc, #44]	@ (80046fc <xTaskGetSchedulerState+0x34>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d102      	bne.n	80046dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046d6:	2301      	movs	r3, #1
 80046d8:	607b      	str	r3, [r7, #4]
 80046da:	e008      	b.n	80046ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046dc:	4b08      	ldr	r3, [pc, #32]	@ (8004700 <xTaskGetSchedulerState+0x38>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046e4:	2302      	movs	r3, #2
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e001      	b.n	80046ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046ea:	2300      	movs	r3, #0
 80046ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046ee:	687b      	ldr	r3, [r7, #4]
	}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	20000e04 	.word	0x20000e04
 8004700:	20000e20 	.word	0x20000e20

08004704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004710:	2300      	movs	r3, #0
 8004712:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d058      	beq.n	80047cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800471a:	4b2f      	ldr	r3, [pc, #188]	@ (80047d8 <xTaskPriorityDisinherit+0xd4>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	429a      	cmp	r2, r3
 8004722:	d00b      	beq.n	800473c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60fb      	str	r3, [r7, #12]
}
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004748:	f383 8811 	msr	BASEPRI, r3
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	60bb      	str	r3, [r7, #8]
}
 8004756:	bf00      	nop
 8004758:	bf00      	nop
 800475a:	e7fd      	b.n	8004758 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004760:	1e5a      	subs	r2, r3, #1
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476e:	429a      	cmp	r2, r3
 8004770:	d02c      	beq.n	80047cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004776:	2b00      	cmp	r3, #0
 8004778:	d128      	bne.n	80047cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fc14 	bl	8002fac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004790:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479c:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <xTaskPriorityDisinherit+0xd8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d903      	bls.n	80047ac <xTaskPriorityDisinherit+0xa8>
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a8:	4a0c      	ldr	r2, [pc, #48]	@ (80047dc <xTaskPriorityDisinherit+0xd8>)
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b0:	4613      	mov	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	4a09      	ldr	r2, [pc, #36]	@ (80047e0 <xTaskPriorityDisinherit+0xdc>)
 80047ba:	441a      	add	r2, r3
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f7fe fb95 	bl	8002ef2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047cc:	697b      	ldr	r3, [r7, #20]
	}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20000924 	.word	0x20000924
 80047dc:	20000e00 	.word	0x20000e00
 80047e0:	20000928 	.word	0x20000928

080047e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047ee:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <prvAddCurrentTaskToDelayedList+0x90>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047f4:	4b20      	ldr	r3, [pc, #128]	@ (8004878 <prvAddCurrentTaskToDelayedList+0x94>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3304      	adds	r3, #4
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fe fbd6 	bl	8002fac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004806:	d10a      	bne.n	800481e <prvAddCurrentTaskToDelayedList+0x3a>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800480e:	4b1a      	ldr	r3, [pc, #104]	@ (8004878 <prvAddCurrentTaskToDelayedList+0x94>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4819      	ldr	r0, [pc, #100]	@ (800487c <prvAddCurrentTaskToDelayedList+0x98>)
 8004818:	f7fe fb6b 	bl	8002ef2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800481c:	e026      	b.n	800486c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4413      	add	r3, r2
 8004824:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004826:	4b14      	ldr	r3, [pc, #80]	@ (8004878 <prvAddCurrentTaskToDelayedList+0x94>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68ba      	ldr	r2, [r7, #8]
 800482c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	429a      	cmp	r2, r3
 8004834:	d209      	bcs.n	800484a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004836:	4b12      	ldr	r3, [pc, #72]	@ (8004880 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b0f      	ldr	r3, [pc, #60]	@ (8004878 <prvAddCurrentTaskToDelayedList+0x94>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe fb79 	bl	8002f3a <vListInsert>
}
 8004848:	e010      	b.n	800486c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800484a:	4b0e      	ldr	r3, [pc, #56]	@ (8004884 <prvAddCurrentTaskToDelayedList+0xa0>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b0a      	ldr	r3, [pc, #40]	@ (8004878 <prvAddCurrentTaskToDelayedList+0x94>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f7fe fb6f 	bl	8002f3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800485c:	4b0a      	ldr	r3, [pc, #40]	@ (8004888 <prvAddCurrentTaskToDelayedList+0xa4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	429a      	cmp	r2, r3
 8004864:	d202      	bcs.n	800486c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004866:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	6013      	str	r3, [r2, #0]
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000dfc 	.word	0x20000dfc
 8004878:	20000924 	.word	0x20000924
 800487c:	20000de4 	.word	0x20000de4
 8004880:	20000db4 	.word	0x20000db4
 8004884:	20000db0 	.word	0x20000db0
 8004888:	20000e18 	.word	0x20000e18

0800488c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b08a      	sub	sp, #40	@ 0x28
 8004890:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004892:	2300      	movs	r3, #0
 8004894:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004896:	f000 fbb1 	bl	8004ffc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800489a:	4b1d      	ldr	r3, [pc, #116]	@ (8004910 <xTimerCreateTimerTask+0x84>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d021      	beq.n	80048e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80048aa:	1d3a      	adds	r2, r7, #4
 80048ac:	f107 0108 	add.w	r1, r7, #8
 80048b0:	f107 030c 	add.w	r3, r7, #12
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fe fad5 	bl	8002e64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	9202      	str	r2, [sp, #8]
 80048c2:	9301      	str	r3, [sp, #4]
 80048c4:	2302      	movs	r3, #2
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	2300      	movs	r3, #0
 80048ca:	460a      	mov	r2, r1
 80048cc:	4911      	ldr	r1, [pc, #68]	@ (8004914 <xTimerCreateTimerTask+0x88>)
 80048ce:	4812      	ldr	r0, [pc, #72]	@ (8004918 <xTimerCreateTimerTask+0x8c>)
 80048d0:	f7ff f890 	bl	80039f4 <xTaskCreateStatic>
 80048d4:	4603      	mov	r3, r0
 80048d6:	4a11      	ldr	r2, [pc, #68]	@ (800491c <xTimerCreateTimerTask+0x90>)
 80048d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048da:	4b10      	ldr	r3, [pc, #64]	@ (800491c <xTimerCreateTimerTask+0x90>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048e2:	2301      	movs	r3, #1
 80048e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10b      	bne.n	8004904 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	613b      	str	r3, [r7, #16]
}
 80048fe:	bf00      	nop
 8004900:	bf00      	nop
 8004902:	e7fd      	b.n	8004900 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004904:	697b      	ldr	r3, [r7, #20]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	20000e54 	.word	0x20000e54
 8004914:	08006624 	.word	0x08006624
 8004918:	08004b95 	.word	0x08004b95
 800491c:	20000e58 	.word	0x20000e58

08004920 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af02      	add	r7, sp, #8
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800492e:	202c      	movs	r0, #44	@ 0x2c
 8004930:	f000 fe44 	bl	80055bc <pvPortMalloc>
 8004934:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f845 	bl	80049e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8004958:	697b      	ldr	r3, [r7, #20]
	}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8004962:	b580      	push	{r7, lr}
 8004964:	b08a      	sub	sp, #40	@ 0x28
 8004966:	af02      	add	r7, sp, #8
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
 800496e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8004970:	232c      	movs	r3, #44	@ 0x2c
 8004972:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b2c      	cmp	r3, #44	@ 0x2c
 8004978:	d00b      	beq.n	8004992 <xTimerCreateStatic+0x30>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	61bb      	str	r3, [r7, #24]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004992:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <xTimerCreateStatic+0x50>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	617b      	str	r3, [r7, #20]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80049b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049b4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00d      	beq.n	80049d8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80049bc:	69fb      	ldr	r3, [r7, #28]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	9301      	str	r3, [sp, #4]
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f000 f805 	bl	80049e2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80049d8:	69fb      	ldr	r3, [r7, #28]
	}
 80049da:	4618      	mov	r0, r3
 80049dc:	3720      	adds	r7, #32
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b086      	sub	sp, #24
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
 80049ea:	60b9      	str	r1, [r7, #8]
 80049ec:	607a      	str	r2, [r7, #4]
 80049ee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	617b      	str	r3, [r7, #20]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d01e      	beq.n	8004a52 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004a14:	f000 faf2 	bl	8004ffc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	6a3a      	ldr	r2, [r7, #32]
 8004a2e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a32:	3304      	adds	r3, #4
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe fa4f 	bl	8002ed8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a46:	f043 0304 	orr.w	r3, r3, #4
 8004a4a:	b2da      	uxtb	r2, r3
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b08a      	sub	sp, #40	@ 0x28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
 8004a68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <xTimerGenericCommand+0x30>
	__asm volatile
 8004a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a78:	f383 8811 	msr	BASEPRI, r3
 8004a7c:	f3bf 8f6f 	isb	sy
 8004a80:	f3bf 8f4f 	dsb	sy
 8004a84:	623b      	str	r3, [r7, #32]
}
 8004a86:	bf00      	nop
 8004a88:	bf00      	nop
 8004a8a:	e7fd      	b.n	8004a88 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a8c:	4b19      	ldr	r3, [pc, #100]	@ (8004af4 <xTimerGenericCommand+0x98>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02a      	beq.n	8004aea <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b05      	cmp	r3, #5
 8004aa4:	dc18      	bgt.n	8004ad8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004aa6:	f7ff fe0f 	bl	80046c8 <xTaskGetSchedulerState>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d109      	bne.n	8004ac4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ab0:	4b10      	ldr	r3, [pc, #64]	@ (8004af4 <xTimerGenericCommand+0x98>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	f107 0110 	add.w	r1, r7, #16
 8004ab8:	2300      	movs	r3, #0
 8004aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004abc:	f7fe fbaa 	bl	8003214 <xQueueGenericSend>
 8004ac0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ac2:	e012      	b.n	8004aea <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <xTimerGenericCommand+0x98>)
 8004ac6:	6818      	ldr	r0, [r3, #0]
 8004ac8:	f107 0110 	add.w	r1, r7, #16
 8004acc:	2300      	movs	r3, #0
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f7fe fba0 	bl	8003214 <xQueueGenericSend>
 8004ad4:	6278      	str	r0, [r7, #36]	@ 0x24
 8004ad6:	e008      	b.n	8004aea <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004ad8:	4b06      	ldr	r3, [pc, #24]	@ (8004af4 <xTimerGenericCommand+0x98>)
 8004ada:	6818      	ldr	r0, [r3, #0]
 8004adc:	f107 0110 	add.w	r1, r7, #16
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	f7fe fc98 	bl	8003418 <xQueueGenericSendFromISR>
 8004ae8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3728      	adds	r7, #40	@ 0x28
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	20000e54 	.word	0x20000e54

08004af8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b088      	sub	sp, #32
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b02:	4b23      	ldr	r3, [pc, #140]	@ (8004b90 <prvProcessExpiredTimer+0x98>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fe fa4b 	bl	8002fac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d023      	beq.n	8004b6c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	699a      	ldr	r2, [r3, #24]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	18d1      	adds	r1, r2, r3
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	6978      	ldr	r0, [r7, #20]
 8004b32:	f000 f8d5 	bl	8004ce0 <prvInsertTimerInActiveList>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d020      	beq.n	8004b7e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2300      	movs	r3, #0
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	2100      	movs	r1, #0
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7ff ff88 	bl	8004a5c <xTimerGenericCommand>
 8004b4c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d114      	bne.n	8004b7e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	4798      	blx	r3
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000e4c 	.word	0x20000e4c

08004b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f859 	bl	8004c58 <prvGetNextExpireTime>
 8004ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f805 	bl	8004bbc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bb2:	f000 f8d7 	bl	8004d64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb6:	bf00      	nop
 8004bb8:	e7f0      	b.n	8004b9c <prvTimerTask+0x8>
	...

08004bbc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bc6:	f7ff f979 	bl	8003ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bca:	f107 0308 	add.w	r3, r7, #8
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f866 	bl	8004ca0 <prvSampleTimeNow>
 8004bd4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d130      	bne.n	8004c3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10a      	bne.n	8004bf8 <prvProcessTimerOrBlockTask+0x3c>
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d806      	bhi.n	8004bf8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004bea:	f7ff f975 	bl	8003ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bee:	68f9      	ldr	r1, [r7, #12]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff81 	bl	8004af8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bf6:	e024      	b.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d008      	beq.n	8004c10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bfe:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <prvProcessTimerOrBlockTask+0x90>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <prvProcessTimerOrBlockTask+0x50>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <prvProcessTimerOrBlockTask+0x52>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c10:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <prvProcessTimerOrBlockTask+0x94>)
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	683a      	ldr	r2, [r7, #0]
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f7fe feb5 	bl	800398c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c22:	f7ff f959 	bl	8003ed8 <xTaskResumeAll>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c2c:	4b09      	ldr	r3, [pc, #36]	@ (8004c54 <prvProcessTimerOrBlockTask+0x98>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
}
 8004c3c:	e001      	b.n	8004c42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c3e:	f7ff f94b 	bl	8003ed8 <xTaskResumeAll>
}
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000e50 	.word	0x20000e50
 8004c50:	20000e54 	.word	0x20000e54
 8004c54:	e000ed04 	.word	0xe000ed04

08004c58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c60:	4b0e      	ldr	r3, [pc, #56]	@ (8004c9c <prvGetNextExpireTime+0x44>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <prvGetNextExpireTime+0x16>
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	e000      	b.n	8004c70 <prvGetNextExpireTime+0x18>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <prvGetNextExpireTime+0x44>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	e001      	b.n	8004c8c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000e4c 	.word	0x20000e4c

08004ca0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ca8:	f7ff f9b4 	bl	8004014 <xTaskGetTickCount>
 8004cac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <prvSampleTimeNow+0x3c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d205      	bcs.n	8004cc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cb8:	f000 f93a 	bl	8004f30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cca:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <prvSampleTimeNow+0x3c>)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000e5c 	.word	0x20000e5c

08004ce0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d812      	bhi.n	8004d2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	1ad2      	subs	r2, r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d14:	2301      	movs	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	e01b      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d1a:	4b10      	ldr	r3, [pc, #64]	@ (8004d5c <prvInsertTimerInActiveList+0x7c>)
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f7fe f908 	bl	8002f3a <vListInsert>
 8004d2a:	e012      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d2c:	687a      	ldr	r2, [r7, #4]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d206      	bcs.n	8004d42 <prvInsertTimerInActiveList+0x62>
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d302      	bcc.n	8004d42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e007      	b.n	8004d52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d42:	4b07      	ldr	r3, [pc, #28]	@ (8004d60 <prvInsertTimerInActiveList+0x80>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7fe f8f4 	bl	8002f3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d52:	697b      	ldr	r3, [r7, #20]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	20000e50 	.word	0x20000e50
 8004d60:	20000e4c 	.word	0x20000e4c

08004d64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08e      	sub	sp, #56	@ 0x38
 8004d68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d6a:	e0ce      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da19      	bge.n	8004da6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d72:	1d3b      	adds	r3, r7, #4
 8004d74:	3304      	adds	r3, #4
 8004d76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d9c:	6850      	ldr	r0, [r2, #4]
 8004d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004da0:	6892      	ldr	r2, [r2, #8]
 8004da2:	4611      	mov	r1, r2
 8004da4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f2c0 80ae 	blt.w	8004f0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d004      	beq.n	8004dc4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	3304      	adds	r3, #4
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe f8f4 	bl	8002fac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dc4:	463b      	mov	r3, r7
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff ff6a 	bl	8004ca0 <prvSampleTimeNow>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b09      	cmp	r3, #9
 8004dd2:	f200 8097 	bhi.w	8004f04 <prvProcessReceivedCommands+0x1a0>
 8004dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ddc <prvProcessReceivedCommands+0x78>)
 8004dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ddc:	08004e05 	.word	0x08004e05
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e05 	.word	0x08004e05
 8004de8:	08004e7b 	.word	0x08004e7b
 8004dec:	08004e8f 	.word	0x08004e8f
 8004df0:	08004edb 	.word	0x08004edb
 8004df4:	08004e05 	.word	0x08004e05
 8004df8:	08004e05 	.word	0x08004e05
 8004dfc:	08004e7b 	.word	0x08004e7b
 8004e00:	08004e8f 	.word	0x08004e8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e0a:	f043 0301 	orr.w	r3, r3, #1
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	18d1      	adds	r1, r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e24:	f7ff ff5c 	bl	8004ce0 <prvInsertTimerInActiveList>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d06c      	beq.n	8004f08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d061      	beq.n	8004f08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	441a      	add	r2, r3
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	2300      	movs	r3, #0
 8004e52:	2100      	movs	r1, #0
 8004e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e56:	f7ff fe01 	bl	8004a5c <xTimerGenericCommand>
 8004e5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d152      	bne.n	8004f08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	61bb      	str	r3, [r7, #24]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e8c:	e03d      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e94:	f043 0301 	orr.w	r3, r3, #1
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10b      	bne.n	8004ec6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	bf00      	nop
 8004ec4:	e7fd      	b.n	8004ec2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec8:	699a      	ldr	r2, [r3, #24]
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	18d1      	adds	r1, r2, r3
 8004ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ed4:	f7ff ff04 	bl	8004ce0 <prvInsertTimerInActiveList>
					break;
 8004ed8:	e017      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004edc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004ee8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004eea:	f000 fc35 	bl	8005758 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004eee:	e00c      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ef6:	f023 0301 	bic.w	r3, r3, #1
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004f02:	e002      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004f04:	bf00      	nop
 8004f06:	e000      	b.n	8004f0a <prvProcessReceivedCommands+0x1a6>
					break;
 8004f08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004f0a:	4b08      	ldr	r3, [pc, #32]	@ (8004f2c <prvProcessReceivedCommands+0x1c8>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	1d39      	adds	r1, r7, #4
 8004f10:	2200      	movs	r2, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fb1e 	bl	8003554 <xQueueReceive>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f47f af26 	bne.w	8004d6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004f20:	bf00      	nop
 8004f22:	bf00      	nop
 8004f24:	3730      	adds	r7, #48	@ 0x30
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000e54 	.word	0x20000e54

08004f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f36:	e049      	b.n	8004fcc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f38:	4b2e      	ldr	r3, [pc, #184]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f42:	4b2c      	ldr	r3, [pc, #176]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe f82b 	bl	8002fac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	68f8      	ldr	r0, [r7, #12]
 8004f5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d02f      	beq.n	8004fcc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	693a      	ldr	r2, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d90e      	bls.n	8004f9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3304      	adds	r3, #4
 8004f92:	4619      	mov	r1, r3
 8004f94:	4610      	mov	r0, r2
 8004f96:	f7fd ffd0 	bl	8002f3a <vListInsert>
 8004f9a:	e017      	b.n	8004fcc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f7ff fd58 	bl	8004a5c <xTimerGenericCommand>
 8004fac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10b      	bne.n	8004fcc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	603b      	str	r3, [r7, #0]
}
 8004fc6:	bf00      	nop
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fcc:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1b0      	bne.n	8004f38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <prvSwitchTimerLists+0xc8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a04      	ldr	r2, [pc, #16]	@ (8004ff4 <prvSwitchTimerLists+0xc4>)
 8004fe2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fe4:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <prvSwitchTimerLists+0xc8>)
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	6013      	str	r3, [r2, #0]
}
 8004fea:	bf00      	nop
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000e4c 	.word	0x20000e4c
 8004ff8:	20000e50 	.word	0x20000e50

08004ffc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005002:	f000 f9b9 	bl	8005378 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005006:	4b15      	ldr	r3, [pc, #84]	@ (800505c <prvCheckForValidListAndQueue+0x60>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d120      	bne.n	8005050 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800500e:	4814      	ldr	r0, [pc, #80]	@ (8005060 <prvCheckForValidListAndQueue+0x64>)
 8005010:	f7fd ff42 	bl	8002e98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005014:	4813      	ldr	r0, [pc, #76]	@ (8005064 <prvCheckForValidListAndQueue+0x68>)
 8005016:	f7fd ff3f 	bl	8002e98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800501a:	4b13      	ldr	r3, [pc, #76]	@ (8005068 <prvCheckForValidListAndQueue+0x6c>)
 800501c:	4a10      	ldr	r2, [pc, #64]	@ (8005060 <prvCheckForValidListAndQueue+0x64>)
 800501e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005020:	4b12      	ldr	r3, [pc, #72]	@ (800506c <prvCheckForValidListAndQueue+0x70>)
 8005022:	4a10      	ldr	r2, [pc, #64]	@ (8005064 <prvCheckForValidListAndQueue+0x68>)
 8005024:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005026:	2300      	movs	r3, #0
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <prvCheckForValidListAndQueue+0x74>)
 800502c:	4a11      	ldr	r2, [pc, #68]	@ (8005074 <prvCheckForValidListAndQueue+0x78>)
 800502e:	2110      	movs	r1, #16
 8005030:	200a      	movs	r0, #10
 8005032:	f7fe f84f 	bl	80030d4 <xQueueGenericCreateStatic>
 8005036:	4603      	mov	r3, r0
 8005038:	4a08      	ldr	r2, [pc, #32]	@ (800505c <prvCheckForValidListAndQueue+0x60>)
 800503a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800503c:	4b07      	ldr	r3, [pc, #28]	@ (800505c <prvCheckForValidListAndQueue+0x60>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005044:	4b05      	ldr	r3, [pc, #20]	@ (800505c <prvCheckForValidListAndQueue+0x60>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	490b      	ldr	r1, [pc, #44]	@ (8005078 <prvCheckForValidListAndQueue+0x7c>)
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fc74 	bl	8003938 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005050:	f000 f9c4 	bl	80053dc <vPortExitCritical>
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000e54 	.word	0x20000e54
 8005060:	20000e24 	.word	0x20000e24
 8005064:	20000e38 	.word	0x20000e38
 8005068:	20000e4c 	.word	0x20000e4c
 800506c:	20000e50 	.word	0x20000e50
 8005070:	20000f00 	.word	0x20000f00
 8005074:	20000e60 	.word	0x20000e60
 8005078:	0800662c 	.word	0x0800662c

0800507c <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10b      	bne.n	80050a6 <xTimerIsTimerActive+0x2a>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60fb      	str	r3, [r7, #12]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80050a6:	f000 f967 	bl	8005378 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d102      	bne.n	80050be <xTimerIsTimerActive+0x42>
		{
			xReturn = pdFALSE;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e001      	b.n	80050c2 <xTimerIsTimerActive+0x46>
		}
		else
		{
			xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80050c2:	f000 f98b 	bl	80053dc <vPortExitCritical>

	return xReturn;
 80050c6:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}

080050d0 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10b      	bne.n	80050fa <pvTimerGetTimerID+0x2a>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80050fa:	f000 f93d 	bl	8005378 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8005104:	f000 f96a 	bl	80053dc <vPortExitCritical>

	return pvReturn;
 8005108:	693b      	ldr	r3, [r7, #16]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	3b04      	subs	r3, #4
 8005124:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800512c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3b04      	subs	r3, #4
 8005132:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	f023 0201 	bic.w	r2, r3, #1
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	3b04      	subs	r3, #4
 8005142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005144:	4a0c      	ldr	r2, [pc, #48]	@ (8005178 <pxPortInitialiseStack+0x64>)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b14      	subs	r3, #20
 800514e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3b04      	subs	r3, #4
 800515a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f06f 0202 	mvn.w	r2, #2
 8005162:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	3b20      	subs	r3, #32
 8005168:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800516a:	68fb      	ldr	r3, [r7, #12]
}
 800516c:	4618      	mov	r0, r3
 800516e:	3714      	adds	r7, #20
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr
 8005178:	0800517d 	.word	0x0800517d

0800517c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800517c:	b480      	push	{r7}
 800517e:	b085      	sub	sp, #20
 8005180:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005186:	4b13      	ldr	r3, [pc, #76]	@ (80051d4 <prvTaskExitError+0x58>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800518e:	d00b      	beq.n	80051a8 <prvTaskExitError+0x2c>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	60fb      	str	r3, [r7, #12]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <prvTaskExitError+0x28>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	60bb      	str	r3, [r7, #8]
}
 80051ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80051bc:	bf00      	nop
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0fc      	beq.n	80051be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3714      	adds	r7, #20
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000010 	.word	0x20000010
	...

080051e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80051e0:	4b07      	ldr	r3, [pc, #28]	@ (8005200 <pxCurrentTCBConst2>)
 80051e2:	6819      	ldr	r1, [r3, #0]
 80051e4:	6808      	ldr	r0, [r1, #0]
 80051e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051ea:	f380 8809 	msr	PSP, r0
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f04f 0000 	mov.w	r0, #0
 80051f6:	f380 8811 	msr	BASEPRI, r0
 80051fa:	4770      	bx	lr
 80051fc:	f3af 8000 	nop.w

08005200 <pxCurrentTCBConst2>:
 8005200:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop

08005208 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005208:	4808      	ldr	r0, [pc, #32]	@ (800522c <prvPortStartFirstTask+0x24>)
 800520a:	6800      	ldr	r0, [r0, #0]
 800520c:	6800      	ldr	r0, [r0, #0]
 800520e:	f380 8808 	msr	MSP, r0
 8005212:	f04f 0000 	mov.w	r0, #0
 8005216:	f380 8814 	msr	CONTROL, r0
 800521a:	b662      	cpsie	i
 800521c:	b661      	cpsie	f
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	df00      	svc	0
 8005228:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800522a:	bf00      	nop
 800522c:	e000ed08 	.word	0xe000ed08

08005230 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005236:	4b47      	ldr	r3, [pc, #284]	@ (8005354 <xPortStartScheduler+0x124>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a47      	ldr	r2, [pc, #284]	@ (8005358 <xPortStartScheduler+0x128>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10b      	bne.n	8005258 <xPortStartScheduler+0x28>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	613b      	str	r3, [r7, #16]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005258:	4b3e      	ldr	r3, [pc, #248]	@ (8005354 <xPortStartScheduler+0x124>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3f      	ldr	r2, [pc, #252]	@ (800535c <xPortStartScheduler+0x12c>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d10b      	bne.n	800527a <xPortStartScheduler+0x4a>
	__asm volatile
 8005262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005266:	f383 8811 	msr	BASEPRI, r3
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	f3bf 8f4f 	dsb	sy
 8005272:	60fb      	str	r3, [r7, #12]
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop
 8005278:	e7fd      	b.n	8005276 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800527a:	4b39      	ldr	r3, [pc, #228]	@ (8005360 <xPortStartScheduler+0x130>)
 800527c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	b2db      	uxtb	r3, r3
 8005284:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	22ff      	movs	r2, #255	@ 0xff
 800528a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	b2db      	uxtb	r3, r3
 8005292:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	b2db      	uxtb	r3, r3
 8005298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800529c:	b2da      	uxtb	r2, r3
 800529e:	4b31      	ldr	r3, [pc, #196]	@ (8005364 <xPortStartScheduler+0x134>)
 80052a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80052a2:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <xPortStartScheduler+0x138>)
 80052a4:	2207      	movs	r2, #7
 80052a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052a8:	e009      	b.n	80052be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80052aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005368 <xPortStartScheduler+0x138>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005368 <xPortStartScheduler+0x138>)
 80052b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80052be:	78fb      	ldrb	r3, [r7, #3]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c6:	2b80      	cmp	r3, #128	@ 0x80
 80052c8:	d0ef      	beq.n	80052aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80052ca:	4b27      	ldr	r3, [pc, #156]	@ (8005368 <xPortStartScheduler+0x138>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1c3 0307 	rsb	r3, r3, #7
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d00b      	beq.n	80052ee <xPortStartScheduler+0xbe>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	60bb      	str	r3, [r7, #8]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005368 <xPortStartScheduler+0x138>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	4a1c      	ldr	r2, [pc, #112]	@ (8005368 <xPortStartScheduler+0x138>)
 80052f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005368 <xPortStartScheduler+0x138>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005300:	4a19      	ldr	r2, [pc, #100]	@ (8005368 <xPortStartScheduler+0x138>)
 8005302:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800530c:	4b17      	ldr	r3, [pc, #92]	@ (800536c <xPortStartScheduler+0x13c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a16      	ldr	r2, [pc, #88]	@ (800536c <xPortStartScheduler+0x13c>)
 8005312:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005316:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005318:	4b14      	ldr	r3, [pc, #80]	@ (800536c <xPortStartScheduler+0x13c>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a13      	ldr	r2, [pc, #76]	@ (800536c <xPortStartScheduler+0x13c>)
 800531e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005322:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005324:	f000 f8da 	bl	80054dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005328:	4b11      	ldr	r3, [pc, #68]	@ (8005370 <xPortStartScheduler+0x140>)
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800532e:	f000 f8f9 	bl	8005524 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005332:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <xPortStartScheduler+0x144>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a0f      	ldr	r2, [pc, #60]	@ (8005374 <xPortStartScheduler+0x144>)
 8005338:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800533c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800533e:	f7ff ff63 	bl	8005208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005342:	f7fe ff43 	bl	80041cc <vTaskSwitchContext>
	prvTaskExitError();
 8005346:	f7ff ff19 	bl	800517c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3718      	adds	r7, #24
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}
 8005354:	e000ed00 	.word	0xe000ed00
 8005358:	410fc271 	.word	0x410fc271
 800535c:	410fc270 	.word	0x410fc270
 8005360:	e000e400 	.word	0xe000e400
 8005364:	20000f50 	.word	0x20000f50
 8005368:	20000f54 	.word	0x20000f54
 800536c:	e000ed20 	.word	0xe000ed20
 8005370:	20000010 	.word	0x20000010
 8005374:	e000ef34 	.word	0xe000ef34

08005378 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005378:	b480      	push	{r7}
 800537a:	b083      	sub	sp, #12
 800537c:	af00      	add	r7, sp, #0
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	607b      	str	r3, [r7, #4]
}
 8005390:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005392:	4b10      	ldr	r3, [pc, #64]	@ (80053d4 <vPortEnterCritical+0x5c>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	3301      	adds	r3, #1
 8005398:	4a0e      	ldr	r2, [pc, #56]	@ (80053d4 <vPortEnterCritical+0x5c>)
 800539a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800539c:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <vPortEnterCritical+0x5c>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d110      	bne.n	80053c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <vPortEnterCritical+0x60>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	603b      	str	r3, [r7, #0]
}
 80053c0:	bf00      	nop
 80053c2:	bf00      	nop
 80053c4:	e7fd      	b.n	80053c2 <vPortEnterCritical+0x4a>
	}
}
 80053c6:	bf00      	nop
 80053c8:	370c      	adds	r7, #12
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr
 80053d2:	bf00      	nop
 80053d4:	20000010 	.word	0x20000010
 80053d8:	e000ed04 	.word	0xe000ed04

080053dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80053e2:	4b12      	ldr	r3, [pc, #72]	@ (800542c <vPortExitCritical+0x50>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10b      	bne.n	8005402 <vPortExitCritical+0x26>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	607b      	str	r3, [r7, #4]
}
 80053fc:	bf00      	nop
 80053fe:	bf00      	nop
 8005400:	e7fd      	b.n	80053fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005402:	4b0a      	ldr	r3, [pc, #40]	@ (800542c <vPortExitCritical+0x50>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3b01      	subs	r3, #1
 8005408:	4a08      	ldr	r2, [pc, #32]	@ (800542c <vPortExitCritical+0x50>)
 800540a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vPortExitCritical+0x50>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <vPortExitCritical+0x44>
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005420:	bf00      	nop
 8005422:	370c      	adds	r7, #12
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr
 800542c:	20000010 	.word	0x20000010

08005430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005430:	f3ef 8009 	mrs	r0, PSP
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	4b15      	ldr	r3, [pc, #84]	@ (8005490 <pxCurrentTCBConst>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	f01e 0f10 	tst.w	lr, #16
 8005440:	bf08      	it	eq
 8005442:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005446:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	6010      	str	r0, [r2, #0]
 800544c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005450:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005454:	f380 8811 	msr	BASEPRI, r0
 8005458:	f3bf 8f4f 	dsb	sy
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f7fe feb4 	bl	80041cc <vTaskSwitchContext>
 8005464:	f04f 0000 	mov.w	r0, #0
 8005468:	f380 8811 	msr	BASEPRI, r0
 800546c:	bc09      	pop	{r0, r3}
 800546e:	6819      	ldr	r1, [r3, #0]
 8005470:	6808      	ldr	r0, [r1, #0]
 8005472:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	f01e 0f10 	tst.w	lr, #16
 800547a:	bf08      	it	eq
 800547c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005480:	f380 8809 	msr	PSP, r0
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	4770      	bx	lr
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w

08005490 <pxCurrentTCBConst>:
 8005490:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005494:	bf00      	nop
 8005496:	bf00      	nop

08005498 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	607b      	str	r3, [r7, #4]
}
 80054b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80054b2:	f7fe fdd1 	bl	8004058 <xTaskIncrementTick>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80054bc:	4b06      	ldr	r3, [pc, #24]	@ (80054d8 <xPortSysTickHandler+0x40>)
 80054be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	2300      	movs	r3, #0
 80054c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	f383 8811 	msr	BASEPRI, r3
}
 80054ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80054d0:	bf00      	nop
 80054d2:	3708      	adds	r7, #8
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}
 80054d8:	e000ed04 	.word	0xe000ed04

080054dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80054e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80054e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <vPortSetupTimerInterrupt+0x38>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005518 <vPortSetupTimerInterrupt+0x3c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a0a      	ldr	r2, [pc, #40]	@ (800551c <vPortSetupTimerInterrupt+0x40>)
 80054f2:	fba2 2303 	umull	r2, r3, r2, r3
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	4a09      	ldr	r2, [pc, #36]	@ (8005520 <vPortSetupTimerInterrupt+0x44>)
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054fe:	4b04      	ldr	r3, [pc, #16]	@ (8005510 <vPortSetupTimerInterrupt+0x34>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
}
 8005504:	bf00      	nop
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e010 	.word	0xe000e010
 8005514:	e000e018 	.word	0xe000e018
 8005518:	20000004 	.word	0x20000004
 800551c:	10624dd3 	.word	0x10624dd3
 8005520:	e000e014 	.word	0xe000e014

08005524 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005524:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005534 <vPortEnableVFP+0x10>
 8005528:	6801      	ldr	r1, [r0, #0]
 800552a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800552e:	6001      	str	r1, [r0, #0]
 8005530:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005532:	bf00      	nop
 8005534:	e000ed88 	.word	0xe000ed88

08005538 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2b0f      	cmp	r3, #15
 8005548:	d915      	bls.n	8005576 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800554a:	4a18      	ldr	r2, [pc, #96]	@ (80055ac <vPortValidateInterruptPriority+0x74>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4413      	add	r3, r2
 8005550:	781b      	ldrb	r3, [r3, #0]
 8005552:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005554:	4b16      	ldr	r3, [pc, #88]	@ (80055b0 <vPortValidateInterruptPriority+0x78>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	7afa      	ldrb	r2, [r7, #11]
 800555a:	429a      	cmp	r2, r3
 800555c:	d20b      	bcs.n	8005576 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800555e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005562:	f383 8811 	msr	BASEPRI, r3
 8005566:	f3bf 8f6f 	isb	sy
 800556a:	f3bf 8f4f 	dsb	sy
 800556e:	607b      	str	r3, [r7, #4]
}
 8005570:	bf00      	nop
 8005572:	bf00      	nop
 8005574:	e7fd      	b.n	8005572 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005576:	4b0f      	ldr	r3, [pc, #60]	@ (80055b4 <vPortValidateInterruptPriority+0x7c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800557e:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <vPortValidateInterruptPriority+0x80>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	429a      	cmp	r2, r3
 8005584:	d90b      	bls.n	800559e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558a:	f383 8811 	msr	BASEPRI, r3
 800558e:	f3bf 8f6f 	isb	sy
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	603b      	str	r3, [r7, #0]
}
 8005598:	bf00      	nop
 800559a:	bf00      	nop
 800559c:	e7fd      	b.n	800559a <vPortValidateInterruptPriority+0x62>
	}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	e000e3f0 	.word	0xe000e3f0
 80055b0:	20000f50 	.word	0x20000f50
 80055b4:	e000ed0c 	.word	0xe000ed0c
 80055b8:	20000f54 	.word	0x20000f54

080055bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	@ 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80055c8:	f7fe fc78 	bl	8003ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80055cc:	4b5c      	ldr	r3, [pc, #368]	@ (8005740 <pvPortMalloc+0x184>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d101      	bne.n	80055d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80055d4:	f000 f924 	bl	8005820 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055d8:	4b5a      	ldr	r3, [pc, #360]	@ (8005744 <pvPortMalloc+0x188>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4013      	ands	r3, r2
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f040 8095 	bne.w	8005710 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01e      	beq.n	800562a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80055ec:	2208      	movs	r2, #8
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4413      	add	r3, r2
 80055f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f003 0307 	and.w	r3, r3, #7
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d015      	beq.n	800562a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f023 0307 	bic.w	r3, r3, #7
 8005604:	3308      	adds	r3, #8
 8005606:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f003 0307 	and.w	r3, r3, #7
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00b      	beq.n	800562a <pvPortMalloc+0x6e>
	__asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	617b      	str	r3, [r7, #20]
}
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d06f      	beq.n	8005710 <pvPortMalloc+0x154>
 8005630:	4b45      	ldr	r3, [pc, #276]	@ (8005748 <pvPortMalloc+0x18c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d86a      	bhi.n	8005710 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800563a:	4b44      	ldr	r3, [pc, #272]	@ (800574c <pvPortMalloc+0x190>)
 800563c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800563e:	4b43      	ldr	r3, [pc, #268]	@ (800574c <pvPortMalloc+0x190>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005644:	e004      	b.n	8005650 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800564a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d903      	bls.n	8005662 <pvPortMalloc+0xa6>
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f1      	bne.n	8005646 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005662:	4b37      	ldr	r3, [pc, #220]	@ (8005740 <pvPortMalloc+0x184>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005668:	429a      	cmp	r2, r3
 800566a:	d051      	beq.n	8005710 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2208      	movs	r2, #8
 8005672:	4413      	add	r3, r2
 8005674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	6a3b      	ldr	r3, [r7, #32]
 800567c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	1ad2      	subs	r2, r2, r3
 8005686:	2308      	movs	r3, #8
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	429a      	cmp	r2, r3
 800568c:	d920      	bls.n	80056d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800568e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4413      	add	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f003 0307 	and.w	r3, r3, #7
 800569c:	2b00      	cmp	r3, #0
 800569e:	d00b      	beq.n	80056b8 <pvPortMalloc+0xfc>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	613b      	str	r3, [r7, #16]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80056ca:	69b8      	ldr	r0, [r7, #24]
 80056cc:	f000 f90a 	bl	80058e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80056d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <pvPortMalloc+0x18c>)
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	4a1b      	ldr	r2, [pc, #108]	@ (8005748 <pvPortMalloc+0x18c>)
 80056dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80056de:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <pvPortMalloc+0x18c>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005750 <pvPortMalloc+0x194>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d203      	bcs.n	80056f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80056ea:	4b17      	ldr	r3, [pc, #92]	@ (8005748 <pvPortMalloc+0x18c>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a18      	ldr	r2, [pc, #96]	@ (8005750 <pvPortMalloc+0x194>)
 80056f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	685a      	ldr	r2, [r3, #4]
 80056f6:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <pvPortMalloc+0x188>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	2200      	movs	r2, #0
 8005704:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005706:	4b13      	ldr	r3, [pc, #76]	@ (8005754 <pvPortMalloc+0x198>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3301      	adds	r3, #1
 800570c:	4a11      	ldr	r2, [pc, #68]	@ (8005754 <pvPortMalloc+0x198>)
 800570e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005710:	f7fe fbe2 	bl	8003ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005714:	69fb      	ldr	r3, [r7, #28]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00b      	beq.n	8005736 <pvPortMalloc+0x17a>
	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	60fb      	str	r3, [r7, #12]
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <pvPortMalloc+0x176>
	return pvReturn;
 8005736:	69fb      	ldr	r3, [r7, #28]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3728      	adds	r7, #40	@ 0x28
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20004b60 	.word	0x20004b60
 8005744:	20004b74 	.word	0x20004b74
 8005748:	20004b64 	.word	0x20004b64
 800574c:	20004b58 	.word	0x20004b58
 8005750:	20004b68 	.word	0x20004b68
 8005754:	20004b6c 	.word	0x20004b6c

08005758 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b086      	sub	sp, #24
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d04f      	beq.n	800580a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800576a:	2308      	movs	r3, #8
 800576c:	425b      	negs	r3, r3
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4413      	add	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	4b25      	ldr	r3, [pc, #148]	@ (8005814 <vPortFree+0xbc>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4013      	ands	r3, r2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10b      	bne.n	800579e <vPortFree+0x46>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	60fb      	str	r3, [r7, #12]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <vPortFree+0x66>
	__asm volatile
 80057a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057aa:	f383 8811 	msr	BASEPRI, r3
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	f3bf 8f4f 	dsb	sy
 80057b6:	60bb      	str	r3, [r7, #8]
}
 80057b8:	bf00      	nop
 80057ba:	bf00      	nop
 80057bc:	e7fd      	b.n	80057ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	4b14      	ldr	r3, [pc, #80]	@ (8005814 <vPortFree+0xbc>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4013      	ands	r3, r2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01e      	beq.n	800580a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11a      	bne.n	800580a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005814 <vPortFree+0xbc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	43db      	mvns	r3, r3
 80057de:	401a      	ands	r2, r3
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80057e4:	f7fe fb6a 	bl	8003ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005818 <vPortFree+0xc0>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	4a09      	ldr	r2, [pc, #36]	@ (8005818 <vPortFree+0xc0>)
 80057f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f000 f874 	bl	80058e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80057fc:	4b07      	ldr	r3, [pc, #28]	@ (800581c <vPortFree+0xc4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a06      	ldr	r2, [pc, #24]	@ (800581c <vPortFree+0xc4>)
 8005804:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005806:	f7fe fb67 	bl	8003ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800580a:	bf00      	nop
 800580c:	3718      	adds	r7, #24
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	20004b74 	.word	0x20004b74
 8005818:	20004b64 	.word	0x20004b64
 800581c:	20004b70 	.word	0x20004b70

08005820 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005826:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800582a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800582c:	4b27      	ldr	r3, [pc, #156]	@ (80058cc <prvHeapInit+0xac>)
 800582e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f003 0307 	and.w	r3, r3, #7
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00c      	beq.n	8005854 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	3307      	adds	r3, #7
 800583e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f023 0307 	bic.w	r3, r3, #7
 8005846:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	4a1f      	ldr	r2, [pc, #124]	@ (80058cc <prvHeapInit+0xac>)
 8005850:	4413      	add	r3, r2
 8005852:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005858:	4a1d      	ldr	r2, [pc, #116]	@ (80058d0 <prvHeapInit+0xb0>)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800585e:	4b1c      	ldr	r3, [pc, #112]	@ (80058d0 <prvHeapInit+0xb0>)
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800586c:	2208      	movs	r2, #8
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1a9b      	subs	r3, r3, r2
 8005872:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4a15      	ldr	r2, [pc, #84]	@ (80058d4 <prvHeapInit+0xb4>)
 8005880:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005882:	4b14      	ldr	r3, [pc, #80]	@ (80058d4 <prvHeapInit+0xb4>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800588a:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <prvHeapInit+0xb4>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	1ad2      	subs	r2, r2, r3
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058a0:	4b0c      	ldr	r3, [pc, #48]	@ (80058d4 <prvHeapInit+0xb4>)
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	4a0a      	ldr	r2, [pc, #40]	@ (80058d8 <prvHeapInit+0xb8>)
 80058ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	4a09      	ldr	r2, [pc, #36]	@ (80058dc <prvHeapInit+0xbc>)
 80058b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058b8:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <prvHeapInit+0xc0>)
 80058ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80058be:	601a      	str	r2, [r3, #0]
}
 80058c0:	bf00      	nop
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	20000f58 	.word	0x20000f58
 80058d0:	20004b58 	.word	0x20004b58
 80058d4:	20004b60 	.word	0x20004b60
 80058d8:	20004b68 	.word	0x20004b68
 80058dc:	20004b64 	.word	0x20004b64
 80058e0:	20004b74 	.word	0x20004b74

080058e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80058ec:	4b28      	ldr	r3, [pc, #160]	@ (8005990 <prvInsertBlockIntoFreeList+0xac>)
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e002      	b.n	80058f8 <prvInsertBlockIntoFreeList+0x14>
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d8f7      	bhi.n	80058f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	68ba      	ldr	r2, [r7, #8]
 800590c:	4413      	add	r3, r2
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	d108      	bne.n	8005926 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	441a      	add	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d118      	bne.n	800596c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	4b15      	ldr	r3, [pc, #84]	@ (8005994 <prvInsertBlockIntoFreeList+0xb0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d00d      	beq.n	8005962 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685a      	ldr	r2, [r3, #4]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	441a      	add	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	e008      	b.n	8005974 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <prvInsertBlockIntoFreeList+0xb0>)
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e003      	b.n	8005974 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	429a      	cmp	r2, r3
 800597a:	d002      	beq.n	8005982 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005982:	bf00      	nop
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20004b58 	.word	0x20004b58
 8005994:	20004b60 	.word	0x20004b60

08005998 <_vsniprintf_r>:
 8005998:	b530      	push	{r4, r5, lr}
 800599a:	4614      	mov	r4, r2
 800599c:	2c00      	cmp	r4, #0
 800599e:	b09b      	sub	sp, #108	@ 0x6c
 80059a0:	4605      	mov	r5, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	da05      	bge.n	80059b2 <_vsniprintf_r+0x1a>
 80059a6:	238b      	movs	r3, #139	@ 0x8b
 80059a8:	6003      	str	r3, [r0, #0]
 80059aa:	f04f 30ff 	mov.w	r0, #4294967295
 80059ae:	b01b      	add	sp, #108	@ 0x6c
 80059b0:	bd30      	pop	{r4, r5, pc}
 80059b2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80059b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80059ba:	bf14      	ite	ne
 80059bc:	f104 33ff 	addne.w	r3, r4, #4294967295
 80059c0:	4623      	moveq	r3, r4
 80059c2:	9302      	str	r3, [sp, #8]
 80059c4:	9305      	str	r3, [sp, #20]
 80059c6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80059ca:	9100      	str	r1, [sp, #0]
 80059cc:	9104      	str	r1, [sp, #16]
 80059ce:	f8ad 300e 	strh.w	r3, [sp, #14]
 80059d2:	4669      	mov	r1, sp
 80059d4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80059d6:	f000 fa05 	bl	8005de4 <_svfiprintf_r>
 80059da:	1c43      	adds	r3, r0, #1
 80059dc:	bfbc      	itt	lt
 80059de:	238b      	movlt	r3, #139	@ 0x8b
 80059e0:	602b      	strlt	r3, [r5, #0]
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	d0e3      	beq.n	80059ae <_vsniprintf_r+0x16>
 80059e6:	9b00      	ldr	r3, [sp, #0]
 80059e8:	2200      	movs	r2, #0
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e7df      	b.n	80059ae <_vsniprintf_r+0x16>
	...

080059f0 <vsniprintf>:
 80059f0:	b507      	push	{r0, r1, r2, lr}
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	4613      	mov	r3, r2
 80059f6:	460a      	mov	r2, r1
 80059f8:	4601      	mov	r1, r0
 80059fa:	4803      	ldr	r0, [pc, #12]	@ (8005a08 <vsniprintf+0x18>)
 80059fc:	6800      	ldr	r0, [r0, #0]
 80059fe:	f7ff ffcb 	bl	8005998 <_vsniprintf_r>
 8005a02:	b003      	add	sp, #12
 8005a04:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a08:	20000014 	.word	0x20000014

08005a0c <memset>:
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <_reclaim_reent>:
 8005a1c:	4b29      	ldr	r3, [pc, #164]	@ (8005ac4 <_reclaim_reent+0xa8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4283      	cmp	r3, r0
 8005a22:	b570      	push	{r4, r5, r6, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	d04b      	beq.n	8005ac0 <_reclaim_reent+0xa4>
 8005a28:	69c3      	ldr	r3, [r0, #28]
 8005a2a:	b1ab      	cbz	r3, 8005a58 <_reclaim_reent+0x3c>
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	b16b      	cbz	r3, 8005a4c <_reclaim_reent+0x30>
 8005a30:	2500      	movs	r5, #0
 8005a32:	69e3      	ldr	r3, [r4, #28]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	5959      	ldr	r1, [r3, r5]
 8005a38:	2900      	cmp	r1, #0
 8005a3a:	d13b      	bne.n	8005ab4 <_reclaim_reent+0x98>
 8005a3c:	3504      	adds	r5, #4
 8005a3e:	2d80      	cmp	r5, #128	@ 0x80
 8005a40:	d1f7      	bne.n	8005a32 <_reclaim_reent+0x16>
 8005a42:	69e3      	ldr	r3, [r4, #28]
 8005a44:	4620      	mov	r0, r4
 8005a46:	68d9      	ldr	r1, [r3, #12]
 8005a48:	f000 f878 	bl	8005b3c <_free_r>
 8005a4c:	69e3      	ldr	r3, [r4, #28]
 8005a4e:	6819      	ldr	r1, [r3, #0]
 8005a50:	b111      	cbz	r1, 8005a58 <_reclaim_reent+0x3c>
 8005a52:	4620      	mov	r0, r4
 8005a54:	f000 f872 	bl	8005b3c <_free_r>
 8005a58:	6961      	ldr	r1, [r4, #20]
 8005a5a:	b111      	cbz	r1, 8005a62 <_reclaim_reent+0x46>
 8005a5c:	4620      	mov	r0, r4
 8005a5e:	f000 f86d 	bl	8005b3c <_free_r>
 8005a62:	69e1      	ldr	r1, [r4, #28]
 8005a64:	b111      	cbz	r1, 8005a6c <_reclaim_reent+0x50>
 8005a66:	4620      	mov	r0, r4
 8005a68:	f000 f868 	bl	8005b3c <_free_r>
 8005a6c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005a6e:	b111      	cbz	r1, 8005a76 <_reclaim_reent+0x5a>
 8005a70:	4620      	mov	r0, r4
 8005a72:	f000 f863 	bl	8005b3c <_free_r>
 8005a76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a78:	b111      	cbz	r1, 8005a80 <_reclaim_reent+0x64>
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 f85e 	bl	8005b3c <_free_r>
 8005a80:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8005a82:	b111      	cbz	r1, 8005a8a <_reclaim_reent+0x6e>
 8005a84:	4620      	mov	r0, r4
 8005a86:	f000 f859 	bl	8005b3c <_free_r>
 8005a8a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005a8c:	b111      	cbz	r1, 8005a94 <_reclaim_reent+0x78>
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 f854 	bl	8005b3c <_free_r>
 8005a94:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005a96:	b111      	cbz	r1, 8005a9e <_reclaim_reent+0x82>
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f000 f84f 	bl	8005b3c <_free_r>
 8005a9e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005aa0:	b111      	cbz	r1, 8005aa8 <_reclaim_reent+0x8c>
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f84a 	bl	8005b3c <_free_r>
 8005aa8:	6a23      	ldr	r3, [r4, #32]
 8005aaa:	b14b      	cbz	r3, 8005ac0 <_reclaim_reent+0xa4>
 8005aac:	4620      	mov	r0, r4
 8005aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ab2:	4718      	bx	r3
 8005ab4:	680e      	ldr	r6, [r1, #0]
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f840 	bl	8005b3c <_free_r>
 8005abc:	4631      	mov	r1, r6
 8005abe:	e7bb      	b.n	8005a38 <_reclaim_reent+0x1c>
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000014 	.word	0x20000014

08005ac8 <__errno>:
 8005ac8:	4b01      	ldr	r3, [pc, #4]	@ (8005ad0 <__errno+0x8>)
 8005aca:	6818      	ldr	r0, [r3, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	20000014 	.word	0x20000014

08005ad4 <__libc_init_array>:
 8005ad4:	b570      	push	{r4, r5, r6, lr}
 8005ad6:	4d0d      	ldr	r5, [pc, #52]	@ (8005b0c <__libc_init_array+0x38>)
 8005ad8:	4c0d      	ldr	r4, [pc, #52]	@ (8005b10 <__libc_init_array+0x3c>)
 8005ada:	1b64      	subs	r4, r4, r5
 8005adc:	10a4      	asrs	r4, r4, #2
 8005ade:	2600      	movs	r6, #0
 8005ae0:	42a6      	cmp	r6, r4
 8005ae2:	d109      	bne.n	8005af8 <__libc_init_array+0x24>
 8005ae4:	4d0b      	ldr	r5, [pc, #44]	@ (8005b14 <__libc_init_array+0x40>)
 8005ae6:	4c0c      	ldr	r4, [pc, #48]	@ (8005b18 <__libc_init_array+0x44>)
 8005ae8:	f000 fc66 	bl	80063b8 <_init>
 8005aec:	1b64      	subs	r4, r4, r5
 8005aee:	10a4      	asrs	r4, r4, #2
 8005af0:	2600      	movs	r6, #0
 8005af2:	42a6      	cmp	r6, r4
 8005af4:	d105      	bne.n	8005b02 <__libc_init_array+0x2e>
 8005af6:	bd70      	pop	{r4, r5, r6, pc}
 8005af8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005afc:	4798      	blx	r3
 8005afe:	3601      	adds	r6, #1
 8005b00:	e7ee      	b.n	8005ae0 <__libc_init_array+0xc>
 8005b02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b06:	4798      	blx	r3
 8005b08:	3601      	adds	r6, #1
 8005b0a:	e7f2      	b.n	8005af2 <__libc_init_array+0x1e>
 8005b0c:	08006704 	.word	0x08006704
 8005b10:	08006704 	.word	0x08006704
 8005b14:	08006704 	.word	0x08006704
 8005b18:	08006708 	.word	0x08006708

08005b1c <__retarget_lock_acquire_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_release_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <memcpy>:
 8005b20:	440a      	add	r2, r1
 8005b22:	4291      	cmp	r1, r2
 8005b24:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b28:	d100      	bne.n	8005b2c <memcpy+0xc>
 8005b2a:	4770      	bx	lr
 8005b2c:	b510      	push	{r4, lr}
 8005b2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b32:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b36:	4291      	cmp	r1, r2
 8005b38:	d1f9      	bne.n	8005b2e <memcpy+0xe>
 8005b3a:	bd10      	pop	{r4, pc}

08005b3c <_free_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4605      	mov	r5, r0
 8005b40:	2900      	cmp	r1, #0
 8005b42:	d041      	beq.n	8005bc8 <_free_r+0x8c>
 8005b44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b48:	1f0c      	subs	r4, r1, #4
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bfb8      	it	lt
 8005b4e:	18e4      	addlt	r4, r4, r3
 8005b50:	f000 f8e0 	bl	8005d14 <__malloc_lock>
 8005b54:	4a1d      	ldr	r2, [pc, #116]	@ (8005bcc <_free_r+0x90>)
 8005b56:	6813      	ldr	r3, [r2, #0]
 8005b58:	b933      	cbnz	r3, 8005b68 <_free_r+0x2c>
 8005b5a:	6063      	str	r3, [r4, #4]
 8005b5c:	6014      	str	r4, [r2, #0]
 8005b5e:	4628      	mov	r0, r5
 8005b60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b64:	f000 b8dc 	b.w	8005d20 <__malloc_unlock>
 8005b68:	42a3      	cmp	r3, r4
 8005b6a:	d908      	bls.n	8005b7e <_free_r+0x42>
 8005b6c:	6820      	ldr	r0, [r4, #0]
 8005b6e:	1821      	adds	r1, r4, r0
 8005b70:	428b      	cmp	r3, r1
 8005b72:	bf01      	itttt	eq
 8005b74:	6819      	ldreq	r1, [r3, #0]
 8005b76:	685b      	ldreq	r3, [r3, #4]
 8005b78:	1809      	addeq	r1, r1, r0
 8005b7a:	6021      	streq	r1, [r4, #0]
 8005b7c:	e7ed      	b.n	8005b5a <_free_r+0x1e>
 8005b7e:	461a      	mov	r2, r3
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b10b      	cbz	r3, 8005b88 <_free_r+0x4c>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d9fa      	bls.n	8005b7e <_free_r+0x42>
 8005b88:	6811      	ldr	r1, [r2, #0]
 8005b8a:	1850      	adds	r0, r2, r1
 8005b8c:	42a0      	cmp	r0, r4
 8005b8e:	d10b      	bne.n	8005ba8 <_free_r+0x6c>
 8005b90:	6820      	ldr	r0, [r4, #0]
 8005b92:	4401      	add	r1, r0
 8005b94:	1850      	adds	r0, r2, r1
 8005b96:	4283      	cmp	r3, r0
 8005b98:	6011      	str	r1, [r2, #0]
 8005b9a:	d1e0      	bne.n	8005b5e <_free_r+0x22>
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	6053      	str	r3, [r2, #4]
 8005ba2:	4408      	add	r0, r1
 8005ba4:	6010      	str	r0, [r2, #0]
 8005ba6:	e7da      	b.n	8005b5e <_free_r+0x22>
 8005ba8:	d902      	bls.n	8005bb0 <_free_r+0x74>
 8005baa:	230c      	movs	r3, #12
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	e7d6      	b.n	8005b5e <_free_r+0x22>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf04      	itt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	6063      	str	r3, [r4, #4]
 8005bbe:	bf04      	itt	eq
 8005bc0:	1809      	addeq	r1, r1, r0
 8005bc2:	6021      	streq	r1, [r4, #0]
 8005bc4:	6054      	str	r4, [r2, #4]
 8005bc6:	e7ca      	b.n	8005b5e <_free_r+0x22>
 8005bc8:	bd38      	pop	{r3, r4, r5, pc}
 8005bca:	bf00      	nop
 8005bcc:	20004cbc 	.word	0x20004cbc

08005bd0 <sbrk_aligned>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4e0f      	ldr	r6, [pc, #60]	@ (8005c10 <sbrk_aligned+0x40>)
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	6831      	ldr	r1, [r6, #0]
 8005bd8:	4605      	mov	r5, r0
 8005bda:	b911      	cbnz	r1, 8005be2 <sbrk_aligned+0x12>
 8005bdc:	f000 fba6 	bl	800632c <_sbrk_r>
 8005be0:	6030      	str	r0, [r6, #0]
 8005be2:	4621      	mov	r1, r4
 8005be4:	4628      	mov	r0, r5
 8005be6:	f000 fba1 	bl	800632c <_sbrk_r>
 8005bea:	1c43      	adds	r3, r0, #1
 8005bec:	d103      	bne.n	8005bf6 <sbrk_aligned+0x26>
 8005bee:	f04f 34ff 	mov.w	r4, #4294967295
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	bd70      	pop	{r4, r5, r6, pc}
 8005bf6:	1cc4      	adds	r4, r0, #3
 8005bf8:	f024 0403 	bic.w	r4, r4, #3
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d0f8      	beq.n	8005bf2 <sbrk_aligned+0x22>
 8005c00:	1a21      	subs	r1, r4, r0
 8005c02:	4628      	mov	r0, r5
 8005c04:	f000 fb92 	bl	800632c <_sbrk_r>
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d1f2      	bne.n	8005bf2 <sbrk_aligned+0x22>
 8005c0c:	e7ef      	b.n	8005bee <sbrk_aligned+0x1e>
 8005c0e:	bf00      	nop
 8005c10:	20004cb8 	.word	0x20004cb8

08005c14 <_malloc_r>:
 8005c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c18:	1ccd      	adds	r5, r1, #3
 8005c1a:	f025 0503 	bic.w	r5, r5, #3
 8005c1e:	3508      	adds	r5, #8
 8005c20:	2d0c      	cmp	r5, #12
 8005c22:	bf38      	it	cc
 8005c24:	250c      	movcc	r5, #12
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	4606      	mov	r6, r0
 8005c2a:	db01      	blt.n	8005c30 <_malloc_r+0x1c>
 8005c2c:	42a9      	cmp	r1, r5
 8005c2e:	d904      	bls.n	8005c3a <_malloc_r+0x26>
 8005c30:	230c      	movs	r3, #12
 8005c32:	6033      	str	r3, [r6, #0]
 8005c34:	2000      	movs	r0, #0
 8005c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d10 <_malloc_r+0xfc>
 8005c3e:	f000 f869 	bl	8005d14 <__malloc_lock>
 8005c42:	f8d8 3000 	ldr.w	r3, [r8]
 8005c46:	461c      	mov	r4, r3
 8005c48:	bb44      	cbnz	r4, 8005c9c <_malloc_r+0x88>
 8005c4a:	4629      	mov	r1, r5
 8005c4c:	4630      	mov	r0, r6
 8005c4e:	f7ff ffbf 	bl	8005bd0 <sbrk_aligned>
 8005c52:	1c43      	adds	r3, r0, #1
 8005c54:	4604      	mov	r4, r0
 8005c56:	d158      	bne.n	8005d0a <_malloc_r+0xf6>
 8005c58:	f8d8 4000 	ldr.w	r4, [r8]
 8005c5c:	4627      	mov	r7, r4
 8005c5e:	2f00      	cmp	r7, #0
 8005c60:	d143      	bne.n	8005cea <_malloc_r+0xd6>
 8005c62:	2c00      	cmp	r4, #0
 8005c64:	d04b      	beq.n	8005cfe <_malloc_r+0xea>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	eb04 0903 	add.w	r9, r4, r3
 8005c70:	f000 fb5c 	bl	800632c <_sbrk_r>
 8005c74:	4581      	cmp	r9, r0
 8005c76:	d142      	bne.n	8005cfe <_malloc_r+0xea>
 8005c78:	6821      	ldr	r1, [r4, #0]
 8005c7a:	1a6d      	subs	r5, r5, r1
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	4630      	mov	r0, r6
 8005c80:	f7ff ffa6 	bl	8005bd0 <sbrk_aligned>
 8005c84:	3001      	adds	r0, #1
 8005c86:	d03a      	beq.n	8005cfe <_malloc_r+0xea>
 8005c88:	6823      	ldr	r3, [r4, #0]
 8005c8a:	442b      	add	r3, r5
 8005c8c:	6023      	str	r3, [r4, #0]
 8005c8e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	bb62      	cbnz	r2, 8005cf0 <_malloc_r+0xdc>
 8005c96:	f8c8 7000 	str.w	r7, [r8]
 8005c9a:	e00f      	b.n	8005cbc <_malloc_r+0xa8>
 8005c9c:	6822      	ldr	r2, [r4, #0]
 8005c9e:	1b52      	subs	r2, r2, r5
 8005ca0:	d420      	bmi.n	8005ce4 <_malloc_r+0xd0>
 8005ca2:	2a0b      	cmp	r2, #11
 8005ca4:	d917      	bls.n	8005cd6 <_malloc_r+0xc2>
 8005ca6:	1961      	adds	r1, r4, r5
 8005ca8:	42a3      	cmp	r3, r4
 8005caa:	6025      	str	r5, [r4, #0]
 8005cac:	bf18      	it	ne
 8005cae:	6059      	strne	r1, [r3, #4]
 8005cb0:	6863      	ldr	r3, [r4, #4]
 8005cb2:	bf08      	it	eq
 8005cb4:	f8c8 1000 	streq.w	r1, [r8]
 8005cb8:	5162      	str	r2, [r4, r5]
 8005cba:	604b      	str	r3, [r1, #4]
 8005cbc:	4630      	mov	r0, r6
 8005cbe:	f000 f82f 	bl	8005d20 <__malloc_unlock>
 8005cc2:	f104 000b 	add.w	r0, r4, #11
 8005cc6:	1d23      	adds	r3, r4, #4
 8005cc8:	f020 0007 	bic.w	r0, r0, #7
 8005ccc:	1ac2      	subs	r2, r0, r3
 8005cce:	bf1c      	itt	ne
 8005cd0:	1a1b      	subne	r3, r3, r0
 8005cd2:	50a3      	strne	r3, [r4, r2]
 8005cd4:	e7af      	b.n	8005c36 <_malloc_r+0x22>
 8005cd6:	6862      	ldr	r2, [r4, #4]
 8005cd8:	42a3      	cmp	r3, r4
 8005cda:	bf0c      	ite	eq
 8005cdc:	f8c8 2000 	streq.w	r2, [r8]
 8005ce0:	605a      	strne	r2, [r3, #4]
 8005ce2:	e7eb      	b.n	8005cbc <_malloc_r+0xa8>
 8005ce4:	4623      	mov	r3, r4
 8005ce6:	6864      	ldr	r4, [r4, #4]
 8005ce8:	e7ae      	b.n	8005c48 <_malloc_r+0x34>
 8005cea:	463c      	mov	r4, r7
 8005cec:	687f      	ldr	r7, [r7, #4]
 8005cee:	e7b6      	b.n	8005c5e <_malloc_r+0x4a>
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	d1fb      	bne.n	8005cf0 <_malloc_r+0xdc>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6053      	str	r3, [r2, #4]
 8005cfc:	e7de      	b.n	8005cbc <_malloc_r+0xa8>
 8005cfe:	230c      	movs	r3, #12
 8005d00:	6033      	str	r3, [r6, #0]
 8005d02:	4630      	mov	r0, r6
 8005d04:	f000 f80c 	bl	8005d20 <__malloc_unlock>
 8005d08:	e794      	b.n	8005c34 <_malloc_r+0x20>
 8005d0a:	6005      	str	r5, [r0, #0]
 8005d0c:	e7d6      	b.n	8005cbc <_malloc_r+0xa8>
 8005d0e:	bf00      	nop
 8005d10:	20004cbc 	.word	0x20004cbc

08005d14 <__malloc_lock>:
 8005d14:	4801      	ldr	r0, [pc, #4]	@ (8005d1c <__malloc_lock+0x8>)
 8005d16:	f7ff bf01 	b.w	8005b1c <__retarget_lock_acquire_recursive>
 8005d1a:	bf00      	nop
 8005d1c:	20004cb4 	.word	0x20004cb4

08005d20 <__malloc_unlock>:
 8005d20:	4801      	ldr	r0, [pc, #4]	@ (8005d28 <__malloc_unlock+0x8>)
 8005d22:	f7ff befc 	b.w	8005b1e <__retarget_lock_release_recursive>
 8005d26:	bf00      	nop
 8005d28:	20004cb4 	.word	0x20004cb4

08005d2c <__ssputs_r>:
 8005d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	688e      	ldr	r6, [r1, #8]
 8005d32:	461f      	mov	r7, r3
 8005d34:	42be      	cmp	r6, r7
 8005d36:	680b      	ldr	r3, [r1, #0]
 8005d38:	4682      	mov	sl, r0
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	4690      	mov	r8, r2
 8005d3e:	d82d      	bhi.n	8005d9c <__ssputs_r+0x70>
 8005d40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d48:	d026      	beq.n	8005d98 <__ssputs_r+0x6c>
 8005d4a:	6965      	ldr	r5, [r4, #20]
 8005d4c:	6909      	ldr	r1, [r1, #16]
 8005d4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d52:	eba3 0901 	sub.w	r9, r3, r1
 8005d56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d5a:	1c7b      	adds	r3, r7, #1
 8005d5c:	444b      	add	r3, r9
 8005d5e:	106d      	asrs	r5, r5, #1
 8005d60:	429d      	cmp	r5, r3
 8005d62:	bf38      	it	cc
 8005d64:	461d      	movcc	r5, r3
 8005d66:	0553      	lsls	r3, r2, #21
 8005d68:	d527      	bpl.n	8005dba <__ssputs_r+0x8e>
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	f7ff ff52 	bl	8005c14 <_malloc_r>
 8005d70:	4606      	mov	r6, r0
 8005d72:	b360      	cbz	r0, 8005dce <__ssputs_r+0xa2>
 8005d74:	6921      	ldr	r1, [r4, #16]
 8005d76:	464a      	mov	r2, r9
 8005d78:	f7ff fed2 	bl	8005b20 <memcpy>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	6126      	str	r6, [r4, #16]
 8005d8a:	6165      	str	r5, [r4, #20]
 8005d8c:	444e      	add	r6, r9
 8005d8e:	eba5 0509 	sub.w	r5, r5, r9
 8005d92:	6026      	str	r6, [r4, #0]
 8005d94:	60a5      	str	r5, [r4, #8]
 8005d96:	463e      	mov	r6, r7
 8005d98:	42be      	cmp	r6, r7
 8005d9a:	d900      	bls.n	8005d9e <__ssputs_r+0x72>
 8005d9c:	463e      	mov	r6, r7
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	4632      	mov	r2, r6
 8005da2:	4641      	mov	r1, r8
 8005da4:	f000 faa8 	bl	80062f8 <memmove>
 8005da8:	68a3      	ldr	r3, [r4, #8]
 8005daa:	1b9b      	subs	r3, r3, r6
 8005dac:	60a3      	str	r3, [r4, #8]
 8005dae:	6823      	ldr	r3, [r4, #0]
 8005db0:	4433      	add	r3, r6
 8005db2:	6023      	str	r3, [r4, #0]
 8005db4:	2000      	movs	r0, #0
 8005db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dba:	462a      	mov	r2, r5
 8005dbc:	f000 fac6 	bl	800634c <_realloc_r>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	2800      	cmp	r0, #0
 8005dc4:	d1e0      	bne.n	8005d88 <__ssputs_r+0x5c>
 8005dc6:	6921      	ldr	r1, [r4, #16]
 8005dc8:	4650      	mov	r0, sl
 8005dca:	f7ff feb7 	bl	8005b3c <_free_r>
 8005dce:	230c      	movs	r3, #12
 8005dd0:	f8ca 3000 	str.w	r3, [sl]
 8005dd4:	89a3      	ldrh	r3, [r4, #12]
 8005dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dda:	81a3      	strh	r3, [r4, #12]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e7e9      	b.n	8005db6 <__ssputs_r+0x8a>
	...

08005de4 <_svfiprintf_r>:
 8005de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005de8:	4698      	mov	r8, r3
 8005dea:	898b      	ldrh	r3, [r1, #12]
 8005dec:	061b      	lsls	r3, r3, #24
 8005dee:	b09d      	sub	sp, #116	@ 0x74
 8005df0:	4607      	mov	r7, r0
 8005df2:	460d      	mov	r5, r1
 8005df4:	4614      	mov	r4, r2
 8005df6:	d510      	bpl.n	8005e1a <_svfiprintf_r+0x36>
 8005df8:	690b      	ldr	r3, [r1, #16]
 8005dfa:	b973      	cbnz	r3, 8005e1a <_svfiprintf_r+0x36>
 8005dfc:	2140      	movs	r1, #64	@ 0x40
 8005dfe:	f7ff ff09 	bl	8005c14 <_malloc_r>
 8005e02:	6028      	str	r0, [r5, #0]
 8005e04:	6128      	str	r0, [r5, #16]
 8005e06:	b930      	cbnz	r0, 8005e16 <_svfiprintf_r+0x32>
 8005e08:	230c      	movs	r3, #12
 8005e0a:	603b      	str	r3, [r7, #0]
 8005e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e10:	b01d      	add	sp, #116	@ 0x74
 8005e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e16:	2340      	movs	r3, #64	@ 0x40
 8005e18:	616b      	str	r3, [r5, #20]
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e1e:	2320      	movs	r3, #32
 8005e20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e24:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e28:	2330      	movs	r3, #48	@ 0x30
 8005e2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fc8 <_svfiprintf_r+0x1e4>
 8005e2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e32:	f04f 0901 	mov.w	r9, #1
 8005e36:	4623      	mov	r3, r4
 8005e38:	469a      	mov	sl, r3
 8005e3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e3e:	b10a      	cbz	r2, 8005e44 <_svfiprintf_r+0x60>
 8005e40:	2a25      	cmp	r2, #37	@ 0x25
 8005e42:	d1f9      	bne.n	8005e38 <_svfiprintf_r+0x54>
 8005e44:	ebba 0b04 	subs.w	fp, sl, r4
 8005e48:	d00b      	beq.n	8005e62 <_svfiprintf_r+0x7e>
 8005e4a:	465b      	mov	r3, fp
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	4629      	mov	r1, r5
 8005e50:	4638      	mov	r0, r7
 8005e52:	f7ff ff6b 	bl	8005d2c <__ssputs_r>
 8005e56:	3001      	adds	r0, #1
 8005e58:	f000 80a7 	beq.w	8005faa <_svfiprintf_r+0x1c6>
 8005e5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e5e:	445a      	add	r2, fp
 8005e60:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e62:	f89a 3000 	ldrb.w	r3, [sl]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 809f 	beq.w	8005faa <_svfiprintf_r+0x1c6>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e76:	f10a 0a01 	add.w	sl, sl, #1
 8005e7a:	9304      	str	r3, [sp, #16]
 8005e7c:	9307      	str	r3, [sp, #28]
 8005e7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e82:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e84:	4654      	mov	r4, sl
 8005e86:	2205      	movs	r2, #5
 8005e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e8c:	484e      	ldr	r0, [pc, #312]	@ (8005fc8 <_svfiprintf_r+0x1e4>)
 8005e8e:	f7fa f99f 	bl	80001d0 <memchr>
 8005e92:	9a04      	ldr	r2, [sp, #16]
 8005e94:	b9d8      	cbnz	r0, 8005ece <_svfiprintf_r+0xea>
 8005e96:	06d0      	lsls	r0, r2, #27
 8005e98:	bf44      	itt	mi
 8005e9a:	2320      	movmi	r3, #32
 8005e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ea0:	0711      	lsls	r1, r2, #28
 8005ea2:	bf44      	itt	mi
 8005ea4:	232b      	movmi	r3, #43	@ 0x2b
 8005ea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8005eae:	2b2a      	cmp	r3, #42	@ 0x2a
 8005eb0:	d015      	beq.n	8005ede <_svfiprintf_r+0xfa>
 8005eb2:	9a07      	ldr	r2, [sp, #28]
 8005eb4:	4654      	mov	r4, sl
 8005eb6:	2000      	movs	r0, #0
 8005eb8:	f04f 0c0a 	mov.w	ip, #10
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ec2:	3b30      	subs	r3, #48	@ 0x30
 8005ec4:	2b09      	cmp	r3, #9
 8005ec6:	d94b      	bls.n	8005f60 <_svfiprintf_r+0x17c>
 8005ec8:	b1b0      	cbz	r0, 8005ef8 <_svfiprintf_r+0x114>
 8005eca:	9207      	str	r2, [sp, #28]
 8005ecc:	e014      	b.n	8005ef8 <_svfiprintf_r+0x114>
 8005ece:	eba0 0308 	sub.w	r3, r0, r8
 8005ed2:	fa09 f303 	lsl.w	r3, r9, r3
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	46a2      	mov	sl, r4
 8005edc:	e7d2      	b.n	8005e84 <_svfiprintf_r+0xa0>
 8005ede:	9b03      	ldr	r3, [sp, #12]
 8005ee0:	1d19      	adds	r1, r3, #4
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	9103      	str	r1, [sp, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	bfbb      	ittet	lt
 8005eea:	425b      	neglt	r3, r3
 8005eec:	f042 0202 	orrlt.w	r2, r2, #2
 8005ef0:	9307      	strge	r3, [sp, #28]
 8005ef2:	9307      	strlt	r3, [sp, #28]
 8005ef4:	bfb8      	it	lt
 8005ef6:	9204      	strlt	r2, [sp, #16]
 8005ef8:	7823      	ldrb	r3, [r4, #0]
 8005efa:	2b2e      	cmp	r3, #46	@ 0x2e
 8005efc:	d10a      	bne.n	8005f14 <_svfiprintf_r+0x130>
 8005efe:	7863      	ldrb	r3, [r4, #1]
 8005f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f02:	d132      	bne.n	8005f6a <_svfiprintf_r+0x186>
 8005f04:	9b03      	ldr	r3, [sp, #12]
 8005f06:	1d1a      	adds	r2, r3, #4
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	9203      	str	r2, [sp, #12]
 8005f0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f10:	3402      	adds	r4, #2
 8005f12:	9305      	str	r3, [sp, #20]
 8005f14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005fd8 <_svfiprintf_r+0x1f4>
 8005f18:	7821      	ldrb	r1, [r4, #0]
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	f7fa f957 	bl	80001d0 <memchr>
 8005f22:	b138      	cbz	r0, 8005f34 <_svfiprintf_r+0x150>
 8005f24:	9b04      	ldr	r3, [sp, #16]
 8005f26:	eba0 000a 	sub.w	r0, r0, sl
 8005f2a:	2240      	movs	r2, #64	@ 0x40
 8005f2c:	4082      	lsls	r2, r0
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	3401      	adds	r4, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f38:	4824      	ldr	r0, [pc, #144]	@ (8005fcc <_svfiprintf_r+0x1e8>)
 8005f3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f3e:	2206      	movs	r2, #6
 8005f40:	f7fa f946 	bl	80001d0 <memchr>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	d036      	beq.n	8005fb6 <_svfiprintf_r+0x1d2>
 8005f48:	4b21      	ldr	r3, [pc, #132]	@ (8005fd0 <_svfiprintf_r+0x1ec>)
 8005f4a:	bb1b      	cbnz	r3, 8005f94 <_svfiprintf_r+0x1b0>
 8005f4c:	9b03      	ldr	r3, [sp, #12]
 8005f4e:	3307      	adds	r3, #7
 8005f50:	f023 0307 	bic.w	r3, r3, #7
 8005f54:	3308      	adds	r3, #8
 8005f56:	9303      	str	r3, [sp, #12]
 8005f58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f5a:	4433      	add	r3, r6
 8005f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f5e:	e76a      	b.n	8005e36 <_svfiprintf_r+0x52>
 8005f60:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f64:	460c      	mov	r4, r1
 8005f66:	2001      	movs	r0, #1
 8005f68:	e7a8      	b.n	8005ebc <_svfiprintf_r+0xd8>
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	3401      	adds	r4, #1
 8005f6e:	9305      	str	r3, [sp, #20]
 8005f70:	4619      	mov	r1, r3
 8005f72:	f04f 0c0a 	mov.w	ip, #10
 8005f76:	4620      	mov	r0, r4
 8005f78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f7c:	3a30      	subs	r2, #48	@ 0x30
 8005f7e:	2a09      	cmp	r2, #9
 8005f80:	d903      	bls.n	8005f8a <_svfiprintf_r+0x1a6>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0c6      	beq.n	8005f14 <_svfiprintf_r+0x130>
 8005f86:	9105      	str	r1, [sp, #20]
 8005f88:	e7c4      	b.n	8005f14 <_svfiprintf_r+0x130>
 8005f8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f8e:	4604      	mov	r4, r0
 8005f90:	2301      	movs	r3, #1
 8005f92:	e7f0      	b.n	8005f76 <_svfiprintf_r+0x192>
 8005f94:	ab03      	add	r3, sp, #12
 8005f96:	9300      	str	r3, [sp, #0]
 8005f98:	462a      	mov	r2, r5
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005fd4 <_svfiprintf_r+0x1f0>)
 8005f9c:	a904      	add	r1, sp, #16
 8005f9e:	4638      	mov	r0, r7
 8005fa0:	f3af 8000 	nop.w
 8005fa4:	1c42      	adds	r2, r0, #1
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	d1d6      	bne.n	8005f58 <_svfiprintf_r+0x174>
 8005faa:	89ab      	ldrh	r3, [r5, #12]
 8005fac:	065b      	lsls	r3, r3, #25
 8005fae:	f53f af2d 	bmi.w	8005e0c <_svfiprintf_r+0x28>
 8005fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fb4:	e72c      	b.n	8005e10 <_svfiprintf_r+0x2c>
 8005fb6:	ab03      	add	r3, sp, #12
 8005fb8:	9300      	str	r3, [sp, #0]
 8005fba:	462a      	mov	r2, r5
 8005fbc:	4b05      	ldr	r3, [pc, #20]	@ (8005fd4 <_svfiprintf_r+0x1f0>)
 8005fbe:	a904      	add	r1, sp, #16
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	f000 f879 	bl	80060b8 <_printf_i>
 8005fc6:	e7ed      	b.n	8005fa4 <_svfiprintf_r+0x1c0>
 8005fc8:	080066c8 	.word	0x080066c8
 8005fcc:	080066d2 	.word	0x080066d2
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	08005d2d 	.word	0x08005d2d
 8005fd8:	080066ce 	.word	0x080066ce

08005fdc <_printf_common>:
 8005fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	4616      	mov	r6, r2
 8005fe2:	4698      	mov	r8, r3
 8005fe4:	688a      	ldr	r2, [r1, #8]
 8005fe6:	690b      	ldr	r3, [r1, #16]
 8005fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fec:	4293      	cmp	r3, r2
 8005fee:	bfb8      	it	lt
 8005ff0:	4613      	movlt	r3, r2
 8005ff2:	6033      	str	r3, [r6, #0]
 8005ff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	460c      	mov	r4, r1
 8005ffc:	b10a      	cbz	r2, 8006002 <_printf_common+0x26>
 8005ffe:	3301      	adds	r3, #1
 8006000:	6033      	str	r3, [r6, #0]
 8006002:	6823      	ldr	r3, [r4, #0]
 8006004:	0699      	lsls	r1, r3, #26
 8006006:	bf42      	ittt	mi
 8006008:	6833      	ldrmi	r3, [r6, #0]
 800600a:	3302      	addmi	r3, #2
 800600c:	6033      	strmi	r3, [r6, #0]
 800600e:	6825      	ldr	r5, [r4, #0]
 8006010:	f015 0506 	ands.w	r5, r5, #6
 8006014:	d106      	bne.n	8006024 <_printf_common+0x48>
 8006016:	f104 0a19 	add.w	sl, r4, #25
 800601a:	68e3      	ldr	r3, [r4, #12]
 800601c:	6832      	ldr	r2, [r6, #0]
 800601e:	1a9b      	subs	r3, r3, r2
 8006020:	42ab      	cmp	r3, r5
 8006022:	dc26      	bgt.n	8006072 <_printf_common+0x96>
 8006024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006028:	6822      	ldr	r2, [r4, #0]
 800602a:	3b00      	subs	r3, #0
 800602c:	bf18      	it	ne
 800602e:	2301      	movne	r3, #1
 8006030:	0692      	lsls	r2, r2, #26
 8006032:	d42b      	bmi.n	800608c <_printf_common+0xb0>
 8006034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006038:	4641      	mov	r1, r8
 800603a:	4638      	mov	r0, r7
 800603c:	47c8      	blx	r9
 800603e:	3001      	adds	r0, #1
 8006040:	d01e      	beq.n	8006080 <_printf_common+0xa4>
 8006042:	6823      	ldr	r3, [r4, #0]
 8006044:	6922      	ldr	r2, [r4, #16]
 8006046:	f003 0306 	and.w	r3, r3, #6
 800604a:	2b04      	cmp	r3, #4
 800604c:	bf02      	ittt	eq
 800604e:	68e5      	ldreq	r5, [r4, #12]
 8006050:	6833      	ldreq	r3, [r6, #0]
 8006052:	1aed      	subeq	r5, r5, r3
 8006054:	68a3      	ldr	r3, [r4, #8]
 8006056:	bf0c      	ite	eq
 8006058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800605c:	2500      	movne	r5, #0
 800605e:	4293      	cmp	r3, r2
 8006060:	bfc4      	itt	gt
 8006062:	1a9b      	subgt	r3, r3, r2
 8006064:	18ed      	addgt	r5, r5, r3
 8006066:	2600      	movs	r6, #0
 8006068:	341a      	adds	r4, #26
 800606a:	42b5      	cmp	r5, r6
 800606c:	d11a      	bne.n	80060a4 <_printf_common+0xc8>
 800606e:	2000      	movs	r0, #0
 8006070:	e008      	b.n	8006084 <_printf_common+0xa8>
 8006072:	2301      	movs	r3, #1
 8006074:	4652      	mov	r2, sl
 8006076:	4641      	mov	r1, r8
 8006078:	4638      	mov	r0, r7
 800607a:	47c8      	blx	r9
 800607c:	3001      	adds	r0, #1
 800607e:	d103      	bne.n	8006088 <_printf_common+0xac>
 8006080:	f04f 30ff 	mov.w	r0, #4294967295
 8006084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006088:	3501      	adds	r5, #1
 800608a:	e7c6      	b.n	800601a <_printf_common+0x3e>
 800608c:	18e1      	adds	r1, r4, r3
 800608e:	1c5a      	adds	r2, r3, #1
 8006090:	2030      	movs	r0, #48	@ 0x30
 8006092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006096:	4422      	add	r2, r4
 8006098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800609c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060a0:	3302      	adds	r3, #2
 80060a2:	e7c7      	b.n	8006034 <_printf_common+0x58>
 80060a4:	2301      	movs	r3, #1
 80060a6:	4622      	mov	r2, r4
 80060a8:	4641      	mov	r1, r8
 80060aa:	4638      	mov	r0, r7
 80060ac:	47c8      	blx	r9
 80060ae:	3001      	adds	r0, #1
 80060b0:	d0e6      	beq.n	8006080 <_printf_common+0xa4>
 80060b2:	3601      	adds	r6, #1
 80060b4:	e7d9      	b.n	800606a <_printf_common+0x8e>
	...

080060b8 <_printf_i>:
 80060b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060bc:	7e0f      	ldrb	r7, [r1, #24]
 80060be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060c0:	2f78      	cmp	r7, #120	@ 0x78
 80060c2:	4691      	mov	r9, r2
 80060c4:	4680      	mov	r8, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	469a      	mov	sl, r3
 80060ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ce:	d807      	bhi.n	80060e0 <_printf_i+0x28>
 80060d0:	2f62      	cmp	r7, #98	@ 0x62
 80060d2:	d80a      	bhi.n	80060ea <_printf_i+0x32>
 80060d4:	2f00      	cmp	r7, #0
 80060d6:	f000 80d2 	beq.w	800627e <_printf_i+0x1c6>
 80060da:	2f58      	cmp	r7, #88	@ 0x58
 80060dc:	f000 80b9 	beq.w	8006252 <_printf_i+0x19a>
 80060e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80060e8:	e03a      	b.n	8006160 <_printf_i+0xa8>
 80060ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80060ee:	2b15      	cmp	r3, #21
 80060f0:	d8f6      	bhi.n	80060e0 <_printf_i+0x28>
 80060f2:	a101      	add	r1, pc, #4	@ (adr r1, 80060f8 <_printf_i+0x40>)
 80060f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060f8:	08006151 	.word	0x08006151
 80060fc:	08006165 	.word	0x08006165
 8006100:	080060e1 	.word	0x080060e1
 8006104:	080060e1 	.word	0x080060e1
 8006108:	080060e1 	.word	0x080060e1
 800610c:	080060e1 	.word	0x080060e1
 8006110:	08006165 	.word	0x08006165
 8006114:	080060e1 	.word	0x080060e1
 8006118:	080060e1 	.word	0x080060e1
 800611c:	080060e1 	.word	0x080060e1
 8006120:	080060e1 	.word	0x080060e1
 8006124:	08006265 	.word	0x08006265
 8006128:	0800618f 	.word	0x0800618f
 800612c:	0800621f 	.word	0x0800621f
 8006130:	080060e1 	.word	0x080060e1
 8006134:	080060e1 	.word	0x080060e1
 8006138:	08006287 	.word	0x08006287
 800613c:	080060e1 	.word	0x080060e1
 8006140:	0800618f 	.word	0x0800618f
 8006144:	080060e1 	.word	0x080060e1
 8006148:	080060e1 	.word	0x080060e1
 800614c:	08006227 	.word	0x08006227
 8006150:	6833      	ldr	r3, [r6, #0]
 8006152:	1d1a      	adds	r2, r3, #4
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6032      	str	r2, [r6, #0]
 8006158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800615c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006160:	2301      	movs	r3, #1
 8006162:	e09d      	b.n	80062a0 <_printf_i+0x1e8>
 8006164:	6833      	ldr	r3, [r6, #0]
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	6031      	str	r1, [r6, #0]
 800616c:	0606      	lsls	r6, r0, #24
 800616e:	d501      	bpl.n	8006174 <_printf_i+0xbc>
 8006170:	681d      	ldr	r5, [r3, #0]
 8006172:	e003      	b.n	800617c <_printf_i+0xc4>
 8006174:	0645      	lsls	r5, r0, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0xb8>
 8006178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800617c:	2d00      	cmp	r5, #0
 800617e:	da03      	bge.n	8006188 <_printf_i+0xd0>
 8006180:	232d      	movs	r3, #45	@ 0x2d
 8006182:	426d      	negs	r5, r5
 8006184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006188:	4859      	ldr	r0, [pc, #356]	@ (80062f0 <_printf_i+0x238>)
 800618a:	230a      	movs	r3, #10
 800618c:	e011      	b.n	80061b2 <_printf_i+0xfa>
 800618e:	6821      	ldr	r1, [r4, #0]
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	0608      	lsls	r0, r1, #24
 8006194:	f853 5b04 	ldr.w	r5, [r3], #4
 8006198:	d402      	bmi.n	80061a0 <_printf_i+0xe8>
 800619a:	0649      	lsls	r1, r1, #25
 800619c:	bf48      	it	mi
 800619e:	b2ad      	uxthmi	r5, r5
 80061a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80061a2:	4853      	ldr	r0, [pc, #332]	@ (80062f0 <_printf_i+0x238>)
 80061a4:	6033      	str	r3, [r6, #0]
 80061a6:	bf14      	ite	ne
 80061a8:	230a      	movne	r3, #10
 80061aa:	2308      	moveq	r3, #8
 80061ac:	2100      	movs	r1, #0
 80061ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061b2:	6866      	ldr	r6, [r4, #4]
 80061b4:	60a6      	str	r6, [r4, #8]
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	bfa2      	ittt	ge
 80061ba:	6821      	ldrge	r1, [r4, #0]
 80061bc:	f021 0104 	bicge.w	r1, r1, #4
 80061c0:	6021      	strge	r1, [r4, #0]
 80061c2:	b90d      	cbnz	r5, 80061c8 <_printf_i+0x110>
 80061c4:	2e00      	cmp	r6, #0
 80061c6:	d04b      	beq.n	8006260 <_printf_i+0x1a8>
 80061c8:	4616      	mov	r6, r2
 80061ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ce:	fb03 5711 	mls	r7, r3, r1, r5
 80061d2:	5dc7      	ldrb	r7, [r0, r7]
 80061d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061d8:	462f      	mov	r7, r5
 80061da:	42bb      	cmp	r3, r7
 80061dc:	460d      	mov	r5, r1
 80061de:	d9f4      	bls.n	80061ca <_printf_i+0x112>
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d10b      	bne.n	80061fc <_printf_i+0x144>
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	07df      	lsls	r7, r3, #31
 80061e8:	d508      	bpl.n	80061fc <_printf_i+0x144>
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	6861      	ldr	r1, [r4, #4]
 80061ee:	4299      	cmp	r1, r3
 80061f0:	bfde      	ittt	le
 80061f2:	2330      	movle	r3, #48	@ 0x30
 80061f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80061f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80061fc:	1b92      	subs	r2, r2, r6
 80061fe:	6122      	str	r2, [r4, #16]
 8006200:	f8cd a000 	str.w	sl, [sp]
 8006204:	464b      	mov	r3, r9
 8006206:	aa03      	add	r2, sp, #12
 8006208:	4621      	mov	r1, r4
 800620a:	4640      	mov	r0, r8
 800620c:	f7ff fee6 	bl	8005fdc <_printf_common>
 8006210:	3001      	adds	r0, #1
 8006212:	d14a      	bne.n	80062aa <_printf_i+0x1f2>
 8006214:	f04f 30ff 	mov.w	r0, #4294967295
 8006218:	b004      	add	sp, #16
 800621a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800621e:	6823      	ldr	r3, [r4, #0]
 8006220:	f043 0320 	orr.w	r3, r3, #32
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	4833      	ldr	r0, [pc, #204]	@ (80062f4 <_printf_i+0x23c>)
 8006228:	2778      	movs	r7, #120	@ 0x78
 800622a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800622e:	6823      	ldr	r3, [r4, #0]
 8006230:	6831      	ldr	r1, [r6, #0]
 8006232:	061f      	lsls	r7, r3, #24
 8006234:	f851 5b04 	ldr.w	r5, [r1], #4
 8006238:	d402      	bmi.n	8006240 <_printf_i+0x188>
 800623a:	065f      	lsls	r7, r3, #25
 800623c:	bf48      	it	mi
 800623e:	b2ad      	uxthmi	r5, r5
 8006240:	6031      	str	r1, [r6, #0]
 8006242:	07d9      	lsls	r1, r3, #31
 8006244:	bf44      	itt	mi
 8006246:	f043 0320 	orrmi.w	r3, r3, #32
 800624a:	6023      	strmi	r3, [r4, #0]
 800624c:	b11d      	cbz	r5, 8006256 <_printf_i+0x19e>
 800624e:	2310      	movs	r3, #16
 8006250:	e7ac      	b.n	80061ac <_printf_i+0xf4>
 8006252:	4827      	ldr	r0, [pc, #156]	@ (80062f0 <_printf_i+0x238>)
 8006254:	e7e9      	b.n	800622a <_printf_i+0x172>
 8006256:	6823      	ldr	r3, [r4, #0]
 8006258:	f023 0320 	bic.w	r3, r3, #32
 800625c:	6023      	str	r3, [r4, #0]
 800625e:	e7f6      	b.n	800624e <_printf_i+0x196>
 8006260:	4616      	mov	r6, r2
 8006262:	e7bd      	b.n	80061e0 <_printf_i+0x128>
 8006264:	6833      	ldr	r3, [r6, #0]
 8006266:	6825      	ldr	r5, [r4, #0]
 8006268:	6961      	ldr	r1, [r4, #20]
 800626a:	1d18      	adds	r0, r3, #4
 800626c:	6030      	str	r0, [r6, #0]
 800626e:	062e      	lsls	r6, r5, #24
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	d501      	bpl.n	8006278 <_printf_i+0x1c0>
 8006274:	6019      	str	r1, [r3, #0]
 8006276:	e002      	b.n	800627e <_printf_i+0x1c6>
 8006278:	0668      	lsls	r0, r5, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0x1bc>
 800627c:	8019      	strh	r1, [r3, #0]
 800627e:	2300      	movs	r3, #0
 8006280:	6123      	str	r3, [r4, #16]
 8006282:	4616      	mov	r6, r2
 8006284:	e7bc      	b.n	8006200 <_printf_i+0x148>
 8006286:	6833      	ldr	r3, [r6, #0]
 8006288:	1d1a      	adds	r2, r3, #4
 800628a:	6032      	str	r2, [r6, #0]
 800628c:	681e      	ldr	r6, [r3, #0]
 800628e:	6862      	ldr	r2, [r4, #4]
 8006290:	2100      	movs	r1, #0
 8006292:	4630      	mov	r0, r6
 8006294:	f7f9 ff9c 	bl	80001d0 <memchr>
 8006298:	b108      	cbz	r0, 800629e <_printf_i+0x1e6>
 800629a:	1b80      	subs	r0, r0, r6
 800629c:	6060      	str	r0, [r4, #4]
 800629e:	6863      	ldr	r3, [r4, #4]
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	2300      	movs	r3, #0
 80062a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062a8:	e7aa      	b.n	8006200 <_printf_i+0x148>
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	4632      	mov	r2, r6
 80062ae:	4649      	mov	r1, r9
 80062b0:	4640      	mov	r0, r8
 80062b2:	47d0      	blx	sl
 80062b4:	3001      	adds	r0, #1
 80062b6:	d0ad      	beq.n	8006214 <_printf_i+0x15c>
 80062b8:	6823      	ldr	r3, [r4, #0]
 80062ba:	079b      	lsls	r3, r3, #30
 80062bc:	d413      	bmi.n	80062e6 <_printf_i+0x22e>
 80062be:	68e0      	ldr	r0, [r4, #12]
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	4298      	cmp	r0, r3
 80062c4:	bfb8      	it	lt
 80062c6:	4618      	movlt	r0, r3
 80062c8:	e7a6      	b.n	8006218 <_printf_i+0x160>
 80062ca:	2301      	movs	r3, #1
 80062cc:	4632      	mov	r2, r6
 80062ce:	4649      	mov	r1, r9
 80062d0:	4640      	mov	r0, r8
 80062d2:	47d0      	blx	sl
 80062d4:	3001      	adds	r0, #1
 80062d6:	d09d      	beq.n	8006214 <_printf_i+0x15c>
 80062d8:	3501      	adds	r5, #1
 80062da:	68e3      	ldr	r3, [r4, #12]
 80062dc:	9903      	ldr	r1, [sp, #12]
 80062de:	1a5b      	subs	r3, r3, r1
 80062e0:	42ab      	cmp	r3, r5
 80062e2:	dcf2      	bgt.n	80062ca <_printf_i+0x212>
 80062e4:	e7eb      	b.n	80062be <_printf_i+0x206>
 80062e6:	2500      	movs	r5, #0
 80062e8:	f104 0619 	add.w	r6, r4, #25
 80062ec:	e7f5      	b.n	80062da <_printf_i+0x222>
 80062ee:	bf00      	nop
 80062f0:	080066d9 	.word	0x080066d9
 80062f4:	080066ea 	.word	0x080066ea

080062f8 <memmove>:
 80062f8:	4288      	cmp	r0, r1
 80062fa:	b510      	push	{r4, lr}
 80062fc:	eb01 0402 	add.w	r4, r1, r2
 8006300:	d902      	bls.n	8006308 <memmove+0x10>
 8006302:	4284      	cmp	r4, r0
 8006304:	4623      	mov	r3, r4
 8006306:	d807      	bhi.n	8006318 <memmove+0x20>
 8006308:	1e43      	subs	r3, r0, #1
 800630a:	42a1      	cmp	r1, r4
 800630c:	d008      	beq.n	8006320 <memmove+0x28>
 800630e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006312:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006316:	e7f8      	b.n	800630a <memmove+0x12>
 8006318:	4402      	add	r2, r0
 800631a:	4601      	mov	r1, r0
 800631c:	428a      	cmp	r2, r1
 800631e:	d100      	bne.n	8006322 <memmove+0x2a>
 8006320:	bd10      	pop	{r4, pc}
 8006322:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006326:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800632a:	e7f7      	b.n	800631c <memmove+0x24>

0800632c <_sbrk_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4d06      	ldr	r5, [pc, #24]	@ (8006348 <_sbrk_r+0x1c>)
 8006330:	2300      	movs	r3, #0
 8006332:	4604      	mov	r4, r0
 8006334:	4608      	mov	r0, r1
 8006336:	602b      	str	r3, [r5, #0]
 8006338:	f7fa fc9c 	bl	8000c74 <_sbrk>
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d102      	bne.n	8006346 <_sbrk_r+0x1a>
 8006340:	682b      	ldr	r3, [r5, #0]
 8006342:	b103      	cbz	r3, 8006346 <_sbrk_r+0x1a>
 8006344:	6023      	str	r3, [r4, #0]
 8006346:	bd38      	pop	{r3, r4, r5, pc}
 8006348:	20004cb0 	.word	0x20004cb0

0800634c <_realloc_r>:
 800634c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	4680      	mov	r8, r0
 8006352:	4615      	mov	r5, r2
 8006354:	460c      	mov	r4, r1
 8006356:	b921      	cbnz	r1, 8006362 <_realloc_r+0x16>
 8006358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800635c:	4611      	mov	r1, r2
 800635e:	f7ff bc59 	b.w	8005c14 <_malloc_r>
 8006362:	b92a      	cbnz	r2, 8006370 <_realloc_r+0x24>
 8006364:	f7ff fbea 	bl	8005b3c <_free_r>
 8006368:	2400      	movs	r4, #0
 800636a:	4620      	mov	r0, r4
 800636c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006370:	f000 f81a 	bl	80063a8 <_malloc_usable_size_r>
 8006374:	4285      	cmp	r5, r0
 8006376:	4606      	mov	r6, r0
 8006378:	d802      	bhi.n	8006380 <_realloc_r+0x34>
 800637a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800637e:	d8f4      	bhi.n	800636a <_realloc_r+0x1e>
 8006380:	4629      	mov	r1, r5
 8006382:	4640      	mov	r0, r8
 8006384:	f7ff fc46 	bl	8005c14 <_malloc_r>
 8006388:	4607      	mov	r7, r0
 800638a:	2800      	cmp	r0, #0
 800638c:	d0ec      	beq.n	8006368 <_realloc_r+0x1c>
 800638e:	42b5      	cmp	r5, r6
 8006390:	462a      	mov	r2, r5
 8006392:	4621      	mov	r1, r4
 8006394:	bf28      	it	cs
 8006396:	4632      	movcs	r2, r6
 8006398:	f7ff fbc2 	bl	8005b20 <memcpy>
 800639c:	4621      	mov	r1, r4
 800639e:	4640      	mov	r0, r8
 80063a0:	f7ff fbcc 	bl	8005b3c <_free_r>
 80063a4:	463c      	mov	r4, r7
 80063a6:	e7e0      	b.n	800636a <_realloc_r+0x1e>

080063a8 <_malloc_usable_size_r>:
 80063a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063ac:	1f18      	subs	r0, r3, #4
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bfbc      	itt	lt
 80063b2:	580b      	ldrlt	r3, [r1, r0]
 80063b4:	18c0      	addlt	r0, r0, r3
 80063b6:	4770      	bx	lr

080063b8 <_init>:
 80063b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ba:	bf00      	nop
 80063bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063be:	bc08      	pop	{r3}
 80063c0:	469e      	mov	lr, r3
 80063c2:	4770      	bx	lr

080063c4 <_fini>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr
