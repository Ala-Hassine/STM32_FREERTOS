
LAB_13_MUTEX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08008dd0  08008dd0  00009dd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009248  08009248  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009248  08009248  0000a248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009250  08009250  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009250  08009250  0000a250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009254  08009254  0000a254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009258  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1d8  2**0
                  CONTENTS
 10 .bss          00004bc4  200001d8  200001d8  0000b1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004d9c  20004d9c  0000b1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014d43  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fe3  00000000  00000000  0001ff4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00022f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e45  00000000  00000000  000241c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004218  00000000  00000000  0002500d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e4b  00000000  00000000  00029225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5311  00000000  00000000  0003d070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112381  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005d4c  00000000  00000000  001123c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00118110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008db4 	.word	0x08008db4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008db4 	.word	0x08008db4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fc50 	bl	8001740 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f86c 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f8d4 	bl	8001050 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // Create message queues
  ledQueueHandle 	= osMessageQueueNew(10, sizeof(LED_Command_t), NULL);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2108      	movs	r1, #8
 8000eac:	200a      	movs	r0, #10
 8000eae:	f002 f903 	bl	80030b8 <osMessageQueueNew>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <main+0xa0>)
 8000eb6:	6013      	str	r3, [r2, #0]
  buttonQueueHandle = osMessageQueueNew(10, sizeof(Button_Press_t), NULL);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2108      	movs	r1, #8
 8000ebc:	200a      	movs	r0, #10
 8000ebe:	f002 f8fb 	bl	80030b8 <osMessageQueueNew>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <main+0xa4>)
 8000ec6:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); // Orange LED (PD12)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ece:	481c      	ldr	r0, [pc, #112]	@ (8000f40 <main+0xa8>)
 8000ed0:	f000 fef6 	bl	8001cc0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); // Green LED (PD13)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000eda:	4819      	ldr	r0, [pc, #100]	@ (8000f40 <main+0xa8>)
 8000edc:	f000 fef0 	bl	8001cc0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee0:	f001 fed0 	bl	8002c84 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 8000ee4:	4817      	ldr	r0, [pc, #92]	@ (8000f44 <main+0xac>)
 8000ee6:	f001 ffd9 	bl	8002e9c <osMutexNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a16      	ldr	r2, [pc, #88]	@ (8000f48 <main+0xb0>)
 8000eee:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ef0:	4a16      	ldr	r2, [pc, #88]	@ (8000f4c <main+0xb4>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4816      	ldr	r0, [pc, #88]	@ (8000f50 <main+0xb8>)
 8000ef6:	f001 ff24 	bl	8002d42 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a15      	ldr	r2, [pc, #84]	@ (8000f54 <main+0xbc>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* creation of BTN1_Task */
  BTN1_TaskHandle = osThreadNew(StartBTN1_Task, NULL, &BTN1_Task_attributes);
 8000f00:	4a15      	ldr	r2, [pc, #84]	@ (8000f58 <main+0xc0>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4815      	ldr	r0, [pc, #84]	@ (8000f5c <main+0xc4>)
 8000f06:	f001 ff1c 	bl	8002d42 <osThreadNew>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	4a14      	ldr	r2, [pc, #80]	@ (8000f60 <main+0xc8>)
 8000f0e:	6013      	str	r3, [r2, #0]

  /* creation of BTN2_Task */
  BTN2_TaskHandle = osThreadNew(StartBTN2_Task, NULL, &BTN2_Task_attributes);
 8000f10:	4a14      	ldr	r2, [pc, #80]	@ (8000f64 <main+0xcc>)
 8000f12:	2100      	movs	r1, #0
 8000f14:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <main+0xd0>)
 8000f16:	f001 ff14 	bl	8002d42 <osThreadNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <main+0xd4>)
 8000f1e:	6013      	str	r3, [r2, #0]

  /* creation of LEDTask */
  LEDTaskHandle = osThreadNew(StartLEDTask, NULL, &LEDTask_attributes);
 8000f20:	4a13      	ldr	r2, [pc, #76]	@ (8000f70 <main+0xd8>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	4813      	ldr	r0, [pc, #76]	@ (8000f74 <main+0xdc>)
 8000f26:	f001 ff0c 	bl	8002d42 <osThreadNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <main+0xe0>)
 8000f2e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f30:	f001 fecc 	bl	8002ccc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <main+0x9c>
 8000f38:	20000208 	.word	0x20000208
 8000f3c:	2000020c 	.word	0x2000020c
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	08008eb0 	.word	0x08008eb0
 8000f48:	20000204 	.word	0x20000204
 8000f4c:	08008e20 	.word	0x08008e20
 8000f50:	08001265 	.word	0x08001265
 8000f54:	200001f4 	.word	0x200001f4
 8000f58:	08008e44 	.word	0x08008e44
 8000f5c:	08001279 	.word	0x08001279
 8000f60:	200001f8 	.word	0x200001f8
 8000f64:	08008e68 	.word	0x08008e68
 8000f68:	080012a9 	.word	0x080012a9
 8000f6c:	200001fc 	.word	0x200001fc
 8000f70:	08008e8c 	.word	0x08008e8c
 8000f74:	080012bd 	.word	0x080012bd
 8000f78:	20000200 	.word	0x20000200

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	@ 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	@ 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f005 ff99 	bl	8006ec2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa8:	4a27      	ldr	r2, [pc, #156]	@ (8001048 <SystemClock_Config+0xcc>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb0:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	@ (800104c <SystemClock_Config+0xd0>)
 8000fc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fec:	2308      	movs	r3, #8
 8000fee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ff0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ff4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fea8 	bl	8001d58 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800100e:	f000 f9bb 	bl	8001388 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800101e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001028:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	2105      	movs	r1, #5
 8001030:	4618      	mov	r0, r3
 8001032:	f001 f909 	bl	8002248 <HAL_RCC_ClockConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800103c:	f000 f9a4 	bl	8001388 <Error_Handler>
  }
}
 8001040:	bf00      	nop
 8001042:	3750      	adds	r7, #80	@ 0x50
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <MX_GPIO_Init+0xd8>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a2e      	ldr	r2, [pc, #184]	@ (8001128 <MX_GPIO_Init+0xd8>)
 8001070:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <MX_GPIO_Init+0xd8>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	607b      	str	r3, [r7, #4]
 8001086:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <MX_GPIO_Init+0xd8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <MX_GPIO_Init+0xd8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <MX_GPIO_Init+0xd8>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	603b      	str	r3, [r7, #0]
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_GPIO_Init+0xd8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a20      	ldr	r2, [pc, #128]	@ (8001128 <MX_GPIO_Init+0xd8>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_GPIO_Init+0xd8>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 80010ba:	2200      	movs	r2, #0
 80010bc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80010c0:	481a      	ldr	r0, [pc, #104]	@ (800112c <MX_GPIO_Init+0xdc>)
 80010c2:	f000 fdfd 	bl	8001cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN0_Pin BTN1_Pin */
  GPIO_InitStruct.Pin = BTN0_Pin|BTN1_Pin;
 80010c6:	2303      	movs	r3, #3
 80010c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ca:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d0:	2302      	movs	r3, #2
 80010d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d4:	f107 030c 	add.w	r3, r7, #12
 80010d8:	4619      	mov	r1, r3
 80010da:	4815      	ldr	r0, [pc, #84]	@ (8001130 <MX_GPIO_Init+0xe0>)
 80010dc:	f000 fc54 	bl	8001988 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80010e0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80010e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	4619      	mov	r1, r3
 80010f8:	480c      	ldr	r0, [pc, #48]	@ (800112c <MX_GPIO_Init+0xdc>)
 80010fa:	f000 fc45 	bl	8001988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010fe:	2200      	movs	r2, #0
 8001100:	2105      	movs	r1, #5
 8001102:	2006      	movs	r0, #6
 8001104:	f000 fc16 	bl	8001934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001108:	2006      	movs	r0, #6
 800110a:	f000 fc2f 	bl	800196c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2105      	movs	r1, #5
 8001112:	2007      	movs	r0, #7
 8001114:	f000 fc0e 	bl	8001934 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001118:	2007      	movs	r0, #7
 800111a:	f000 fc27 	bl	800196c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40020c00 	.word	0x40020c00
 8001130:	40020000 	.word	0x40020000

08001134 <LED_Toggle>:

/* USER CODE BEGIN 4 */
void LED_Toggle(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
    HAL_GPIO_TogglePin(GPIOx, GPIO_Pin);
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	4619      	mov	r1, r3
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 fdd4 	bl	8001cf2 <HAL_GPIO_TogglePin>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <IsButtonPressed>:
uint8_t IsButtonPressed(uint8_t buttonId, uint32_t* lastPressTime)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	4603      	mov	r3, r0
 800115a:	6039      	str	r1, [r7, #0]
 800115c:	71fb      	strb	r3, [r7, #7]
    uint32_t currentTime = osKernelGetTickCount();
 800115e:	f001 fddb 	bl	8002d18 <osKernelGetTickCount>
 8001162:	60f8      	str	r0, [r7, #12]
    if ((currentTime - *lastPressTime) > DEBOUNCE_DELAY_MS)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68fa      	ldr	r2, [r7, #12]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2bc8      	cmp	r3, #200	@ 0xc8
 800116e:	d904      	bls.n	800117a <IsButtonPressed+0x28>
    {
        *lastPressTime = currentTime;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	601a      	str	r2, [r3, #0]
        return 1;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <IsButtonPressed+0x2a>
    }
    return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <ProcessButtonPress>:
void ProcessButtonPress(uint8_t buttonId)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	71fb      	strb	r3, [r7, #7]
    LED_Command_t ledCmd;
    ledCmd.ledType 	= 0;
 800118e:	2300      	movs	r3, #0
 8001190:	723b      	strb	r3, [r7, #8]
    ledCmd.action 	= 0;
 8001192:	2300      	movs	r3, #0
 8001194:	727b      	strb	r3, [r7, #9]
    osMessageQueuePut(ledQueueHandle, &ledCmd, 0, 0);
 8001196:	4b12      	ldr	r3, [pc, #72]	@ (80011e0 <ProcessButtonPress+0x5c>)
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	f107 0108 	add.w	r1, r7, #8
 800119e:	2300      	movs	r3, #0
 80011a0:	2200      	movs	r2, #0
 80011a2:	f001 fffd 	bl	80031a0 <osMessageQueuePut>
    ledCmd.ledType 	= 1;
 80011a6:	2301      	movs	r3, #1
 80011a8:	723b      	strb	r3, [r7, #8]
    ledCmd.action 	= 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	727b      	strb	r3, [r7, #9]
    if (buttonId == BUTTON_PA0)
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d104      	bne.n	80011be <ProcessButtonPress+0x3a>
    {
        ledCmd.blinkCount = 30;
 80011b4:	231e      	movs	r3, #30
 80011b6:	817b      	strh	r3, [r7, #10]
        ledCmd.blinkDelay = 200;
 80011b8:	23c8      	movs	r3, #200	@ 0xc8
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	e004      	b.n	80011c8 <ProcessButtonPress+0x44>
    }
    else
    {
        ledCmd.blinkCount = 20;
 80011be:	2314      	movs	r3, #20
 80011c0:	817b      	strh	r3, [r7, #10]
        ledCmd.blinkDelay = 1000;
 80011c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c6:	60fb      	str	r3, [r7, #12]
    }
    osMessageQueuePut(ledQueueHandle, &ledCmd, 0, 0);
 80011c8:	4b05      	ldr	r3, [pc, #20]	@ (80011e0 <ProcessButtonPress+0x5c>)
 80011ca:	6818      	ldr	r0, [r3, #0]
 80011cc:	f107 0108 	add.w	r1, r7, #8
 80011d0:	2300      	movs	r3, #0
 80011d2:	2200      	movs	r2, #0
 80011d4:	f001 ffe4 	bl	80031a0 <osMessageQueuePut>
}
 80011d8:	bf00      	nop
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000208 	.word	0x20000208

080011e4 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
    Button_Press_t buttonPress;
    if (GPIO_Pin == BTN0_Pin)
 80011ee:	88fb      	ldrh	r3, [r7, #6]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d115      	bne.n	8001220 <HAL_GPIO_EXTI_Callback+0x3c>
    {
        if (IsButtonPressed(BUTTON_PA0, &lastPressTimePA0))
 80011f4:	4918      	ldr	r1, [pc, #96]	@ (8001258 <HAL_GPIO_EXTI_Callback+0x74>)
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff ffab 	bl	8001152 <IsButtonPressed>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d026      	beq.n	8001250 <HAL_GPIO_EXTI_Callback+0x6c>
        {
            buttonPress.buttonId 	= BUTTON_PA0;
 8001202:	2300      	movs	r3, #0
 8001204:	723b      	strb	r3, [r7, #8]
            buttonPress.pressTime 	= osKernelGetTickCount();
 8001206:	f001 fd87 	bl	8002d18 <osKernelGetTickCount>
 800120a:	4603      	mov	r3, r0
 800120c:	60fb      	str	r3, [r7, #12]
            osMessageQueuePut(buttonQueueHandle, &buttonPress, 0, 0);
 800120e:	4b13      	ldr	r3, [pc, #76]	@ (800125c <HAL_GPIO_EXTI_Callback+0x78>)
 8001210:	6818      	ldr	r0, [r3, #0]
 8001212:	f107 0108 	add.w	r1, r7, #8
 8001216:	2300      	movs	r3, #0
 8001218:	2200      	movs	r2, #0
 800121a:	f001 ffc1 	bl	80031a0 <osMessageQueuePut>
            buttonPress.buttonId 	= BUTTON_PA1;
            buttonPress.pressTime 	= osKernelGetTickCount();
            osMessageQueuePut(buttonQueueHandle, &buttonPress, 0, 0);
        }
    }
}
 800121e:	e017      	b.n	8001250 <HAL_GPIO_EXTI_Callback+0x6c>
    else if (GPIO_Pin == BTN1_Pin)
 8001220:	88fb      	ldrh	r3, [r7, #6]
 8001222:	2b02      	cmp	r3, #2
 8001224:	d114      	bne.n	8001250 <HAL_GPIO_EXTI_Callback+0x6c>
        if (IsButtonPressed(BUTTON_PA1, &lastPressTimePA1))
 8001226:	490e      	ldr	r1, [pc, #56]	@ (8001260 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff ff92 	bl	8001152 <IsButtonPressed>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00d      	beq.n	8001250 <HAL_GPIO_EXTI_Callback+0x6c>
            buttonPress.buttonId 	= BUTTON_PA1;
 8001234:	2301      	movs	r3, #1
 8001236:	723b      	strb	r3, [r7, #8]
            buttonPress.pressTime 	= osKernelGetTickCount();
 8001238:	f001 fd6e 	bl	8002d18 <osKernelGetTickCount>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
            osMessageQueuePut(buttonQueueHandle, &buttonPress, 0, 0);
 8001240:	4b06      	ldr	r3, [pc, #24]	@ (800125c <HAL_GPIO_EXTI_Callback+0x78>)
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	f107 0108 	add.w	r1, r7, #8
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	f001 ffa8 	bl	80031a0 <osMessageQueuePut>
}
 8001250:	bf00      	nop
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20000210 	.word	0x20000210
 800125c:	2000020c 	.word	0x2000020c
 8001260:	20000214 	.word	0x20000214

08001264 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800126c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001270:	f001 fdf9 	bl	8002e66 <osDelay>
 8001274:	e7fa      	b.n	800126c <StartDefaultTask+0x8>
	...

08001278 <StartBTN1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBTN1_Task */
void StartBTN1_Task(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBTN1_Task */
  Button_Press_t buttonPress;
  /* Infinite loop */
  for(;;)
  {
    if (osMessageQueueGet(buttonQueueHandle, &buttonPress, NULL, osWaitForever) == osOK)
 8001280:	4b08      	ldr	r3, [pc, #32]	@ (80012a4 <StartBTN1_Task+0x2c>)
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	f107 0108 	add.w	r1, r7, #8
 8001288:	f04f 33ff 	mov.w	r3, #4294967295
 800128c:	2200      	movs	r2, #0
 800128e:	f001 ffe7 	bl	8003260 <osMessageQueueGet>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f3      	bne.n	8001280 <StartBTN1_Task+0x8>
    {
        ProcessButtonPress(buttonPress.buttonId);
 8001298:	7a3b      	ldrb	r3, [r7, #8]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff72 	bl	8001184 <ProcessButtonPress>
    if (osMessageQueueGet(buttonQueueHandle, &buttonPress, NULL, osWaitForever) == osOK)
 80012a0:	e7ee      	b.n	8001280 <StartBTN1_Task+0x8>
 80012a2:	bf00      	nop
 80012a4:	2000020c 	.word	0x2000020c

080012a8 <StartBTN2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBTN2_Task */
void StartBTN2_Task(void *argument)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBTN2_Task */
  /* This task can be used for other functionality */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80012b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012b4:	f001 fdd7 	bl	8002e66 <osDelay>
 80012b8:	e7fa      	b.n	80012b0 <StartBTN2_Task+0x8>
	...

080012bc <StartLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLEDTask */
void StartLEDTask(void *argument)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLEDTask */
  LED_Command_t ledCmd;
  /* Infinite loop */
  for(;;)
  {
	if (osMessageQueueGet(ledQueueHandle, &ledCmd, NULL, osWaitForever) == osOK)
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <StartLEDTask+0x9c>)
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	f107 010c 	add.w	r1, r7, #12
 80012cc:	f04f 33ff 	mov.w	r3, #4294967295
 80012d0:	2200      	movs	r2, #0
 80012d2:	f001 ffc5 	bl	8003260 <osMessageQueueGet>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1f3      	bne.n	80012c4 <StartLEDTask+0x8>
	{
		if (osMutexAcquire(myMutex01Handle, osWaitForever) == osOK)
 80012dc:	4b1f      	ldr	r3, [pc, #124]	@ (800135c <StartLEDTask+0xa0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295
 80012e4:	4618      	mov	r0, r3
 80012e6:	f001 fe5f 	bl	8002fa8 <osMutexAcquire>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1e9      	bne.n	80012c4 <StartLEDTask+0x8>
		{
			switch (ledCmd.action)
 80012f0:	7b7b      	ldrb	r3, [r7, #13]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <StartLEDTask+0x40>
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d00f      	beq.n	800131a <StartLEDTask+0x5e>
							LED_Toggle(LED1_GPIO_Port, LED1_Pin);
							osDelay(ledCmd.blinkDelay);
						}
					}
					break;
				default: break;
 80012fa:	e026      	b.n	800134a <StartLEDTask+0x8e>
					if (ledCmd.ledType == 0)
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d105      	bne.n	800130e <StartLEDTask+0x52>
						LED_Toggle(LED2_GPIO_Port, LED2_Pin);
 8001302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001306:	4816      	ldr	r0, [pc, #88]	@ (8001360 <StartLEDTask+0xa4>)
 8001308:	f7ff ff14 	bl	8001134 <LED_Toggle>
					break;
 800130c:	e01d      	b.n	800134a <StartLEDTask+0x8e>
						LED_Toggle(LED1_GPIO_Port, LED1_Pin);
 800130e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001312:	4813      	ldr	r0, [pc, #76]	@ (8001360 <StartLEDTask+0xa4>)
 8001314:	f7ff ff0e 	bl	8001134 <LED_Toggle>
					break;
 8001318:	e017      	b.n	800134a <StartLEDTask+0x8e>
					if (ledCmd.ledType == 1)
 800131a:	7b3b      	ldrb	r3, [r7, #12]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d113      	bne.n	8001348 <StartLEDTask+0x8c>
						for (int i = 0; i < ledCmd.blinkCount * 2; i++)
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	e00b      	b.n	800133e <StartLEDTask+0x82>
							LED_Toggle(LED1_GPIO_Port, LED1_Pin);
 8001326:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800132a:	480d      	ldr	r0, [pc, #52]	@ (8001360 <StartLEDTask+0xa4>)
 800132c:	f7ff ff02 	bl	8001134 <LED_Toggle>
							osDelay(ledCmd.blinkDelay);
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 fd97 	bl	8002e66 <osDelay>
						for (int i = 0; i < ledCmd.blinkCount * 2; i++)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3301      	adds	r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	005b      	lsls	r3, r3, #1
 8001342:	697a      	ldr	r2, [r7, #20]
 8001344:	429a      	cmp	r2, r3
 8001346:	dbee      	blt.n	8001326 <StartLEDTask+0x6a>
					break;
 8001348:	bf00      	nop
			}
			osMutexRelease(myMutex01Handle);
 800134a:	4b04      	ldr	r3, [pc, #16]	@ (800135c <StartLEDTask+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f001 fe75 	bl	800303e <osMutexRelease>
	if (osMessageQueueGet(ledQueueHandle, &ledCmd, NULL, osWaitForever) == osOK)
 8001354:	e7b6      	b.n	80012c4 <StartLEDTask+0x8>
 8001356:	bf00      	nop
 8001358:	20000208 	.word	0x20000208
 800135c:	20000204 	.word	0x20000204
 8001360:	40020c00 	.word	0x40020c00

08001364 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d101      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001376:	f000 fa05 	bl	8001784 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40010000 	.word	0x40010000

08001388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800138c:	b672      	cpsid	i
}
 800138e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <Error_Handler+0x8>

08001394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	607b      	str	r3, [r7, #4]
 800139e:	4b12      	ldr	r3, [pc, #72]	@ (80013e8 <HAL_MspInit+0x54>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	4a11      	ldr	r2, [pc, #68]	@ (80013e8 <HAL_MspInit+0x54>)
 80013a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_MspInit+0x54>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_MspInit+0x54>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_MspInit+0x54>)
 80013c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_MspInit+0x54>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210f      	movs	r1, #15
 80013d6:	f06f 0001 	mvn.w	r0, #1
 80013da:	f000 faab 	bl	8001934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08c      	sub	sp, #48	@ 0x30
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	4b2f      	ldr	r3, [pc, #188]	@ (80014c0 <HAL_InitTick+0xd4>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001404:	4a2e      	ldr	r2, [pc, #184]	@ (80014c0 <HAL_InitTick+0xd4>)
 8001406:	f043 0301 	orr.w	r3, r3, #1
 800140a:	6453      	str	r3, [r2, #68]	@ 0x44
 800140c:	4b2c      	ldr	r3, [pc, #176]	@ (80014c0 <HAL_InitTick+0xd4>)
 800140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	f107 0310 	add.w	r3, r7, #16
 8001420:	4611      	mov	r1, r2
 8001422:	4618      	mov	r0, r3
 8001424:	f001 f91c 	bl	8002660 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001428:	f001 f906 	bl	8002638 <HAL_RCC_GetPCLK2Freq>
 800142c:	4603      	mov	r3, r0
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001434:	4a23      	ldr	r2, [pc, #140]	@ (80014c4 <HAL_InitTick+0xd8>)
 8001436:	fba2 2303 	umull	r2, r3, r2, r3
 800143a:	0c9b      	lsrs	r3, r3, #18
 800143c:	3b01      	subs	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001440:	4b21      	ldr	r3, [pc, #132]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001442:	4a22      	ldr	r2, [pc, #136]	@ (80014cc <HAL_InitTick+0xe0>)
 8001444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001446:	4b20      	ldr	r3, [pc, #128]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001448:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800144c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800144e:	4a1e      	ldr	r2, [pc, #120]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001452:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001454:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_InitTick+0xdc>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001460:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001466:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <HAL_InitTick+0xdc>)
 8001468:	f001 f92c 	bl	80026c4 <HAL_TIM_Base_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001472:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11b      	bne.n	80014b2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800147a:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_InitTick+0xdc>)
 800147c:	f001 f97c 	bl	8002778 <HAL_TIM_Base_Start_IT>
 8001480:	4603      	mov	r3, r0
 8001482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800148a:	2b00      	cmp	r3, #0
 800148c:	d111      	bne.n	80014b2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800148e:	2019      	movs	r0, #25
 8001490:	f000 fa6c 	bl	800196c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	d808      	bhi.n	80014ac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800149a:	2200      	movs	r2, #0
 800149c:	6879      	ldr	r1, [r7, #4]
 800149e:	2019      	movs	r0, #25
 80014a0:	f000 fa48 	bl	8001934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014a4:	4a0a      	ldr	r2, [pc, #40]	@ (80014d0 <HAL_InitTick+0xe4>)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e002      	b.n	80014b2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3730      	adds	r7, #48	@ 0x30
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	431bde83 	.word	0x431bde83
 80014c8:	20000218 	.word	0x20000218
 80014cc:	40010000 	.word	0x40010000
 80014d0:	20000004 	.word	0x20000004

080014d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <NMI_Handler+0x4>

080014dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <HardFault_Handler+0x4>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <MemManage_Handler+0x4>

080014ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	bf00      	nop
 80014fa:	e7fd      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN0_Pin);
 800150e:	2001      	movs	r0, #1
 8001510:	f000 fc0a 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 800151c:	2002      	movs	r0, #2
 800151e:	f000 fc03 	bl	8001d28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800152c:	4802      	ldr	r0, [pc, #8]	@ (8001538 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800152e:	f001 f993 	bl	8002858 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	20000218 	.word	0x20000218

0800153c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return 1;
 8001540:	2301      	movs	r3, #1
}
 8001542:	4618      	mov	r0, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_kill>:

int _kill(int pid, int sig)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001556:	f005 fd5d 	bl	8007014 <__errno>
 800155a:	4603      	mov	r3, r0
 800155c:	2216      	movs	r2, #22
 800155e:	601a      	str	r2, [r3, #0]
  return -1;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001564:	4618      	mov	r0, r3
 8001566:	3708      	adds	r7, #8
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <_exit>:

void _exit (int status)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001574:	f04f 31ff 	mov.w	r1, #4294967295
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ffe7 	bl	800154c <_kill>
  while (1) {}    /* Make sure we hang here */
 800157e:	bf00      	nop
 8001580:	e7fd      	b.n	800157e <_exit+0x12>

08001582 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	60f8      	str	r0, [r7, #12]
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158e:	2300      	movs	r3, #0
 8001590:	617b      	str	r3, [r7, #20]
 8001592:	e00a      	b.n	80015aa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001594:	f3af 8000 	nop.w
 8001598:	4601      	mov	r1, r0
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	60ba      	str	r2, [r7, #8]
 80015a0:	b2ca      	uxtb	r2, r1
 80015a2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	3301      	adds	r3, #1
 80015a8:	617b      	str	r3, [r7, #20]
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	dbf0      	blt.n	8001594 <_read+0x12>
  }

  return len;
 80015b2:	687b      	ldr	r3, [r7, #4]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e009      	b.n	80015e2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf1      	blt.n	80015ce <_write+0x12>
  }
  return len;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_close>:

int _close(int file)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001600:	4618      	mov	r0, r3
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800161c:	605a      	str	r2, [r3, #4]
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_isatty>:

int _isatty(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001634:	2301      	movs	r3, #1
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001642:	b480      	push	{r7}
 8001644:	b085      	sub	sp, #20
 8001646:	af00      	add	r7, sp, #0
 8001648:	60f8      	str	r0, [r7, #12]
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001664:	4a14      	ldr	r2, [pc, #80]	@ (80016b8 <_sbrk+0x5c>)
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <_sbrk+0x60>)
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001670:	4b13      	ldr	r3, [pc, #76]	@ (80016c0 <_sbrk+0x64>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d102      	bne.n	800167e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <_sbrk+0x64>)
 800167a:	4a12      	ldr	r2, [pc, #72]	@ (80016c4 <_sbrk+0x68>)
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800167e:	4b10      	ldr	r3, [pc, #64]	@ (80016c0 <_sbrk+0x64>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d207      	bcs.n	800169c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800168c:	f005 fcc2 	bl	8007014 <__errno>
 8001690:	4603      	mov	r3, r0
 8001692:	220c      	movs	r2, #12
 8001694:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	e009      	b.n	80016b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800169c:	4b08      	ldr	r3, [pc, #32]	@ (80016c0 <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a2:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <_sbrk+0x64>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4413      	add	r3, r2
 80016aa:	4a05      	ldr	r2, [pc, #20]	@ (80016c0 <_sbrk+0x64>)
 80016ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3718      	adds	r7, #24
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20020000 	.word	0x20020000
 80016bc:	00000400 	.word	0x00000400
 80016c0:	20000260 	.word	0x20000260
 80016c4:	20004da0 	.word	0x20004da0

080016c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016cc:	4b06      	ldr	r3, [pc, #24]	@ (80016e8 <SystemInit+0x20>)
 80016ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d2:	4a05      	ldr	r2, [pc, #20]	@ (80016e8 <SystemInit+0x20>)
 80016d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016dc:	bf00      	nop
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001724 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016f0:	f7ff ffea 	bl	80016c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f4:	480c      	ldr	r0, [pc, #48]	@ (8001728 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016f6:	490d      	ldr	r1, [pc, #52]	@ (800172c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001730 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016fc:	e002      	b.n	8001704 <LoopCopyDataInit>

080016fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001700:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001702:	3304      	adds	r3, #4

08001704 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001704:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001706:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001708:	d3f9      	bcc.n	80016fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800170c:	4c0a      	ldr	r4, [pc, #40]	@ (8001738 <LoopFillZerobss+0x22>)
  movs r3, #0
 800170e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001710:	e001      	b.n	8001716 <LoopFillZerobss>

08001712 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001712:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001714:	3204      	adds	r2, #4

08001716 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001716:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001718:	d3fb      	bcc.n	8001712 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800171a:	f005 fc81 	bl	8007020 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171e:	f7ff fbbb 	bl	8000e98 <main>
  bx  lr    
 8001722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800172c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001730:	08009258 	.word	0x08009258
  ldr r2, =_sbss
 8001734:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001738:	20004d9c 	.word	0x20004d9c

0800173c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800173c:	e7fe      	b.n	800173c <ADC_IRQHandler>
	...

08001740 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001744:	4b0e      	ldr	r3, [pc, #56]	@ (8001780 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <HAL_Init+0x40>)
 800174a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800174e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_Init+0x40>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_Init+0x40>)
 8001756:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800175a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800175c:	4b08      	ldr	r3, [pc, #32]	@ (8001780 <HAL_Init+0x40>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <HAL_Init+0x40>)
 8001762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001766:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001768:	2003      	movs	r0, #3
 800176a:	f000 f8d8 	bl	800191e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176e:	200f      	movs	r0, #15
 8001770:	f7ff fe3c 	bl	80013ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001774:	f7ff fe0e 	bl	8001394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023c00 	.word	0x40023c00

08001784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001788:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x20>)
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	461a      	mov	r2, r3
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x24>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4413      	add	r3, r2
 8001794:	4a04      	ldr	r2, [pc, #16]	@ (80017a8 <HAL_IncTick+0x24>)
 8001796:	6013      	str	r3, [r2, #0]
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008
 80017a8:	20000264 	.word	0x20000264

080017ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return uwTick;
 80017b0:	4b03      	ldr	r3, [pc, #12]	@ (80017c0 <HAL_GetTick+0x14>)
 80017b2:	681b      	ldr	r3, [r3, #0]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	20000264 	.word	0x20000264

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	@ (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001836:	2b00      	cmp	r3, #0
 8001838:	db0b      	blt.n	8001852 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 021f 	and.w	r2, r3, #31
 8001840:	4907      	ldr	r1, [pc, #28]	@ (8001860 <__NVIC_EnableIRQ+0x38>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	095b      	lsrs	r3, r3, #5
 8001848:	2001      	movs	r0, #1
 800184a:	fa00 f202 	lsl.w	r2, r0, r2
 800184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000e100 	.word	0xe000e100

08001864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	6039      	str	r1, [r7, #0]
 800186e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	2b00      	cmp	r3, #0
 8001876:	db0a      	blt.n	800188e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	b2da      	uxtb	r2, r3
 800187c:	490c      	ldr	r1, [pc, #48]	@ (80018b0 <__NVIC_SetPriority+0x4c>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	0112      	lsls	r2, r2, #4
 8001884:	b2d2      	uxtb	r2, r2
 8001886:	440b      	add	r3, r1
 8001888:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800188c:	e00a      	b.n	80018a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	b2da      	uxtb	r2, r3
 8001892:	4908      	ldr	r1, [pc, #32]	@ (80018b4 <__NVIC_SetPriority+0x50>)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	f003 030f 	and.w	r3, r3, #15
 800189a:	3b04      	subs	r3, #4
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	440b      	add	r3, r1
 80018a2:	761a      	strb	r2, [r3, #24]
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000e100 	.word	0xe000e100
 80018b4:	e000ed00 	.word	0xe000ed00

080018b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b089      	sub	sp, #36	@ 0x24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f1c3 0307 	rsb	r3, r3, #7
 80018d2:	2b04      	cmp	r3, #4
 80018d4:	bf28      	it	cs
 80018d6:	2304      	movcs	r3, #4
 80018d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3304      	adds	r3, #4
 80018de:	2b06      	cmp	r3, #6
 80018e0:	d902      	bls.n	80018e8 <NVIC_EncodePriority+0x30>
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3b03      	subs	r3, #3
 80018e6:	e000      	b.n	80018ea <NVIC_EncodePriority+0x32>
 80018e8:	2300      	movs	r3, #0
 80018ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	f04f 32ff 	mov.w	r2, #4294967295
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43da      	mvns	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001900:	f04f 31ff 	mov.w	r1, #4294967295
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa01 f303 	lsl.w	r3, r1, r3
 800190a:	43d9      	mvns	r1, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	4313      	orrs	r3, r2
         );
}
 8001912:	4618      	mov	r0, r3
 8001914:	3724      	adds	r7, #36	@ 0x24
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff4c 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001946:	f7ff ff61 	bl	800180c <__NVIC_GetPriorityGrouping>
 800194a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	68b9      	ldr	r1, [r7, #8]
 8001950:	6978      	ldr	r0, [r7, #20]
 8001952:	f7ff ffb1 	bl	80018b8 <NVIC_EncodePriority>
 8001956:	4602      	mov	r2, r0
 8001958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195c:	4611      	mov	r1, r2
 800195e:	4618      	mov	r0, r3
 8001960:	f7ff ff80 	bl	8001864 <__NVIC_SetPriority>
}
 8001964:	bf00      	nop
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff ff54 	bl	8001828 <__NVIC_EnableIRQ>
}
 8001980:	bf00      	nop
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	b480      	push	{r7}
 800198a:	b089      	sub	sp, #36	@ 0x24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001996:	2300      	movs	r3, #0
 8001998:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	e16b      	b.n	8001c7c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	697a      	ldr	r2, [r7, #20]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	429a      	cmp	r2, r3
 80019be:	f040 815a 	bne.w	8001c76 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d005      	beq.n	80019da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d130      	bne.n	8001a3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68da      	ldr	r2, [r3, #12]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a10:	2201      	movs	r2, #1
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	f003 0201 	and.w	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 0303 	and.w	r3, r3, #3
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d017      	beq.n	8001a78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	689a      	ldr	r2, [r3, #8]
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d123      	bne.n	8001acc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	08da      	lsrs	r2, r3, #3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3208      	adds	r2, #8
 8001a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	69b9      	ldr	r1, [r7, #24]
 8001ac8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f003 0203 	and.w	r2, r3, #3
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80b4 	beq.w	8001c76 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b60      	ldr	r3, [pc, #384]	@ (8001c94 <HAL_GPIO_Init+0x30c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a5f      	ldr	r2, [pc, #380]	@ (8001c94 <HAL_GPIO_Init+0x30c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8001c94 <HAL_GPIO_Init+0x30c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b2a:	4a5b      	ldr	r2, [pc, #364]	@ (8001c98 <HAL_GPIO_Init+0x310>)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	089b      	lsrs	r3, r3, #2
 8001b30:	3302      	adds	r3, #2
 8001b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f003 0303 	and.w	r3, r3, #3
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	220f      	movs	r2, #15
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_GPIO_Init+0x314>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d02b      	beq.n	8001bae <HAL_GPIO_Init+0x226>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a51      	ldr	r2, [pc, #324]	@ (8001ca0 <HAL_GPIO_Init+0x318>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d025      	beq.n	8001baa <HAL_GPIO_Init+0x222>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a50      	ldr	r2, [pc, #320]	@ (8001ca4 <HAL_GPIO_Init+0x31c>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d01f      	beq.n	8001ba6 <HAL_GPIO_Init+0x21e>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a4f      	ldr	r2, [pc, #316]	@ (8001ca8 <HAL_GPIO_Init+0x320>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d019      	beq.n	8001ba2 <HAL_GPIO_Init+0x21a>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a4e      	ldr	r2, [pc, #312]	@ (8001cac <HAL_GPIO_Init+0x324>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0x216>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb0 <HAL_GPIO_Init+0x328>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d00d      	beq.n	8001b9a <HAL_GPIO_Init+0x212>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a4c      	ldr	r2, [pc, #304]	@ (8001cb4 <HAL_GPIO_Init+0x32c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d007      	beq.n	8001b96 <HAL_GPIO_Init+0x20e>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a4b      	ldr	r2, [pc, #300]	@ (8001cb8 <HAL_GPIO_Init+0x330>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d101      	bne.n	8001b92 <HAL_GPIO_Init+0x20a>
 8001b8e:	2307      	movs	r3, #7
 8001b90:	e00e      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001b92:	2308      	movs	r3, #8
 8001b94:	e00c      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001b96:	2306      	movs	r3, #6
 8001b98:	e00a      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001b9a:	2305      	movs	r3, #5
 8001b9c:	e008      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e006      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e004      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e002      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <HAL_GPIO_Init+0x228>
 8001bae:	2300      	movs	r3, #0
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f002 0203 	and.w	r2, r2, #3
 8001bb6:	0092      	lsls	r2, r2, #2
 8001bb8:	4093      	lsls	r3, r2
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc0:	4935      	ldr	r1, [pc, #212]	@ (8001c98 <HAL_GPIO_Init+0x310>)
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	089b      	lsrs	r3, r3, #2
 8001bc6:	3302      	adds	r3, #2
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bce:	4b3b      	ldr	r3, [pc, #236]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	43db      	mvns	r3, r3
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bf2:	4a32      	ldr	r2, [pc, #200]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bf8:	4b30      	ldr	r3, [pc, #192]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d003      	beq.n	8001c1c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c1c:	4a27      	ldr	r2, [pc, #156]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c22:	4b26      	ldr	r3, [pc, #152]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c46:	4a1d      	ldr	r2, [pc, #116]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	43db      	mvns	r3, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c70:	4a12      	ldr	r2, [pc, #72]	@ (8001cbc <HAL_GPIO_Init+0x334>)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	61fb      	str	r3, [r7, #28]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	2b0f      	cmp	r3, #15
 8001c80:	f67f ae90 	bls.w	80019a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3724      	adds	r7, #36	@ 0x24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020c00 	.word	0x40020c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40021400 	.word	0x40021400
 8001cb4:	40021800 	.word	0x40021800
 8001cb8:	40021c00 	.word	0x40021c00
 8001cbc:	40013c00 	.word	0x40013c00

08001cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	807b      	strh	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd0:	787b      	ldrb	r3, [r7, #1]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd6:	887a      	ldrh	r2, [r7, #2]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001cdc:	e003      	b.n	8001ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001cde:	887b      	ldrh	r3, [r7, #2]
 8001ce0:	041a      	lsls	r2, r3, #16
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b085      	sub	sp, #20
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d04:	887a      	ldrh	r2, [r7, #2]
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	041a      	lsls	r2, r3, #16
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	43d9      	mvns	r1, r3
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	400b      	ands	r3, r1
 8001d14:	431a      	orrs	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d34:	695a      	ldr	r2, [r3, #20]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d006      	beq.n	8001d4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d3e:	4a05      	ldr	r2, [pc, #20]	@ (8001d54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa4c 	bl	80011e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d101      	bne.n	8001d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e267      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0301 	and.w	r3, r3, #1
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d075      	beq.n	8001e62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d76:	4b88      	ldr	r3, [pc, #544]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d00c      	beq.n	8001d9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d82:	4b85      	ldr	r3, [pc, #532]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d112      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d8e:	4b82      	ldr	r3, [pc, #520]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d9a:	d10b      	bne.n	8001db4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d05b      	beq.n	8001e60 <HAL_RCC_OscConfig+0x108>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d157      	bne.n	8001e60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e242      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dbc:	d106      	bne.n	8001dcc <HAL_RCC_OscConfig+0x74>
 8001dbe:	4b76      	ldr	r3, [pc, #472]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a75      	ldr	r2, [pc, #468]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	e01d      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dd4:	d10c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x98>
 8001dd6:	4b70      	ldr	r3, [pc, #448]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a6f      	ldr	r2, [pc, #444]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ddc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a6c      	ldr	r2, [pc, #432]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	e00b      	b.n	8001e08 <HAL_RCC_OscConfig+0xb0>
 8001df0:	4b69      	ldr	r3, [pc, #420]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a68      	ldr	r2, [pc, #416]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dfa:	6013      	str	r3, [r2, #0]
 8001dfc:	4b66      	ldr	r3, [pc, #408]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a65      	ldr	r2, [pc, #404]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7ff fccc 	bl	80017ac <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7ff fcc8 	bl	80017ac <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e207      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0f0      	beq.n	8001e18 <HAL_RCC_OscConfig+0xc0>
 8001e36:	e014      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fcb8 	bl	80017ac <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e40:	f7ff fcb4 	bl	80017ac <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	@ 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e1f3      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e52:	4b51      	ldr	r3, [pc, #324]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1f0      	bne.n	8001e40 <HAL_RCC_OscConfig+0xe8>
 8001e5e:	e000      	b.n	8001e62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d063      	beq.n	8001f36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00b      	beq.n	8001e92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e7a:	4b47      	ldr	r3, [pc, #284]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d11c      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b44      	ldr	r3, [pc, #272]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d116      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e92:	4b41      	ldr	r3, [pc, #260]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d001      	beq.n	8001eaa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e1c7      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eaa:	4b3b      	ldr	r3, [pc, #236]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4937      	ldr	r1, [pc, #220]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ebe:	e03a      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec8:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001eca:	2201      	movs	r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ece:	f7ff fc6d 	bl	80017ac <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed6:	f7ff fc69 	bl	80017ac <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1a8      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d0f0      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef4:	4b28      	ldr	r3, [pc, #160]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4925      	ldr	r1, [pc, #148]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	600b      	str	r3, [r1, #0]
 8001f08:	e015      	b.n	8001f36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0a:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <HAL_RCC_OscConfig+0x244>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f10:	f7ff fc4c 	bl	80017ac <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f18:	f7ff fc48 	bl	80017ac <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e187      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d036      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	695b      	ldr	r3, [r3, #20]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d016      	beq.n	8001f78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4a:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fc2c 	bl	80017ac <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f58:	f7ff fc28 	bl	80017ac <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e167      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f98 <HAL_RCC_OscConfig+0x240>)
 8001f6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0f0      	beq.n	8001f58 <HAL_RCC_OscConfig+0x200>
 8001f76:	e01b      	b.n	8001fb0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f78:	4b09      	ldr	r3, [pc, #36]	@ (8001fa0 <HAL_RCC_OscConfig+0x248>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7ff fc15 	bl	80017ac <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f84:	e00e      	b.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f86:	f7ff fc11 	bl	80017ac <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d907      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e150      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	42470000 	.word	0x42470000
 8001fa0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	4b88      	ldr	r3, [pc, #544]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1ea      	bne.n	8001f86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 8097 	beq.w	80020ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b81      	ldr	r3, [pc, #516]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b7d      	ldr	r3, [pc, #500]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fde:	4b7a      	ldr	r3, [pc, #488]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b77      	ldr	r3, [pc, #476]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b74      	ldr	r3, [pc, #464]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a73      	ldr	r2, [pc, #460]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fbd1 	bl	80017ac <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fbcd 	bl	80017ac <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b02      	cmp	r3, #2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e10c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b6a      	ldr	r3, [pc, #424]	@ (80021cc <HAL_RCC_OscConfig+0x474>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ea>
 8002034:	4b64      	ldr	r3, [pc, #400]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002038:	4a63      	ldr	r2, [pc, #396]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002040:	e01c      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b05      	cmp	r3, #5
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x30c>
 800204a:	4b5f      	ldr	r3, [pc, #380]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204e:	4a5e      	ldr	r2, [pc, #376]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	@ 0x70
 8002056:	4b5c      	ldr	r3, [pc, #368]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800205a:	4a5b      	ldr	r2, [pc, #364]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6713      	str	r3, [r2, #112]	@ 0x70
 8002062:	e00b      	b.n	800207c <HAL_RCC_OscConfig+0x324>
 8002064:	4b58      	ldr	r3, [pc, #352]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002068:	4a57      	ldr	r2, [pc, #348]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800206a:	f023 0301 	bic.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002070:	4b55      	ldr	r3, [pc, #340]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	4a54      	ldr	r2, [pc, #336]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002076:	f023 0304 	bic.w	r3, r3, #4
 800207a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d015      	beq.n	80020b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002084:	f7ff fb92 	bl	80017ac <HAL_GetTick>
 8002088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208a:	e00a      	b.n	80020a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7ff fb8e 	bl	80017ac <HAL_GetTick>
 8002090:	4602      	mov	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0cb      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a2:	4b49      	ldr	r3, [pc, #292]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d0ee      	beq.n	800208c <HAL_RCC_OscConfig+0x334>
 80020ae:	e014      	b.n	80020da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020b0:	f7ff fb7c 	bl	80017ac <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b8:	f7ff fb78 	bl	80017ac <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e0b5      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ce:	4b3e      	ldr	r3, [pc, #248]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ee      	bne.n	80020b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020e0:	4b39      	ldr	r3, [pc, #228]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e4:	4a38      	ldr	r2, [pc, #224]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80a1 	beq.w	8002238 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020f6:	4b34      	ldr	r3, [pc, #208]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 030c 	and.w	r3, r3, #12
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d05c      	beq.n	80021bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d141      	bne.n	800218e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b31      	ldr	r3, [pc, #196]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7ff fb4c 	bl	80017ac <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002118:	f7ff fb48 	bl	80017ac <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e087      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b27      	ldr	r3, [pc, #156]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69da      	ldr	r2, [r3, #28]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	019b      	lsls	r3, r3, #6
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002158:	061b      	lsls	r3, r3, #24
 800215a:	491b      	ldr	r1, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b1b      	ldr	r3, [pc, #108]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fb21 	bl	80017ac <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff fb1d 	bl	80017ac <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e05c      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x416>
 800218c:	e054      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <HAL_RCC_OscConfig+0x478>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fb0a 	bl	80017ac <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fb06 	bl	80017ac <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e045      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <HAL_RCC_OscConfig+0x470>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x444>
 80021ba:	e03d      	b.n	8002238 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e038      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	40007000 	.word	0x40007000
 80021d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002244 <HAL_RCC_OscConfig+0x4ec>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d028      	beq.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d121      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11a      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800220a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800220c:	4293      	cmp	r3, r2
 800220e:	d111      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	3b01      	subs	r3, #1
 800221e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d001      	beq.n	8002238 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3718      	adds	r7, #24
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023800 	.word	0x40023800

08002248 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e0cc      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800225c:	4b68      	ldr	r3, [pc, #416]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d90c      	bls.n	8002284 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b65      	ldr	r3, [pc, #404]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b63      	ldr	r3, [pc, #396]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0307 	and.w	r3, r3, #7
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0b8      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d020      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b00      	cmp	r3, #0
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800229c:	4b59      	ldr	r3, [pc, #356]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	4a58      	ldr	r2, [pc, #352]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80022a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b4:	4b53      	ldr	r3, [pc, #332]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a52      	ldr	r2, [pc, #328]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80022be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c0:	4b50      	ldr	r3, [pc, #320]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	494d      	ldr	r1, [pc, #308]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d044      	beq.n	8002368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e6:	4b47      	ldr	r3, [pc, #284]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d119      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e07f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002302:	2b03      	cmp	r3, #3
 8002304:	d107      	bne.n	8002316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002306:	4b3f      	ldr	r3, [pc, #252]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d109      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e06f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e067      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002326:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f023 0203 	bic.w	r2, r3, #3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	4934      	ldr	r1, [pc, #208]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002334:	4313      	orrs	r3, r2
 8002336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002338:	f7ff fa38 	bl	80017ac <HAL_GetTick>
 800233c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	e00a      	b.n	8002356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002340:	f7ff fa34 	bl	80017ac <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e04f      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	4b2b      	ldr	r3, [pc, #172]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 020c 	and.w	r2, r3, #12
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	429a      	cmp	r2, r3
 8002366:	d1eb      	bne.n	8002340 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002368:	4b25      	ldr	r3, [pc, #148]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d20c      	bcs.n	8002390 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b22      	ldr	r3, [pc, #136]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237e:	4b20      	ldr	r3, [pc, #128]	@ (8002400 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e032      	b.n	80023f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d008      	beq.n	80023ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800239c:	4b19      	ldr	r3, [pc, #100]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	4916      	ldr	r1, [pc, #88]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d009      	beq.n	80023ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ba:	4b12      	ldr	r3, [pc, #72]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	490e      	ldr	r1, [pc, #56]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ce:	f000 f821 	bl	8002414 <HAL_RCC_GetSysClockFreq>
 80023d2:	4602      	mov	r2, r0
 80023d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002404 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 030f 	and.w	r3, r3, #15
 80023de:	490a      	ldr	r1, [pc, #40]	@ (8002408 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	5ccb      	ldrb	r3, [r1, r3]
 80023e2:	fa22 f303 	lsr.w	r3, r2, r3
 80023e6:	4a09      	ldr	r2, [pc, #36]	@ (800240c <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80023ea:	4b09      	ldr	r3, [pc, #36]	@ (8002410 <HAL_RCC_ClockConfig+0x1c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe fffc 	bl	80013ec <HAL_InitTick>

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40023c00 	.word	0x40023c00
 8002404:	40023800 	.word	0x40023800
 8002408:	08008ec0 	.word	0x08008ec0
 800240c:	20000000 	.word	0x20000000
 8002410:	20000004 	.word	0x20000004

08002414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002418:	b094      	sub	sp, #80	@ 0x50
 800241a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002428:	2300      	movs	r3, #0
 800242a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800242c:	4b79      	ldr	r3, [pc, #484]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d00d      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x40>
 8002438:	2b08      	cmp	r3, #8
 800243a:	f200 80e1 	bhi.w	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x34>
 8002442:	2b04      	cmp	r3, #4
 8002444:	d003      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x3a>
 8002446:	e0db      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002448:	4b73      	ldr	r3, [pc, #460]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 800244a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800244c:	e0db      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b73      	ldr	r3, [pc, #460]	@ (800261c <HAL_RCC_GetSysClockFreq+0x208>)
 8002450:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002452:	e0d8      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002454:	4b6f      	ldr	r3, [pc, #444]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800245c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800245e:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246a:	4b6a      	ldr	r3, [pc, #424]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	099b      	lsrs	r3, r3, #6
 8002470:	2200      	movs	r2, #0
 8002472:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002474:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002478:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800247c:	633b      	str	r3, [r7, #48]	@ 0x30
 800247e:	2300      	movs	r3, #0
 8002480:	637b      	str	r3, [r7, #52]	@ 0x34
 8002482:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002486:	4622      	mov	r2, r4
 8002488:	462b      	mov	r3, r5
 800248a:	f04f 0000 	mov.w	r0, #0
 800248e:	f04f 0100 	mov.w	r1, #0
 8002492:	0159      	lsls	r1, r3, #5
 8002494:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002498:	0150      	lsls	r0, r2, #5
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	4621      	mov	r1, r4
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	6139      	str	r1, [r7, #16]
 80024a4:	4629      	mov	r1, r5
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	617b      	str	r3, [r7, #20]
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80024b8:	4659      	mov	r1, fp
 80024ba:	018b      	lsls	r3, r1, #6
 80024bc:	4651      	mov	r1, sl
 80024be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024c2:	4651      	mov	r1, sl
 80024c4:	018a      	lsls	r2, r1, #6
 80024c6:	4651      	mov	r1, sl
 80024c8:	ebb2 0801 	subs.w	r8, r2, r1
 80024cc:	4659      	mov	r1, fp
 80024ce:	eb63 0901 	sbc.w	r9, r3, r1
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	f04f 0300 	mov.w	r3, #0
 80024da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024e6:	4690      	mov	r8, r2
 80024e8:	4699      	mov	r9, r3
 80024ea:	4623      	mov	r3, r4
 80024ec:	eb18 0303 	adds.w	r3, r8, r3
 80024f0:	60bb      	str	r3, [r7, #8]
 80024f2:	462b      	mov	r3, r5
 80024f4:	eb49 0303 	adc.w	r3, r9, r3
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	f04f 0300 	mov.w	r3, #0
 8002502:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002506:	4629      	mov	r1, r5
 8002508:	024b      	lsls	r3, r1, #9
 800250a:	4621      	mov	r1, r4
 800250c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002510:	4621      	mov	r1, r4
 8002512:	024a      	lsls	r2, r1, #9
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800251a:	2200      	movs	r2, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800251e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002520:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002524:	f7fe fb40 	bl	8000ba8 <__aeabi_uldivmod>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4613      	mov	r3, r2
 800252e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002530:	e058      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b38      	ldr	r3, [pc, #224]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	4618      	mov	r0, r3
 800253c:	4611      	mov	r1, r2
 800253e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002542:	623b      	str	r3, [r7, #32]
 8002544:	2300      	movs	r3, #0
 8002546:	627b      	str	r3, [r7, #36]	@ 0x24
 8002548:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800254c:	4642      	mov	r2, r8
 800254e:	464b      	mov	r3, r9
 8002550:	f04f 0000 	mov.w	r0, #0
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	0159      	lsls	r1, r3, #5
 800255a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255e:	0150      	lsls	r0, r2, #5
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4641      	mov	r1, r8
 8002566:	ebb2 0a01 	subs.w	sl, r2, r1
 800256a:	4649      	mov	r1, r9
 800256c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800257c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002580:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002584:	ebb2 040a 	subs.w	r4, r2, sl
 8002588:	eb63 050b 	sbc.w	r5, r3, fp
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	f04f 0300 	mov.w	r3, #0
 8002594:	00eb      	lsls	r3, r5, #3
 8002596:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800259a:	00e2      	lsls	r2, r4, #3
 800259c:	4614      	mov	r4, r2
 800259e:	461d      	mov	r5, r3
 80025a0:	4643      	mov	r3, r8
 80025a2:	18e3      	adds	r3, r4, r3
 80025a4:	603b      	str	r3, [r7, #0]
 80025a6:	464b      	mov	r3, r9
 80025a8:	eb45 0303 	adc.w	r3, r5, r3
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025ba:	4629      	mov	r1, r5
 80025bc:	028b      	lsls	r3, r1, #10
 80025be:	4621      	mov	r1, r4
 80025c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c4:	4621      	mov	r1, r4
 80025c6:	028a      	lsls	r2, r1, #10
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ce:	2200      	movs	r2, #0
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	61fa      	str	r2, [r7, #28]
 80025d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025d8:	f7fe fae6 	bl	8000ba8 <__aeabi_uldivmod>
 80025dc:	4602      	mov	r2, r0
 80025de:	460b      	mov	r3, r1
 80025e0:	4613      	mov	r3, r2
 80025e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_RCC_GetSysClockFreq+0x200>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80025f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025fe:	e002      	b.n	8002606 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002600:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetSysClockFreq+0x204>)
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002604:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002606:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002608:	4618      	mov	r0, r3
 800260a:	3750      	adds	r7, #80	@ 0x50
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002612:	bf00      	nop
 8002614:	40023800 	.word	0x40023800
 8002618:	00f42400 	.word	0x00f42400
 800261c:	007a1200 	.word	0x007a1200

08002620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_RCC_GetHCLKFreq+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000000 	.word	0x20000000

08002638 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800263c:	f7ff fff0 	bl	8002620 <HAL_RCC_GetHCLKFreq>
 8002640:	4602      	mov	r2, r0
 8002642:	4b05      	ldr	r3, [pc, #20]	@ (8002658 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	0b5b      	lsrs	r3, r3, #13
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	4903      	ldr	r1, [pc, #12]	@ (800265c <HAL_RCC_GetPCLK2Freq+0x24>)
 800264e:	5ccb      	ldrb	r3, [r1, r3]
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002654:	4618      	mov	r0, r3
 8002656:	bd80      	pop	{r7, pc}
 8002658:	40023800 	.word	0x40023800
 800265c:	08008ed0 	.word	0x08008ed0

08002660 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	220f      	movs	r2, #15
 800266e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f003 0203 	and.w	r2, r3, #3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002688:	4b0c      	ldr	r3, [pc, #48]	@ (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002694:	4b09      	ldr	r3, [pc, #36]	@ (80026bc <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	08db      	lsrs	r3, r3, #3
 800269a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80026a2:	4b07      	ldr	r3, [pc, #28]	@ (80026c0 <HAL_RCC_GetClockConfig+0x60>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0207 	and.w	r2, r3, #7
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	601a      	str	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40023c00 	.word	0x40023c00

080026c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f839 	bl	8002762 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2202      	movs	r2, #2
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3304      	adds	r3, #4
 8002700:	4619      	mov	r1, r3
 8002702:	4610      	mov	r0, r2
 8002704:	f000 f9c0 	bl	8002a88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2201      	movs	r2, #1
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
	...

08002778 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b01      	cmp	r3, #1
 800278a:	d001      	beq.n	8002790 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e04e      	b.n	800282e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68da      	ldr	r2, [r3, #12]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0201 	orr.w	r2, r2, #1
 80027a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	@ (800283c <HAL_TIM_Base_Start_IT+0xc4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d022      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027ba:	d01d      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002840 <HAL_TIM_Base_Start_IT+0xc8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d018      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a1e      	ldr	r2, [pc, #120]	@ (8002844 <HAL_TIM_Base_Start_IT+0xcc>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d013      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1c      	ldr	r2, [pc, #112]	@ (8002848 <HAL_TIM_Base_Start_IT+0xd0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00e      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1b      	ldr	r2, [pc, #108]	@ (800284c <HAL_TIM_Base_Start_IT+0xd4>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d009      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a19      	ldr	r2, [pc, #100]	@ (8002850 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d004      	beq.n	80027f8 <HAL_TIM_Base_Start_IT+0x80>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <HAL_TIM_Base_Start_IT+0xdc>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d111      	bne.n	800281c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d010      	beq.n	800282c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f042 0201 	orr.w	r2, r2, #1
 8002818:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281a:	e007      	b.n	800282c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40010000 	.word	0x40010000
 8002840:	40000400 	.word	0x40000400
 8002844:	40000800 	.word	0x40000800
 8002848:	40000c00 	.word	0x40000c00
 800284c:	40010400 	.word	0x40010400
 8002850:	40014000 	.word	0x40014000
 8002854:	40001800 	.word	0x40001800

08002858 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0202 	mvn.w	r2, #2
 800288c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f8d2 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f8c4 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8d5 	bl	8002a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0204 	mvn.w	r2, #4
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2202      	movs	r2, #2
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f8ac 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f89e 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f8af 	bl	8002a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0308 	and.w	r3, r3, #8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d020      	beq.n	8002954 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0208 	mvn.w	r2, #8
 8002924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2204      	movs	r2, #4
 800292a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	69db      	ldr	r3, [r3, #28]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d003      	beq.n	8002942 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f886 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 8002940:	e005      	b.n	800294e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f878 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f889 	bl	8002a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d020      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01b      	beq.n	80029a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0210 	mvn.w	r2, #16
 8002970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2208      	movs	r2, #8
 8002976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002986:	6878      	ldr	r0, [r7, #4]
 8002988:	f000 f860 	bl	8002a4c <HAL_TIM_IC_CaptureCallback>
 800298c:	e005      	b.n	800299a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f852 	bl	8002a38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f000 f863 	bl	8002a60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00c      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d007      	beq.n	80029c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f06f 0201 	mvn.w	r2, #1
 80029bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe fcd0 	bl	8001364 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d007      	beq.n	80029e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f900 	bl	8002be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00c      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d007      	beq.n	8002a0c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f834 	bl	8002a74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f003 0320 	and.w	r3, r3, #32
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f06f 0220 	mvn.w	r2, #32
 8002a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f8d2 	bl	8002bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a43      	ldr	r2, [pc, #268]	@ (8002ba8 <TIM_Base_SetConfig+0x120>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d013      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aa6:	d00f      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a40      	ldr	r2, [pc, #256]	@ (8002bac <TIM_Base_SetConfig+0x124>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00b      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb0 <TIM_Base_SetConfig+0x128>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d007      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3e      	ldr	r2, [pc, #248]	@ (8002bb4 <TIM_Base_SetConfig+0x12c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d003      	beq.n	8002ac8 <TIM_Base_SetConfig+0x40>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb8 <TIM_Base_SetConfig+0x130>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d108      	bne.n	8002ada <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ace:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a32      	ldr	r2, [pc, #200]	@ (8002ba8 <TIM_Base_SetConfig+0x120>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d02b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae8:	d027      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <TIM_Base_SetConfig+0x124>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d023      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <TIM_Base_SetConfig+0x128>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01f      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <TIM_Base_SetConfig+0x12c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d01b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <TIM_Base_SetConfig+0x130>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d017      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bbc <TIM_Base_SetConfig+0x134>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d013      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc0 <TIM_Base_SetConfig+0x138>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00f      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	@ (8002bc4 <TIM_Base_SetConfig+0x13c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d00b      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a28      	ldr	r2, [pc, #160]	@ (8002bc8 <TIM_Base_SetConfig+0x140>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d007      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a27      	ldr	r2, [pc, #156]	@ (8002bcc <TIM_Base_SetConfig+0x144>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <TIM_Base_SetConfig+0xb2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a26      	ldr	r2, [pc, #152]	@ (8002bd0 <TIM_Base_SetConfig+0x148>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d108      	bne.n	8002b4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <TIM_Base_SetConfig+0x120>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d003      	beq.n	8002b7a <TIM_Base_SetConfig+0xf2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a10      	ldr	r2, [pc, #64]	@ (8002bb8 <TIM_Base_SetConfig+0x130>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d103      	bne.n	8002b82 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f043 0204 	orr.w	r2, r3, #4
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	40010000 	.word	0x40010000
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800
 8002bb4:	40000c00 	.word	0x40000c00
 8002bb8:	40010400 	.word	0x40010400
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800
 8002bc8:	40001800 	.word	0x40001800
 8002bcc:	40001c00 	.word	0x40001c00
 8002bd0:	40002000 	.word	0x40002000

08002bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <__NVIC_SetPriority>:
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	@ (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	@ (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <SysTick_Handler+0x1c>)
 8002c56:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002c58:	f002 fa5a 	bl	8005110 <xTaskGetSchedulerState>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d001      	beq.n	8002c66 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002c62:	f003 f951 	bl	8005f08 <xPortSysTickHandler>
  }
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	e000e010 	.word	0xe000e010

08002c70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c74:	2100      	movs	r1, #0
 8002c76:	f06f 0004 	mvn.w	r0, #4
 8002c7a:	f7ff ffbf 	bl	8002bfc <__NVIC_SetPriority>
#endif
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c8a:	f3ef 8305 	mrs	r3, IPSR
 8002c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8002c90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c96:	f06f 0305 	mvn.w	r3, #5
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	e00c      	b.n	8002cb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc8 <osKernelInitialize+0x44>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002ca6:	4b08      	ldr	r3, [pc, #32]	@ (8002cc8 <osKernelInitialize+0x44>)
 8002ca8:	2201      	movs	r2, #1
 8002caa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	e002      	b.n	8002cb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cb8:	687b      	ldr	r3, [r7, #4]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000268 	.word	0x20000268

08002ccc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cd2:	f3ef 8305 	mrs	r3, IPSR
 8002cd6:	603b      	str	r3, [r7, #0]
  return(result);
 8002cd8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cde:	f06f 0305 	mvn.w	r3, #5
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	e010      	b.n	8002d08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <osKernelStart+0x48>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d109      	bne.n	8002d02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002cee:	f7ff ffbf 	bl	8002c70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002cf2:	4b08      	ldr	r3, [pc, #32]	@ (8002d14 <osKernelStart+0x48>)
 8002cf4:	2202      	movs	r2, #2
 8002cf6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002cf8:	f001 fd84 	bl	8004804 <vTaskStartScheduler>
      stat = osOK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	e002      	b.n	8002d08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d02:	f04f 33ff 	mov.w	r3, #4294967295
 8002d06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000268 	.word	0x20000268

08002d18 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1e:	f3ef 8305 	mrs	r3, IPSR
 8002d22:	603b      	str	r3, [r7, #0]
  return(result);
 8002d24:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8002d2a:	f001 fe97 	bl	8004a5c <xTaskGetTickCountFromISR>
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	e002      	b.n	8002d38 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8002d32:	f001 fe83 	bl	8004a3c <xTaskGetTickCount>
 8002d36:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8002d38:	687b      	ldr	r3, [r7, #4]
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b08e      	sub	sp, #56	@ 0x38
 8002d46:	af04      	add	r7, sp, #16
 8002d48:	60f8      	str	r0, [r7, #12]
 8002d4a:	60b9      	str	r1, [r7, #8]
 8002d4c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d52:	f3ef 8305 	mrs	r3, IPSR
 8002d56:	617b      	str	r3, [r7, #20]
  return(result);
 8002d58:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d17e      	bne.n	8002e5c <osThreadNew+0x11a>
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d07b      	beq.n	8002e5c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d68:	2318      	movs	r3, #24
 8002d6a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002d70:	f04f 33ff 	mov.w	r3, #4294967295
 8002d74:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d045      	beq.n	8002e08 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <osThreadNew+0x48>
        name = attr->name;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d008      	beq.n	8002db0 <osThreadNew+0x6e>
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	2b38      	cmp	r3, #56	@ 0x38
 8002da2:	d805      	bhi.n	8002db0 <osThreadNew+0x6e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <osThreadNew+0x72>
        return (NULL);
 8002db0:	2300      	movs	r3, #0
 8002db2:	e054      	b.n	8002e5e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	695b      	ldr	r3, [r3, #20]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d003      	beq.n	8002dc4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	089b      	lsrs	r3, r3, #2
 8002dc2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00e      	beq.n	8002dea <osThreadNew+0xa8>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	2ba7      	cmp	r3, #167	@ 0xa7
 8002dd2:	d90a      	bls.n	8002dea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d006      	beq.n	8002dea <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <osThreadNew+0xa8>
        mem = 1;
 8002de4:	2301      	movs	r3, #1
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	e010      	b.n	8002e0c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10c      	bne.n	8002e0c <osThreadNew+0xca>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d108      	bne.n	8002e0c <osThreadNew+0xca>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d104      	bne.n	8002e0c <osThreadNew+0xca>
          mem = 0;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	e001      	b.n	8002e0c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d110      	bne.n	8002e34 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	9301      	str	r3, [sp, #4]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	9300      	str	r3, [sp, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	f001 faf7 	bl	800441c <xTaskCreateStatic>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	e013      	b.n	8002e5c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d110      	bne.n	8002e5c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f001 fb45 	bl	80044dc <xTaskCreate>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <osThreadNew+0x11a>
            hTask = NULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e5c:	693b      	ldr	r3, [r7, #16]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3728      	adds	r7, #40	@ 0x28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b084      	sub	sp, #16
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e6e:	f3ef 8305 	mrs	r3, IPSR
 8002e72:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <osDelay+0x1c>
    stat = osErrorISR;
 8002e7a:	f06f 0305 	mvn.w	r3, #5
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e007      	b.n	8002e92 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d002      	beq.n	8002e92 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f001 fc83 	bl	8004798 <vTaskDelay>
    }
  }

  return (stat);
 8002e92:	68fb      	ldr	r3, [r7, #12]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b088      	sub	sp, #32
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ea8:	f3ef 8305 	mrs	r3, IPSR
 8002eac:	60bb      	str	r3, [r7, #8]
  return(result);
 8002eae:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d174      	bne.n	8002f9e <osMutexNew+0x102>
    if (attr != NULL) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e001      	b.n	8002ec6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <osMutexNew+0x3a>
      rmtx = 1U;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e001      	b.n	8002eda <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d15c      	bne.n	8002f9e <osMutexNew+0x102>
      mem = -1;
 8002ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ee8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d015      	beq.n	8002f1c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <osMutexNew+0x6a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	2b4f      	cmp	r3, #79	@ 0x4f
 8002efe:	d902      	bls.n	8002f06 <osMutexNew+0x6a>
          mem = 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	e00c      	b.n	8002f20 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d108      	bne.n	8002f20 <osMutexNew+0x84>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d104      	bne.n	8002f20 <osMutexNew+0x84>
            mem = 0;
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	e001      	b.n	8002f20 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d112      	bne.n	8002f4c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4619      	mov	r1, r3
 8002f32:	2004      	movs	r0, #4
 8002f34:	f000 fc51 	bl	80037da <xQueueCreateMutexStatic>
 8002f38:	61f8      	str	r0, [r7, #28]
 8002f3a:	e016      	b.n	8002f6a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4619      	mov	r1, r3
 8002f42:	2001      	movs	r0, #1
 8002f44:	f000 fc49 	bl	80037da <xQueueCreateMutexStatic>
 8002f48:	61f8      	str	r0, [r7, #28]
 8002f4a:	e00e      	b.n	8002f6a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8002f58:	2004      	movs	r0, #4
 8002f5a:	f000 fc26 	bl	80037aa <xQueueCreateMutex>
 8002f5e:	61f8      	str	r0, [r7, #28]
 8002f60:	e003      	b.n	8002f6a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 fc21 	bl	80037aa <xQueueCreateMutex>
 8002f68:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00c      	beq.n	8002f8a <osMutexNew+0xee>
        if (attr != NULL) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <osMutexNew+0xe2>
          name = attr->name;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	e001      	b.n	8002f82 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002f82:	68f9      	ldr	r1, [r7, #12]
 8002f84:	69f8      	ldr	r0, [r7, #28]
 8002f86:	f001 f9eb 	bl	8004360 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d006      	beq.n	8002f9e <osMutexNew+0x102>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	f043 0301 	orr.w	r3, r3, #1
 8002f9c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002f9e:	69fb      	ldr	r3, [r7, #28]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3720      	adds	r7, #32
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f023 0301 	bic.w	r3, r3, #1
 8002fb8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f003 0301 	and.w	r3, r3, #1
 8002fc0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002fc6:	f3ef 8305 	mrs	r3, IPSR
 8002fca:	60bb      	str	r3, [r7, #8]
  return(result);
 8002fcc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002fd2:	f06f 0305 	mvn.w	r3, #5
 8002fd6:	617b      	str	r3, [r7, #20]
 8002fd8:	e02c      	b.n	8003034 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d103      	bne.n	8002fe8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002fe0:	f06f 0303 	mvn.w	r3, #3
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e025      	b.n	8003034 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d011      	beq.n	8003012 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002fee:	6839      	ldr	r1, [r7, #0]
 8002ff0:	6938      	ldr	r0, [r7, #16]
 8002ff2:	f000 fc42 	bl	800387a <xQueueTakeMutexRecursive>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d01b      	beq.n	8003034 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003002:	f06f 0301 	mvn.w	r3, #1
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e014      	b.n	8003034 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800300a:	f06f 0302 	mvn.w	r3, #2
 800300e:	617b      	str	r3, [r7, #20]
 8003010:	e010      	b.n	8003034 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003012:	6839      	ldr	r1, [r7, #0]
 8003014:	6938      	ldr	r0, [r7, #16]
 8003016:	f000 fee9 	bl	8003dec <xQueueSemaphoreTake>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d009      	beq.n	8003034 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003026:	f06f 0301 	mvn.w	r3, #1
 800302a:	617b      	str	r3, [r7, #20]
 800302c:	e002      	b.n	8003034 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800302e:	f06f 0302 	mvn.w	r3, #2
 8003032:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003034:	697b      	ldr	r3, [r7, #20]
}
 8003036:	4618      	mov	r0, r3
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800303e:	b580      	push	{r7, lr}
 8003040:	b086      	sub	sp, #24
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800305a:	f3ef 8305 	mrs	r3, IPSR
 800305e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003060:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <osMutexRelease+0x30>
    stat = osErrorISR;
 8003066:	f06f 0305 	mvn.w	r3, #5
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e01f      	b.n	80030ae <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003074:	f06f 0303 	mvn.w	r3, #3
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e018      	b.n	80030ae <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003082:	6938      	ldr	r0, [r7, #16]
 8003084:	f000 fbc4 	bl	8003810 <xQueueGiveMutexRecursive>
 8003088:	4603      	mov	r3, r0
 800308a:	2b01      	cmp	r3, #1
 800308c:	d00f      	beq.n	80030ae <osMutexRelease+0x70>
        stat = osErrorResource;
 800308e:	f06f 0302 	mvn.w	r3, #2
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	e00b      	b.n	80030ae <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003096:	2300      	movs	r3, #0
 8003098:	2200      	movs	r2, #0
 800309a:	2100      	movs	r1, #0
 800309c:	6938      	ldr	r0, [r7, #16]
 800309e:	f000 fc23 	bl	80038e8 <xQueueGenericSend>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d002      	beq.n	80030ae <osMutexRelease+0x70>
        stat = osErrorResource;
 80030a8:	f06f 0302 	mvn.w	r3, #2
 80030ac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80030ae:	697b      	ldr	r3, [r7, #20]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3718      	adds	r7, #24
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	@ 0x28
 80030bc:	af02      	add	r7, sp, #8
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c8:	f3ef 8305 	mrs	r3, IPSR
 80030cc:	613b      	str	r3, [r7, #16]
  return(result);
 80030ce:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d15f      	bne.n	8003194 <osMessageQueueNew+0xdc>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d05c      	beq.n	8003194 <osMessageQueueNew+0xdc>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d059      	beq.n	8003194 <osMessageQueueNew+0xdc>
    mem = -1;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295
 80030e4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d029      	beq.n	8003140 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <osMessageQueueNew+0x62>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b4f      	cmp	r3, #79	@ 0x4f
 80030fa:	d90e      	bls.n	800311a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00a      	beq.n	800311a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	fb01 f303 	mul.w	r3, r1, r3
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <osMessageQueueNew+0x62>
        mem = 1;
 8003114:	2301      	movs	r3, #1
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	e014      	b.n	8003144 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d110      	bne.n	8003144 <osMessageQueueNew+0x8c>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800312e:	2b00      	cmp	r3, #0
 8003130:	d108      	bne.n	8003144 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d104      	bne.n	8003144 <osMessageQueueNew+0x8c>
          mem = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e001      	b.n	8003144 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003140:	2300      	movs	r3, #0
 8003142:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10b      	bne.n	8003162 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	2100      	movs	r1, #0
 8003154:	9100      	str	r1, [sp, #0]
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f000 fa31 	bl	80035c0 <xQueueGenericCreateStatic>
 800315e:	61f8      	str	r0, [r7, #28]
 8003160:	e008      	b.n	8003174 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003168:	2200      	movs	r2, #0
 800316a:	68b9      	ldr	r1, [r7, #8]
 800316c:	68f8      	ldr	r0, [r7, #12]
 800316e:	f000 faa4 	bl	80036ba <xQueueGenericCreate>
 8003172:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00c      	beq.n	8003194 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <osMessageQueueNew+0xd0>
        name = attr->name;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	e001      	b.n	800318c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800318c:	6979      	ldr	r1, [r7, #20]
 800318e:	69f8      	ldr	r0, [r7, #28]
 8003190:	f001 f8e6 	bl	8004360 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003194:	69fb      	ldr	r3, [r7, #28]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3720      	adds	r7, #32
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b088      	sub	sp, #32
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	60b9      	str	r1, [r7, #8]
 80031aa:	603b      	str	r3, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80031b4:	2300      	movs	r3, #0
 80031b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031b8:	f3ef 8305 	mrs	r3, IPSR
 80031bc:	617b      	str	r3, [r7, #20]
  return(result);
 80031be:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d028      	beq.n	8003216 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <osMessageQueuePut+0x36>
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <osMessageQueuePut+0x36>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80031d6:	f06f 0303 	mvn.w	r3, #3
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	e038      	b.n	8003250 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80031e2:	f107 0210 	add.w	r2, r7, #16
 80031e6:	2300      	movs	r3, #0
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	69b8      	ldr	r0, [r7, #24]
 80031ec:	f000 fc7e 	bl	8003aec <xQueueGenericSendFromISR>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d003      	beq.n	80031fe <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80031f6:	f06f 0302 	mvn.w	r3, #2
 80031fa:	61fb      	str	r3, [r7, #28]
 80031fc:	e028      	b.n	8003250 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d025      	beq.n	8003250 <osMessageQueuePut+0xb0>
 8003204:	4b15      	ldr	r3, [pc, #84]	@ (800325c <osMessageQueuePut+0xbc>)
 8003206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	e01c      	b.n	8003250 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <osMessageQueuePut+0x82>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8003222:	f06f 0303 	mvn.w	r3, #3
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	e012      	b.n	8003250 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800322a:	2300      	movs	r3, #0
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	68b9      	ldr	r1, [r7, #8]
 8003230:	69b8      	ldr	r0, [r7, #24]
 8003232:	f000 fb59 	bl	80038e8 <xQueueGenericSend>
 8003236:	4603      	mov	r3, r0
 8003238:	2b01      	cmp	r3, #1
 800323a:	d009      	beq.n	8003250 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8003242:	f06f 0301 	mvn.w	r3, #1
 8003246:	61fb      	str	r3, [r7, #28]
 8003248:	e002      	b.n	8003250 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800324a:	f06f 0302 	mvn.w	r3, #2
 800324e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8003250:	69fb      	ldr	r3, [r7, #28]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	e000ed04 	.word	0xe000ed04

08003260 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
 800326c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003276:	f3ef 8305 	mrs	r3, IPSR
 800327a:	617b      	str	r3, [r7, #20]
  return(result);
 800327c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800327e:	2b00      	cmp	r3, #0
 8003280:	d028      	beq.n	80032d4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <osMessageQueueGet+0x34>
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <osMessageQueueGet+0x34>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d003      	beq.n	800329c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8003294:	f06f 0303 	mvn.w	r3, #3
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e037      	b.n	800330c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800329c:	2300      	movs	r3, #0
 800329e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80032a0:	f107 0310 	add.w	r3, r7, #16
 80032a4:	461a      	mov	r2, r3
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	69b8      	ldr	r0, [r7, #24]
 80032aa:	f000 feaf 	bl	800400c <xQueueReceiveFromISR>
 80032ae:	4603      	mov	r3, r0
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d003      	beq.n	80032bc <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80032b4:	f06f 0302 	mvn.w	r3, #2
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e027      	b.n	800330c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d024      	beq.n	800330c <osMessageQueueGet+0xac>
 80032c2:	4b15      	ldr	r3, [pc, #84]	@ (8003318 <osMessageQueueGet+0xb8>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	e01b      	b.n	800330c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <osMessageQueueGet+0x80>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d103      	bne.n	80032e8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80032e0:	f06f 0303 	mvn.w	r3, #3
 80032e4:	61fb      	str	r3, [r7, #28]
 80032e6:	e011      	b.n	800330c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	69b8      	ldr	r0, [r7, #24]
 80032ee:	f000 fc9b 	bl	8003c28 <xQueueReceive>
 80032f2:	4603      	mov	r3, r0
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d009      	beq.n	800330c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80032fe:	f06f 0301 	mvn.w	r3, #1
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	e002      	b.n	800330c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8003306:	f06f 0302 	mvn.w	r3, #2
 800330a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800330c:	69fb      	ldr	r3, [r7, #28]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	e000ed04 	.word	0xe000ed04

0800331c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800331c:	b480      	push	{r7}
 800331e:	b085      	sub	sp, #20
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <vApplicationGetIdleTaskMemory+0x2c>)
 800332c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4a06      	ldr	r2, [pc, #24]	@ (800334c <vApplicationGetIdleTaskMemory+0x30>)
 8003332:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2280      	movs	r2, #128	@ 0x80
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	2000026c 	.word	0x2000026c
 800334c:	20000314 	.word	0x20000314

08003350 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a07      	ldr	r2, [pc, #28]	@ (800337c <vApplicationGetTimerTaskMemory+0x2c>)
 8003360:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	4a06      	ldr	r2, [pc, #24]	@ (8003380 <vApplicationGetTimerTaskMemory+0x30>)
 8003366:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800336e:	601a      	str	r2, [r3, #0]
}
 8003370:	bf00      	nop
 8003372:	3714      	adds	r7, #20
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	20000514 	.word	0x20000514
 8003380:	200005bc 	.word	0x200005bc

08003384 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f103 0208 	add.w	r2, r3, #8
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f04f 32ff 	mov.w	r2, #4294967295
 800339c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f103 0208 	add.w	r2, r3, #8
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 0208 	add.w	r2, r3, #8
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033de:	b480      	push	{r7}
 80033e0:	b085      	sub	sp, #20
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	68fa      	ldr	r2, [r7, #12]
 80033f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	1c5a      	adds	r2, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	3714      	adds	r7, #20
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr

08003426 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003426:	b480      	push	{r7}
 8003428:	b085      	sub	sp, #20
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
 800342e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800343c:	d103      	bne.n	8003446 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	e00c      	b.n	8003460 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3308      	adds	r3, #8
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e002      	b.n	8003454 <vListInsert+0x2e>
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d2f6      	bcs.n	800344e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	1c5a      	adds	r2, r3, #1
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	601a      	str	r2, [r3, #0]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6892      	ldr	r2, [r2, #8]
 80034ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	6852      	ldr	r2, [r2, #4]
 80034b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d103      	bne.n	80034cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003504:	f383 8811 	msr	BASEPRI, r3
 8003508:	f3bf 8f6f 	isb	sy
 800350c:	f3bf 8f4f 	dsb	sy
 8003510:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003512:	bf00      	nop
 8003514:	bf00      	nop
 8003516:	e7fd      	b.n	8003514 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003518:	f002 fc66 	bl	8005de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003528:	fb01 f303 	mul.w	r3, r1, r3
 800352c:	441a      	add	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	3b01      	subs	r3, #1
 800354a:	68f9      	ldr	r1, [r7, #12]
 800354c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	441a      	add	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	22ff      	movs	r2, #255	@ 0xff
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	22ff      	movs	r2, #255	@ 0xff
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d114      	bne.n	8003598 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01a      	beq.n	80035ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fbf2 	bl	8004d64 <xTaskRemoveFromEventList>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d012      	beq.n	80035ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003586:	4b0d      	ldr	r3, [pc, #52]	@ (80035bc <xQueueGenericReset+0xd0>)
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	e009      	b.n	80035ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	3310      	adds	r3, #16
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff fef1 	bl	8003384 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3324      	adds	r3, #36	@ 0x24
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7ff feec 	bl	8003384 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80035ac:	f002 fc4e 	bl	8005e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80035b0:	2301      	movs	r3, #1
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000ed04 	.word	0xe000ed04

080035c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08e      	sub	sp, #56	@ 0x38
 80035c4:	af02      	add	r7, sp, #8
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
 80035cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10b      	bne.n	80035ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	e7fd      	b.n	80035e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003604:	bf00      	nop
 8003606:	bf00      	nop
 8003608:	e7fd      	b.n	8003606 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <xQueueGenericCreateStatic+0x56>
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <xQueueGenericCreateStatic+0x5a>
 8003616:	2301      	movs	r3, #1
 8003618:	e000      	b.n	800361c <xQueueGenericCreateStatic+0x5c>
 800361a:	2300      	movs	r3, #0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	623b      	str	r3, [r7, #32]
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <xQueueGenericCreateStatic+0x84>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d101      	bne.n	8003648 <xQueueGenericCreateStatic+0x88>
 8003644:	2301      	movs	r3, #1
 8003646:	e000      	b.n	800364a <xQueueGenericCreateStatic+0x8a>
 8003648:	2300      	movs	r3, #0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10b      	bne.n	8003666 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800364e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003652:	f383 8811 	msr	BASEPRI, r3
 8003656:	f3bf 8f6f 	isb	sy
 800365a:	f3bf 8f4f 	dsb	sy
 800365e:	61fb      	str	r3, [r7, #28]
}
 8003660:	bf00      	nop
 8003662:	bf00      	nop
 8003664:	e7fd      	b.n	8003662 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003666:	2350      	movs	r3, #80	@ 0x50
 8003668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d00b      	beq.n	8003688 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	61bb      	str	r3, [r7, #24]
}
 8003682:	bf00      	nop
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003688:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800368e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00d      	beq.n	80036b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800369c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80036a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	68b9      	ldr	r1, [r7, #8]
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 f840 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80036b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3730      	adds	r7, #48	@ 0x30
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b08a      	sub	sp, #40	@ 0x28
 80036be:	af02      	add	r7, sp, #8
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	4613      	mov	r3, r2
 80036c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10b      	bne.n	80036e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	613b      	str	r3, [r7, #16]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	3350      	adds	r3, #80	@ 0x50
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fc99 	bl	800602c <pvPortMalloc>
 80036fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d011      	beq.n	8003726 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	3350      	adds	r3, #80	@ 0x50
 800370a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003714:	79fa      	ldrb	r2, [r7, #7]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	4613      	mov	r3, r2
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f805 	bl	8003730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003726:	69bb      	ldr	r3, [r7, #24]
	}
 8003728:	4618      	mov	r0, r3
 800372a:	3720      	adds	r7, #32
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
 800373c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d103      	bne.n	800374c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	601a      	str	r2, [r3, #0]
 800374a:	e002      	b.n	8003752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800375e:	2101      	movs	r1, #1
 8003760:	69b8      	ldr	r0, [r7, #24]
 8003762:	f7ff fec3 	bl	80034ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800376e:	bf00      	nop
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003776:	b580      	push	{r7, lr}
 8003778:	b082      	sub	sp, #8
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003796:	2300      	movs	r3, #0
 8003798:	2200      	movs	r2, #0
 800379a:	2100      	movs	r1, #0
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f8a3 	bl	80038e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037b4:	2301      	movs	r3, #1
 80037b6:	617b      	str	r3, [r7, #20]
 80037b8:	2300      	movs	r3, #0
 80037ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80037bc:	79fb      	ldrb	r3, [r7, #7]
 80037be:	461a      	mov	r2, r3
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	6978      	ldr	r0, [r7, #20]
 80037c4:	f7ff ff79 	bl	80036ba <xQueueGenericCreate>
 80037c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f7ff ffd3 	bl	8003776 <prvInitialiseMutex>

		return xNewQueue;
 80037d0:	68fb      	ldr	r3, [r7, #12]
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af02      	add	r7, sp, #8
 80037e0:	4603      	mov	r3, r0
 80037e2:	6039      	str	r1, [r7, #0]
 80037e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80037e6:	2301      	movs	r3, #1
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2200      	movs	r2, #0
 80037f6:	6939      	ldr	r1, [r7, #16]
 80037f8:	6978      	ldr	r0, [r7, #20]
 80037fa:	f7ff fee1 	bl	80035c0 <xQueueGenericCreateStatic>
 80037fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ffb8 	bl	8003776 <prvInitialiseMutex>

		return xNewQueue;
 8003806:	68fb      	ldr	r3, [r7, #12]
	}
 8003808:	4618      	mov	r0, r3
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8003810:	b590      	push	{r4, r7, lr}
 8003812:	b087      	sub	sp, #28
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10b      	bne.n	800383a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	60fb      	str	r3, [r7, #12]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	689c      	ldr	r4, [r3, #8]
 800383e:	f001 fc57 	bl	80050f0 <xTaskGetCurrentTaskHandle>
 8003842:	4603      	mov	r3, r0
 8003844:	429c      	cmp	r4, r3
 8003846:	d111      	bne.n	800386c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	1e5a      	subs	r2, r3, #1
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d105      	bne.n	8003866 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800385a:	2300      	movs	r3, #0
 800385c:	2200      	movs	r2, #0
 800385e:	2100      	movs	r1, #0
 8003860:	6938      	ldr	r0, [r7, #16]
 8003862:	f000 f841 	bl	80038e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8003866:	2301      	movs	r3, #1
 8003868:	617b      	str	r3, [r7, #20]
 800386a:	e001      	b.n	8003870 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800386c:	2300      	movs	r3, #0
 800386e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8003870:	697b      	ldr	r3, [r7, #20]
	}
 8003872:	4618      	mov	r0, r3
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd90      	pop	{r4, r7, pc}

0800387a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800387a:	b590      	push	{r4, r7, lr}
 800387c:	b087      	sub	sp, #28
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10b      	bne.n	80038a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800388e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003892:	f383 8811 	msr	BASEPRI, r3
 8003896:	f3bf 8f6f 	isb	sy
 800389a:	f3bf 8f4f 	dsb	sy
 800389e:	60fb      	str	r3, [r7, #12]
}
 80038a0:	bf00      	nop
 80038a2:	bf00      	nop
 80038a4:	e7fd      	b.n	80038a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	689c      	ldr	r4, [r3, #8]
 80038aa:	f001 fc21 	bl	80050f0 <xTaskGetCurrentTaskHandle>
 80038ae:	4603      	mov	r3, r0
 80038b0:	429c      	cmp	r4, r3
 80038b2:	d107      	bne.n	80038c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	1c5a      	adds	r2, r3, #1
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80038be:	2301      	movs	r3, #1
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	e00c      	b.n	80038de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80038c4:	6839      	ldr	r1, [r7, #0]
 80038c6:	6938      	ldr	r0, [r7, #16]
 80038c8:	f000 fa90 	bl	8003dec <xQueueSemaphoreTake>
 80038cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d004      	beq.n	80038de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80038de:	697b      	ldr	r3, [r7, #20]
	}
 80038e0:	4618      	mov	r0, r3
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd90      	pop	{r4, r7, pc}

080038e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038f6:	2300      	movs	r3, #0
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80038fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10b      	bne.n	800391c <xQueueGenericSend+0x34>
	__asm volatile
 8003904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003908:	f383 8811 	msr	BASEPRI, r3
 800390c:	f3bf 8f6f 	isb	sy
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003916:	bf00      	nop
 8003918:	bf00      	nop
 800391a:	e7fd      	b.n	8003918 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d103      	bne.n	800392a <xQueueGenericSend+0x42>
 8003922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d101      	bne.n	800392e <xQueueGenericSend+0x46>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericSend+0x48>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10b      	bne.n	800394c <xQueueGenericSend+0x64>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d103      	bne.n	800395a <xQueueGenericSend+0x72>
 8003952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003954:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <xQueueGenericSend+0x76>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSend+0x78>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <xQueueGenericSend+0x94>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	623b      	str	r3, [r7, #32]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800397c:	f001 fbc8 	bl	8005110 <xTaskGetSchedulerState>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <xQueueGenericSend+0xa4>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <xQueueGenericSend+0xa8>
 800398c:	2301      	movs	r3, #1
 800398e:	e000      	b.n	8003992 <xQueueGenericSend+0xaa>
 8003990:	2300      	movs	r3, #0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <xQueueGenericSend+0xc6>
	__asm volatile
 8003996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399a:	f383 8811 	msr	BASEPRI, r3
 800399e:	f3bf 8f6f 	isb	sy
 80039a2:	f3bf 8f4f 	dsb	sy
 80039a6:	61fb      	str	r3, [r7, #28]
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	e7fd      	b.n	80039aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80039ae:	f002 fa1b 	bl	8005de8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d302      	bcc.n	80039c4 <xQueueGenericSend+0xdc>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d129      	bne.n	8003a18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	68b9      	ldr	r1, [r7, #8]
 80039c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039ca:	f000 fbb9 	bl	8004140 <prvCopyDataToQueue>
 80039ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d010      	beq.n	80039fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	3324      	adds	r3, #36	@ 0x24
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 f9c1 	bl	8004d64 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d013      	beq.n	8003a10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <xQueueGenericSend+0x200>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e00a      	b.n	8003a10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a00:	4b39      	ldr	r3, [pc, #228]	@ (8003ae8 <xQueueGenericSend+0x200>)
 8003a02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	f3bf 8f4f 	dsb	sy
 8003a0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a10:	f002 fa1c 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e063      	b.n	8003ae0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d103      	bne.n	8003a26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a1e:	f002 fa15 	bl	8005e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	e05c      	b.n	8003ae0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d106      	bne.n	8003a3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a2c:	f107 0314 	add.w	r3, r7, #20
 8003a30:	4618      	mov	r0, r3
 8003a32:	f001 f9fb 	bl	8004e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a36:	2301      	movs	r3, #1
 8003a38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a3a:	f002 fa07 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a3e:	f000 ff51 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a42:	f002 f9d1 	bl	8005de8 <vPortEnterCritical>
 8003a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a52:	d103      	bne.n	8003a5c <xQueueGenericSend+0x174>
 8003a54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003a62:	b25b      	sxtb	r3, r3
 8003a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a68:	d103      	bne.n	8003a72 <xQueueGenericSend+0x18a>
 8003a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003a72:	f002 f9eb 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a76:	1d3a      	adds	r2, r7, #4
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	4611      	mov	r1, r2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f9ea 	bl	8004e58 <xTaskCheckForTimeOut>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d124      	bne.n	8003ad4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a8c:	f000 fc50 	bl	8004330 <prvIsQueueFull>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d018      	beq.n	8003ac8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a98:	3310      	adds	r3, #16
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f001 f90e 	bl	8004cc0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aa6:	f000 fbdb 	bl	8004260 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003aaa:	f000 ff29 	bl	8004900 <xTaskResumeAll>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f af7c 	bne.w	80039ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <xQueueGenericSend+0x200>)
 8003ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	f3bf 8f6f 	isb	sy
 8003ac6:	e772      	b.n	80039ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ac8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003aca:	f000 fbc9 	bl	8004260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ace:	f000 ff17 	bl	8004900 <xTaskResumeAll>
 8003ad2:	e76c      	b.n	80039ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ad4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ad6:	f000 fbc3 	bl	8004260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003ada:	f000 ff11 	bl	8004900 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003ade:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3738      	adds	r7, #56	@ 0x38
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	e000ed04 	.word	0xe000ed04

08003aec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b090      	sub	sp, #64	@ 0x40
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	e7fd      	b.n	8003b18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d103      	bne.n	8003b2a <xQueueGenericSendFromISR+0x3e>
 8003b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <xQueueGenericSendFromISR+0x42>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e000      	b.n	8003b30 <xQueueGenericSendFromISR+0x44>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d10b      	bne.n	8003b4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d103      	bne.n	8003b5a <xQueueGenericSendFromISR+0x6e>
 8003b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d101      	bne.n	8003b5e <xQueueGenericSendFromISR+0x72>
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e000      	b.n	8003b60 <xQueueGenericSendFromISR+0x74>
 8003b5e:	2300      	movs	r3, #0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	623b      	str	r3, [r7, #32]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b7c:	f002 fa14 	bl	8005fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b80:	f3ef 8211 	mrs	r2, BASEPRI
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61fa      	str	r2, [r7, #28]
 8003b96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d302      	bcc.n	8003bae <xQueueGenericSendFromISR+0xc2>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d12f      	bne.n	8003c0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003bb4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	68b9      	ldr	r1, [r7, #8]
 8003bc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003bc4:	f000 fabc 	bl	8004140 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003bc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d112      	bne.n	8003bf8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bdc:	3324      	adds	r3, #36	@ 0x24
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f8c0 	bl	8004d64 <xTaskRemoveFromEventList>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00e      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	e007      	b.n	8003c08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	b25a      	sxtb	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c0c:	e001      	b.n	8003c12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003c1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3740      	adds	r7, #64	@ 0x40
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b08c      	sub	sp, #48	@ 0x30
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c34:	2300      	movs	r3, #0
 8003c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <xQueueReceive+0x32>
	__asm volatile
 8003c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	623b      	str	r3, [r7, #32]
}
 8003c54:	bf00      	nop
 8003c56:	bf00      	nop
 8003c58:	e7fd      	b.n	8003c56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d103      	bne.n	8003c68 <xQueueReceive+0x40>
 8003c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <xQueueReceive+0x44>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e000      	b.n	8003c6e <xQueueReceive+0x46>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <xQueueReceive+0x62>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	61fb      	str	r3, [r7, #28]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c8a:	f001 fa41 	bl	8005110 <xTaskGetSchedulerState>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <xQueueReceive+0x72>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <xQueueReceive+0x76>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueReceive+0x78>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueReceive+0x94>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	61bb      	str	r3, [r7, #24]
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cbc:	f002 f894 	bl	8005de8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ccc:	68b9      	ldr	r1, [r7, #8]
 8003cce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd0:	f000 faa0 	bl	8004214 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	1e5a      	subs	r2, r3, #1
 8003cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00f      	beq.n	8003d04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	3310      	adds	r3, #16
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f001 f83b 	bl	8004d64 <xTaskRemoveFromEventList>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d007      	beq.n	8003d04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cf4:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <xQueueReceive+0x1c0>)
 8003cf6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cfa:	601a      	str	r2, [r3, #0]
 8003cfc:	f3bf 8f4f 	dsb	sy
 8003d00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d04:	f002 f8a2 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e069      	b.n	8003de0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d12:	f002 f89b 	bl	8005e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e062      	b.n	8003de0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d106      	bne.n	8003d2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d20:	f107 0310 	add.w	r3, r7, #16
 8003d24:	4618      	mov	r0, r3
 8003d26:	f001 f881 	bl	8004e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d2e:	f002 f88d 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d32:	f000 fdd7 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d36:	f002 f857 	bl	8005de8 <vPortEnterCritical>
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d40:	b25b      	sxtb	r3, r3
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	d103      	bne.n	8003d50 <xQueueReceive+0x128>
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d56:	b25b      	sxtb	r3, r3
 8003d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5c:	d103      	bne.n	8003d66 <xQueueReceive+0x13e>
 8003d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d66:	f002 f871 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6a:	1d3a      	adds	r2, r7, #4
 8003d6c:	f107 0310 	add.w	r3, r7, #16
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f001 f870 	bl	8004e58 <xTaskCheckForTimeOut>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d123      	bne.n	8003dc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d80:	f000 fac0 	bl	8004304 <prvIsQueueEmpty>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d017      	beq.n	8003dba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8c:	3324      	adds	r3, #36	@ 0x24
 8003d8e:	687a      	ldr	r2, [r7, #4]
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 ff94 	bl	8004cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d9a:	f000 fa61 	bl	8004260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d9e:	f000 fdaf 	bl	8004900 <xTaskResumeAll>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d189      	bne.n	8003cbc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <xQueueReceive+0x1c0>)
 8003daa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	f3bf 8f6f 	isb	sy
 8003db8:	e780      	b.n	8003cbc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003dba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dbc:	f000 fa50 	bl	8004260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc0:	f000 fd9e 	bl	8004900 <xTaskResumeAll>
 8003dc4:	e77a      	b.n	8003cbc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dc8:	f000 fa4a 	bl	8004260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dcc:	f000 fd98 	bl	8004900 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dd2:	f000 fa97 	bl	8004304 <prvIsQueueEmpty>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f43f af6f 	beq.w	8003cbc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003dde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3730      	adds	r7, #48	@ 0x30
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	@ 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003df6:	2300      	movs	r3, #0
 8003df8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e0c:	f383 8811 	msr	BASEPRI, r3
 8003e10:	f3bf 8f6f 	isb	sy
 8003e14:	f3bf 8f4f 	dsb	sy
 8003e18:	623b      	str	r3, [r7, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	bf00      	nop
 8003e1e:	e7fd      	b.n	8003e1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00b      	beq.n	8003e40 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2c:	f383 8811 	msr	BASEPRI, r3
 8003e30:	f3bf 8f6f 	isb	sy
 8003e34:	f3bf 8f4f 	dsb	sy
 8003e38:	61fb      	str	r3, [r7, #28]
}
 8003e3a:	bf00      	nop
 8003e3c:	bf00      	nop
 8003e3e:	e7fd      	b.n	8003e3c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e40:	f001 f966 	bl	8005110 <xTaskGetSchedulerState>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d102      	bne.n	8003e50 <xQueueSemaphoreTake+0x64>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d101      	bne.n	8003e54 <xQueueSemaphoreTake+0x68>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <xQueueSemaphoreTake+0x6a>
 8003e54:	2300      	movs	r3, #0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d10b      	bne.n	8003e72 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	61bb      	str	r3, [r7, #24]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e72:	f001 ffb9 	bl	8005de8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d024      	beq.n	8003ecc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e84:	1e5a      	subs	r2, r3, #1
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d104      	bne.n	8003e9c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003e92:	f001 fab7 	bl	8005404 <pvTaskIncrementMutexHeldCount>
 8003e96:	4602      	mov	r2, r0
 8003e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e9e:	691b      	ldr	r3, [r3, #16]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ea6:	3310      	adds	r3, #16
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 ff5b 	bl	8004d64 <xTaskRemoveFromEventList>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eb4:	4b54      	ldr	r3, [pc, #336]	@ (8004008 <xQueueSemaphoreTake+0x21c>)
 8003eb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	f3bf 8f4f 	dsb	sy
 8003ec0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ec4:	f001 ffc2 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e098      	b.n	8003ffe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d112      	bne.n	8003ef8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00b      	beq.n	8003ef0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003edc:	f383 8811 	msr	BASEPRI, r3
 8003ee0:	f3bf 8f6f 	isb	sy
 8003ee4:	f3bf 8f4f 	dsb	sy
 8003ee8:	617b      	str	r3, [r7, #20]
}
 8003eea:	bf00      	nop
 8003eec:	bf00      	nop
 8003eee:	e7fd      	b.n	8003eec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003ef0:	f001 ffac 	bl	8005e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e082      	b.n	8003ffe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003efe:	f107 030c 	add.w	r3, r7, #12
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 ff92 	bl	8004e2c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f0c:	f001 ff9e 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f10:	f000 fce8 	bl	80048e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f14:	f001 ff68 	bl	8005de8 <vPortEnterCritical>
 8003f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f1e:	b25b      	sxtb	r3, r3
 8003f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f24:	d103      	bne.n	8003f2e <xQueueSemaphoreTake+0x142>
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f34:	b25b      	sxtb	r3, r3
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d103      	bne.n	8003f44 <xQueueSemaphoreTake+0x158>
 8003f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f44:	f001 ff82 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f48:	463a      	mov	r2, r7
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	4611      	mov	r1, r2
 8003f50:	4618      	mov	r0, r3
 8003f52:	f000 ff81 	bl	8004e58 <xTaskCheckForTimeOut>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d132      	bne.n	8003fc2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f5e:	f000 f9d1 	bl	8004304 <prvIsQueueEmpty>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d026      	beq.n	8003fb6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d109      	bne.n	8003f84 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003f70:	f001 ff3a 	bl	8005de8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f8e7 	bl	800514c <xTaskPriorityInherit>
 8003f7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003f80:	f001 ff64 	bl	8005e4c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f86:	3324      	adds	r3, #36	@ 0x24
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fe97 	bl	8004cc0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003f94:	f000 f964 	bl	8004260 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f98:	f000 fcb2 	bl	8004900 <xTaskResumeAll>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f47f af67 	bne.w	8003e72 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003fa4:	4b18      	ldr	r3, [pc, #96]	@ (8004008 <xQueueSemaphoreTake+0x21c>)
 8003fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	f3bf 8f6f 	isb	sy
 8003fb4:	e75d      	b.n	8003e72 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fb8:	f000 f952 	bl	8004260 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fbc:	f000 fca0 	bl	8004900 <xTaskResumeAll>
 8003fc0:	e757      	b.n	8003e72 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003fc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fc4:	f000 f94c 	bl	8004260 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fc8:	f000 fc9a 	bl	8004900 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fce:	f000 f999 	bl	8004304 <prvIsQueueEmpty>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f43f af4c 	beq.w	8003e72 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003fe0:	f001 ff02 	bl	8005de8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003fe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003fe6:	f000 f893 	bl	8004110 <prvGetDisinheritPriorityAfterTimeout>
 8003fea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 f982 	bl	80052fc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003ff8:	f001 ff28 	bl	8005e4c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ffc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3738      	adds	r7, #56	@ 0x38
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b08e      	sub	sp, #56	@ 0x38
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800401c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800401e:	2b00      	cmp	r3, #0
 8004020:	d10b      	bne.n	800403a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	623b      	str	r3, [r7, #32]
}
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d103      	bne.n	8004048 <xQueueReceiveFromISR+0x3c>
 8004040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d101      	bne.n	800404c <xQueueReceiveFromISR+0x40>
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <xQueueReceiveFromISR+0x42>
 800404c:	2300      	movs	r3, #0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10b      	bne.n	800406a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	61fb      	str	r3, [r7, #28]
}
 8004064:	bf00      	nop
 8004066:	bf00      	nop
 8004068:	e7fd      	b.n	8004066 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800406a:	f001 ff9d 	bl	8005fa8 <vPortValidateInterruptPriority>
	__asm volatile
 800406e:	f3ef 8211 	mrs	r2, BASEPRI
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	61ba      	str	r2, [r7, #24]
 8004084:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004086:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004088:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800408a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d02f      	beq.n	80040f6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004098:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800409c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040a4:	f000 f8b6 	bl	8004214 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040aa:	1e5a      	subs	r2, r3, #1
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80040b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80040b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b8:	d112      	bne.n	80040e0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	3310      	adds	r3, #16
 80040c6:	4618      	mov	r0, r3
 80040c8:	f000 fe4c 	bl	8004d64 <xTaskRemoveFromEventList>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00e      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00b      	beq.n	80040f0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e007      	b.n	80040f0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80040e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80040e4:	3301      	adds	r3, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	b25a      	sxtb	r2, r3
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80040f0:	2301      	movs	r3, #1
 80040f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f4:	e001      	b.n	80040fa <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80040f6:	2300      	movs	r3, #0
 80040f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	f383 8811 	msr	BASEPRI, r3
}
 8004104:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004108:	4618      	mov	r0, r3
 800410a:	3738      	adds	r7, #56	@ 0x38
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	e001      	b.n	8004132 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004132:	68fb      	ldr	r3, [r7, #12]
	}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004154:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10d      	bne.n	800417a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d14d      	bne.n	8004202 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f001 f856 	bl	800521c <xTaskPriorityDisinherit>
 8004170:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	609a      	str	r2, [r3, #8]
 8004178:	e043      	b.n	8004202 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d119      	bne.n	80041b4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6858      	ldr	r0, [r3, #4]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004188:	461a      	mov	r2, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	f002 ff6f 	bl	800706e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	441a      	add	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d32b      	bcc.n	8004202 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]
 80041b2:	e026      	b.n	8004202 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	68d8      	ldr	r0, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041bc:	461a      	mov	r2, r3
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	f002 ff55 	bl	800706e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041cc:	425b      	negs	r3, r3
 80041ce:	441a      	add	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d207      	bcs.n	80041f0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e8:	425b      	negs	r3, r3
 80041ea:	441a      	add	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d105      	bne.n	8004202 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	3b01      	subs	r3, #1
 8004200:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800420a:	697b      	ldr	r3, [r7, #20]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d018      	beq.n	8004258 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	441a      	add	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d303      	bcc.n	8004248 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68d9      	ldr	r1, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	461a      	mov	r2, r3
 8004252:	6838      	ldr	r0, [r7, #0]
 8004254:	f002 ff0b 	bl	800706e <memcpy>
	}
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004268:	f001 fdbe 	bl	8005de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004272:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004274:	e011      	b.n	800429a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	2b00      	cmp	r3, #0
 800427c:	d012      	beq.n	80042a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3324      	adds	r3, #36	@ 0x24
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fd6e 	bl	8004d64 <xTaskRemoveFromEventList>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800428e:	f000 fe47 	bl	8004f20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	3b01      	subs	r3, #1
 8004296:	b2db      	uxtb	r3, r3
 8004298:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800429a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	dce9      	bgt.n	8004276 <prvUnlockQueue+0x16>
 80042a2:	e000      	b.n	80042a6 <prvUnlockQueue+0x46>
					break;
 80042a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	22ff      	movs	r2, #255	@ 0xff
 80042aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042ae:	f001 fdcd 	bl	8005e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042b2:	f001 fd99 	bl	8005de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042be:	e011      	b.n	80042e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d012      	beq.n	80042ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3310      	adds	r3, #16
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fd49 	bl	8004d64 <xTaskRemoveFromEventList>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042d8:	f000 fe22 	bl	8004f20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042dc:	7bbb      	ldrb	r3, [r7, #14]
 80042de:	3b01      	subs	r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	dce9      	bgt.n	80042c0 <prvUnlockQueue+0x60>
 80042ec:	e000      	b.n	80042f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	22ff      	movs	r2, #255	@ 0xff
 80042f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80042f8:	f001 fda8 	bl	8005e4c <vPortExitCritical>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800430c:	f001 fd6c 	bl	8005de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004314:	2b00      	cmp	r3, #0
 8004316:	d102      	bne.n	800431e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004318:	2301      	movs	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e001      	b.n	8004322 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004322:	f001 fd93 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 8004326:	68fb      	ldr	r3, [r7, #12]
}
 8004328:	4618      	mov	r0, r3
 800432a:	3710      	adds	r7, #16
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004338:	f001 fd56 	bl	8005de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	429a      	cmp	r2, r3
 8004346:	d102      	bne.n	800434e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004348:	2301      	movs	r3, #1
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	e001      	b.n	8004352 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800434e:	2300      	movs	r3, #0
 8004350:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004352:	f001 fd7b 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 8004356:	68fb      	ldr	r3, [r7, #12]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
 800436e:	e014      	b.n	800439a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004370:	4a0f      	ldr	r2, [pc, #60]	@ (80043b0 <vQueueAddToRegistry+0x50>)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800437c:	490c      	ldr	r1, [pc, #48]	@ (80043b0 <vQueueAddToRegistry+0x50>)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004386:	4a0a      	ldr	r2, [pc, #40]	@ (80043b0 <vQueueAddToRegistry+0x50>)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004392:	e006      	b.n	80043a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b07      	cmp	r3, #7
 800439e:	d9e7      	bls.n	8004370 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043a0:	bf00      	nop
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	200009bc 	.word	0x200009bc

080043b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043c4:	f001 fd10 	bl	8005de8 <vPortEnterCritical>
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d103      	bne.n	80043de <vQueueWaitForMessageRestricted+0x2a>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043e4:	b25b      	sxtb	r3, r3
 80043e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ea:	d103      	bne.n	80043f4 <vQueueWaitForMessageRestricted+0x40>
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043f4:	f001 fd2a 	bl	8005e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d106      	bne.n	800440e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3324      	adds	r3, #36	@ 0x24
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fc7f 	bl	8004d0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800440e:	6978      	ldr	r0, [r7, #20]
 8004410:	f7ff ff26 	bl	8004260 <prvUnlockQueue>
	}
 8004414:	bf00      	nop
 8004416:	3718      	adds	r7, #24
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08e      	sub	sp, #56	@ 0x38
 8004420:	af04      	add	r7, sp, #16
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800442a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	623b      	str	r3, [r7, #32]
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <xTaskCreateStatic+0x4a>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	61fb      	str	r3, [r7, #28]
}
 8004460:	bf00      	nop
 8004462:	bf00      	nop
 8004464:	e7fd      	b.n	8004462 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004466:	23a8      	movs	r3, #168	@ 0xa8
 8004468:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	2ba8      	cmp	r3, #168	@ 0xa8
 800446e:	d00b      	beq.n	8004488 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004474:	f383 8811 	msr	BASEPRI, r3
 8004478:	f3bf 8f6f 	isb	sy
 800447c:	f3bf 8f4f 	dsb	sy
 8004480:	61bb      	str	r3, [r7, #24]
}
 8004482:	bf00      	nop
 8004484:	bf00      	nop
 8004486:	e7fd      	b.n	8004484 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004488:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800448a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448c:	2b00      	cmp	r3, #0
 800448e:	d01e      	beq.n	80044ce <xTaskCreateStatic+0xb2>
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	2b00      	cmp	r3, #0
 8004494:	d01b      	beq.n	80044ce <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004498:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800449e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a2:	2202      	movs	r2, #2
 80044a4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044a8:	2300      	movs	r3, #0
 80044aa:	9303      	str	r3, [sp, #12]
 80044ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ae:	9302      	str	r3, [sp, #8]
 80044b0:	f107 0314 	add.w	r3, r7, #20
 80044b4:	9301      	str	r3, [sp, #4]
 80044b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b8:	9300      	str	r3, [sp, #0]
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	68b9      	ldr	r1, [r7, #8]
 80044c0:	68f8      	ldr	r0, [r7, #12]
 80044c2:	f000 f851 	bl	8004568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044c6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044c8:	f000 f8f6 	bl	80046b8 <prvAddNewTaskToReadyList>
 80044cc:	e001      	b.n	80044d2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3728      	adds	r7, #40	@ 0x28
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08c      	sub	sp, #48	@ 0x30
 80044e0:	af04      	add	r7, sp, #16
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	4613      	mov	r3, r2
 80044ea:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4618      	mov	r0, r3
 80044f2:	f001 fd9b 	bl	800602c <pvPortMalloc>
 80044f6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00e      	beq.n	800451c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044fe:	20a8      	movs	r0, #168	@ 0xa8
 8004500:	f001 fd94 	bl	800602c <pvPortMalloc>
 8004504:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d003      	beq.n	8004514 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	631a      	str	r2, [r3, #48]	@ 0x30
 8004512:	e005      	b.n	8004520 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004514:	6978      	ldr	r0, [r7, #20]
 8004516:	f001 fe57 	bl	80061c8 <vPortFree>
 800451a:	e001      	b.n	8004520 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d017      	beq.n	8004556 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	2300      	movs	r3, #0
 8004532:	9303      	str	r3, [sp, #12]
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	9302      	str	r3, [sp, #8]
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	9301      	str	r3, [sp, #4]
 800453c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	68b9      	ldr	r1, [r7, #8]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f80f 	bl	8004568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800454a:	69f8      	ldr	r0, [r7, #28]
 800454c:	f000 f8b4 	bl	80046b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004550:	2301      	movs	r3, #1
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	e002      	b.n	800455c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004556:	f04f 33ff 	mov.w	r3, #4294967295
 800455a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800455c:	69bb      	ldr	r3, [r7, #24]
	}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b088      	sub	sp, #32
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]
 8004574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	461a      	mov	r2, r3
 8004580:	21a5      	movs	r1, #165	@ 0xa5
 8004582:	f002 fc9e 	bl	8006ec2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004590:	3b01      	subs	r3, #1
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4413      	add	r3, r2
 8004596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	f023 0307 	bic.w	r3, r3, #7
 800459e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00b      	beq.n	80045c2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ae:	f383 8811 	msr	BASEPRI, r3
 80045b2:	f3bf 8f6f 	isb	sy
 80045b6:	f3bf 8f4f 	dsb	sy
 80045ba:	617b      	str	r3, [r7, #20]
}
 80045bc:	bf00      	nop
 80045be:	bf00      	nop
 80045c0:	e7fd      	b.n	80045be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01f      	beq.n	8004608 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	e012      	b.n	80045f4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	7819      	ldrb	r1, [r3, #0]
 80045d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	4413      	add	r3, r2
 80045dc:	3334      	adds	r3, #52	@ 0x34
 80045de:	460a      	mov	r2, r1
 80045e0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d006      	beq.n	80045fc <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	3301      	adds	r3, #1
 80045f2:	61fb      	str	r3, [r7, #28]
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	2b0f      	cmp	r3, #15
 80045f8:	d9e9      	bls.n	80045ce <prvInitialiseNewTask+0x66>
 80045fa:	e000      	b.n	80045fe <prvInitialiseNewTask+0x96>
			{
				break;
 80045fc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004606:	e003      	b.n	8004610 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004612:	2b37      	cmp	r3, #55	@ 0x37
 8004614:	d901      	bls.n	800461a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004616:	2337      	movs	r3, #55	@ 0x37
 8004618:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800461e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004622:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004624:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004628:	2200      	movs	r2, #0
 800462a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	3304      	adds	r3, #4
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe fec7 	bl	80033c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	3318      	adds	r3, #24
 800463a:	4618      	mov	r0, r3
 800463c:	f7fe fec2 	bl	80033c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004644:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800464c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004652:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	2200      	movs	r2, #0
 8004662:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	3354      	adds	r3, #84	@ 0x54
 800466a:	224c      	movs	r2, #76	@ 0x4c
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f002 fc27 	bl	8006ec2 <memset>
 8004674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004676:	4a0d      	ldr	r2, [pc, #52]	@ (80046ac <prvInitialiseNewTask+0x144>)
 8004678:	659a      	str	r2, [r3, #88]	@ 0x58
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	4a0c      	ldr	r2, [pc, #48]	@ (80046b0 <prvInitialiseNewTask+0x148>)
 800467e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004682:	4a0c      	ldr	r2, [pc, #48]	@ (80046b4 <prvInitialiseNewTask+0x14c>)
 8004684:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004686:	683a      	ldr	r2, [r7, #0]
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	69b8      	ldr	r0, [r7, #24]
 800468c:	f001 fa7c 	bl	8005b88 <pxPortInitialiseStack>
 8004690:	4602      	mov	r2, r0
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800469c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800469e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a2:	bf00      	nop
 80046a4:	3720      	adds	r7, #32
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20004c50 	.word	0x20004c50
 80046b0:	20004cb8 	.word	0x20004cb8
 80046b4:	20004d20 	.word	0x20004d20

080046b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046c0:	f001 fb92 	bl	8005de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046c4:	4b2d      	ldr	r3, [pc, #180]	@ (800477c <prvAddNewTaskToReadyList+0xc4>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	3301      	adds	r3, #1
 80046ca:	4a2c      	ldr	r2, [pc, #176]	@ (800477c <prvAddNewTaskToReadyList+0xc4>)
 80046cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046ce:	4b2c      	ldr	r3, [pc, #176]	@ (8004780 <prvAddNewTaskToReadyList+0xc8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046d6:	4a2a      	ldr	r2, [pc, #168]	@ (8004780 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046dc:	4b27      	ldr	r3, [pc, #156]	@ (800477c <prvAddNewTaskToReadyList+0xc4>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d110      	bne.n	8004706 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046e4:	f000 fc40 	bl	8004f68 <prvInitialiseTaskLists>
 80046e8:	e00d      	b.n	8004706 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ea:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <prvAddNewTaskToReadyList+0xcc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d109      	bne.n	8004706 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046f2:	4b23      	ldr	r3, [pc, #140]	@ (8004780 <prvAddNewTaskToReadyList+0xc8>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d802      	bhi.n	8004706 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004700:	4a1f      	ldr	r2, [pc, #124]	@ (8004780 <prvAddNewTaskToReadyList+0xc8>)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004706:	4b20      	ldr	r3, [pc, #128]	@ (8004788 <prvAddNewTaskToReadyList+0xd0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <prvAddNewTaskToReadyList+0xd0>)
 800470e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004710:	4b1d      	ldr	r3, [pc, #116]	@ (8004788 <prvAddNewTaskToReadyList+0xd0>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800471c:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <prvAddNewTaskToReadyList+0xd4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	429a      	cmp	r2, r3
 8004722:	d903      	bls.n	800472c <prvAddNewTaskToReadyList+0x74>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	4a18      	ldr	r2, [pc, #96]	@ (800478c <prvAddNewTaskToReadyList+0xd4>)
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4a15      	ldr	r2, [pc, #84]	@ (8004790 <prvAddNewTaskToReadyList+0xd8>)
 800473a:	441a      	add	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f7fe fe4b 	bl	80033de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004748:	f001 fb80 	bl	8005e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800474c:	4b0d      	ldr	r3, [pc, #52]	@ (8004784 <prvAddNewTaskToReadyList+0xcc>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004754:	4b0a      	ldr	r3, [pc, #40]	@ (8004780 <prvAddNewTaskToReadyList+0xc8>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d207      	bcs.n	8004772 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004762:	4b0c      	ldr	r3, [pc, #48]	@ (8004794 <prvAddNewTaskToReadyList+0xdc>)
 8004764:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	20000ed0 	.word	0x20000ed0
 8004780:	200009fc 	.word	0x200009fc
 8004784:	20000edc 	.word	0x20000edc
 8004788:	20000eec 	.word	0x20000eec
 800478c:	20000ed8 	.word	0x20000ed8
 8004790:	20000a00 	.word	0x20000a00
 8004794:	e000ed04 	.word	0xe000ed04

08004798 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d018      	beq.n	80047dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80047aa:	4b14      	ldr	r3, [pc, #80]	@ (80047fc <vTaskDelay+0x64>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <vTaskDelay+0x32>
	__asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	60bb      	str	r3, [r7, #8]
}
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047ca:	f000 f88b 	bl	80048e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047ce:	2100      	movs	r1, #0
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 fe2b 	bl	800542c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047d6:	f000 f893 	bl	8004900 <xTaskResumeAll>
 80047da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d107      	bne.n	80047f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047e2:	4b07      	ldr	r3, [pc, #28]	@ (8004800 <vTaskDelay+0x68>)
 80047e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047e8:	601a      	str	r2, [r3, #0]
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047f2:	bf00      	nop
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000ef8 	.word	0x20000ef8
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08a      	sub	sp, #40	@ 0x28
 8004808:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800480e:	2300      	movs	r3, #0
 8004810:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004812:	463a      	mov	r2, r7
 8004814:	1d39      	adds	r1, r7, #4
 8004816:	f107 0308 	add.w	r3, r7, #8
 800481a:	4618      	mov	r0, r3
 800481c:	f7fe fd7e 	bl	800331c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004820:	6839      	ldr	r1, [r7, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	9202      	str	r2, [sp, #8]
 8004828:	9301      	str	r3, [sp, #4]
 800482a:	2300      	movs	r3, #0
 800482c:	9300      	str	r3, [sp, #0]
 800482e:	2300      	movs	r3, #0
 8004830:	460a      	mov	r2, r1
 8004832:	4924      	ldr	r1, [pc, #144]	@ (80048c4 <vTaskStartScheduler+0xc0>)
 8004834:	4824      	ldr	r0, [pc, #144]	@ (80048c8 <vTaskStartScheduler+0xc4>)
 8004836:	f7ff fdf1 	bl	800441c <xTaskCreateStatic>
 800483a:	4603      	mov	r3, r0
 800483c:	4a23      	ldr	r2, [pc, #140]	@ (80048cc <vTaskStartScheduler+0xc8>)
 800483e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004840:	4b22      	ldr	r3, [pc, #136]	@ (80048cc <vTaskStartScheduler+0xc8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d002      	beq.n	800484e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004848:	2301      	movs	r3, #1
 800484a:	617b      	str	r3, [r7, #20]
 800484c:	e001      	b.n	8004852 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800484e:	2300      	movs	r3, #0
 8004850:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d102      	bne.n	800485e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004858:	f000 fe3c 	bl	80054d4 <xTimerCreateTimerTask>
 800485c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d11b      	bne.n	800489c <vTaskStartScheduler+0x98>
	__asm volatile
 8004864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	613b      	str	r3, [r7, #16]
}
 8004876:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <vTaskStartScheduler+0xcc>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3354      	adds	r3, #84	@ 0x54
 800487e:	4a15      	ldr	r2, [pc, #84]	@ (80048d4 <vTaskStartScheduler+0xd0>)
 8004880:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004882:	4b15      	ldr	r3, [pc, #84]	@ (80048d8 <vTaskStartScheduler+0xd4>)
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800488a:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <vTaskStartScheduler+0xd8>)
 800488c:	2201      	movs	r2, #1
 800488e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004890:	4b13      	ldr	r3, [pc, #76]	@ (80048e0 <vTaskStartScheduler+0xdc>)
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004896:	f001 fa03 	bl	8005ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800489a:	e00f      	b.n	80048bc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a2:	d10b      	bne.n	80048bc <vTaskStartScheduler+0xb8>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	60fb      	str	r3, [r7, #12]
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <vTaskStartScheduler+0xb4>
}
 80048bc:	bf00      	nop
 80048be:	3718      	adds	r7, #24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	08008e08 	.word	0x08008e08
 80048c8:	08004f39 	.word	0x08004f39
 80048cc:	20000ef4 	.word	0x20000ef4
 80048d0:	200009fc 	.word	0x200009fc
 80048d4:	2000001c 	.word	0x2000001c
 80048d8:	20000ef0 	.word	0x20000ef0
 80048dc:	20000edc 	.word	0x20000edc
 80048e0:	20000ed4 	.word	0x20000ed4

080048e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048e8:	4b04      	ldr	r3, [pc, #16]	@ (80048fc <vTaskSuspendAll+0x18>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3301      	adds	r3, #1
 80048ee:	4a03      	ldr	r2, [pc, #12]	@ (80048fc <vTaskSuspendAll+0x18>)
 80048f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048f2:	bf00      	nop
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	20000ef8 	.word	0x20000ef8

08004900 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b084      	sub	sp, #16
 8004904:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800490a:	2300      	movs	r3, #0
 800490c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800490e:	4b42      	ldr	r3, [pc, #264]	@ (8004a18 <xTaskResumeAll+0x118>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <xTaskResumeAll+0x2e>
	__asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	603b      	str	r3, [r7, #0]
}
 8004928:	bf00      	nop
 800492a:	bf00      	nop
 800492c:	e7fd      	b.n	800492a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800492e:	f001 fa5b 	bl	8005de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004932:	4b39      	ldr	r3, [pc, #228]	@ (8004a18 <xTaskResumeAll+0x118>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	3b01      	subs	r3, #1
 8004938:	4a37      	ldr	r2, [pc, #220]	@ (8004a18 <xTaskResumeAll+0x118>)
 800493a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800493c:	4b36      	ldr	r3, [pc, #216]	@ (8004a18 <xTaskResumeAll+0x118>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d162      	bne.n	8004a0a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004944:	4b35      	ldr	r3, [pc, #212]	@ (8004a1c <xTaskResumeAll+0x11c>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05e      	beq.n	8004a0a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800494c:	e02f      	b.n	80049ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494e:	4b34      	ldr	r3, [pc, #208]	@ (8004a20 <xTaskResumeAll+0x120>)
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	3318      	adds	r3, #24
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fd9c 	bl	8003498 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3304      	adds	r3, #4
 8004964:	4618      	mov	r0, r3
 8004966:	f7fe fd97 	bl	8003498 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800496e:	4b2d      	ldr	r3, [pc, #180]	@ (8004a24 <xTaskResumeAll+0x124>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d903      	bls.n	800497e <xTaskResumeAll+0x7e>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	4a2a      	ldr	r2, [pc, #168]	@ (8004a24 <xTaskResumeAll+0x124>)
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4a27      	ldr	r2, [pc, #156]	@ (8004a28 <xTaskResumeAll+0x128>)
 800498c:	441a      	add	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	3304      	adds	r3, #4
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fe fd22 	bl	80033de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	4b23      	ldr	r3, [pc, #140]	@ (8004a2c <xTaskResumeAll+0x12c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d302      	bcc.n	80049ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80049a8:	4b21      	ldr	r3, [pc, #132]	@ (8004a30 <xTaskResumeAll+0x130>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004a20 <xTaskResumeAll+0x120>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1cb      	bne.n	800494e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80049bc:	f000 fb78 	bl	80050b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80049c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004a34 <xTaskResumeAll+0x134>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049cc:	f000 f858 	bl	8004a80 <xTaskIncrementTick>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d002      	beq.n	80049dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049d6:	4b16      	ldr	r3, [pc, #88]	@ (8004a30 <xTaskResumeAll+0x130>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3b01      	subs	r3, #1
 80049e0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1f1      	bne.n	80049cc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <xTaskResumeAll+0x134>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049ee:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <xTaskResumeAll+0x130>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049f6:	2301      	movs	r3, #1
 80049f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004a38 <xTaskResumeAll+0x138>)
 80049fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a00:	601a      	str	r2, [r3, #0]
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a0a:	f001 fa1f 	bl	8005e4c <vPortExitCritical>

	return xAlreadyYielded;
 8004a0e:	68bb      	ldr	r3, [r7, #8]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000ef8 	.word	0x20000ef8
 8004a1c:	20000ed0 	.word	0x20000ed0
 8004a20:	20000e90 	.word	0x20000e90
 8004a24:	20000ed8 	.word	0x20000ed8
 8004a28:	20000a00 	.word	0x20000a00
 8004a2c:	200009fc 	.word	0x200009fc
 8004a30:	20000ee4 	.word	0x20000ee4
 8004a34:	20000ee0 	.word	0x20000ee0
 8004a38:	e000ed04 	.word	0xe000ed04

08004a3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a42:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <xTaskGetTickCount+0x1c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a48:	687b      	ldr	r3, [r7, #4]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000ed4 	.word	0x20000ed4

08004a5c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a62:	f001 faa1 	bl	8005fa8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004a66:	2300      	movs	r3, #0
 8004a68:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004a6a:	4b04      	ldr	r3, [pc, #16]	@ (8004a7c <xTaskGetTickCountFromISR+0x20>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a70:	683b      	ldr	r3, [r7, #0]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	20000ed4 	.word	0x20000ed4

08004a80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a86:	2300      	movs	r3, #0
 8004a88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a8a:	4b4f      	ldr	r3, [pc, #316]	@ (8004bc8 <xTaskIncrementTick+0x148>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 8090 	bne.w	8004bb4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a94:	4b4d      	ldr	r3, [pc, #308]	@ (8004bcc <xTaskIncrementTick+0x14c>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a9c:	4a4b      	ldr	r2, [pc, #300]	@ (8004bcc <xTaskIncrementTick+0x14c>)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d121      	bne.n	8004aec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004aa8:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <xTaskIncrementTick+0x150>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <xTaskIncrementTick+0x4a>
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	603b      	str	r3, [r7, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	bf00      	nop
 8004ac8:	e7fd      	b.n	8004ac6 <xTaskIncrementTick+0x46>
 8004aca:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <xTaskIncrementTick+0x150>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	60fb      	str	r3, [r7, #12]
 8004ad0:	4b40      	ldr	r3, [pc, #256]	@ (8004bd4 <xTaskIncrementTick+0x154>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd0 <xTaskIncrementTick+0x150>)
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	4a3e      	ldr	r2, [pc, #248]	@ (8004bd4 <xTaskIncrementTick+0x154>)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd8 <xTaskIncrementTick+0x158>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	4a3c      	ldr	r2, [pc, #240]	@ (8004bd8 <xTaskIncrementTick+0x158>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	f000 fae2 	bl	80050b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004aec:	4b3b      	ldr	r3, [pc, #236]	@ (8004bdc <xTaskIncrementTick+0x15c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d349      	bcc.n	8004b8a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af6:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <xTaskIncrementTick+0x150>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b00:	4b36      	ldr	r3, [pc, #216]	@ (8004bdc <xTaskIncrementTick+0x15c>)
 8004b02:	f04f 32ff 	mov.w	r2, #4294967295
 8004b06:	601a      	str	r2, [r3, #0]
					break;
 8004b08:	e03f      	b.n	8004b8a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b0a:	4b31      	ldr	r3, [pc, #196]	@ (8004bd0 <xTaskIncrementTick+0x150>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d203      	bcs.n	8004b2a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b22:	4a2e      	ldr	r2, [pc, #184]	@ (8004bdc <xTaskIncrementTick+0x15c>)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b28:	e02f      	b.n	8004b8a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fcb2 	bl	8003498 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d004      	beq.n	8004b46 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	3318      	adds	r3, #24
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fe fca9 	bl	8003498 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4a:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <xTaskIncrementTick+0x160>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d903      	bls.n	8004b5a <xTaskIncrementTick+0xda>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b56:	4a22      	ldr	r2, [pc, #136]	@ (8004be0 <xTaskIncrementTick+0x160>)
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a1f      	ldr	r2, [pc, #124]	@ (8004be4 <xTaskIncrementTick+0x164>)
 8004b68:	441a      	add	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7fe fc34 	bl	80033de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004be8 <xTaskIncrementTick+0x168>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d3b8      	bcc.n	8004af6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b84:	2301      	movs	r3, #1
 8004b86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b88:	e7b5      	b.n	8004af6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b8a:	4b17      	ldr	r3, [pc, #92]	@ (8004be8 <xTaskIncrementTick+0x168>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4914      	ldr	r1, [pc, #80]	@ (8004be4 <xTaskIncrementTick+0x164>)
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d901      	bls.n	8004ba6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004ba6:	4b11      	ldr	r3, [pc, #68]	@ (8004bec <xTaskIncrementTick+0x16c>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d007      	beq.n	8004bbe <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e004      	b.n	8004bbe <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf0 <xTaskIncrementTick+0x170>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3301      	adds	r3, #1
 8004bba:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf0 <xTaskIncrementTick+0x170>)
 8004bbc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bbe:	697b      	ldr	r3, [r7, #20]
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20000ef8 	.word	0x20000ef8
 8004bcc:	20000ed4 	.word	0x20000ed4
 8004bd0:	20000e88 	.word	0x20000e88
 8004bd4:	20000e8c 	.word	0x20000e8c
 8004bd8:	20000ee8 	.word	0x20000ee8
 8004bdc:	20000ef0 	.word	0x20000ef0
 8004be0:	20000ed8 	.word	0x20000ed8
 8004be4:	20000a00 	.word	0x20000a00
 8004be8:	200009fc 	.word	0x200009fc
 8004bec:	20000ee4 	.word	0x20000ee4
 8004bf0:	20000ee0 	.word	0x20000ee0

08004bf4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <vTaskSwitchContext+0xb4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c02:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <vTaskSwitchContext+0xb8>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c08:	e047      	b.n	8004c9a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004c0a:	4b28      	ldr	r3, [pc, #160]	@ (8004cac <vTaskSwitchContext+0xb8>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c10:	4b27      	ldr	r3, [pc, #156]	@ (8004cb0 <vTaskSwitchContext+0xbc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	e011      	b.n	8004c3c <vTaskSwitchContext+0x48>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10b      	bne.n	8004c36 <vTaskSwitchContext+0x42>
	__asm volatile
 8004c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	607b      	str	r3, [r7, #4]
}
 8004c30:	bf00      	nop
 8004c32:	bf00      	nop
 8004c34:	e7fd      	b.n	8004c32 <vTaskSwitchContext+0x3e>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	491d      	ldr	r1, [pc, #116]	@ (8004cb4 <vTaskSwitchContext+0xc0>)
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0e3      	beq.n	8004c18 <vTaskSwitchContext+0x24>
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	4613      	mov	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	4413      	add	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4a16      	ldr	r2, [pc, #88]	@ (8004cb4 <vTaskSwitchContext+0xc0>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	60bb      	str	r3, [r7, #8]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	685a      	ldr	r2, [r3, #4]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3308      	adds	r3, #8
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d104      	bne.n	8004c80 <vTaskSwitchContext+0x8c>
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	605a      	str	r2, [r3, #4]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb8 <vTaskSwitchContext+0xc4>)
 8004c88:	6013      	str	r3, [r2, #0]
 8004c8a:	4a09      	ldr	r2, [pc, #36]	@ (8004cb0 <vTaskSwitchContext+0xbc>)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c90:	4b09      	ldr	r3, [pc, #36]	@ (8004cb8 <vTaskSwitchContext+0xc4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3354      	adds	r3, #84	@ 0x54
 8004c96:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <vTaskSwitchContext+0xc8>)
 8004c98:	6013      	str	r3, [r2, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	3714      	adds	r7, #20
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000ef8 	.word	0x20000ef8
 8004cac:	20000ee4 	.word	0x20000ee4
 8004cb0:	20000ed8 	.word	0x20000ed8
 8004cb4:	20000a00 	.word	0x20000a00
 8004cb8:	200009fc 	.word	0x200009fc
 8004cbc:	2000001c 	.word	0x2000001c

08004cc0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd4:	f383 8811 	msr	BASEPRI, r3
 8004cd8:	f3bf 8f6f 	isb	sy
 8004cdc:	f3bf 8f4f 	dsb	sy
 8004ce0:	60fb      	str	r3, [r7, #12]
}
 8004ce2:	bf00      	nop
 8004ce4:	bf00      	nop
 8004ce6:	e7fd      	b.n	8004ce4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <vTaskPlaceOnEventList+0x48>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	3318      	adds	r3, #24
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7fe fb98 	bl	8003426 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	6838      	ldr	r0, [r7, #0]
 8004cfa:	f000 fb97 	bl	800542c <prvAddCurrentTaskToDelayedList>
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	200009fc 	.word	0x200009fc

08004d0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10b      	bne.n	8004d36 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
}
 8004d30:	bf00      	nop
 8004d32:	bf00      	nop
 8004d34:	e7fd      	b.n	8004d32 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <vTaskPlaceOnEventListRestricted+0x54>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	3318      	adds	r3, #24
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7fe fb4d 	bl	80033de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d4e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	68b8      	ldr	r0, [r7, #8]
 8004d54:	f000 fb6a 	bl	800542c <prvAddCurrentTaskToDelayedList>
	}
 8004d58:	bf00      	nop
 8004d5a:	3718      	adds	r7, #24
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	200009fc 	.word	0x200009fc

08004d64 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	68db      	ldr	r3, [r3, #12]
 8004d72:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60fb      	str	r3, [r7, #12]
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	e7fd      	b.n	8004d8e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3318      	adds	r3, #24
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe fb7e 	bl	8003498 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004e14 <xTaskRemoveFromEventList+0xb0>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11d      	bne.n	8004de0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	3304      	adds	r3, #4
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fe fb75 	bl	8003498 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db2:	4b19      	ldr	r3, [pc, #100]	@ (8004e18 <xTaskRemoveFromEventList+0xb4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d903      	bls.n	8004dc2 <xTaskRemoveFromEventList+0x5e>
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbe:	4a16      	ldr	r2, [pc, #88]	@ (8004e18 <xTaskRemoveFromEventList+0xb4>)
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4a13      	ldr	r2, [pc, #76]	@ (8004e1c <xTaskRemoveFromEventList+0xb8>)
 8004dd0:	441a      	add	r2, r3
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3304      	adds	r3, #4
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fe fb00 	bl	80033de <vListInsertEnd>
 8004dde:	e005      	b.n	8004dec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	3318      	adds	r3, #24
 8004de4:	4619      	mov	r1, r3
 8004de6:	480e      	ldr	r0, [pc, #56]	@ (8004e20 <xTaskRemoveFromEventList+0xbc>)
 8004de8:	f7fe faf9 	bl	80033de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004df0:	4b0c      	ldr	r3, [pc, #48]	@ (8004e24 <xTaskRemoveFromEventList+0xc0>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d905      	bls.n	8004e06 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004e28 <xTaskRemoveFromEventList+0xc4>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	e001      	b.n	8004e0a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004e06:	2300      	movs	r3, #0
 8004e08:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004e0a:	697b      	ldr	r3, [r7, #20]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	20000ef8 	.word	0x20000ef8
 8004e18:	20000ed8 	.word	0x20000ed8
 8004e1c:	20000a00 	.word	0x20000a00
 8004e20:	20000e90 	.word	0x20000e90
 8004e24:	200009fc 	.word	0x200009fc
 8004e28:	20000ee4 	.word	0x20000ee4

08004e2c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004e34:	4b06      	ldr	r3, [pc, #24]	@ (8004e50 <vTaskInternalSetTimeOutState+0x24>)
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <vTaskInternalSetTimeOutState+0x28>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	605a      	str	r2, [r3, #4]
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	20000ee8 	.word	0x20000ee8
 8004e54:	20000ed4 	.word	0x20000ed4

08004e58 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b088      	sub	sp, #32
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10b      	bne.n	8004e80 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	613b      	str	r3, [r7, #16]
}
 8004e7a:	bf00      	nop
 8004e7c:	bf00      	nop
 8004e7e:	e7fd      	b.n	8004e7c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10b      	bne.n	8004e9e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	e7fd      	b.n	8004e9a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e9e:	f000 ffa3 	bl	8005de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <xTaskCheckForTimeOut+0xc0>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	69ba      	ldr	r2, [r7, #24]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eba:	d102      	bne.n	8004ec2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	61fb      	str	r3, [r7, #28]
 8004ec0:	e023      	b.n	8004f0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	4b15      	ldr	r3, [pc, #84]	@ (8004f1c <xTaskCheckForTimeOut+0xc4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d007      	beq.n	8004ede <xTaskCheckForTimeOut+0x86>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d302      	bcc.n	8004ede <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	e015      	b.n	8004f0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d20b      	bcs.n	8004f00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	1ad2      	subs	r2, r2, r3
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ff99 	bl	8004e2c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004efa:	2300      	movs	r3, #0
 8004efc:	61fb      	str	r3, [r7, #28]
 8004efe:	e004      	b.n	8004f0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004f06:	2301      	movs	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004f0a:	f000 ff9f 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 8004f0e:	69fb      	ldr	r3, [r7, #28]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3720      	adds	r7, #32
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000ed4 	.word	0x20000ed4
 8004f1c:	20000ee8 	.word	0x20000ee8

08004f20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004f20:	b480      	push	{r7}
 8004f22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004f24:	4b03      	ldr	r3, [pc, #12]	@ (8004f34 <vTaskMissedYield+0x14>)
 8004f26:	2201      	movs	r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	20000ee4 	.word	0x20000ee4

08004f38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004f40:	f000 f852 	bl	8004fe8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004f44:	4b06      	ldr	r3, [pc, #24]	@ (8004f60 <prvIdleTask+0x28>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d9f9      	bls.n	8004f40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <prvIdleTask+0x2c>)
 8004f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004f5c:	e7f0      	b.n	8004f40 <prvIdleTask+0x8>
 8004f5e:	bf00      	nop
 8004f60:	20000a00 	.word	0x20000a00
 8004f64:	e000ed04 	.word	0xe000ed04

08004f68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f6e:	2300      	movs	r3, #0
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	e00c      	b.n	8004f8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4413      	add	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4a12      	ldr	r2, [pc, #72]	@ (8004fc8 <prvInitialiseTaskLists+0x60>)
 8004f80:	4413      	add	r3, r2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f7fe f9fe 	bl	8003384 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	607b      	str	r3, [r7, #4]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b37      	cmp	r3, #55	@ 0x37
 8004f92:	d9ef      	bls.n	8004f74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f94:	480d      	ldr	r0, [pc, #52]	@ (8004fcc <prvInitialiseTaskLists+0x64>)
 8004f96:	f7fe f9f5 	bl	8003384 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f9a:	480d      	ldr	r0, [pc, #52]	@ (8004fd0 <prvInitialiseTaskLists+0x68>)
 8004f9c:	f7fe f9f2 	bl	8003384 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004fa0:	480c      	ldr	r0, [pc, #48]	@ (8004fd4 <prvInitialiseTaskLists+0x6c>)
 8004fa2:	f7fe f9ef 	bl	8003384 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fa6:	480c      	ldr	r0, [pc, #48]	@ (8004fd8 <prvInitialiseTaskLists+0x70>)
 8004fa8:	f7fe f9ec 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004fac:	480b      	ldr	r0, [pc, #44]	@ (8004fdc <prvInitialiseTaskLists+0x74>)
 8004fae:	f7fe f9e9 	bl	8003384 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <prvInitialiseTaskLists+0x78>)
 8004fb4:	4a05      	ldr	r2, [pc, #20]	@ (8004fcc <prvInitialiseTaskLists+0x64>)
 8004fb6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe4 <prvInitialiseTaskLists+0x7c>)
 8004fba:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <prvInitialiseTaskLists+0x68>)
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20000a00 	.word	0x20000a00
 8004fcc:	20000e60 	.word	0x20000e60
 8004fd0:	20000e74 	.word	0x20000e74
 8004fd4:	20000e90 	.word	0x20000e90
 8004fd8:	20000ea4 	.word	0x20000ea4
 8004fdc:	20000ebc 	.word	0x20000ebc
 8004fe0:	20000e88 	.word	0x20000e88
 8004fe4:	20000e8c 	.word	0x20000e8c

08004fe8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fee:	e019      	b.n	8005024 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ff0:	f000 fefa 	bl	8005de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff4:	4b10      	ldr	r3, [pc, #64]	@ (8005038 <prvCheckTasksWaitingTermination+0x50>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f7fe fa49 	bl	8003498 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <prvCheckTasksWaitingTermination+0x54>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3b01      	subs	r3, #1
 800500c:	4a0b      	ldr	r2, [pc, #44]	@ (800503c <prvCheckTasksWaitingTermination+0x54>)
 800500e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005010:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <prvCheckTasksWaitingTermination+0x58>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3b01      	subs	r3, #1
 8005016:	4a0a      	ldr	r2, [pc, #40]	@ (8005040 <prvCheckTasksWaitingTermination+0x58>)
 8005018:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800501a:	f000 ff17 	bl	8005e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f810 	bl	8005044 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005024:	4b06      	ldr	r3, [pc, #24]	@ (8005040 <prvCheckTasksWaitingTermination+0x58>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e1      	bne.n	8004ff0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800502c:	bf00      	nop
 800502e:	bf00      	nop
 8005030:	3708      	adds	r7, #8
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000ea4 	.word	0x20000ea4
 800503c:	20000ed0 	.word	0x20000ed0
 8005040:	20000eb8 	.word	0x20000eb8

08005044 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3354      	adds	r3, #84	@ 0x54
 8005050:	4618      	mov	r0, r3
 8005052:	f001 ff53 	bl	8006efc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800505c:	2b00      	cmp	r3, #0
 800505e:	d108      	bne.n	8005072 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005064:	4618      	mov	r0, r3
 8005066:	f001 f8af 	bl	80061c8 <vPortFree>
				vPortFree( pxTCB );
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f001 f8ac 	bl	80061c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005070:	e019      	b.n	80050a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005078:	2b01      	cmp	r3, #1
 800507a:	d103      	bne.n	8005084 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f001 f8a3 	bl	80061c8 <vPortFree>
	}
 8005082:	e010      	b.n	80050a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800508a:	2b02      	cmp	r3, #2
 800508c:	d00b      	beq.n	80050a6 <prvDeleteTCB+0x62>
	__asm volatile
 800508e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005092:	f383 8811 	msr	BASEPRI, r3
 8005096:	f3bf 8f6f 	isb	sy
 800509a:	f3bf 8f4f 	dsb	sy
 800509e:	60fb      	str	r3, [r7, #12]
}
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	e7fd      	b.n	80050a2 <prvDeleteTCB+0x5e>
	}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
	...

080050b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050b6:	4b0c      	ldr	r3, [pc, #48]	@ (80050e8 <prvResetNextTaskUnblockTime+0x38>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d104      	bne.n	80050ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80050c0:	4b0a      	ldr	r3, [pc, #40]	@ (80050ec <prvResetNextTaskUnblockTime+0x3c>)
 80050c2:	f04f 32ff 	mov.w	r2, #4294967295
 80050c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80050c8:	e008      	b.n	80050dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050ca:	4b07      	ldr	r3, [pc, #28]	@ (80050e8 <prvResetNextTaskUnblockTime+0x38>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	4a04      	ldr	r2, [pc, #16]	@ (80050ec <prvResetNextTaskUnblockTime+0x3c>)
 80050da:	6013      	str	r3, [r2, #0]
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	20000e88 	.word	0x20000e88
 80050ec:	20000ef0 	.word	0x20000ef0

080050f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80050f0:	b480      	push	{r7}
 80050f2:	b083      	sub	sp, #12
 80050f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80050f6:	4b05      	ldr	r3, [pc, #20]	@ (800510c <xTaskGetCurrentTaskHandle+0x1c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80050fc:	687b      	ldr	r3, [r7, #4]
	}
 80050fe:	4618      	mov	r0, r3
 8005100:	370c      	adds	r7, #12
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	200009fc 	.word	0x200009fc

08005110 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005116:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <xTaskGetSchedulerState+0x34>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d102      	bne.n	8005124 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800511e:	2301      	movs	r3, #1
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	e008      	b.n	8005136 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005124:	4b08      	ldr	r3, [pc, #32]	@ (8005148 <xTaskGetSchedulerState+0x38>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d102      	bne.n	8005132 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800512c:	2302      	movs	r3, #2
 800512e:	607b      	str	r3, [r7, #4]
 8005130:	e001      	b.n	8005136 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005136:	687b      	ldr	r3, [r7, #4]
	}
 8005138:	4618      	mov	r0, r3
 800513a:	370c      	adds	r7, #12
 800513c:	46bd      	mov	sp, r7
 800513e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005142:	4770      	bx	lr
 8005144:	20000edc 	.word	0x20000edc
 8005148:	20000ef8 	.word	0x20000ef8

0800514c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005158:	2300      	movs	r3, #0
 800515a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d051      	beq.n	8005206 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005166:	4b2a      	ldr	r3, [pc, #168]	@ (8005210 <xTaskPriorityInherit+0xc4>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d241      	bcs.n	80051f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	db06      	blt.n	8005186 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005178:	4b25      	ldr	r3, [pc, #148]	@ (8005210 <xTaskPriorityInherit+0xc4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	6959      	ldr	r1, [r3, #20]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a1f      	ldr	r2, [pc, #124]	@ (8005214 <xTaskPriorityInherit+0xc8>)
 8005198:	4413      	add	r3, r2
 800519a:	4299      	cmp	r1, r3
 800519c:	d122      	bne.n	80051e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe f978 	bl	8003498 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051a8:	4b19      	ldr	r3, [pc, #100]	@ (8005210 <xTaskPriorityInherit+0xc4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	4b18      	ldr	r3, [pc, #96]	@ (8005218 <xTaskPriorityInherit+0xcc>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <xTaskPriorityInherit+0x7a>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <xTaskPriorityInherit+0xcc>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a10      	ldr	r2, [pc, #64]	@ (8005214 <xTaskPriorityInherit+0xc8>)
 80051d4:	441a      	add	r2, r3
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fe f8fe 	bl	80033de <vListInsertEnd>
 80051e2:	e004      	b.n	80051ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005210 <xTaskPriorityInherit+0xc4>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80051ee:	2301      	movs	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
 80051f2:	e008      	b.n	8005206 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051f8:	4b05      	ldr	r3, [pc, #20]	@ (8005210 <xTaskPriorityInherit+0xc4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	429a      	cmp	r2, r3
 8005200:	d201      	bcs.n	8005206 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005202:	2301      	movs	r3, #1
 8005204:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005206:	68fb      	ldr	r3, [r7, #12]
	}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	200009fc 	.word	0x200009fc
 8005214:	20000a00 	.word	0x20000a00
 8005218:	20000ed8 	.word	0x20000ed8

0800521c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005228:	2300      	movs	r3, #0
 800522a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d058      	beq.n	80052e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005232:	4b2f      	ldr	r3, [pc, #188]	@ (80052f0 <xTaskPriorityDisinherit+0xd4>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	429a      	cmp	r2, r3
 800523a:	d00b      	beq.n	8005254 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	bf00      	nop
 8005252:	e7fd      	b.n	8005250 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10b      	bne.n	8005274 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	60bb      	str	r3, [r7, #8]
}
 800526e:	bf00      	nop
 8005270:	bf00      	nop
 8005272:	e7fd      	b.n	8005270 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005278:	1e5a      	subs	r2, r3, #1
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005286:	429a      	cmp	r2, r3
 8005288:	d02c      	beq.n	80052e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528e:	2b00      	cmp	r3, #0
 8005290:	d128      	bne.n	80052e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	3304      	adds	r3, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe f8fe 	bl	8003498 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b4:	4b0f      	ldr	r3, [pc, #60]	@ (80052f4 <xTaskPriorityDisinherit+0xd8>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d903      	bls.n	80052c4 <xTaskPriorityDisinherit+0xa8>
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052c0:	4a0c      	ldr	r2, [pc, #48]	@ (80052f4 <xTaskPriorityDisinherit+0xd8>)
 80052c2:	6013      	str	r3, [r2, #0]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c8:	4613      	mov	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4a09      	ldr	r2, [pc, #36]	@ (80052f8 <xTaskPriorityDisinherit+0xdc>)
 80052d2:	441a      	add	r2, r3
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe f87f 	bl	80033de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052e0:	2301      	movs	r3, #1
 80052e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052e4:	697b      	ldr	r3, [r7, #20]
	}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3718      	adds	r7, #24
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200009fc 	.word	0x200009fc
 80052f4:	20000ed8 	.word	0x20000ed8
 80052f8:	20000a00 	.word	0x20000a00

080052fc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800530a:	2301      	movs	r3, #1
 800530c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d06c      	beq.n	80053ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005318:	2b00      	cmp	r3, #0
 800531a:	d10b      	bne.n	8005334 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800531c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005320:	f383 8811 	msr	BASEPRI, r3
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	60fb      	str	r3, [r7, #12]
}
 800532e:	bf00      	nop
 8005330:	bf00      	nop
 8005332:	e7fd      	b.n	8005330 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005338:	683a      	ldr	r2, [r7, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d902      	bls.n	8005344 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	61fb      	str	r3, [r7, #28]
 8005342:	e002      	b.n	800534a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005348:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	429a      	cmp	r2, r3
 8005352:	d04c      	beq.n	80053ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	429a      	cmp	r2, r3
 800535c:	d147      	bne.n	80053ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800535e:	4b26      	ldr	r3, [pc, #152]	@ (80053f8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	429a      	cmp	r2, r3
 8005366:	d10b      	bne.n	8005380 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800536c:	f383 8811 	msr	BASEPRI, r3
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	60bb      	str	r3, [r7, #8]
}
 800537a:	bf00      	nop
 800537c:	bf00      	nop
 800537e:	e7fd      	b.n	800537c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	69fa      	ldr	r2, [r7, #28]
 800538a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db04      	blt.n	800539e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	6959      	ldr	r1, [r3, #20]
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4613      	mov	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4a13      	ldr	r2, [pc, #76]	@ (80053fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053ae:	4413      	add	r3, r2
 80053b0:	4299      	cmp	r1, r3
 80053b2:	d11c      	bne.n	80053ee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	3304      	adds	r3, #4
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fe f86d 	bl	8003498 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d903      	bls.n	80053d2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005400 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4a07      	ldr	r2, [pc, #28]	@ (80053fc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80053e0:	441a      	add	r2, r3
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	3304      	adds	r3, #4
 80053e6:	4619      	mov	r1, r3
 80053e8:	4610      	mov	r0, r2
 80053ea:	f7fd fff8 	bl	80033de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053ee:	bf00      	nop
 80053f0:	3720      	adds	r7, #32
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200009fc 	.word	0x200009fc
 80053fc:	20000a00 	.word	0x20000a00
 8005400:	20000ed8 	.word	0x20000ed8

08005404 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005404:	b480      	push	{r7}
 8005406:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005408:	4b07      	ldr	r3, [pc, #28]	@ (8005428 <pvTaskIncrementMutexHeldCount+0x24>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005410:	4b05      	ldr	r3, [pc, #20]	@ (8005428 <pvTaskIncrementMutexHeldCount+0x24>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005416:	3201      	adds	r2, #1
 8005418:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800541a:	4b03      	ldr	r3, [pc, #12]	@ (8005428 <pvTaskIncrementMutexHeldCount+0x24>)
 800541c:	681b      	ldr	r3, [r3, #0]
	}
 800541e:	4618      	mov	r0, r3
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr
 8005428:	200009fc 	.word	0x200009fc

0800542c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005436:	4b21      	ldr	r3, [pc, #132]	@ (80054bc <prvAddCurrentTaskToDelayedList+0x90>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800543c:	4b20      	ldr	r3, [pc, #128]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3304      	adds	r3, #4
 8005442:	4618      	mov	r0, r3
 8005444:	f7fe f828 	bl	8003498 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544e:	d10a      	bne.n	8005466 <prvAddCurrentTaskToDelayedList+0x3a>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d007      	beq.n	8005466 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005456:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	3304      	adds	r3, #4
 800545c:	4619      	mov	r1, r3
 800545e:	4819      	ldr	r0, [pc, #100]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005460:	f7fd ffbd 	bl	80033de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005464:	e026      	b.n	80054b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800546e:	4b14      	ldr	r3, [pc, #80]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	429a      	cmp	r2, r3
 800547c:	d209      	bcs.n	8005492 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547e:	4b12      	ldr	r3, [pc, #72]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	3304      	adds	r3, #4
 8005488:	4619      	mov	r1, r3
 800548a:	4610      	mov	r0, r2
 800548c:	f7fd ffcb 	bl	8003426 <vListInsert>
}
 8005490:	e010      	b.n	80054b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005492:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	4b0a      	ldr	r3, [pc, #40]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	3304      	adds	r3, #4
 800549c:	4619      	mov	r1, r3
 800549e:	4610      	mov	r0, r2
 80054a0:	f7fd ffc1 	bl	8003426 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68ba      	ldr	r2, [r7, #8]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d202      	bcs.n	80054b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054ae:	4a08      	ldr	r2, [pc, #32]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6013      	str	r3, [r2, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	20000ed4 	.word	0x20000ed4
 80054c0:	200009fc 	.word	0x200009fc
 80054c4:	20000ebc 	.word	0x20000ebc
 80054c8:	20000e8c 	.word	0x20000e8c
 80054cc:	20000e88 	.word	0x20000e88
 80054d0:	20000ef0 	.word	0x20000ef0

080054d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b08a      	sub	sp, #40	@ 0x28
 80054d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054de:	f000 fb13 	bl	8005b08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <xTimerCreateTimerTask+0x84>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d021      	beq.n	800552e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054f2:	1d3a      	adds	r2, r7, #4
 80054f4:	f107 0108 	add.w	r1, r7, #8
 80054f8:	f107 030c 	add.w	r3, r7, #12
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fd ff27 	bl	8003350 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	9202      	str	r2, [sp, #8]
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	2302      	movs	r3, #2
 800550e:	9300      	str	r3, [sp, #0]
 8005510:	2300      	movs	r3, #0
 8005512:	460a      	mov	r2, r1
 8005514:	4911      	ldr	r1, [pc, #68]	@ (800555c <xTimerCreateTimerTask+0x88>)
 8005516:	4812      	ldr	r0, [pc, #72]	@ (8005560 <xTimerCreateTimerTask+0x8c>)
 8005518:	f7fe ff80 	bl	800441c <xTaskCreateStatic>
 800551c:	4603      	mov	r3, r0
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <xTimerCreateTimerTask+0x90>)
 8005520:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005522:	4b10      	ldr	r3, [pc, #64]	@ (8005564 <xTimerCreateTimerTask+0x90>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800552a:	2301      	movs	r3, #1
 800552c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d10b      	bne.n	800554c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005538:	f383 8811 	msr	BASEPRI, r3
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	f3bf 8f4f 	dsb	sy
 8005544:	613b      	str	r3, [r7, #16]
}
 8005546:	bf00      	nop
 8005548:	bf00      	nop
 800554a:	e7fd      	b.n	8005548 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800554c:	697b      	ldr	r3, [r7, #20]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	20000f2c 	.word	0x20000f2c
 800555c:	08008e10 	.word	0x08008e10
 8005560:	080056a1 	.word	0x080056a1
 8005564:	20000f30 	.word	0x20000f30

08005568 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08a      	sub	sp, #40	@ 0x28
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
 8005574:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005576:	2300      	movs	r3, #0
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10b      	bne.n	8005598 <xTimerGenericCommand+0x30>
	__asm volatile
 8005580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005584:	f383 8811 	msr	BASEPRI, r3
 8005588:	f3bf 8f6f 	isb	sy
 800558c:	f3bf 8f4f 	dsb	sy
 8005590:	623b      	str	r3, [r7, #32]
}
 8005592:	bf00      	nop
 8005594:	bf00      	nop
 8005596:	e7fd      	b.n	8005594 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005598:	4b19      	ldr	r3, [pc, #100]	@ (8005600 <xTimerGenericCommand+0x98>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02a      	beq.n	80055f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	dc18      	bgt.n	80055e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055b2:	f7ff fdad 	bl	8005110 <xTaskGetSchedulerState>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d109      	bne.n	80055d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055bc:	4b10      	ldr	r3, [pc, #64]	@ (8005600 <xTimerGenericCommand+0x98>)
 80055be:	6818      	ldr	r0, [r3, #0]
 80055c0:	f107 0110 	add.w	r1, r7, #16
 80055c4:	2300      	movs	r3, #0
 80055c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c8:	f7fe f98e 	bl	80038e8 <xQueueGenericSend>
 80055cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80055ce:	e012      	b.n	80055f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005600 <xTimerGenericCommand+0x98>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	f107 0110 	add.w	r1, r7, #16
 80055d8:	2300      	movs	r3, #0
 80055da:	2200      	movs	r2, #0
 80055dc:	f7fe f984 	bl	80038e8 <xQueueGenericSend>
 80055e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80055e2:	e008      	b.n	80055f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055e4:	4b06      	ldr	r3, [pc, #24]	@ (8005600 <xTimerGenericCommand+0x98>)
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	f107 0110 	add.w	r1, r7, #16
 80055ec:	2300      	movs	r3, #0
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	f7fe fa7c 	bl	8003aec <xQueueGenericSendFromISR>
 80055f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3728      	adds	r7, #40	@ 0x28
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	20000f2c 	.word	0x20000f2c

08005604 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b088      	sub	sp, #32
 8005608:	af02      	add	r7, sp, #8
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800560e:	4b23      	ldr	r3, [pc, #140]	@ (800569c <prvProcessExpiredTimer+0x98>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	3304      	adds	r3, #4
 800561c:	4618      	mov	r0, r3
 800561e:	f7fd ff3b 	bl	8003498 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d023      	beq.n	8005678 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	699a      	ldr	r2, [r3, #24]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	18d1      	adds	r1, r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	6978      	ldr	r0, [r7, #20]
 800563e:	f000 f8d5 	bl	80057ec <prvInsertTimerInActiveList>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d020      	beq.n	800568a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005648:	2300      	movs	r3, #0
 800564a:	9300      	str	r3, [sp, #0]
 800564c:	2300      	movs	r3, #0
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	2100      	movs	r1, #0
 8005652:	6978      	ldr	r0, [r7, #20]
 8005654:	f7ff ff88 	bl	8005568 <xTimerGenericCommand>
 8005658:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	60fb      	str	r3, [r7, #12]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800567e:	f023 0301 	bic.w	r3, r3, #1
 8005682:	b2da      	uxtb	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	6978      	ldr	r0, [r7, #20]
 8005690:	4798      	blx	r3
}
 8005692:	bf00      	nop
 8005694:	3718      	adds	r7, #24
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	20000f24 	.word	0x20000f24

080056a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056a8:	f107 0308 	add.w	r3, r7, #8
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 f859 	bl	8005764 <prvGetNextExpireTime>
 80056b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	4619      	mov	r1, r3
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f000 f805 	bl	80056c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056be:	f000 f8d7 	bl	8005870 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056c2:	bf00      	nop
 80056c4:	e7f0      	b.n	80056a8 <prvTimerTask+0x8>
	...

080056c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056d2:	f7ff f907 	bl	80048e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056d6:	f107 0308 	add.w	r3, r7, #8
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f866 	bl	80057ac <prvSampleTimeNow>
 80056e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d130      	bne.n	800574a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <prvProcessTimerOrBlockTask+0x3c>
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d806      	bhi.n	8005704 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056f6:	f7ff f903 	bl	8004900 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056fa:	68f9      	ldr	r1, [r7, #12]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff ff81 	bl	8005604 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005702:	e024      	b.n	800574e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d008      	beq.n	800571c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800570a:	4b13      	ldr	r3, [pc, #76]	@ (8005758 <prvProcessTimerOrBlockTask+0x90>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <prvProcessTimerOrBlockTask+0x50>
 8005714:	2301      	movs	r3, #1
 8005716:	e000      	b.n	800571a <prvProcessTimerOrBlockTask+0x52>
 8005718:	2300      	movs	r3, #0
 800571a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800571c:	4b0f      	ldr	r3, [pc, #60]	@ (800575c <prvProcessTimerOrBlockTask+0x94>)
 800571e:	6818      	ldr	r0, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1ad3      	subs	r3, r2, r3
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	4619      	mov	r1, r3
 800572a:	f7fe fe43 	bl	80043b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800572e:	f7ff f8e7 	bl	8004900 <xTaskResumeAll>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005738:	4b09      	ldr	r3, [pc, #36]	@ (8005760 <prvProcessTimerOrBlockTask+0x98>)
 800573a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	f3bf 8f6f 	isb	sy
}
 8005748:	e001      	b.n	800574e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800574a:	f7ff f8d9 	bl	8004900 <xTaskResumeAll>
}
 800574e:	bf00      	nop
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000f28 	.word	0x20000f28
 800575c:	20000f2c 	.word	0x20000f2c
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005764:	b480      	push	{r7}
 8005766:	b085      	sub	sp, #20
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800576c:	4b0e      	ldr	r3, [pc, #56]	@ (80057a8 <prvGetNextExpireTime+0x44>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <prvGetNextExpireTime+0x16>
 8005776:	2201      	movs	r2, #1
 8005778:	e000      	b.n	800577c <prvGetNextExpireTime+0x18>
 800577a:	2200      	movs	r2, #0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d105      	bne.n	8005794 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005788:	4b07      	ldr	r3, [pc, #28]	@ (80057a8 <prvGetNextExpireTime+0x44>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	e001      	b.n	8005798 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005798:	68fb      	ldr	r3, [r7, #12]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000f24 	.word	0x20000f24

080057ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057b4:	f7ff f942 	bl	8004a3c <xTaskGetTickCount>
 80057b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057ba:	4b0b      	ldr	r3, [pc, #44]	@ (80057e8 <prvSampleTimeNow+0x3c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d205      	bcs.n	80057d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057c4:	f000 f93a 	bl	8005a3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e002      	b.n	80057d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057d6:	4a04      	ldr	r2, [pc, #16]	@ (80057e8 <prvSampleTimeNow+0x3c>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057dc:	68fb      	ldr	r3, [r7, #12]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000f34 	.word	0x20000f34

080057ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057fa:	2300      	movs	r3, #0
 80057fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	429a      	cmp	r2, r3
 8005810:	d812      	bhi.n	8005838 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	1ad2      	subs	r2, r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	699b      	ldr	r3, [r3, #24]
 800581c:	429a      	cmp	r2, r3
 800581e:	d302      	bcc.n	8005826 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005820:	2301      	movs	r3, #1
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e01b      	b.n	800585e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005826:	4b10      	ldr	r3, [pc, #64]	@ (8005868 <prvInsertTimerInActiveList+0x7c>)
 8005828:	681a      	ldr	r2, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	3304      	adds	r3, #4
 800582e:	4619      	mov	r1, r3
 8005830:	4610      	mov	r0, r2
 8005832:	f7fd fdf8 	bl	8003426 <vListInsert>
 8005836:	e012      	b.n	800585e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d206      	bcs.n	800584e <prvInsertTimerInActiveList+0x62>
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005848:	2301      	movs	r3, #1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	e007      	b.n	800585e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800584e:	4b07      	ldr	r3, [pc, #28]	@ (800586c <prvInsertTimerInActiveList+0x80>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3304      	adds	r3, #4
 8005856:	4619      	mov	r1, r3
 8005858:	4610      	mov	r0, r2
 800585a:	f7fd fde4 	bl	8003426 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800585e:	697b      	ldr	r3, [r7, #20]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20000f28 	.word	0x20000f28
 800586c:	20000f24 	.word	0x20000f24

08005870 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b08e      	sub	sp, #56	@ 0x38
 8005874:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005876:	e0ce      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2b00      	cmp	r3, #0
 800587c:	da19      	bge.n	80058b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	3304      	adds	r3, #4
 8005882:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	61fb      	str	r3, [r7, #28]
}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	e7fd      	b.n	800589e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058a8:	6850      	ldr	r0, [r2, #4]
 80058aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ac:	6892      	ldr	r2, [r2, #8]
 80058ae:	4611      	mov	r1, r2
 80058b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f2c0 80ae 	blt.w	8005a16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c0:	695b      	ldr	r3, [r3, #20]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c8:	3304      	adds	r3, #4
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fd fde4 	bl	8003498 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058d0:	463b      	mov	r3, r7
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff ff6a 	bl	80057ac <prvSampleTimeNow>
 80058d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b09      	cmp	r3, #9
 80058de:	f200 8097 	bhi.w	8005a10 <prvProcessReceivedCommands+0x1a0>
 80058e2:	a201      	add	r2, pc, #4	@ (adr r2, 80058e8 <prvProcessReceivedCommands+0x78>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005911 	.word	0x08005911
 80058ec:	08005911 	.word	0x08005911
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005987 	.word	0x08005987
 80058f8:	0800599b 	.word	0x0800599b
 80058fc:	080059e7 	.word	0x080059e7
 8005900:	08005911 	.word	0x08005911
 8005904:	08005911 	.word	0x08005911
 8005908:	08005987 	.word	0x08005987
 800590c:	0800599b 	.word	0x0800599b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005912:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005916:	f043 0301 	orr.w	r3, r3, #1
 800591a:	b2da      	uxtb	r2, r3
 800591c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	18d1      	adds	r1, r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800592e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005930:	f7ff ff5c 	bl	80057ec <prvInsertTimerInActiveList>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d06c      	beq.n	8005a14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800593a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593c:	6a1b      	ldr	r3, [r3, #32]
 800593e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005940:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005948:	f003 0304 	and.w	r3, r3, #4
 800594c:	2b00      	cmp	r3, #0
 800594e:	d061      	beq.n	8005a14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	441a      	add	r2, r3
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	2300      	movs	r3, #0
 800595e:	2100      	movs	r1, #0
 8005960:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005962:	f7ff fe01 	bl	8005568 <xTimerGenericCommand>
 8005966:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d152      	bne.n	8005a14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61bb      	str	r3, [r7, #24]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005988:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800598c:	f023 0301 	bic.w	r3, r3, #1
 8005990:	b2da      	uxtb	r2, r3
 8005992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005994:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005998:	e03d      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800599a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800599c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a0:	f043 0301 	orr.w	r3, r3, #1
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059ac:	68ba      	ldr	r2, [r7, #8]
 80059ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d10b      	bne.n	80059d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	617b      	str	r3, [r7, #20]
}
 80059cc:	bf00      	nop
 80059ce:	bf00      	nop
 80059d0:	e7fd      	b.n	80059ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	18d1      	adds	r1, r2, r3
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e0:	f7ff ff04 	bl	80057ec <prvInsertTimerInActiveList>
					break;
 80059e4:	e017      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d103      	bne.n	80059fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059f6:	f000 fbe7 	bl	80061c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059fa:	e00c      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a02:	f023 0301 	bic.w	r3, r3, #1
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a0e:	e002      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <prvProcessReceivedCommands+0x1a6>
					break;
 8005a14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a16:	4b08      	ldr	r3, [pc, #32]	@ (8005a38 <prvProcessReceivedCommands+0x1c8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	1d39      	adds	r1, r7, #4
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe f902 	bl	8003c28 <xQueueReceive>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f47f af26 	bne.w	8005878 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a2c:	bf00      	nop
 8005a2e:	bf00      	nop
 8005a30:	3730      	adds	r7, #48	@ 0x30
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20000f2c 	.word	0x20000f2c

08005a3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b088      	sub	sp, #32
 8005a40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a42:	e049      	b.n	8005ad8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a44:	4b2e      	ldr	r3, [pc, #184]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fd fd1b 	bl	8003498 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d02f      	beq.n	8005ad8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4413      	add	r3, r2
 8005a80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a82:	68ba      	ldr	r2, [r7, #8]
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d90e      	bls.n	8005aa8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a96:	4b1a      	ldr	r3, [pc, #104]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fd fcc0 	bl	8003426 <vListInsert>
 8005aa6:	e017      	b.n	8005ad8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9300      	str	r3, [sp, #0]
 8005aac:	2300      	movs	r3, #0
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	2100      	movs	r1, #0
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f7ff fd58 	bl	8005568 <xTimerGenericCommand>
 8005ab8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	603b      	str	r3, [r7, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	e7fd      	b.n	8005ad4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ad8:	4b09      	ldr	r3, [pc, #36]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d1b0      	bne.n	8005a44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ae2:	4b07      	ldr	r3, [pc, #28]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ae8:	4b06      	ldr	r3, [pc, #24]	@ (8005b04 <prvSwitchTimerLists+0xc8>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a04      	ldr	r2, [pc, #16]	@ (8005b00 <prvSwitchTimerLists+0xc4>)
 8005aee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005af0:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <prvSwitchTimerLists+0xc8>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	6013      	str	r3, [r2, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	20000f24 	.word	0x20000f24
 8005b04:	20000f28 	.word	0x20000f28

08005b08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b0e:	f000 f96b 	bl	8005de8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <prvCheckForValidListAndQueue+0x60>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d120      	bne.n	8005b5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b1a:	4814      	ldr	r0, [pc, #80]	@ (8005b6c <prvCheckForValidListAndQueue+0x64>)
 8005b1c:	f7fd fc32 	bl	8003384 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b20:	4813      	ldr	r0, [pc, #76]	@ (8005b70 <prvCheckForValidListAndQueue+0x68>)
 8005b22:	f7fd fc2f 	bl	8003384 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b26:	4b13      	ldr	r3, [pc, #76]	@ (8005b74 <prvCheckForValidListAndQueue+0x6c>)
 8005b28:	4a10      	ldr	r2, [pc, #64]	@ (8005b6c <prvCheckForValidListAndQueue+0x64>)
 8005b2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <prvCheckForValidListAndQueue+0x70>)
 8005b2e:	4a10      	ldr	r2, [pc, #64]	@ (8005b70 <prvCheckForValidListAndQueue+0x68>)
 8005b30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b32:	2300      	movs	r3, #0
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	4b11      	ldr	r3, [pc, #68]	@ (8005b7c <prvCheckForValidListAndQueue+0x74>)
 8005b38:	4a11      	ldr	r2, [pc, #68]	@ (8005b80 <prvCheckForValidListAndQueue+0x78>)
 8005b3a:	2110      	movs	r1, #16
 8005b3c:	200a      	movs	r0, #10
 8005b3e:	f7fd fd3f 	bl	80035c0 <xQueueGenericCreateStatic>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4a08      	ldr	r2, [pc, #32]	@ (8005b68 <prvCheckForValidListAndQueue+0x60>)
 8005b46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b48:	4b07      	ldr	r3, [pc, #28]	@ (8005b68 <prvCheckForValidListAndQueue+0x60>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d005      	beq.n	8005b5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b50:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <prvCheckForValidListAndQueue+0x60>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	490b      	ldr	r1, [pc, #44]	@ (8005b84 <prvCheckForValidListAndQueue+0x7c>)
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fc02 	bl	8004360 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b5c:	f000 f976 	bl	8005e4c <vPortExitCritical>
}
 8005b60:	bf00      	nop
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000f2c 	.word	0x20000f2c
 8005b6c:	20000efc 	.word	0x20000efc
 8005b70:	20000f10 	.word	0x20000f10
 8005b74:	20000f24 	.word	0x20000f24
 8005b78:	20000f28 	.word	0x20000f28
 8005b7c:	20000fd8 	.word	0x20000fd8
 8005b80:	20000f38 	.word	0x20000f38
 8005b84:	08008e18 	.word	0x08008e18

08005b88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3b04      	subs	r3, #4
 8005b98:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	3b04      	subs	r3, #4
 8005ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f023 0201 	bic.w	r2, r3, #1
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	3b04      	subs	r3, #4
 8005bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005bec <pxPortInitialiseStack+0x64>)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	3b14      	subs	r3, #20
 8005bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	3b04      	subs	r3, #4
 8005bce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f06f 0202 	mvn.w	r2, #2
 8005bd6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3b20      	subs	r3, #32
 8005bdc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	08005bf1 	.word	0x08005bf1

08005bf0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bfa:	4b13      	ldr	r3, [pc, #76]	@ (8005c48 <prvTaskExitError+0x58>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c02:	d00b      	beq.n	8005c1c <prvTaskExitError+0x2c>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	60fb      	str	r3, [r7, #12]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <prvTaskExitError+0x28>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	60bb      	str	r3, [r7, #8]
}
 8005c2e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c30:	bf00      	nop
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d0fc      	beq.n	8005c32 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	3714      	adds	r7, #20
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	2000000c 	.word	0x2000000c
 8005c4c:	00000000 	.word	0x00000000

08005c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <pxCurrentTCBConst2>)
 8005c52:	6819      	ldr	r1, [r3, #0]
 8005c54:	6808      	ldr	r0, [r1, #0]
 8005c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	f380 8809 	msr	PSP, r0
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8811 	msr	BASEPRI, r0
 8005c6a:	4770      	bx	lr
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst2>:
 8005c70:	200009fc 	.word	0x200009fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c78:	4808      	ldr	r0, [pc, #32]	@ (8005c9c <prvPortStartFirstTask+0x24>)
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f380 8808 	msr	MSP, r0
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8814 	msr	CONTROL, r0
 8005c8a:	b662      	cpsie	i
 8005c8c:	b661      	cpsie	f
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	df00      	svc	0
 8005c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c9a:	bf00      	nop
 8005c9c:	e000ed08 	.word	0xe000ed08

08005ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ca6:	4b47      	ldr	r3, [pc, #284]	@ (8005dc4 <xPortStartScheduler+0x124>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a47      	ldr	r2, [pc, #284]	@ (8005dc8 <xPortStartScheduler+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10b      	bne.n	8005cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc4 <xPortStartScheduler+0x124>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <xPortStartScheduler+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10b      	bne.n	8005cea <xPortStartScheduler+0x4a>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60fb      	str	r3, [r7, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cea:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <xPortStartScheduler+0x130>)
 8005cec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	22ff      	movs	r2, #255	@ 0xff
 8005cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <xPortStartScheduler+0x134>)
 8005d10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d12:	4b31      	ldr	r3, [pc, #196]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d14:	2207      	movs	r2, #7
 8005d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d18:	e009      	b.n	8005d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b80      	cmp	r3, #128	@ 0x80
 8005d38:	d0ef      	beq.n	8005d1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d3a:	4b27      	ldr	r3, [pc, #156]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1c3 0307 	rsb	r3, r3, #7
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d00b      	beq.n	8005d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60bb      	str	r3, [r7, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d70:	4a19      	ldr	r2, [pc, #100]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d7c:	4b17      	ldr	r3, [pc, #92]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a16      	ldr	r2, [pc, #88]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d88:	4b14      	ldr	r3, [pc, #80]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d94:	f000 f8da 	bl	8005f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d98:	4b11      	ldr	r3, [pc, #68]	@ (8005de0 <xPortStartScheduler+0x140>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d9e:	f000 f8f9 	bl	8005f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <xPortStartScheduler+0x144>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a0f      	ldr	r2, [pc, #60]	@ (8005de4 <xPortStartScheduler+0x144>)
 8005da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dae:	f7ff ff63 	bl	8005c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005db2:	f7fe ff1f 	bl	8004bf4 <vTaskSwitchContext>
	prvTaskExitError();
 8005db6:	f7ff ff1b 	bl	8005bf0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	e000ed00 	.word	0xe000ed00
 8005dc8:	410fc271 	.word	0x410fc271
 8005dcc:	410fc270 	.word	0x410fc270
 8005dd0:	e000e400 	.word	0xe000e400
 8005dd4:	20001028 	.word	0x20001028
 8005dd8:	2000102c 	.word	0x2000102c
 8005ddc:	e000ed20 	.word	0xe000ed20
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	e000ef34 	.word	0xe000ef34

08005de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
}
 8005e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e02:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d110      	bne.n	8005e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e14:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <vPortEnterCritical+0x60>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	603b      	str	r3, [r7, #0]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <vPortEnterCritical+0x4a>
	}
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e52:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <vPortExitCritical+0x26>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <vPortExitCritical+0x44>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
}
 8005e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ea0:	f3ef 8009 	mrs	r0, PSP
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <pxCurrentTCBConst>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f01e 0f10 	tst.w	lr, #16
 8005eb0:	bf08      	it	eq
 8005eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	6010      	str	r0, [r2, #0]
 8005ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ec4:	f380 8811 	msr	BASEPRI, r0
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f7fe fe90 	bl	8004bf4 <vTaskSwitchContext>
 8005ed4:	f04f 0000 	mov.w	r0, #0
 8005ed8:	f380 8811 	msr	BASEPRI, r0
 8005edc:	bc09      	pop	{r0, r3}
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	6808      	ldr	r0, [r1, #0]
 8005ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	f01e 0f10 	tst.w	lr, #16
 8005eea:	bf08      	it	eq
 8005eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ef0:	f380 8809 	msr	PSP, r0
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	f3af 8000 	nop.w

08005f00 <pxCurrentTCBConst>:
 8005f00:	200009fc 	.word	0x200009fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f7fe fdad 	bl	8004a80 <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <xPortSysTickHandler+0x40>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f56:	4b0b      	ldr	r3, [pc, #44]	@ (8005f84 <vPortSetupTimerInterrupt+0x38>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <vPortSetupTimerInterrupt+0x3c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0a      	ldr	r2, [pc, #40]	@ (8005f8c <vPortSetupTimerInterrupt+0x40>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <vPortSetupTimerInterrupt+0x44>)
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f6e:	4b04      	ldr	r3, [pc, #16]	@ (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e010 	.word	0xe000e010
 8005f84:	e000e018 	.word	0xe000e018
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	10624dd3 	.word	0x10624dd3
 8005f90:	e000e014 	.word	0xe000e014

08005f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fa4 <vPortEnableVFP+0x10>
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f9e:	6001      	str	r1, [r0, #0]
 8005fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fa2:	bf00      	nop
 8005fa4:	e000ed88 	.word	0xe000ed88

08005fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fae:	f3ef 8305 	mrs	r3, IPSR
 8005fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d915      	bls.n	8005fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <vPortValidateInterruptPriority+0x74>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fc4:	4b16      	ldr	r3, [pc, #88]	@ (8006020 <vPortValidateInterruptPriority+0x78>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	7afa      	ldrb	r2, [r7, #11]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d20b      	bcs.n	8005fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	607b      	str	r3, [r7, #4]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <vPortValidateInterruptPriority+0x7c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <vPortValidateInterruptPriority+0x80>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d90b      	bls.n	800600e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <vPortValidateInterruptPriority+0x62>
	}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e3f0 	.word	0xe000e3f0
 8006020:	20001028 	.word	0x20001028
 8006024:	e000ed0c 	.word	0xe000ed0c
 8006028:	2000102c 	.word	0x2000102c

0800602c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006038:	f7fe fc54 	bl	80048e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800603c:	4b5c      	ldr	r3, [pc, #368]	@ (80061b0 <pvPortMalloc+0x184>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006044:	f000 f924 	bl	8006290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <pvPortMalloc+0x188>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 8095 	bne.w	8006180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01e      	beq.n	800609a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800605c:	2208      	movs	r2, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d015      	beq.n	800609a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f023 0307 	bic.w	r3, r3, #7
 8006074:	3308      	adds	r3, #8
 8006076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <pvPortMalloc+0x6e>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	617b      	str	r3, [r7, #20]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d06f      	beq.n	8006180 <pvPortMalloc+0x154>
 80060a0:	4b45      	ldr	r3, [pc, #276]	@ (80061b8 <pvPortMalloc+0x18c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d86a      	bhi.n	8006180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060aa:	4b44      	ldr	r3, [pc, #272]	@ (80061bc <pvPortMalloc+0x190>)
 80060ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060ae:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <pvPortMalloc+0x190>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060b4:	e004      	b.n	80060c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d903      	bls.n	80060d2 <pvPortMalloc+0xa6>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f1      	bne.n	80060b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060d2:	4b37      	ldr	r3, [pc, #220]	@ (80061b0 <pvPortMalloc+0x184>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d8:	429a      	cmp	r2, r3
 80060da:	d051      	beq.n	8006180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2208      	movs	r2, #8
 80060e2:	4413      	add	r3, r2
 80060e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	2308      	movs	r3, #8
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d920      	bls.n	8006140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4413      	add	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <pvPortMalloc+0xfc>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	613b      	str	r3, [r7, #16]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800613a:	69b8      	ldr	r0, [r7, #24]
 800613c:	f000 f90a 	bl	8006354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006140:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <pvPortMalloc+0x18c>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <pvPortMalloc+0x18c>)
 800614c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800614e:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <pvPortMalloc+0x18c>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <pvPortMalloc+0x194>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d203      	bcs.n	8006162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800615a:	4b17      	ldr	r3, [pc, #92]	@ (80061b8 <pvPortMalloc+0x18c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <pvPortMalloc+0x194>)
 8006160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <pvPortMalloc+0x188>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	431a      	orrs	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006176:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <pvPortMalloc+0x198>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a11      	ldr	r2, [pc, #68]	@ (80061c4 <pvPortMalloc+0x198>)
 800617e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006180:	f7fe fbbe 	bl	8004900 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <pvPortMalloc+0x17a>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <pvPortMalloc+0x176>
	return pvReturn;
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	@ 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20004c38 	.word	0x20004c38
 80061b4:	20004c4c 	.word	0x20004c4c
 80061b8:	20004c3c 	.word	0x20004c3c
 80061bc:	20004c30 	.word	0x20004c30
 80061c0:	20004c40 	.word	0x20004c40
 80061c4:	20004c44 	.word	0x20004c44

080061c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d04f      	beq.n	800627a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061da:	2308      	movs	r3, #8
 80061dc:	425b      	negs	r3, r3
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <vPortFree+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <vPortFree+0x46>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fb      	str	r3, [r7, #12]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <vPortFree+0x66>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60bb      	str	r3, [r7, #8]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <vPortFree+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11a      	bne.n	800627a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <vPortFree+0xbc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006254:	f7fe fb46 	bl	80048e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <vPortFree+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4413      	add	r3, r2
 8006262:	4a09      	ldr	r2, [pc, #36]	@ (8006288 <vPortFree+0xc0>)
 8006264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f000 f874 	bl	8006354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800626c:	4b07      	ldr	r3, [pc, #28]	@ (800628c <vPortFree+0xc4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a06      	ldr	r2, [pc, #24]	@ (800628c <vPortFree+0xc4>)
 8006274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006276:	f7fe fb43 	bl	8004900 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20004c4c 	.word	0x20004c4c
 8006288:	20004c3c 	.word	0x20004c3c
 800628c:	20004c48 	.word	0x20004c48

08006290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006296:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800629a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800629c:	4b27      	ldr	r3, [pc, #156]	@ (800633c <prvHeapInit+0xac>)
 800629e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3307      	adds	r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <prvHeapInit+0xac>)
 80062c0:	4413      	add	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006340 <prvHeapInit+0xb0>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006340 <prvHeapInit+0xb0>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062dc:	2208      	movs	r2, #8
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <prvHeapInit+0xb4>)
 80062f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062f2:	4b14      	ldr	r3, [pc, #80]	@ (8006344 <prvHeapInit+0xb4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062fa:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <prvHeapInit+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <prvHeapInit+0xb4>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a0a      	ldr	r2, [pc, #40]	@ (8006348 <prvHeapInit+0xb8>)
 800631e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a09      	ldr	r2, [pc, #36]	@ (800634c <prvHeapInit+0xbc>)
 8006326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006328:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <prvHeapInit+0xc0>)
 800632a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20001030 	.word	0x20001030
 8006340:	20004c30 	.word	0x20004c30
 8006344:	20004c38 	.word	0x20004c38
 8006348:	20004c40 	.word	0x20004c40
 800634c:	20004c3c 	.word	0x20004c3c
 8006350:	20004c4c 	.word	0x20004c4c

08006354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800635c:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <prvInsertBlockIntoFreeList+0xac>)
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <prvInsertBlockIntoFreeList+0x14>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d8f7      	bhi.n	8006362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d108      	bne.n	8006396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	441a      	add	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d118      	bne.n	80063dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d00d      	beq.n	80063d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e008      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e003      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d002      	beq.n	80063f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20004c30 	.word	0x20004c30
 8006404:	20004c38 	.word	0x20004c38

08006408 <__cvt>:
 8006408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800640c:	ec57 6b10 	vmov	r6, r7, d0
 8006410:	2f00      	cmp	r7, #0
 8006412:	460c      	mov	r4, r1
 8006414:	4619      	mov	r1, r3
 8006416:	463b      	mov	r3, r7
 8006418:	bfbb      	ittet	lt
 800641a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800641e:	461f      	movlt	r7, r3
 8006420:	2300      	movge	r3, #0
 8006422:	232d      	movlt	r3, #45	@ 0x2d
 8006424:	700b      	strb	r3, [r1, #0]
 8006426:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006428:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800642c:	4691      	mov	r9, r2
 800642e:	f023 0820 	bic.w	r8, r3, #32
 8006432:	bfbc      	itt	lt
 8006434:	4632      	movlt	r2, r6
 8006436:	4616      	movlt	r6, r2
 8006438:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800643c:	d005      	beq.n	800644a <__cvt+0x42>
 800643e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006442:	d100      	bne.n	8006446 <__cvt+0x3e>
 8006444:	3401      	adds	r4, #1
 8006446:	2102      	movs	r1, #2
 8006448:	e000      	b.n	800644c <__cvt+0x44>
 800644a:	2103      	movs	r1, #3
 800644c:	ab03      	add	r3, sp, #12
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	ab02      	add	r3, sp, #8
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	ec47 6b10 	vmov	d0, r6, r7
 8006458:	4653      	mov	r3, sl
 800645a:	4622      	mov	r2, r4
 800645c:	f000 fea0 	bl	80071a0 <_dtoa_r>
 8006460:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006464:	4605      	mov	r5, r0
 8006466:	d119      	bne.n	800649c <__cvt+0x94>
 8006468:	f019 0f01 	tst.w	r9, #1
 800646c:	d00e      	beq.n	800648c <__cvt+0x84>
 800646e:	eb00 0904 	add.w	r9, r0, r4
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	4630      	mov	r0, r6
 8006478:	4639      	mov	r1, r7
 800647a:	f7fa fb25 	bl	8000ac8 <__aeabi_dcmpeq>
 800647e:	b108      	cbz	r0, 8006484 <__cvt+0x7c>
 8006480:	f8cd 900c 	str.w	r9, [sp, #12]
 8006484:	2230      	movs	r2, #48	@ 0x30
 8006486:	9b03      	ldr	r3, [sp, #12]
 8006488:	454b      	cmp	r3, r9
 800648a:	d31e      	bcc.n	80064ca <__cvt+0xc2>
 800648c:	9b03      	ldr	r3, [sp, #12]
 800648e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006490:	1b5b      	subs	r3, r3, r5
 8006492:	4628      	mov	r0, r5
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	b004      	add	sp, #16
 8006498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064a0:	eb00 0904 	add.w	r9, r0, r4
 80064a4:	d1e5      	bne.n	8006472 <__cvt+0x6a>
 80064a6:	7803      	ldrb	r3, [r0, #0]
 80064a8:	2b30      	cmp	r3, #48	@ 0x30
 80064aa:	d10a      	bne.n	80064c2 <__cvt+0xba>
 80064ac:	2200      	movs	r2, #0
 80064ae:	2300      	movs	r3, #0
 80064b0:	4630      	mov	r0, r6
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa fb08 	bl	8000ac8 <__aeabi_dcmpeq>
 80064b8:	b918      	cbnz	r0, 80064c2 <__cvt+0xba>
 80064ba:	f1c4 0401 	rsb	r4, r4, #1
 80064be:	f8ca 4000 	str.w	r4, [sl]
 80064c2:	f8da 3000 	ldr.w	r3, [sl]
 80064c6:	4499      	add	r9, r3
 80064c8:	e7d3      	b.n	8006472 <__cvt+0x6a>
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	9103      	str	r1, [sp, #12]
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	e7d9      	b.n	8006486 <__cvt+0x7e>

080064d2 <__exponent>:
 80064d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064d4:	2900      	cmp	r1, #0
 80064d6:	bfba      	itte	lt
 80064d8:	4249      	neglt	r1, r1
 80064da:	232d      	movlt	r3, #45	@ 0x2d
 80064dc:	232b      	movge	r3, #43	@ 0x2b
 80064de:	2909      	cmp	r1, #9
 80064e0:	7002      	strb	r2, [r0, #0]
 80064e2:	7043      	strb	r3, [r0, #1]
 80064e4:	dd29      	ble.n	800653a <__exponent+0x68>
 80064e6:	f10d 0307 	add.w	r3, sp, #7
 80064ea:	461d      	mov	r5, r3
 80064ec:	270a      	movs	r7, #10
 80064ee:	461a      	mov	r2, r3
 80064f0:	fbb1 f6f7 	udiv	r6, r1, r7
 80064f4:	fb07 1416 	mls	r4, r7, r6, r1
 80064f8:	3430      	adds	r4, #48	@ 0x30
 80064fa:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064fe:	460c      	mov	r4, r1
 8006500:	2c63      	cmp	r4, #99	@ 0x63
 8006502:	f103 33ff 	add.w	r3, r3, #4294967295
 8006506:	4631      	mov	r1, r6
 8006508:	dcf1      	bgt.n	80064ee <__exponent+0x1c>
 800650a:	3130      	adds	r1, #48	@ 0x30
 800650c:	1e94      	subs	r4, r2, #2
 800650e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006512:	1c41      	adds	r1, r0, #1
 8006514:	4623      	mov	r3, r4
 8006516:	42ab      	cmp	r3, r5
 8006518:	d30a      	bcc.n	8006530 <__exponent+0x5e>
 800651a:	f10d 0309 	add.w	r3, sp, #9
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	42ac      	cmp	r4, r5
 8006522:	bf88      	it	hi
 8006524:	2300      	movhi	r3, #0
 8006526:	3302      	adds	r3, #2
 8006528:	4403      	add	r3, r0
 800652a:	1a18      	subs	r0, r3, r0
 800652c:	b003      	add	sp, #12
 800652e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006530:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006534:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006538:	e7ed      	b.n	8006516 <__exponent+0x44>
 800653a:	2330      	movs	r3, #48	@ 0x30
 800653c:	3130      	adds	r1, #48	@ 0x30
 800653e:	7083      	strb	r3, [r0, #2]
 8006540:	70c1      	strb	r1, [r0, #3]
 8006542:	1d03      	adds	r3, r0, #4
 8006544:	e7f1      	b.n	800652a <__exponent+0x58>
	...

08006548 <_printf_float>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	b08d      	sub	sp, #52	@ 0x34
 800654e:	460c      	mov	r4, r1
 8006550:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006554:	4616      	mov	r6, r2
 8006556:	461f      	mov	r7, r3
 8006558:	4605      	mov	r5, r0
 800655a:	f000 fcbb 	bl	8006ed4 <_localeconv_r>
 800655e:	6803      	ldr	r3, [r0, #0]
 8006560:	9304      	str	r3, [sp, #16]
 8006562:	4618      	mov	r0, r3
 8006564:	f7f9 fe84 	bl	8000270 <strlen>
 8006568:	2300      	movs	r3, #0
 800656a:	930a      	str	r3, [sp, #40]	@ 0x28
 800656c:	f8d8 3000 	ldr.w	r3, [r8]
 8006570:	9005      	str	r0, [sp, #20]
 8006572:	3307      	adds	r3, #7
 8006574:	f023 0307 	bic.w	r3, r3, #7
 8006578:	f103 0208 	add.w	r2, r3, #8
 800657c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006580:	f8d4 b000 	ldr.w	fp, [r4]
 8006584:	f8c8 2000 	str.w	r2, [r8]
 8006588:	e9d3 8900 	ldrd	r8, r9, [r3]
 800658c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006590:	9307      	str	r3, [sp, #28]
 8006592:	f8cd 8018 	str.w	r8, [sp, #24]
 8006596:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800659a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800659e:	4b9c      	ldr	r3, [pc, #624]	@ (8006810 <_printf_float+0x2c8>)
 80065a0:	f04f 32ff 	mov.w	r2, #4294967295
 80065a4:	f7fa fac2 	bl	8000b2c <__aeabi_dcmpun>
 80065a8:	bb70      	cbnz	r0, 8006608 <_printf_float+0xc0>
 80065aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065ae:	4b98      	ldr	r3, [pc, #608]	@ (8006810 <_printf_float+0x2c8>)
 80065b0:	f04f 32ff 	mov.w	r2, #4294967295
 80065b4:	f7fa fa9c 	bl	8000af0 <__aeabi_dcmple>
 80065b8:	bb30      	cbnz	r0, 8006608 <_printf_float+0xc0>
 80065ba:	2200      	movs	r2, #0
 80065bc:	2300      	movs	r3, #0
 80065be:	4640      	mov	r0, r8
 80065c0:	4649      	mov	r1, r9
 80065c2:	f7fa fa8b 	bl	8000adc <__aeabi_dcmplt>
 80065c6:	b110      	cbz	r0, 80065ce <_printf_float+0x86>
 80065c8:	232d      	movs	r3, #45	@ 0x2d
 80065ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065ce:	4a91      	ldr	r2, [pc, #580]	@ (8006814 <_printf_float+0x2cc>)
 80065d0:	4b91      	ldr	r3, [pc, #580]	@ (8006818 <_printf_float+0x2d0>)
 80065d2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065d6:	bf94      	ite	ls
 80065d8:	4690      	movls	r8, r2
 80065da:	4698      	movhi	r8, r3
 80065dc:	2303      	movs	r3, #3
 80065de:	6123      	str	r3, [r4, #16]
 80065e0:	f02b 0304 	bic.w	r3, fp, #4
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	f04f 0900 	mov.w	r9, #0
 80065ea:	9700      	str	r7, [sp, #0]
 80065ec:	4633      	mov	r3, r6
 80065ee:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065f0:	4621      	mov	r1, r4
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f9d2 	bl	800699c <_printf_common>
 80065f8:	3001      	adds	r0, #1
 80065fa:	f040 808d 	bne.w	8006718 <_printf_float+0x1d0>
 80065fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006602:	b00d      	add	sp, #52	@ 0x34
 8006604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006608:	4642      	mov	r2, r8
 800660a:	464b      	mov	r3, r9
 800660c:	4640      	mov	r0, r8
 800660e:	4649      	mov	r1, r9
 8006610:	f7fa fa8c 	bl	8000b2c <__aeabi_dcmpun>
 8006614:	b140      	cbz	r0, 8006628 <_printf_float+0xe0>
 8006616:	464b      	mov	r3, r9
 8006618:	2b00      	cmp	r3, #0
 800661a:	bfbc      	itt	lt
 800661c:	232d      	movlt	r3, #45	@ 0x2d
 800661e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006622:	4a7e      	ldr	r2, [pc, #504]	@ (800681c <_printf_float+0x2d4>)
 8006624:	4b7e      	ldr	r3, [pc, #504]	@ (8006820 <_printf_float+0x2d8>)
 8006626:	e7d4      	b.n	80065d2 <_printf_float+0x8a>
 8006628:	6863      	ldr	r3, [r4, #4]
 800662a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800662e:	9206      	str	r2, [sp, #24]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	d13b      	bne.n	80066ac <_printf_float+0x164>
 8006634:	2306      	movs	r3, #6
 8006636:	6063      	str	r3, [r4, #4]
 8006638:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800663c:	2300      	movs	r3, #0
 800663e:	6022      	str	r2, [r4, #0]
 8006640:	9303      	str	r3, [sp, #12]
 8006642:	ab0a      	add	r3, sp, #40	@ 0x28
 8006644:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006648:	ab09      	add	r3, sp, #36	@ 0x24
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	6861      	ldr	r1, [r4, #4]
 800664e:	ec49 8b10 	vmov	d0, r8, r9
 8006652:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006656:	4628      	mov	r0, r5
 8006658:	f7ff fed6 	bl	8006408 <__cvt>
 800665c:	9b06      	ldr	r3, [sp, #24]
 800665e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006660:	2b47      	cmp	r3, #71	@ 0x47
 8006662:	4680      	mov	r8, r0
 8006664:	d129      	bne.n	80066ba <_printf_float+0x172>
 8006666:	1cc8      	adds	r0, r1, #3
 8006668:	db02      	blt.n	8006670 <_printf_float+0x128>
 800666a:	6863      	ldr	r3, [r4, #4]
 800666c:	4299      	cmp	r1, r3
 800666e:	dd41      	ble.n	80066f4 <_printf_float+0x1ac>
 8006670:	f1aa 0a02 	sub.w	sl, sl, #2
 8006674:	fa5f fa8a 	uxtb.w	sl, sl
 8006678:	3901      	subs	r1, #1
 800667a:	4652      	mov	r2, sl
 800667c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006680:	9109      	str	r1, [sp, #36]	@ 0x24
 8006682:	f7ff ff26 	bl	80064d2 <__exponent>
 8006686:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006688:	1813      	adds	r3, r2, r0
 800668a:	2a01      	cmp	r2, #1
 800668c:	4681      	mov	r9, r0
 800668e:	6123      	str	r3, [r4, #16]
 8006690:	dc02      	bgt.n	8006698 <_printf_float+0x150>
 8006692:	6822      	ldr	r2, [r4, #0]
 8006694:	07d2      	lsls	r2, r2, #31
 8006696:	d501      	bpl.n	800669c <_printf_float+0x154>
 8006698:	3301      	adds	r3, #1
 800669a:	6123      	str	r3, [r4, #16]
 800669c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0a2      	beq.n	80065ea <_printf_float+0xa2>
 80066a4:	232d      	movs	r3, #45	@ 0x2d
 80066a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066aa:	e79e      	b.n	80065ea <_printf_float+0xa2>
 80066ac:	9a06      	ldr	r2, [sp, #24]
 80066ae:	2a47      	cmp	r2, #71	@ 0x47
 80066b0:	d1c2      	bne.n	8006638 <_printf_float+0xf0>
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1c0      	bne.n	8006638 <_printf_float+0xf0>
 80066b6:	2301      	movs	r3, #1
 80066b8:	e7bd      	b.n	8006636 <_printf_float+0xee>
 80066ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80066be:	d9db      	bls.n	8006678 <_printf_float+0x130>
 80066c0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80066c4:	d118      	bne.n	80066f8 <_printf_float+0x1b0>
 80066c6:	2900      	cmp	r1, #0
 80066c8:	6863      	ldr	r3, [r4, #4]
 80066ca:	dd0b      	ble.n	80066e4 <_printf_float+0x19c>
 80066cc:	6121      	str	r1, [r4, #16]
 80066ce:	b913      	cbnz	r3, 80066d6 <_printf_float+0x18e>
 80066d0:	6822      	ldr	r2, [r4, #0]
 80066d2:	07d0      	lsls	r0, r2, #31
 80066d4:	d502      	bpl.n	80066dc <_printf_float+0x194>
 80066d6:	3301      	adds	r3, #1
 80066d8:	440b      	add	r3, r1
 80066da:	6123      	str	r3, [r4, #16]
 80066dc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066de:	f04f 0900 	mov.w	r9, #0
 80066e2:	e7db      	b.n	800669c <_printf_float+0x154>
 80066e4:	b913      	cbnz	r3, 80066ec <_printf_float+0x1a4>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	07d2      	lsls	r2, r2, #31
 80066ea:	d501      	bpl.n	80066f0 <_printf_float+0x1a8>
 80066ec:	3302      	adds	r3, #2
 80066ee:	e7f4      	b.n	80066da <_printf_float+0x192>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e7f2      	b.n	80066da <_printf_float+0x192>
 80066f4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066fa:	4299      	cmp	r1, r3
 80066fc:	db05      	blt.n	800670a <_printf_float+0x1c2>
 80066fe:	6823      	ldr	r3, [r4, #0]
 8006700:	6121      	str	r1, [r4, #16]
 8006702:	07d8      	lsls	r0, r3, #31
 8006704:	d5ea      	bpl.n	80066dc <_printf_float+0x194>
 8006706:	1c4b      	adds	r3, r1, #1
 8006708:	e7e7      	b.n	80066da <_printf_float+0x192>
 800670a:	2900      	cmp	r1, #0
 800670c:	bfd4      	ite	le
 800670e:	f1c1 0202 	rsble	r2, r1, #2
 8006712:	2201      	movgt	r2, #1
 8006714:	4413      	add	r3, r2
 8006716:	e7e0      	b.n	80066da <_printf_float+0x192>
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	055a      	lsls	r2, r3, #21
 800671c:	d407      	bmi.n	800672e <_printf_float+0x1e6>
 800671e:	6923      	ldr	r3, [r4, #16]
 8006720:	4642      	mov	r2, r8
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	d12b      	bne.n	8006784 <_printf_float+0x23c>
 800672c:	e767      	b.n	80065fe <_printf_float+0xb6>
 800672e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006732:	f240 80dd 	bls.w	80068f0 <_printf_float+0x3a8>
 8006736:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800673a:	2200      	movs	r2, #0
 800673c:	2300      	movs	r3, #0
 800673e:	f7fa f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006742:	2800      	cmp	r0, #0
 8006744:	d033      	beq.n	80067ae <_printf_float+0x266>
 8006746:	4a37      	ldr	r2, [pc, #220]	@ (8006824 <_printf_float+0x2dc>)
 8006748:	2301      	movs	r3, #1
 800674a:	4631      	mov	r1, r6
 800674c:	4628      	mov	r0, r5
 800674e:	47b8      	blx	r7
 8006750:	3001      	adds	r0, #1
 8006752:	f43f af54 	beq.w	80065fe <_printf_float+0xb6>
 8006756:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800675a:	4543      	cmp	r3, r8
 800675c:	db02      	blt.n	8006764 <_printf_float+0x21c>
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	07d8      	lsls	r0, r3, #31
 8006762:	d50f      	bpl.n	8006784 <_printf_float+0x23c>
 8006764:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af45 	beq.w	80065fe <_printf_float+0xb6>
 8006774:	f04f 0900 	mov.w	r9, #0
 8006778:	f108 38ff 	add.w	r8, r8, #4294967295
 800677c:	f104 0a1a 	add.w	sl, r4, #26
 8006780:	45c8      	cmp	r8, r9
 8006782:	dc09      	bgt.n	8006798 <_printf_float+0x250>
 8006784:	6823      	ldr	r3, [r4, #0]
 8006786:	079b      	lsls	r3, r3, #30
 8006788:	f100 8103 	bmi.w	8006992 <_printf_float+0x44a>
 800678c:	68e0      	ldr	r0, [r4, #12]
 800678e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006790:	4298      	cmp	r0, r3
 8006792:	bfb8      	it	lt
 8006794:	4618      	movlt	r0, r3
 8006796:	e734      	b.n	8006602 <_printf_float+0xba>
 8006798:	2301      	movs	r3, #1
 800679a:	4652      	mov	r2, sl
 800679c:	4631      	mov	r1, r6
 800679e:	4628      	mov	r0, r5
 80067a0:	47b8      	blx	r7
 80067a2:	3001      	adds	r0, #1
 80067a4:	f43f af2b 	beq.w	80065fe <_printf_float+0xb6>
 80067a8:	f109 0901 	add.w	r9, r9, #1
 80067ac:	e7e8      	b.n	8006780 <_printf_float+0x238>
 80067ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dc39      	bgt.n	8006828 <_printf_float+0x2e0>
 80067b4:	4a1b      	ldr	r2, [pc, #108]	@ (8006824 <_printf_float+0x2dc>)
 80067b6:	2301      	movs	r3, #1
 80067b8:	4631      	mov	r1, r6
 80067ba:	4628      	mov	r0, r5
 80067bc:	47b8      	blx	r7
 80067be:	3001      	adds	r0, #1
 80067c0:	f43f af1d 	beq.w	80065fe <_printf_float+0xb6>
 80067c4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067c8:	ea59 0303 	orrs.w	r3, r9, r3
 80067cc:	d102      	bne.n	80067d4 <_printf_float+0x28c>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	07d9      	lsls	r1, r3, #31
 80067d2:	d5d7      	bpl.n	8006784 <_printf_float+0x23c>
 80067d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067d8:	4631      	mov	r1, r6
 80067da:	4628      	mov	r0, r5
 80067dc:	47b8      	blx	r7
 80067de:	3001      	adds	r0, #1
 80067e0:	f43f af0d 	beq.w	80065fe <_printf_float+0xb6>
 80067e4:	f04f 0a00 	mov.w	sl, #0
 80067e8:	f104 0b1a 	add.w	fp, r4, #26
 80067ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ee:	425b      	negs	r3, r3
 80067f0:	4553      	cmp	r3, sl
 80067f2:	dc01      	bgt.n	80067f8 <_printf_float+0x2b0>
 80067f4:	464b      	mov	r3, r9
 80067f6:	e793      	b.n	8006720 <_printf_float+0x1d8>
 80067f8:	2301      	movs	r3, #1
 80067fa:	465a      	mov	r2, fp
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f aefb 	beq.w	80065fe <_printf_float+0xb6>
 8006808:	f10a 0a01 	add.w	sl, sl, #1
 800680c:	e7ee      	b.n	80067ec <_printf_float+0x2a4>
 800680e:	bf00      	nop
 8006810:	7fefffff 	.word	0x7fefffff
 8006814:	08008ed8 	.word	0x08008ed8
 8006818:	08008edc 	.word	0x08008edc
 800681c:	08008ee0 	.word	0x08008ee0
 8006820:	08008ee4 	.word	0x08008ee4
 8006824:	08008ee8 	.word	0x08008ee8
 8006828:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800682a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800682e:	4553      	cmp	r3, sl
 8006830:	bfa8      	it	ge
 8006832:	4653      	movge	r3, sl
 8006834:	2b00      	cmp	r3, #0
 8006836:	4699      	mov	r9, r3
 8006838:	dc36      	bgt.n	80068a8 <_printf_float+0x360>
 800683a:	f04f 0b00 	mov.w	fp, #0
 800683e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006842:	f104 021a 	add.w	r2, r4, #26
 8006846:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006848:	9306      	str	r3, [sp, #24]
 800684a:	eba3 0309 	sub.w	r3, r3, r9
 800684e:	455b      	cmp	r3, fp
 8006850:	dc31      	bgt.n	80068b6 <_printf_float+0x36e>
 8006852:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006854:	459a      	cmp	sl, r3
 8006856:	dc3a      	bgt.n	80068ce <_printf_float+0x386>
 8006858:	6823      	ldr	r3, [r4, #0]
 800685a:	07da      	lsls	r2, r3, #31
 800685c:	d437      	bmi.n	80068ce <_printf_float+0x386>
 800685e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006860:	ebaa 0903 	sub.w	r9, sl, r3
 8006864:	9b06      	ldr	r3, [sp, #24]
 8006866:	ebaa 0303 	sub.w	r3, sl, r3
 800686a:	4599      	cmp	r9, r3
 800686c:	bfa8      	it	ge
 800686e:	4699      	movge	r9, r3
 8006870:	f1b9 0f00 	cmp.w	r9, #0
 8006874:	dc33      	bgt.n	80068de <_printf_float+0x396>
 8006876:	f04f 0800 	mov.w	r8, #0
 800687a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800687e:	f104 0b1a 	add.w	fp, r4, #26
 8006882:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006884:	ebaa 0303 	sub.w	r3, sl, r3
 8006888:	eba3 0309 	sub.w	r3, r3, r9
 800688c:	4543      	cmp	r3, r8
 800688e:	f77f af79 	ble.w	8006784 <_printf_float+0x23c>
 8006892:	2301      	movs	r3, #1
 8006894:	465a      	mov	r2, fp
 8006896:	4631      	mov	r1, r6
 8006898:	4628      	mov	r0, r5
 800689a:	47b8      	blx	r7
 800689c:	3001      	adds	r0, #1
 800689e:	f43f aeae 	beq.w	80065fe <_printf_float+0xb6>
 80068a2:	f108 0801 	add.w	r8, r8, #1
 80068a6:	e7ec      	b.n	8006882 <_printf_float+0x33a>
 80068a8:	4642      	mov	r2, r8
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1c2      	bne.n	800683a <_printf_float+0x2f2>
 80068b4:	e6a3      	b.n	80065fe <_printf_float+0xb6>
 80068b6:	2301      	movs	r3, #1
 80068b8:	4631      	mov	r1, r6
 80068ba:	4628      	mov	r0, r5
 80068bc:	9206      	str	r2, [sp, #24]
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	f43f ae9c 	beq.w	80065fe <_printf_float+0xb6>
 80068c6:	9a06      	ldr	r2, [sp, #24]
 80068c8:	f10b 0b01 	add.w	fp, fp, #1
 80068cc:	e7bb      	b.n	8006846 <_printf_float+0x2fe>
 80068ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068d2:	4631      	mov	r1, r6
 80068d4:	4628      	mov	r0, r5
 80068d6:	47b8      	blx	r7
 80068d8:	3001      	adds	r0, #1
 80068da:	d1c0      	bne.n	800685e <_printf_float+0x316>
 80068dc:	e68f      	b.n	80065fe <_printf_float+0xb6>
 80068de:	9a06      	ldr	r2, [sp, #24]
 80068e0:	464b      	mov	r3, r9
 80068e2:	4442      	add	r2, r8
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	d1c3      	bne.n	8006876 <_printf_float+0x32e>
 80068ee:	e686      	b.n	80065fe <_printf_float+0xb6>
 80068f0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068f4:	f1ba 0f01 	cmp.w	sl, #1
 80068f8:	dc01      	bgt.n	80068fe <_printf_float+0x3b6>
 80068fa:	07db      	lsls	r3, r3, #31
 80068fc:	d536      	bpl.n	800696c <_printf_float+0x424>
 80068fe:	2301      	movs	r3, #1
 8006900:	4642      	mov	r2, r8
 8006902:	4631      	mov	r1, r6
 8006904:	4628      	mov	r0, r5
 8006906:	47b8      	blx	r7
 8006908:	3001      	adds	r0, #1
 800690a:	f43f ae78 	beq.w	80065fe <_printf_float+0xb6>
 800690e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006912:	4631      	mov	r1, r6
 8006914:	4628      	mov	r0, r5
 8006916:	47b8      	blx	r7
 8006918:	3001      	adds	r0, #1
 800691a:	f43f ae70 	beq.w	80065fe <_printf_float+0xb6>
 800691e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006922:	2200      	movs	r2, #0
 8006924:	2300      	movs	r3, #0
 8006926:	f10a 3aff 	add.w	sl, sl, #4294967295
 800692a:	f7fa f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800692e:	b9c0      	cbnz	r0, 8006962 <_printf_float+0x41a>
 8006930:	4653      	mov	r3, sl
 8006932:	f108 0201 	add.w	r2, r8, #1
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	47b8      	blx	r7
 800693c:	3001      	adds	r0, #1
 800693e:	d10c      	bne.n	800695a <_printf_float+0x412>
 8006940:	e65d      	b.n	80065fe <_printf_float+0xb6>
 8006942:	2301      	movs	r3, #1
 8006944:	465a      	mov	r2, fp
 8006946:	4631      	mov	r1, r6
 8006948:	4628      	mov	r0, r5
 800694a:	47b8      	blx	r7
 800694c:	3001      	adds	r0, #1
 800694e:	f43f ae56 	beq.w	80065fe <_printf_float+0xb6>
 8006952:	f108 0801 	add.w	r8, r8, #1
 8006956:	45d0      	cmp	r8, sl
 8006958:	dbf3      	blt.n	8006942 <_printf_float+0x3fa>
 800695a:	464b      	mov	r3, r9
 800695c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006960:	e6df      	b.n	8006722 <_printf_float+0x1da>
 8006962:	f04f 0800 	mov.w	r8, #0
 8006966:	f104 0b1a 	add.w	fp, r4, #26
 800696a:	e7f4      	b.n	8006956 <_printf_float+0x40e>
 800696c:	2301      	movs	r3, #1
 800696e:	4642      	mov	r2, r8
 8006970:	e7e1      	b.n	8006936 <_printf_float+0x3ee>
 8006972:	2301      	movs	r3, #1
 8006974:	464a      	mov	r2, r9
 8006976:	4631      	mov	r1, r6
 8006978:	4628      	mov	r0, r5
 800697a:	47b8      	blx	r7
 800697c:	3001      	adds	r0, #1
 800697e:	f43f ae3e 	beq.w	80065fe <_printf_float+0xb6>
 8006982:	f108 0801 	add.w	r8, r8, #1
 8006986:	68e3      	ldr	r3, [r4, #12]
 8006988:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800698a:	1a5b      	subs	r3, r3, r1
 800698c:	4543      	cmp	r3, r8
 800698e:	dcf0      	bgt.n	8006972 <_printf_float+0x42a>
 8006990:	e6fc      	b.n	800678c <_printf_float+0x244>
 8006992:	f04f 0800 	mov.w	r8, #0
 8006996:	f104 0919 	add.w	r9, r4, #25
 800699a:	e7f4      	b.n	8006986 <_printf_float+0x43e>

0800699c <_printf_common>:
 800699c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069a0:	4616      	mov	r6, r2
 80069a2:	4698      	mov	r8, r3
 80069a4:	688a      	ldr	r2, [r1, #8]
 80069a6:	690b      	ldr	r3, [r1, #16]
 80069a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80069ac:	4293      	cmp	r3, r2
 80069ae:	bfb8      	it	lt
 80069b0:	4613      	movlt	r3, r2
 80069b2:	6033      	str	r3, [r6, #0]
 80069b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80069b8:	4607      	mov	r7, r0
 80069ba:	460c      	mov	r4, r1
 80069bc:	b10a      	cbz	r2, 80069c2 <_printf_common+0x26>
 80069be:	3301      	adds	r3, #1
 80069c0:	6033      	str	r3, [r6, #0]
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	0699      	lsls	r1, r3, #26
 80069c6:	bf42      	ittt	mi
 80069c8:	6833      	ldrmi	r3, [r6, #0]
 80069ca:	3302      	addmi	r3, #2
 80069cc:	6033      	strmi	r3, [r6, #0]
 80069ce:	6825      	ldr	r5, [r4, #0]
 80069d0:	f015 0506 	ands.w	r5, r5, #6
 80069d4:	d106      	bne.n	80069e4 <_printf_common+0x48>
 80069d6:	f104 0a19 	add.w	sl, r4, #25
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	6832      	ldr	r2, [r6, #0]
 80069de:	1a9b      	subs	r3, r3, r2
 80069e0:	42ab      	cmp	r3, r5
 80069e2:	dc26      	bgt.n	8006a32 <_printf_common+0x96>
 80069e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069e8:	6822      	ldr	r2, [r4, #0]
 80069ea:	3b00      	subs	r3, #0
 80069ec:	bf18      	it	ne
 80069ee:	2301      	movne	r3, #1
 80069f0:	0692      	lsls	r2, r2, #26
 80069f2:	d42b      	bmi.n	8006a4c <_printf_common+0xb0>
 80069f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069f8:	4641      	mov	r1, r8
 80069fa:	4638      	mov	r0, r7
 80069fc:	47c8      	blx	r9
 80069fe:	3001      	adds	r0, #1
 8006a00:	d01e      	beq.n	8006a40 <_printf_common+0xa4>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	f003 0306 	and.w	r3, r3, #6
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	bf02      	ittt	eq
 8006a0e:	68e5      	ldreq	r5, [r4, #12]
 8006a10:	6833      	ldreq	r3, [r6, #0]
 8006a12:	1aed      	subeq	r5, r5, r3
 8006a14:	68a3      	ldr	r3, [r4, #8]
 8006a16:	bf0c      	ite	eq
 8006a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a1c:	2500      	movne	r5, #0
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	bfc4      	itt	gt
 8006a22:	1a9b      	subgt	r3, r3, r2
 8006a24:	18ed      	addgt	r5, r5, r3
 8006a26:	2600      	movs	r6, #0
 8006a28:	341a      	adds	r4, #26
 8006a2a:	42b5      	cmp	r5, r6
 8006a2c:	d11a      	bne.n	8006a64 <_printf_common+0xc8>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	e008      	b.n	8006a44 <_printf_common+0xa8>
 8006a32:	2301      	movs	r3, #1
 8006a34:	4652      	mov	r2, sl
 8006a36:	4641      	mov	r1, r8
 8006a38:	4638      	mov	r0, r7
 8006a3a:	47c8      	blx	r9
 8006a3c:	3001      	adds	r0, #1
 8006a3e:	d103      	bne.n	8006a48 <_printf_common+0xac>
 8006a40:	f04f 30ff 	mov.w	r0, #4294967295
 8006a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a48:	3501      	adds	r5, #1
 8006a4a:	e7c6      	b.n	80069da <_printf_common+0x3e>
 8006a4c:	18e1      	adds	r1, r4, r3
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	2030      	movs	r0, #48	@ 0x30
 8006a52:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a56:	4422      	add	r2, r4
 8006a58:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a60:	3302      	adds	r3, #2
 8006a62:	e7c7      	b.n	80069f4 <_printf_common+0x58>
 8006a64:	2301      	movs	r3, #1
 8006a66:	4622      	mov	r2, r4
 8006a68:	4641      	mov	r1, r8
 8006a6a:	4638      	mov	r0, r7
 8006a6c:	47c8      	blx	r9
 8006a6e:	3001      	adds	r0, #1
 8006a70:	d0e6      	beq.n	8006a40 <_printf_common+0xa4>
 8006a72:	3601      	adds	r6, #1
 8006a74:	e7d9      	b.n	8006a2a <_printf_common+0x8e>
	...

08006a78 <_printf_i>:
 8006a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a7c:	7e0f      	ldrb	r7, [r1, #24]
 8006a7e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a80:	2f78      	cmp	r7, #120	@ 0x78
 8006a82:	4691      	mov	r9, r2
 8006a84:	4680      	mov	r8, r0
 8006a86:	460c      	mov	r4, r1
 8006a88:	469a      	mov	sl, r3
 8006a8a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a8e:	d807      	bhi.n	8006aa0 <_printf_i+0x28>
 8006a90:	2f62      	cmp	r7, #98	@ 0x62
 8006a92:	d80a      	bhi.n	8006aaa <_printf_i+0x32>
 8006a94:	2f00      	cmp	r7, #0
 8006a96:	f000 80d2 	beq.w	8006c3e <_printf_i+0x1c6>
 8006a9a:	2f58      	cmp	r7, #88	@ 0x58
 8006a9c:	f000 80b9 	beq.w	8006c12 <_printf_i+0x19a>
 8006aa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006aa4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006aa8:	e03a      	b.n	8006b20 <_printf_i+0xa8>
 8006aaa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006aae:	2b15      	cmp	r3, #21
 8006ab0:	d8f6      	bhi.n	8006aa0 <_printf_i+0x28>
 8006ab2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ab8 <_printf_i+0x40>)
 8006ab4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ab8:	08006b11 	.word	0x08006b11
 8006abc:	08006b25 	.word	0x08006b25
 8006ac0:	08006aa1 	.word	0x08006aa1
 8006ac4:	08006aa1 	.word	0x08006aa1
 8006ac8:	08006aa1 	.word	0x08006aa1
 8006acc:	08006aa1 	.word	0x08006aa1
 8006ad0:	08006b25 	.word	0x08006b25
 8006ad4:	08006aa1 	.word	0x08006aa1
 8006ad8:	08006aa1 	.word	0x08006aa1
 8006adc:	08006aa1 	.word	0x08006aa1
 8006ae0:	08006aa1 	.word	0x08006aa1
 8006ae4:	08006c25 	.word	0x08006c25
 8006ae8:	08006b4f 	.word	0x08006b4f
 8006aec:	08006bdf 	.word	0x08006bdf
 8006af0:	08006aa1 	.word	0x08006aa1
 8006af4:	08006aa1 	.word	0x08006aa1
 8006af8:	08006c47 	.word	0x08006c47
 8006afc:	08006aa1 	.word	0x08006aa1
 8006b00:	08006b4f 	.word	0x08006b4f
 8006b04:	08006aa1 	.word	0x08006aa1
 8006b08:	08006aa1 	.word	0x08006aa1
 8006b0c:	08006be7 	.word	0x08006be7
 8006b10:	6833      	ldr	r3, [r6, #0]
 8006b12:	1d1a      	adds	r2, r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6032      	str	r2, [r6, #0]
 8006b18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b1c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b20:	2301      	movs	r3, #1
 8006b22:	e09d      	b.n	8006c60 <_printf_i+0x1e8>
 8006b24:	6833      	ldr	r3, [r6, #0]
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	1d19      	adds	r1, r3, #4
 8006b2a:	6031      	str	r1, [r6, #0]
 8006b2c:	0606      	lsls	r6, r0, #24
 8006b2e:	d501      	bpl.n	8006b34 <_printf_i+0xbc>
 8006b30:	681d      	ldr	r5, [r3, #0]
 8006b32:	e003      	b.n	8006b3c <_printf_i+0xc4>
 8006b34:	0645      	lsls	r5, r0, #25
 8006b36:	d5fb      	bpl.n	8006b30 <_printf_i+0xb8>
 8006b38:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b3c:	2d00      	cmp	r5, #0
 8006b3e:	da03      	bge.n	8006b48 <_printf_i+0xd0>
 8006b40:	232d      	movs	r3, #45	@ 0x2d
 8006b42:	426d      	negs	r5, r5
 8006b44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b48:	4859      	ldr	r0, [pc, #356]	@ (8006cb0 <_printf_i+0x238>)
 8006b4a:	230a      	movs	r3, #10
 8006b4c:	e011      	b.n	8006b72 <_printf_i+0xfa>
 8006b4e:	6821      	ldr	r1, [r4, #0]
 8006b50:	6833      	ldr	r3, [r6, #0]
 8006b52:	0608      	lsls	r0, r1, #24
 8006b54:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b58:	d402      	bmi.n	8006b60 <_printf_i+0xe8>
 8006b5a:	0649      	lsls	r1, r1, #25
 8006b5c:	bf48      	it	mi
 8006b5e:	b2ad      	uxthmi	r5, r5
 8006b60:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b62:	4853      	ldr	r0, [pc, #332]	@ (8006cb0 <_printf_i+0x238>)
 8006b64:	6033      	str	r3, [r6, #0]
 8006b66:	bf14      	ite	ne
 8006b68:	230a      	movne	r3, #10
 8006b6a:	2308      	moveq	r3, #8
 8006b6c:	2100      	movs	r1, #0
 8006b6e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b72:	6866      	ldr	r6, [r4, #4]
 8006b74:	60a6      	str	r6, [r4, #8]
 8006b76:	2e00      	cmp	r6, #0
 8006b78:	bfa2      	ittt	ge
 8006b7a:	6821      	ldrge	r1, [r4, #0]
 8006b7c:	f021 0104 	bicge.w	r1, r1, #4
 8006b80:	6021      	strge	r1, [r4, #0]
 8006b82:	b90d      	cbnz	r5, 8006b88 <_printf_i+0x110>
 8006b84:	2e00      	cmp	r6, #0
 8006b86:	d04b      	beq.n	8006c20 <_printf_i+0x1a8>
 8006b88:	4616      	mov	r6, r2
 8006b8a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b8e:	fb03 5711 	mls	r7, r3, r1, r5
 8006b92:	5dc7      	ldrb	r7, [r0, r7]
 8006b94:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b98:	462f      	mov	r7, r5
 8006b9a:	42bb      	cmp	r3, r7
 8006b9c:	460d      	mov	r5, r1
 8006b9e:	d9f4      	bls.n	8006b8a <_printf_i+0x112>
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d10b      	bne.n	8006bbc <_printf_i+0x144>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07df      	lsls	r7, r3, #31
 8006ba8:	d508      	bpl.n	8006bbc <_printf_i+0x144>
 8006baa:	6923      	ldr	r3, [r4, #16]
 8006bac:	6861      	ldr	r1, [r4, #4]
 8006bae:	4299      	cmp	r1, r3
 8006bb0:	bfde      	ittt	le
 8006bb2:	2330      	movle	r3, #48	@ 0x30
 8006bb4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bb8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bbc:	1b92      	subs	r2, r2, r6
 8006bbe:	6122      	str	r2, [r4, #16]
 8006bc0:	f8cd a000 	str.w	sl, [sp]
 8006bc4:	464b      	mov	r3, r9
 8006bc6:	aa03      	add	r2, sp, #12
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f7ff fee6 	bl	800699c <_printf_common>
 8006bd0:	3001      	adds	r0, #1
 8006bd2:	d14a      	bne.n	8006c6a <_printf_i+0x1f2>
 8006bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd8:	b004      	add	sp, #16
 8006bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f043 0320 	orr.w	r3, r3, #32
 8006be4:	6023      	str	r3, [r4, #0]
 8006be6:	4833      	ldr	r0, [pc, #204]	@ (8006cb4 <_printf_i+0x23c>)
 8006be8:	2778      	movs	r7, #120	@ 0x78
 8006bea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bee:	6823      	ldr	r3, [r4, #0]
 8006bf0:	6831      	ldr	r1, [r6, #0]
 8006bf2:	061f      	lsls	r7, r3, #24
 8006bf4:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bf8:	d402      	bmi.n	8006c00 <_printf_i+0x188>
 8006bfa:	065f      	lsls	r7, r3, #25
 8006bfc:	bf48      	it	mi
 8006bfe:	b2ad      	uxthmi	r5, r5
 8006c00:	6031      	str	r1, [r6, #0]
 8006c02:	07d9      	lsls	r1, r3, #31
 8006c04:	bf44      	itt	mi
 8006c06:	f043 0320 	orrmi.w	r3, r3, #32
 8006c0a:	6023      	strmi	r3, [r4, #0]
 8006c0c:	b11d      	cbz	r5, 8006c16 <_printf_i+0x19e>
 8006c0e:	2310      	movs	r3, #16
 8006c10:	e7ac      	b.n	8006b6c <_printf_i+0xf4>
 8006c12:	4827      	ldr	r0, [pc, #156]	@ (8006cb0 <_printf_i+0x238>)
 8006c14:	e7e9      	b.n	8006bea <_printf_i+0x172>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f023 0320 	bic.w	r3, r3, #32
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	e7f6      	b.n	8006c0e <_printf_i+0x196>
 8006c20:	4616      	mov	r6, r2
 8006c22:	e7bd      	b.n	8006ba0 <_printf_i+0x128>
 8006c24:	6833      	ldr	r3, [r6, #0]
 8006c26:	6825      	ldr	r5, [r4, #0]
 8006c28:	6961      	ldr	r1, [r4, #20]
 8006c2a:	1d18      	adds	r0, r3, #4
 8006c2c:	6030      	str	r0, [r6, #0]
 8006c2e:	062e      	lsls	r6, r5, #24
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	d501      	bpl.n	8006c38 <_printf_i+0x1c0>
 8006c34:	6019      	str	r1, [r3, #0]
 8006c36:	e002      	b.n	8006c3e <_printf_i+0x1c6>
 8006c38:	0668      	lsls	r0, r5, #25
 8006c3a:	d5fb      	bpl.n	8006c34 <_printf_i+0x1bc>
 8006c3c:	8019      	strh	r1, [r3, #0]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	6123      	str	r3, [r4, #16]
 8006c42:	4616      	mov	r6, r2
 8006c44:	e7bc      	b.n	8006bc0 <_printf_i+0x148>
 8006c46:	6833      	ldr	r3, [r6, #0]
 8006c48:	1d1a      	adds	r2, r3, #4
 8006c4a:	6032      	str	r2, [r6, #0]
 8006c4c:	681e      	ldr	r6, [r3, #0]
 8006c4e:	6862      	ldr	r2, [r4, #4]
 8006c50:	2100      	movs	r1, #0
 8006c52:	4630      	mov	r0, r6
 8006c54:	f7f9 fabc 	bl	80001d0 <memchr>
 8006c58:	b108      	cbz	r0, 8006c5e <_printf_i+0x1e6>
 8006c5a:	1b80      	subs	r0, r0, r6
 8006c5c:	6060      	str	r0, [r4, #4]
 8006c5e:	6863      	ldr	r3, [r4, #4]
 8006c60:	6123      	str	r3, [r4, #16]
 8006c62:	2300      	movs	r3, #0
 8006c64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c68:	e7aa      	b.n	8006bc0 <_printf_i+0x148>
 8006c6a:	6923      	ldr	r3, [r4, #16]
 8006c6c:	4632      	mov	r2, r6
 8006c6e:	4649      	mov	r1, r9
 8006c70:	4640      	mov	r0, r8
 8006c72:	47d0      	blx	sl
 8006c74:	3001      	adds	r0, #1
 8006c76:	d0ad      	beq.n	8006bd4 <_printf_i+0x15c>
 8006c78:	6823      	ldr	r3, [r4, #0]
 8006c7a:	079b      	lsls	r3, r3, #30
 8006c7c:	d413      	bmi.n	8006ca6 <_printf_i+0x22e>
 8006c7e:	68e0      	ldr	r0, [r4, #12]
 8006c80:	9b03      	ldr	r3, [sp, #12]
 8006c82:	4298      	cmp	r0, r3
 8006c84:	bfb8      	it	lt
 8006c86:	4618      	movlt	r0, r3
 8006c88:	e7a6      	b.n	8006bd8 <_printf_i+0x160>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	4632      	mov	r2, r6
 8006c8e:	4649      	mov	r1, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	47d0      	blx	sl
 8006c94:	3001      	adds	r0, #1
 8006c96:	d09d      	beq.n	8006bd4 <_printf_i+0x15c>
 8006c98:	3501      	adds	r5, #1
 8006c9a:	68e3      	ldr	r3, [r4, #12]
 8006c9c:	9903      	ldr	r1, [sp, #12]
 8006c9e:	1a5b      	subs	r3, r3, r1
 8006ca0:	42ab      	cmp	r3, r5
 8006ca2:	dcf2      	bgt.n	8006c8a <_printf_i+0x212>
 8006ca4:	e7eb      	b.n	8006c7e <_printf_i+0x206>
 8006ca6:	2500      	movs	r5, #0
 8006ca8:	f104 0619 	add.w	r6, r4, #25
 8006cac:	e7f5      	b.n	8006c9a <_printf_i+0x222>
 8006cae:	bf00      	nop
 8006cb0:	08008eea 	.word	0x08008eea
 8006cb4:	08008efb 	.word	0x08008efb

08006cb8 <std>:
 8006cb8:	2300      	movs	r3, #0
 8006cba:	b510      	push	{r4, lr}
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006cc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006cc6:	6083      	str	r3, [r0, #8]
 8006cc8:	8181      	strh	r1, [r0, #12]
 8006cca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ccc:	81c2      	strh	r2, [r0, #14]
 8006cce:	6183      	str	r3, [r0, #24]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	305c      	adds	r0, #92	@ 0x5c
 8006cd6:	f000 f8f4 	bl	8006ec2 <memset>
 8006cda:	4b0d      	ldr	r3, [pc, #52]	@ (8006d10 <std+0x58>)
 8006cdc:	6263      	str	r3, [r4, #36]	@ 0x24
 8006cde:	4b0d      	ldr	r3, [pc, #52]	@ (8006d14 <std+0x5c>)
 8006ce0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d18 <std+0x60>)
 8006ce4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8006d1c <std+0x64>)
 8006ce8:	6323      	str	r3, [r4, #48]	@ 0x30
 8006cea:	4b0d      	ldr	r3, [pc, #52]	@ (8006d20 <std+0x68>)
 8006cec:	6224      	str	r4, [r4, #32]
 8006cee:	429c      	cmp	r4, r3
 8006cf0:	d006      	beq.n	8006d00 <std+0x48>
 8006cf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006cf6:	4294      	cmp	r4, r2
 8006cf8:	d002      	beq.n	8006d00 <std+0x48>
 8006cfa:	33d0      	adds	r3, #208	@ 0xd0
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	d105      	bne.n	8006d0c <std+0x54>
 8006d00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d08:	f000 b9ae 	b.w	8007068 <__retarget_lock_init_recursive>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	bf00      	nop
 8006d10:	08006e3d 	.word	0x08006e3d
 8006d14:	08006e5f 	.word	0x08006e5f
 8006d18:	08006e97 	.word	0x08006e97
 8006d1c:	08006ebb 	.word	0x08006ebb
 8006d20:	20004c50 	.word	0x20004c50

08006d24 <stdio_exit_handler>:
 8006d24:	4a02      	ldr	r2, [pc, #8]	@ (8006d30 <stdio_exit_handler+0xc>)
 8006d26:	4903      	ldr	r1, [pc, #12]	@ (8006d34 <stdio_exit_handler+0x10>)
 8006d28:	4803      	ldr	r0, [pc, #12]	@ (8006d38 <stdio_exit_handler+0x14>)
 8006d2a:	f000 b869 	b.w	8006e00 <_fwalk_sglue>
 8006d2e:	bf00      	nop
 8006d30:	20000010 	.word	0x20000010
 8006d34:	08008735 	.word	0x08008735
 8006d38:	20000020 	.word	0x20000020

08006d3c <cleanup_stdio>:
 8006d3c:	6841      	ldr	r1, [r0, #4]
 8006d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d70 <cleanup_stdio+0x34>)
 8006d40:	4299      	cmp	r1, r3
 8006d42:	b510      	push	{r4, lr}
 8006d44:	4604      	mov	r4, r0
 8006d46:	d001      	beq.n	8006d4c <cleanup_stdio+0x10>
 8006d48:	f001 fcf4 	bl	8008734 <_fflush_r>
 8006d4c:	68a1      	ldr	r1, [r4, #8]
 8006d4e:	4b09      	ldr	r3, [pc, #36]	@ (8006d74 <cleanup_stdio+0x38>)
 8006d50:	4299      	cmp	r1, r3
 8006d52:	d002      	beq.n	8006d5a <cleanup_stdio+0x1e>
 8006d54:	4620      	mov	r0, r4
 8006d56:	f001 fced 	bl	8008734 <_fflush_r>
 8006d5a:	68e1      	ldr	r1, [r4, #12]
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <cleanup_stdio+0x3c>)
 8006d5e:	4299      	cmp	r1, r3
 8006d60:	d004      	beq.n	8006d6c <cleanup_stdio+0x30>
 8006d62:	4620      	mov	r0, r4
 8006d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d68:	f001 bce4 	b.w	8008734 <_fflush_r>
 8006d6c:	bd10      	pop	{r4, pc}
 8006d6e:	bf00      	nop
 8006d70:	20004c50 	.word	0x20004c50
 8006d74:	20004cb8 	.word	0x20004cb8
 8006d78:	20004d20 	.word	0x20004d20

08006d7c <global_stdio_init.part.0>:
 8006d7c:	b510      	push	{r4, lr}
 8006d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <global_stdio_init.part.0+0x30>)
 8006d80:	4c0b      	ldr	r4, [pc, #44]	@ (8006db0 <global_stdio_init.part.0+0x34>)
 8006d82:	4a0c      	ldr	r2, [pc, #48]	@ (8006db4 <global_stdio_init.part.0+0x38>)
 8006d84:	601a      	str	r2, [r3, #0]
 8006d86:	4620      	mov	r0, r4
 8006d88:	2200      	movs	r2, #0
 8006d8a:	2104      	movs	r1, #4
 8006d8c:	f7ff ff94 	bl	8006cb8 <std>
 8006d90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006d94:	2201      	movs	r2, #1
 8006d96:	2109      	movs	r1, #9
 8006d98:	f7ff ff8e 	bl	8006cb8 <std>
 8006d9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006da0:	2202      	movs	r2, #2
 8006da2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006da6:	2112      	movs	r1, #18
 8006da8:	f7ff bf86 	b.w	8006cb8 <std>
 8006dac:	20004d88 	.word	0x20004d88
 8006db0:	20004c50 	.word	0x20004c50
 8006db4:	08006d25 	.word	0x08006d25

08006db8 <__sfp_lock_acquire>:
 8006db8:	4801      	ldr	r0, [pc, #4]	@ (8006dc0 <__sfp_lock_acquire+0x8>)
 8006dba:	f000 b956 	b.w	800706a <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20004d91 	.word	0x20004d91

08006dc4 <__sfp_lock_release>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	@ (8006dcc <__sfp_lock_release+0x8>)
 8006dc6:	f000 b951 	b.w	800706c <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20004d91 	.word	0x20004d91

08006dd0 <__sinit>:
 8006dd0:	b510      	push	{r4, lr}
 8006dd2:	4604      	mov	r4, r0
 8006dd4:	f7ff fff0 	bl	8006db8 <__sfp_lock_acquire>
 8006dd8:	6a23      	ldr	r3, [r4, #32]
 8006dda:	b11b      	cbz	r3, 8006de4 <__sinit+0x14>
 8006ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006de0:	f7ff bff0 	b.w	8006dc4 <__sfp_lock_release>
 8006de4:	4b04      	ldr	r3, [pc, #16]	@ (8006df8 <__sinit+0x28>)
 8006de6:	6223      	str	r3, [r4, #32]
 8006de8:	4b04      	ldr	r3, [pc, #16]	@ (8006dfc <__sinit+0x2c>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1f5      	bne.n	8006ddc <__sinit+0xc>
 8006df0:	f7ff ffc4 	bl	8006d7c <global_stdio_init.part.0>
 8006df4:	e7f2      	b.n	8006ddc <__sinit+0xc>
 8006df6:	bf00      	nop
 8006df8:	08006d3d 	.word	0x08006d3d
 8006dfc:	20004d88 	.word	0x20004d88

08006e00 <_fwalk_sglue>:
 8006e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e04:	4607      	mov	r7, r0
 8006e06:	4688      	mov	r8, r1
 8006e08:	4614      	mov	r4, r2
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e10:	f1b9 0901 	subs.w	r9, r9, #1
 8006e14:	d505      	bpl.n	8006e22 <_fwalk_sglue+0x22>
 8006e16:	6824      	ldr	r4, [r4, #0]
 8006e18:	2c00      	cmp	r4, #0
 8006e1a:	d1f7      	bne.n	8006e0c <_fwalk_sglue+0xc>
 8006e1c:	4630      	mov	r0, r6
 8006e1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e22:	89ab      	ldrh	r3, [r5, #12]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d907      	bls.n	8006e38 <_fwalk_sglue+0x38>
 8006e28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	d003      	beq.n	8006e38 <_fwalk_sglue+0x38>
 8006e30:	4629      	mov	r1, r5
 8006e32:	4638      	mov	r0, r7
 8006e34:	47c0      	blx	r8
 8006e36:	4306      	orrs	r6, r0
 8006e38:	3568      	adds	r5, #104	@ 0x68
 8006e3a:	e7e9      	b.n	8006e10 <_fwalk_sglue+0x10>

08006e3c <__sread>:
 8006e3c:	b510      	push	{r4, lr}
 8006e3e:	460c      	mov	r4, r1
 8006e40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e44:	f000 f8c2 	bl	8006fcc <_read_r>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	bfab      	itete	ge
 8006e4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006e50:	181b      	addge	r3, r3, r0
 8006e52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e56:	bfac      	ite	ge
 8006e58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e5a:	81a3      	strhlt	r3, [r4, #12]
 8006e5c:	bd10      	pop	{r4, pc}

08006e5e <__swrite>:
 8006e5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e62:	461f      	mov	r7, r3
 8006e64:	898b      	ldrh	r3, [r1, #12]
 8006e66:	05db      	lsls	r3, r3, #23
 8006e68:	4605      	mov	r5, r0
 8006e6a:	460c      	mov	r4, r1
 8006e6c:	4616      	mov	r6, r2
 8006e6e:	d505      	bpl.n	8006e7c <__swrite+0x1e>
 8006e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e74:	2302      	movs	r3, #2
 8006e76:	2200      	movs	r2, #0
 8006e78:	f000 f896 	bl	8006fa8 <_lseek_r>
 8006e7c:	89a3      	ldrh	r3, [r4, #12]
 8006e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e86:	81a3      	strh	r3, [r4, #12]
 8006e88:	4632      	mov	r2, r6
 8006e8a:	463b      	mov	r3, r7
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e92:	f000 b8ad 	b.w	8006ff0 <_write_r>

08006e96 <__sseek>:
 8006e96:	b510      	push	{r4, lr}
 8006e98:	460c      	mov	r4, r1
 8006e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e9e:	f000 f883 	bl	8006fa8 <_lseek_r>
 8006ea2:	1c43      	adds	r3, r0, #1
 8006ea4:	89a3      	ldrh	r3, [r4, #12]
 8006ea6:	bf15      	itete	ne
 8006ea8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006eaa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006eae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eb2:	81a3      	strheq	r3, [r4, #12]
 8006eb4:	bf18      	it	ne
 8006eb6:	81a3      	strhne	r3, [r4, #12]
 8006eb8:	bd10      	pop	{r4, pc}

08006eba <__sclose>:
 8006eba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ebe:	f000 b80d 	b.w	8006edc <_close_r>

08006ec2 <memset>:
 8006ec2:	4402      	add	r2, r0
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d100      	bne.n	8006ecc <memset+0xa>
 8006eca:	4770      	bx	lr
 8006ecc:	f803 1b01 	strb.w	r1, [r3], #1
 8006ed0:	e7f9      	b.n	8006ec6 <memset+0x4>
	...

08006ed4 <_localeconv_r>:
 8006ed4:	4800      	ldr	r0, [pc, #0]	@ (8006ed8 <_localeconv_r+0x4>)
 8006ed6:	4770      	bx	lr
 8006ed8:	2000015c 	.word	0x2000015c

08006edc <_close_r>:
 8006edc:	b538      	push	{r3, r4, r5, lr}
 8006ede:	4d06      	ldr	r5, [pc, #24]	@ (8006ef8 <_close_r+0x1c>)
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	4604      	mov	r4, r0
 8006ee4:	4608      	mov	r0, r1
 8006ee6:	602b      	str	r3, [r5, #0]
 8006ee8:	f7fa fb84 	bl	80015f4 <_close>
 8006eec:	1c43      	adds	r3, r0, #1
 8006eee:	d102      	bne.n	8006ef6 <_close_r+0x1a>
 8006ef0:	682b      	ldr	r3, [r5, #0]
 8006ef2:	b103      	cbz	r3, 8006ef6 <_close_r+0x1a>
 8006ef4:	6023      	str	r3, [r4, #0]
 8006ef6:	bd38      	pop	{r3, r4, r5, pc}
 8006ef8:	20004d8c 	.word	0x20004d8c

08006efc <_reclaim_reent>:
 8006efc:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <_reclaim_reent+0xa8>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4283      	cmp	r3, r0
 8006f02:	b570      	push	{r4, r5, r6, lr}
 8006f04:	4604      	mov	r4, r0
 8006f06:	d04b      	beq.n	8006fa0 <_reclaim_reent+0xa4>
 8006f08:	69c3      	ldr	r3, [r0, #28]
 8006f0a:	b1ab      	cbz	r3, 8006f38 <_reclaim_reent+0x3c>
 8006f0c:	68db      	ldr	r3, [r3, #12]
 8006f0e:	b16b      	cbz	r3, 8006f2c <_reclaim_reent+0x30>
 8006f10:	2500      	movs	r5, #0
 8006f12:	69e3      	ldr	r3, [r4, #28]
 8006f14:	68db      	ldr	r3, [r3, #12]
 8006f16:	5959      	ldr	r1, [r3, r5]
 8006f18:	2900      	cmp	r1, #0
 8006f1a:	d13b      	bne.n	8006f94 <_reclaim_reent+0x98>
 8006f1c:	3504      	adds	r5, #4
 8006f1e:	2d80      	cmp	r5, #128	@ 0x80
 8006f20:	d1f7      	bne.n	8006f12 <_reclaim_reent+0x16>
 8006f22:	69e3      	ldr	r3, [r4, #28]
 8006f24:	4620      	mov	r0, r4
 8006f26:	68d9      	ldr	r1, [r3, #12]
 8006f28:	f000 fefe 	bl	8007d28 <_free_r>
 8006f2c:	69e3      	ldr	r3, [r4, #28]
 8006f2e:	6819      	ldr	r1, [r3, #0]
 8006f30:	b111      	cbz	r1, 8006f38 <_reclaim_reent+0x3c>
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fef8 	bl	8007d28 <_free_r>
 8006f38:	6961      	ldr	r1, [r4, #20]
 8006f3a:	b111      	cbz	r1, 8006f42 <_reclaim_reent+0x46>
 8006f3c:	4620      	mov	r0, r4
 8006f3e:	f000 fef3 	bl	8007d28 <_free_r>
 8006f42:	69e1      	ldr	r1, [r4, #28]
 8006f44:	b111      	cbz	r1, 8006f4c <_reclaim_reent+0x50>
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 feee 	bl	8007d28 <_free_r>
 8006f4c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006f4e:	b111      	cbz	r1, 8006f56 <_reclaim_reent+0x5a>
 8006f50:	4620      	mov	r0, r4
 8006f52:	f000 fee9 	bl	8007d28 <_free_r>
 8006f56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f58:	b111      	cbz	r1, 8006f60 <_reclaim_reent+0x64>
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fee4 	bl	8007d28 <_free_r>
 8006f60:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006f62:	b111      	cbz	r1, 8006f6a <_reclaim_reent+0x6e>
 8006f64:	4620      	mov	r0, r4
 8006f66:	f000 fedf 	bl	8007d28 <_free_r>
 8006f6a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006f6c:	b111      	cbz	r1, 8006f74 <_reclaim_reent+0x78>
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f000 feda 	bl	8007d28 <_free_r>
 8006f74:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006f76:	b111      	cbz	r1, 8006f7e <_reclaim_reent+0x82>
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fed5 	bl	8007d28 <_free_r>
 8006f7e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006f80:	b111      	cbz	r1, 8006f88 <_reclaim_reent+0x8c>
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 fed0 	bl	8007d28 <_free_r>
 8006f88:	6a23      	ldr	r3, [r4, #32]
 8006f8a:	b14b      	cbz	r3, 8006fa0 <_reclaim_reent+0xa4>
 8006f8c:	4620      	mov	r0, r4
 8006f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006f92:	4718      	bx	r3
 8006f94:	680e      	ldr	r6, [r1, #0]
 8006f96:	4620      	mov	r0, r4
 8006f98:	f000 fec6 	bl	8007d28 <_free_r>
 8006f9c:	4631      	mov	r1, r6
 8006f9e:	e7bb      	b.n	8006f18 <_reclaim_reent+0x1c>
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
 8006fa2:	bf00      	nop
 8006fa4:	2000001c 	.word	0x2000001c

08006fa8 <_lseek_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_lseek_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fa fb43 	bl	8001642 <_lseek>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_lseek_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_lseek_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	20004d8c 	.word	0x20004d8c

08006fcc <_read_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4d07      	ldr	r5, [pc, #28]	@ (8006fec <_read_r+0x20>)
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	4608      	mov	r0, r1
 8006fd4:	4611      	mov	r1, r2
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	602a      	str	r2, [r5, #0]
 8006fda:	461a      	mov	r2, r3
 8006fdc:	f7fa fad1 	bl	8001582 <_read>
 8006fe0:	1c43      	adds	r3, r0, #1
 8006fe2:	d102      	bne.n	8006fea <_read_r+0x1e>
 8006fe4:	682b      	ldr	r3, [r5, #0]
 8006fe6:	b103      	cbz	r3, 8006fea <_read_r+0x1e>
 8006fe8:	6023      	str	r3, [r4, #0]
 8006fea:	bd38      	pop	{r3, r4, r5, pc}
 8006fec:	20004d8c 	.word	0x20004d8c

08006ff0 <_write_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_write_r+0x20>)
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	4608      	mov	r0, r1
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	602a      	str	r2, [r5, #0]
 8006ffe:	461a      	mov	r2, r3
 8007000:	f7fa fadc 	bl	80015bc <_write>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_write_r+0x1e>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_write_r+0x1e>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	20004d8c 	.word	0x20004d8c

08007014 <__errno>:
 8007014:	4b01      	ldr	r3, [pc, #4]	@ (800701c <__errno+0x8>)
 8007016:	6818      	ldr	r0, [r3, #0]
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	2000001c 	.word	0x2000001c

08007020 <__libc_init_array>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	4d0d      	ldr	r5, [pc, #52]	@ (8007058 <__libc_init_array+0x38>)
 8007024:	4c0d      	ldr	r4, [pc, #52]	@ (800705c <__libc_init_array+0x3c>)
 8007026:	1b64      	subs	r4, r4, r5
 8007028:	10a4      	asrs	r4, r4, #2
 800702a:	2600      	movs	r6, #0
 800702c:	42a6      	cmp	r6, r4
 800702e:	d109      	bne.n	8007044 <__libc_init_array+0x24>
 8007030:	4d0b      	ldr	r5, [pc, #44]	@ (8007060 <__libc_init_array+0x40>)
 8007032:	4c0c      	ldr	r4, [pc, #48]	@ (8007064 <__libc_init_array+0x44>)
 8007034:	f001 febe 	bl	8008db4 <_init>
 8007038:	1b64      	subs	r4, r4, r5
 800703a:	10a4      	asrs	r4, r4, #2
 800703c:	2600      	movs	r6, #0
 800703e:	42a6      	cmp	r6, r4
 8007040:	d105      	bne.n	800704e <__libc_init_array+0x2e>
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	f855 3b04 	ldr.w	r3, [r5], #4
 8007048:	4798      	blx	r3
 800704a:	3601      	adds	r6, #1
 800704c:	e7ee      	b.n	800702c <__libc_init_array+0xc>
 800704e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007052:	4798      	blx	r3
 8007054:	3601      	adds	r6, #1
 8007056:	e7f2      	b.n	800703e <__libc_init_array+0x1e>
 8007058:	08009250 	.word	0x08009250
 800705c:	08009250 	.word	0x08009250
 8007060:	08009250 	.word	0x08009250
 8007064:	08009254 	.word	0x08009254

08007068 <__retarget_lock_init_recursive>:
 8007068:	4770      	bx	lr

0800706a <__retarget_lock_acquire_recursive>:
 800706a:	4770      	bx	lr

0800706c <__retarget_lock_release_recursive>:
 800706c:	4770      	bx	lr

0800706e <memcpy>:
 800706e:	440a      	add	r2, r1
 8007070:	4291      	cmp	r1, r2
 8007072:	f100 33ff 	add.w	r3, r0, #4294967295
 8007076:	d100      	bne.n	800707a <memcpy+0xc>
 8007078:	4770      	bx	lr
 800707a:	b510      	push	{r4, lr}
 800707c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007084:	4291      	cmp	r1, r2
 8007086:	d1f9      	bne.n	800707c <memcpy+0xe>
 8007088:	bd10      	pop	{r4, pc}

0800708a <quorem>:
 800708a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708e:	6903      	ldr	r3, [r0, #16]
 8007090:	690c      	ldr	r4, [r1, #16]
 8007092:	42a3      	cmp	r3, r4
 8007094:	4607      	mov	r7, r0
 8007096:	db7e      	blt.n	8007196 <quorem+0x10c>
 8007098:	3c01      	subs	r4, #1
 800709a:	f101 0814 	add.w	r8, r1, #20
 800709e:	00a3      	lsls	r3, r4, #2
 80070a0:	f100 0514 	add.w	r5, r0, #20
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070aa:	9301      	str	r3, [sp, #4]
 80070ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070b4:	3301      	adds	r3, #1
 80070b6:	429a      	cmp	r2, r3
 80070b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80070c0:	d32e      	bcc.n	8007120 <quorem+0x96>
 80070c2:	f04f 0a00 	mov.w	sl, #0
 80070c6:	46c4      	mov	ip, r8
 80070c8:	46ae      	mov	lr, r5
 80070ca:	46d3      	mov	fp, sl
 80070cc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070d0:	b298      	uxth	r0, r3
 80070d2:	fb06 a000 	mla	r0, r6, r0, sl
 80070d6:	0c02      	lsrs	r2, r0, #16
 80070d8:	0c1b      	lsrs	r3, r3, #16
 80070da:	fb06 2303 	mla	r3, r6, r3, r2
 80070de:	f8de 2000 	ldr.w	r2, [lr]
 80070e2:	b280      	uxth	r0, r0
 80070e4:	b292      	uxth	r2, r2
 80070e6:	1a12      	subs	r2, r2, r0
 80070e8:	445a      	add	r2, fp
 80070ea:	f8de 0000 	ldr.w	r0, [lr]
 80070ee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070f8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070fc:	b292      	uxth	r2, r2
 80070fe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007102:	45e1      	cmp	r9, ip
 8007104:	f84e 2b04 	str.w	r2, [lr], #4
 8007108:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800710c:	d2de      	bcs.n	80070cc <quorem+0x42>
 800710e:	9b00      	ldr	r3, [sp, #0]
 8007110:	58eb      	ldr	r3, [r5, r3]
 8007112:	b92b      	cbnz	r3, 8007120 <quorem+0x96>
 8007114:	9b01      	ldr	r3, [sp, #4]
 8007116:	3b04      	subs	r3, #4
 8007118:	429d      	cmp	r5, r3
 800711a:	461a      	mov	r2, r3
 800711c:	d32f      	bcc.n	800717e <quorem+0xf4>
 800711e:	613c      	str	r4, [r7, #16]
 8007120:	4638      	mov	r0, r7
 8007122:	f001 f97b 	bl	800841c <__mcmp>
 8007126:	2800      	cmp	r0, #0
 8007128:	db25      	blt.n	8007176 <quorem+0xec>
 800712a:	4629      	mov	r1, r5
 800712c:	2000      	movs	r0, #0
 800712e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007132:	f8d1 c000 	ldr.w	ip, [r1]
 8007136:	fa1f fe82 	uxth.w	lr, r2
 800713a:	fa1f f38c 	uxth.w	r3, ip
 800713e:	eba3 030e 	sub.w	r3, r3, lr
 8007142:	4403      	add	r3, r0
 8007144:	0c12      	lsrs	r2, r2, #16
 8007146:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800714a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007154:	45c1      	cmp	r9, r8
 8007156:	f841 3b04 	str.w	r3, [r1], #4
 800715a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800715e:	d2e6      	bcs.n	800712e <quorem+0xa4>
 8007160:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007164:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007168:	b922      	cbnz	r2, 8007174 <quorem+0xea>
 800716a:	3b04      	subs	r3, #4
 800716c:	429d      	cmp	r5, r3
 800716e:	461a      	mov	r2, r3
 8007170:	d30b      	bcc.n	800718a <quorem+0x100>
 8007172:	613c      	str	r4, [r7, #16]
 8007174:	3601      	adds	r6, #1
 8007176:	4630      	mov	r0, r6
 8007178:	b003      	add	sp, #12
 800717a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	3b04      	subs	r3, #4
 8007182:	2a00      	cmp	r2, #0
 8007184:	d1cb      	bne.n	800711e <quorem+0x94>
 8007186:	3c01      	subs	r4, #1
 8007188:	e7c6      	b.n	8007118 <quorem+0x8e>
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	3b04      	subs	r3, #4
 800718e:	2a00      	cmp	r2, #0
 8007190:	d1ef      	bne.n	8007172 <quorem+0xe8>
 8007192:	3c01      	subs	r4, #1
 8007194:	e7ea      	b.n	800716c <quorem+0xe2>
 8007196:	2000      	movs	r0, #0
 8007198:	e7ee      	b.n	8007178 <quorem+0xee>
 800719a:	0000      	movs	r0, r0
 800719c:	0000      	movs	r0, r0
	...

080071a0 <_dtoa_r>:
 80071a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a4:	69c7      	ldr	r7, [r0, #28]
 80071a6:	b099      	sub	sp, #100	@ 0x64
 80071a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80071ac:	ec55 4b10 	vmov	r4, r5, d0
 80071b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80071b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80071b4:	4683      	mov	fp, r0
 80071b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80071b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071ba:	b97f      	cbnz	r7, 80071dc <_dtoa_r+0x3c>
 80071bc:	2010      	movs	r0, #16
 80071be:	f000 fdfd 	bl	8007dbc <malloc>
 80071c2:	4602      	mov	r2, r0
 80071c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80071c8:	b920      	cbnz	r0, 80071d4 <_dtoa_r+0x34>
 80071ca:	4ba7      	ldr	r3, [pc, #668]	@ (8007468 <_dtoa_r+0x2c8>)
 80071cc:	21ef      	movs	r1, #239	@ 0xef
 80071ce:	48a7      	ldr	r0, [pc, #668]	@ (800746c <_dtoa_r+0x2cc>)
 80071d0:	f001 fae8 	bl	80087a4 <__assert_func>
 80071d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071d8:	6007      	str	r7, [r0, #0]
 80071da:	60c7      	str	r7, [r0, #12]
 80071dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071e0:	6819      	ldr	r1, [r3, #0]
 80071e2:	b159      	cbz	r1, 80071fc <_dtoa_r+0x5c>
 80071e4:	685a      	ldr	r2, [r3, #4]
 80071e6:	604a      	str	r2, [r1, #4]
 80071e8:	2301      	movs	r3, #1
 80071ea:	4093      	lsls	r3, r2
 80071ec:	608b      	str	r3, [r1, #8]
 80071ee:	4658      	mov	r0, fp
 80071f0:	f000 feda 	bl	8007fa8 <_Bfree>
 80071f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	1e2b      	subs	r3, r5, #0
 80071fe:	bfb9      	ittee	lt
 8007200:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007204:	9303      	strlt	r3, [sp, #12]
 8007206:	2300      	movge	r3, #0
 8007208:	6033      	strge	r3, [r6, #0]
 800720a:	9f03      	ldr	r7, [sp, #12]
 800720c:	4b98      	ldr	r3, [pc, #608]	@ (8007470 <_dtoa_r+0x2d0>)
 800720e:	bfbc      	itt	lt
 8007210:	2201      	movlt	r2, #1
 8007212:	6032      	strlt	r2, [r6, #0]
 8007214:	43bb      	bics	r3, r7
 8007216:	d112      	bne.n	800723e <_dtoa_r+0x9e>
 8007218:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800721a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800721e:	6013      	str	r3, [r2, #0]
 8007220:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007224:	4323      	orrs	r3, r4
 8007226:	f000 854d 	beq.w	8007cc4 <_dtoa_r+0xb24>
 800722a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800722c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007484 <_dtoa_r+0x2e4>
 8007230:	2b00      	cmp	r3, #0
 8007232:	f000 854f 	beq.w	8007cd4 <_dtoa_r+0xb34>
 8007236:	f10a 0303 	add.w	r3, sl, #3
 800723a:	f000 bd49 	b.w	8007cd0 <_dtoa_r+0xb30>
 800723e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007242:	2200      	movs	r2, #0
 8007244:	ec51 0b17 	vmov	r0, r1, d7
 8007248:	2300      	movs	r3, #0
 800724a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800724e:	f7f9 fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007252:	4680      	mov	r8, r0
 8007254:	b158      	cbz	r0, 800726e <_dtoa_r+0xce>
 8007256:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007258:	2301      	movs	r3, #1
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800725e:	b113      	cbz	r3, 8007266 <_dtoa_r+0xc6>
 8007260:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007262:	4b84      	ldr	r3, [pc, #528]	@ (8007474 <_dtoa_r+0x2d4>)
 8007264:	6013      	str	r3, [r2, #0]
 8007266:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007488 <_dtoa_r+0x2e8>
 800726a:	f000 bd33 	b.w	8007cd4 <_dtoa_r+0xb34>
 800726e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007272:	aa16      	add	r2, sp, #88	@ 0x58
 8007274:	a917      	add	r1, sp, #92	@ 0x5c
 8007276:	4658      	mov	r0, fp
 8007278:	f001 f980 	bl	800857c <__d2b>
 800727c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007280:	4681      	mov	r9, r0
 8007282:	2e00      	cmp	r6, #0
 8007284:	d077      	beq.n	8007376 <_dtoa_r+0x1d6>
 8007286:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007288:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800728c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007290:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007294:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007298:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800729c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072a0:	4619      	mov	r1, r3
 80072a2:	2200      	movs	r2, #0
 80072a4:	4b74      	ldr	r3, [pc, #464]	@ (8007478 <_dtoa_r+0x2d8>)
 80072a6:	f7f8 ffef 	bl	8000288 <__aeabi_dsub>
 80072aa:	a369      	add	r3, pc, #420	@ (adr r3, 8007450 <_dtoa_r+0x2b0>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f9 f9a2 	bl	80005f8 <__aeabi_dmul>
 80072b4:	a368      	add	r3, pc, #416	@ (adr r3, 8007458 <_dtoa_r+0x2b8>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	f7f8 ffe7 	bl	800028c <__adddf3>
 80072be:	4604      	mov	r4, r0
 80072c0:	4630      	mov	r0, r6
 80072c2:	460d      	mov	r5, r1
 80072c4:	f7f9 f92e 	bl	8000524 <__aeabi_i2d>
 80072c8:	a365      	add	r3, pc, #404	@ (adr r3, 8007460 <_dtoa_r+0x2c0>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f9 f993 	bl	80005f8 <__aeabi_dmul>
 80072d2:	4602      	mov	r2, r0
 80072d4:	460b      	mov	r3, r1
 80072d6:	4620      	mov	r0, r4
 80072d8:	4629      	mov	r1, r5
 80072da:	f7f8 ffd7 	bl	800028c <__adddf3>
 80072de:	4604      	mov	r4, r0
 80072e0:	460d      	mov	r5, r1
 80072e2:	f7f9 fc39 	bl	8000b58 <__aeabi_d2iz>
 80072e6:	2200      	movs	r2, #0
 80072e8:	4607      	mov	r7, r0
 80072ea:	2300      	movs	r3, #0
 80072ec:	4620      	mov	r0, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	f7f9 fbf4 	bl	8000adc <__aeabi_dcmplt>
 80072f4:	b140      	cbz	r0, 8007308 <_dtoa_r+0x168>
 80072f6:	4638      	mov	r0, r7
 80072f8:	f7f9 f914 	bl	8000524 <__aeabi_i2d>
 80072fc:	4622      	mov	r2, r4
 80072fe:	462b      	mov	r3, r5
 8007300:	f7f9 fbe2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007304:	b900      	cbnz	r0, 8007308 <_dtoa_r+0x168>
 8007306:	3f01      	subs	r7, #1
 8007308:	2f16      	cmp	r7, #22
 800730a:	d851      	bhi.n	80073b0 <_dtoa_r+0x210>
 800730c:	4b5b      	ldr	r3, [pc, #364]	@ (800747c <_dtoa_r+0x2dc>)
 800730e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800731a:	f7f9 fbdf 	bl	8000adc <__aeabi_dcmplt>
 800731e:	2800      	cmp	r0, #0
 8007320:	d048      	beq.n	80073b4 <_dtoa_r+0x214>
 8007322:	3f01      	subs	r7, #1
 8007324:	2300      	movs	r3, #0
 8007326:	9312      	str	r3, [sp, #72]	@ 0x48
 8007328:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800732a:	1b9b      	subs	r3, r3, r6
 800732c:	1e5a      	subs	r2, r3, #1
 800732e:	bf44      	itt	mi
 8007330:	f1c3 0801 	rsbmi	r8, r3, #1
 8007334:	2300      	movmi	r3, #0
 8007336:	9208      	str	r2, [sp, #32]
 8007338:	bf54      	ite	pl
 800733a:	f04f 0800 	movpl.w	r8, #0
 800733e:	9308      	strmi	r3, [sp, #32]
 8007340:	2f00      	cmp	r7, #0
 8007342:	db39      	blt.n	80073b8 <_dtoa_r+0x218>
 8007344:	9b08      	ldr	r3, [sp, #32]
 8007346:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007348:	443b      	add	r3, r7
 800734a:	9308      	str	r3, [sp, #32]
 800734c:	2300      	movs	r3, #0
 800734e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007352:	2b09      	cmp	r3, #9
 8007354:	d864      	bhi.n	8007420 <_dtoa_r+0x280>
 8007356:	2b05      	cmp	r3, #5
 8007358:	bfc4      	itt	gt
 800735a:	3b04      	subgt	r3, #4
 800735c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800735e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007360:	f1a3 0302 	sub.w	r3, r3, #2
 8007364:	bfcc      	ite	gt
 8007366:	2400      	movgt	r4, #0
 8007368:	2401      	movle	r4, #1
 800736a:	2b03      	cmp	r3, #3
 800736c:	d863      	bhi.n	8007436 <_dtoa_r+0x296>
 800736e:	e8df f003 	tbb	[pc, r3]
 8007372:	372a      	.short	0x372a
 8007374:	5535      	.short	0x5535
 8007376:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800737a:	441e      	add	r6, r3
 800737c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007380:	2b20      	cmp	r3, #32
 8007382:	bfc1      	itttt	gt
 8007384:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007388:	409f      	lslgt	r7, r3
 800738a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800738e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007392:	bfd6      	itet	le
 8007394:	f1c3 0320 	rsble	r3, r3, #32
 8007398:	ea47 0003 	orrgt.w	r0, r7, r3
 800739c:	fa04 f003 	lslle.w	r0, r4, r3
 80073a0:	f7f9 f8b0 	bl	8000504 <__aeabi_ui2d>
 80073a4:	2201      	movs	r2, #1
 80073a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073aa:	3e01      	subs	r6, #1
 80073ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80073ae:	e777      	b.n	80072a0 <_dtoa_r+0x100>
 80073b0:	2301      	movs	r3, #1
 80073b2:	e7b8      	b.n	8007326 <_dtoa_r+0x186>
 80073b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80073b6:	e7b7      	b.n	8007328 <_dtoa_r+0x188>
 80073b8:	427b      	negs	r3, r7
 80073ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80073bc:	2300      	movs	r3, #0
 80073be:	eba8 0807 	sub.w	r8, r8, r7
 80073c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80073c4:	e7c4      	b.n	8007350 <_dtoa_r+0x1b0>
 80073c6:	2300      	movs	r3, #0
 80073c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dc35      	bgt.n	800743c <_dtoa_r+0x29c>
 80073d0:	2301      	movs	r3, #1
 80073d2:	9300      	str	r3, [sp, #0]
 80073d4:	9307      	str	r3, [sp, #28]
 80073d6:	461a      	mov	r2, r3
 80073d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80073da:	e00b      	b.n	80073f4 <_dtoa_r+0x254>
 80073dc:	2301      	movs	r3, #1
 80073de:	e7f3      	b.n	80073c8 <_dtoa_r+0x228>
 80073e0:	2300      	movs	r3, #0
 80073e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80073e6:	18fb      	adds	r3, r7, r3
 80073e8:	9300      	str	r3, [sp, #0]
 80073ea:	3301      	adds	r3, #1
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	9307      	str	r3, [sp, #28]
 80073f0:	bfb8      	it	lt
 80073f2:	2301      	movlt	r3, #1
 80073f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80073f8:	2100      	movs	r1, #0
 80073fa:	2204      	movs	r2, #4
 80073fc:	f102 0514 	add.w	r5, r2, #20
 8007400:	429d      	cmp	r5, r3
 8007402:	d91f      	bls.n	8007444 <_dtoa_r+0x2a4>
 8007404:	6041      	str	r1, [r0, #4]
 8007406:	4658      	mov	r0, fp
 8007408:	f000 fd8e 	bl	8007f28 <_Balloc>
 800740c:	4682      	mov	sl, r0
 800740e:	2800      	cmp	r0, #0
 8007410:	d13c      	bne.n	800748c <_dtoa_r+0x2ec>
 8007412:	4b1b      	ldr	r3, [pc, #108]	@ (8007480 <_dtoa_r+0x2e0>)
 8007414:	4602      	mov	r2, r0
 8007416:	f240 11af 	movw	r1, #431	@ 0x1af
 800741a:	e6d8      	b.n	80071ce <_dtoa_r+0x2e>
 800741c:	2301      	movs	r3, #1
 800741e:	e7e0      	b.n	80073e2 <_dtoa_r+0x242>
 8007420:	2401      	movs	r4, #1
 8007422:	2300      	movs	r3, #0
 8007424:	9309      	str	r3, [sp, #36]	@ 0x24
 8007426:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007428:	f04f 33ff 	mov.w	r3, #4294967295
 800742c:	9300      	str	r3, [sp, #0]
 800742e:	9307      	str	r3, [sp, #28]
 8007430:	2200      	movs	r2, #0
 8007432:	2312      	movs	r3, #18
 8007434:	e7d0      	b.n	80073d8 <_dtoa_r+0x238>
 8007436:	2301      	movs	r3, #1
 8007438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800743a:	e7f5      	b.n	8007428 <_dtoa_r+0x288>
 800743c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	9307      	str	r3, [sp, #28]
 8007442:	e7d7      	b.n	80073f4 <_dtoa_r+0x254>
 8007444:	3101      	adds	r1, #1
 8007446:	0052      	lsls	r2, r2, #1
 8007448:	e7d8      	b.n	80073fc <_dtoa_r+0x25c>
 800744a:	bf00      	nop
 800744c:	f3af 8000 	nop.w
 8007450:	636f4361 	.word	0x636f4361
 8007454:	3fd287a7 	.word	0x3fd287a7
 8007458:	8b60c8b3 	.word	0x8b60c8b3
 800745c:	3fc68a28 	.word	0x3fc68a28
 8007460:	509f79fb 	.word	0x509f79fb
 8007464:	3fd34413 	.word	0x3fd34413
 8007468:	08008f19 	.word	0x08008f19
 800746c:	08008f30 	.word	0x08008f30
 8007470:	7ff00000 	.word	0x7ff00000
 8007474:	08008ee9 	.word	0x08008ee9
 8007478:	3ff80000 	.word	0x3ff80000
 800747c:	08009028 	.word	0x08009028
 8007480:	08008f88 	.word	0x08008f88
 8007484:	08008f15 	.word	0x08008f15
 8007488:	08008ee8 	.word	0x08008ee8
 800748c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007490:	6018      	str	r0, [r3, #0]
 8007492:	9b07      	ldr	r3, [sp, #28]
 8007494:	2b0e      	cmp	r3, #14
 8007496:	f200 80a4 	bhi.w	80075e2 <_dtoa_r+0x442>
 800749a:	2c00      	cmp	r4, #0
 800749c:	f000 80a1 	beq.w	80075e2 <_dtoa_r+0x442>
 80074a0:	2f00      	cmp	r7, #0
 80074a2:	dd33      	ble.n	800750c <_dtoa_r+0x36c>
 80074a4:	4bad      	ldr	r3, [pc, #692]	@ (800775c <_dtoa_r+0x5bc>)
 80074a6:	f007 020f 	and.w	r2, r7, #15
 80074aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074ae:	ed93 7b00 	vldr	d7, [r3]
 80074b2:	05f8      	lsls	r0, r7, #23
 80074b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80074b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074bc:	d516      	bpl.n	80074ec <_dtoa_r+0x34c>
 80074be:	4ba8      	ldr	r3, [pc, #672]	@ (8007760 <_dtoa_r+0x5c0>)
 80074c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80074c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c8:	f7f9 f9c0 	bl	800084c <__aeabi_ddiv>
 80074cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d0:	f004 040f 	and.w	r4, r4, #15
 80074d4:	2603      	movs	r6, #3
 80074d6:	4da2      	ldr	r5, [pc, #648]	@ (8007760 <_dtoa_r+0x5c0>)
 80074d8:	b954      	cbnz	r4, 80074f0 <_dtoa_r+0x350>
 80074da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e2:	f7f9 f9b3 	bl	800084c <__aeabi_ddiv>
 80074e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074ea:	e028      	b.n	800753e <_dtoa_r+0x39e>
 80074ec:	2602      	movs	r6, #2
 80074ee:	e7f2      	b.n	80074d6 <_dtoa_r+0x336>
 80074f0:	07e1      	lsls	r1, r4, #31
 80074f2:	d508      	bpl.n	8007506 <_dtoa_r+0x366>
 80074f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074fc:	f7f9 f87c 	bl	80005f8 <__aeabi_dmul>
 8007500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007504:	3601      	adds	r6, #1
 8007506:	1064      	asrs	r4, r4, #1
 8007508:	3508      	adds	r5, #8
 800750a:	e7e5      	b.n	80074d8 <_dtoa_r+0x338>
 800750c:	f000 80d2 	beq.w	80076b4 <_dtoa_r+0x514>
 8007510:	427c      	negs	r4, r7
 8007512:	4b92      	ldr	r3, [pc, #584]	@ (800775c <_dtoa_r+0x5bc>)
 8007514:	4d92      	ldr	r5, [pc, #584]	@ (8007760 <_dtoa_r+0x5c0>)
 8007516:	f004 020f 	and.w	r2, r4, #15
 800751a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007522:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007526:	f7f9 f867 	bl	80005f8 <__aeabi_dmul>
 800752a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800752e:	1124      	asrs	r4, r4, #4
 8007530:	2300      	movs	r3, #0
 8007532:	2602      	movs	r6, #2
 8007534:	2c00      	cmp	r4, #0
 8007536:	f040 80b2 	bne.w	800769e <_dtoa_r+0x4fe>
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1d3      	bne.n	80074e6 <_dtoa_r+0x346>
 800753e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007540:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007544:	2b00      	cmp	r3, #0
 8007546:	f000 80b7 	beq.w	80076b8 <_dtoa_r+0x518>
 800754a:	4b86      	ldr	r3, [pc, #536]	@ (8007764 <_dtoa_r+0x5c4>)
 800754c:	2200      	movs	r2, #0
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fac3 	bl	8000adc <__aeabi_dcmplt>
 8007556:	2800      	cmp	r0, #0
 8007558:	f000 80ae 	beq.w	80076b8 <_dtoa_r+0x518>
 800755c:	9b07      	ldr	r3, [sp, #28]
 800755e:	2b00      	cmp	r3, #0
 8007560:	f000 80aa 	beq.w	80076b8 <_dtoa_r+0x518>
 8007564:	9b00      	ldr	r3, [sp, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	dd37      	ble.n	80075da <_dtoa_r+0x43a>
 800756a:	1e7b      	subs	r3, r7, #1
 800756c:	9304      	str	r3, [sp, #16]
 800756e:	4620      	mov	r0, r4
 8007570:	4b7d      	ldr	r3, [pc, #500]	@ (8007768 <_dtoa_r+0x5c8>)
 8007572:	2200      	movs	r2, #0
 8007574:	4629      	mov	r1, r5
 8007576:	f7f9 f83f 	bl	80005f8 <__aeabi_dmul>
 800757a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800757e:	9c00      	ldr	r4, [sp, #0]
 8007580:	3601      	adds	r6, #1
 8007582:	4630      	mov	r0, r6
 8007584:	f7f8 ffce 	bl	8000524 <__aeabi_i2d>
 8007588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800758c:	f7f9 f834 	bl	80005f8 <__aeabi_dmul>
 8007590:	4b76      	ldr	r3, [pc, #472]	@ (800776c <_dtoa_r+0x5cc>)
 8007592:	2200      	movs	r2, #0
 8007594:	f7f8 fe7a 	bl	800028c <__adddf3>
 8007598:	4605      	mov	r5, r0
 800759a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800759e:	2c00      	cmp	r4, #0
 80075a0:	f040 808d 	bne.w	80076be <_dtoa_r+0x51e>
 80075a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075a8:	4b71      	ldr	r3, [pc, #452]	@ (8007770 <_dtoa_r+0x5d0>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	f7f8 fe6c 	bl	8000288 <__aeabi_dsub>
 80075b0:	4602      	mov	r2, r0
 80075b2:	460b      	mov	r3, r1
 80075b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80075b8:	462a      	mov	r2, r5
 80075ba:	4633      	mov	r3, r6
 80075bc:	f7f9 faac 	bl	8000b18 <__aeabi_dcmpgt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f040 828b 	bne.w	8007adc <_dtoa_r+0x93c>
 80075c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075ca:	462a      	mov	r2, r5
 80075cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075d0:	f7f9 fa84 	bl	8000adc <__aeabi_dcmplt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	f040 8128 	bne.w	800782a <_dtoa_r+0x68a>
 80075da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80075de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80075e2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f2c0 815a 	blt.w	800789e <_dtoa_r+0x6fe>
 80075ea:	2f0e      	cmp	r7, #14
 80075ec:	f300 8157 	bgt.w	800789e <_dtoa_r+0x6fe>
 80075f0:	4b5a      	ldr	r3, [pc, #360]	@ (800775c <_dtoa_r+0x5bc>)
 80075f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075f6:	ed93 7b00 	vldr	d7, [r3]
 80075fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	ed8d 7b00 	vstr	d7, [sp]
 8007602:	da03      	bge.n	800760c <_dtoa_r+0x46c>
 8007604:	9b07      	ldr	r3, [sp, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f340 8101 	ble.w	800780e <_dtoa_r+0x66e>
 800760c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007610:	4656      	mov	r6, sl
 8007612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007616:	4620      	mov	r0, r4
 8007618:	4629      	mov	r1, r5
 800761a:	f7f9 f917 	bl	800084c <__aeabi_ddiv>
 800761e:	f7f9 fa9b 	bl	8000b58 <__aeabi_d2iz>
 8007622:	4680      	mov	r8, r0
 8007624:	f7f8 ff7e 	bl	8000524 <__aeabi_i2d>
 8007628:	e9dd 2300 	ldrd	r2, r3, [sp]
 800762c:	f7f8 ffe4 	bl	80005f8 <__aeabi_dmul>
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	4620      	mov	r0, r4
 8007636:	4629      	mov	r1, r5
 8007638:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800763c:	f7f8 fe24 	bl	8000288 <__aeabi_dsub>
 8007640:	f806 4b01 	strb.w	r4, [r6], #1
 8007644:	9d07      	ldr	r5, [sp, #28]
 8007646:	eba6 040a 	sub.w	r4, r6, sl
 800764a:	42a5      	cmp	r5, r4
 800764c:	4602      	mov	r2, r0
 800764e:	460b      	mov	r3, r1
 8007650:	f040 8117 	bne.w	8007882 <_dtoa_r+0x6e2>
 8007654:	f7f8 fe1a 	bl	800028c <__adddf3>
 8007658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	f7f9 fa5a 	bl	8000b18 <__aeabi_dcmpgt>
 8007664:	2800      	cmp	r0, #0
 8007666:	f040 80f9 	bne.w	800785c <_dtoa_r+0x6bc>
 800766a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800766e:	4620      	mov	r0, r4
 8007670:	4629      	mov	r1, r5
 8007672:	f7f9 fa29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007676:	b118      	cbz	r0, 8007680 <_dtoa_r+0x4e0>
 8007678:	f018 0f01 	tst.w	r8, #1
 800767c:	f040 80ee 	bne.w	800785c <_dtoa_r+0x6bc>
 8007680:	4649      	mov	r1, r9
 8007682:	4658      	mov	r0, fp
 8007684:	f000 fc90 	bl	8007fa8 <_Bfree>
 8007688:	2300      	movs	r3, #0
 800768a:	7033      	strb	r3, [r6, #0]
 800768c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800768e:	3701      	adds	r7, #1
 8007690:	601f      	str	r7, [r3, #0]
 8007692:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007694:	2b00      	cmp	r3, #0
 8007696:	f000 831d 	beq.w	8007cd4 <_dtoa_r+0xb34>
 800769a:	601e      	str	r6, [r3, #0]
 800769c:	e31a      	b.n	8007cd4 <_dtoa_r+0xb34>
 800769e:	07e2      	lsls	r2, r4, #31
 80076a0:	d505      	bpl.n	80076ae <_dtoa_r+0x50e>
 80076a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076a6:	f7f8 ffa7 	bl	80005f8 <__aeabi_dmul>
 80076aa:	3601      	adds	r6, #1
 80076ac:	2301      	movs	r3, #1
 80076ae:	1064      	asrs	r4, r4, #1
 80076b0:	3508      	adds	r5, #8
 80076b2:	e73f      	b.n	8007534 <_dtoa_r+0x394>
 80076b4:	2602      	movs	r6, #2
 80076b6:	e742      	b.n	800753e <_dtoa_r+0x39e>
 80076b8:	9c07      	ldr	r4, [sp, #28]
 80076ba:	9704      	str	r7, [sp, #16]
 80076bc:	e761      	b.n	8007582 <_dtoa_r+0x3e2>
 80076be:	4b27      	ldr	r3, [pc, #156]	@ (800775c <_dtoa_r+0x5bc>)
 80076c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80076c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076c6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076ca:	4454      	add	r4, sl
 80076cc:	2900      	cmp	r1, #0
 80076ce:	d053      	beq.n	8007778 <_dtoa_r+0x5d8>
 80076d0:	4928      	ldr	r1, [pc, #160]	@ (8007774 <_dtoa_r+0x5d4>)
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f9 f8ba 	bl	800084c <__aeabi_ddiv>
 80076d8:	4633      	mov	r3, r6
 80076da:	462a      	mov	r2, r5
 80076dc:	f7f8 fdd4 	bl	8000288 <__aeabi_dsub>
 80076e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80076e4:	4656      	mov	r6, sl
 80076e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076ea:	f7f9 fa35 	bl	8000b58 <__aeabi_d2iz>
 80076ee:	4605      	mov	r5, r0
 80076f0:	f7f8 ff18 	bl	8000524 <__aeabi_i2d>
 80076f4:	4602      	mov	r2, r0
 80076f6:	460b      	mov	r3, r1
 80076f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80076fc:	f7f8 fdc4 	bl	8000288 <__aeabi_dsub>
 8007700:	3530      	adds	r5, #48	@ 0x30
 8007702:	4602      	mov	r2, r0
 8007704:	460b      	mov	r3, r1
 8007706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800770a:	f806 5b01 	strb.w	r5, [r6], #1
 800770e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007712:	f7f9 f9e3 	bl	8000adc <__aeabi_dcmplt>
 8007716:	2800      	cmp	r0, #0
 8007718:	d171      	bne.n	80077fe <_dtoa_r+0x65e>
 800771a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800771e:	4911      	ldr	r1, [pc, #68]	@ (8007764 <_dtoa_r+0x5c4>)
 8007720:	2000      	movs	r0, #0
 8007722:	f7f8 fdb1 	bl	8000288 <__aeabi_dsub>
 8007726:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800772a:	f7f9 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800772e:	2800      	cmp	r0, #0
 8007730:	f040 8095 	bne.w	800785e <_dtoa_r+0x6be>
 8007734:	42a6      	cmp	r6, r4
 8007736:	f43f af50 	beq.w	80075da <_dtoa_r+0x43a>
 800773a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800773e:	4b0a      	ldr	r3, [pc, #40]	@ (8007768 <_dtoa_r+0x5c8>)
 8007740:	2200      	movs	r2, #0
 8007742:	f7f8 ff59 	bl	80005f8 <__aeabi_dmul>
 8007746:	4b08      	ldr	r3, [pc, #32]	@ (8007768 <_dtoa_r+0x5c8>)
 8007748:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800774c:	2200      	movs	r2, #0
 800774e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007752:	f7f8 ff51 	bl	80005f8 <__aeabi_dmul>
 8007756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800775a:	e7c4      	b.n	80076e6 <_dtoa_r+0x546>
 800775c:	08009028 	.word	0x08009028
 8007760:	08009000 	.word	0x08009000
 8007764:	3ff00000 	.word	0x3ff00000
 8007768:	40240000 	.word	0x40240000
 800776c:	401c0000 	.word	0x401c0000
 8007770:	40140000 	.word	0x40140000
 8007774:	3fe00000 	.word	0x3fe00000
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	f7f8 ff3c 	bl	80005f8 <__aeabi_dmul>
 8007780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007784:	9415      	str	r4, [sp, #84]	@ 0x54
 8007786:	4656      	mov	r6, sl
 8007788:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800778c:	f7f9 f9e4 	bl	8000b58 <__aeabi_d2iz>
 8007790:	4605      	mov	r5, r0
 8007792:	f7f8 fec7 	bl	8000524 <__aeabi_i2d>
 8007796:	4602      	mov	r2, r0
 8007798:	460b      	mov	r3, r1
 800779a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800779e:	f7f8 fd73 	bl	8000288 <__aeabi_dsub>
 80077a2:	3530      	adds	r5, #48	@ 0x30
 80077a4:	f806 5b01 	strb.w	r5, [r6], #1
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	42a6      	cmp	r6, r4
 80077ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80077b2:	f04f 0200 	mov.w	r2, #0
 80077b6:	d124      	bne.n	8007802 <_dtoa_r+0x662>
 80077b8:	4bac      	ldr	r3, [pc, #688]	@ (8007a6c <_dtoa_r+0x8cc>)
 80077ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80077be:	f7f8 fd65 	bl	800028c <__adddf3>
 80077c2:	4602      	mov	r2, r0
 80077c4:	460b      	mov	r3, r1
 80077c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077ca:	f7f9 f9a5 	bl	8000b18 <__aeabi_dcmpgt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d145      	bne.n	800785e <_dtoa_r+0x6be>
 80077d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80077d6:	49a5      	ldr	r1, [pc, #660]	@ (8007a6c <_dtoa_r+0x8cc>)
 80077d8:	2000      	movs	r0, #0
 80077da:	f7f8 fd55 	bl	8000288 <__aeabi_dsub>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80077e6:	f7f9 f979 	bl	8000adc <__aeabi_dcmplt>
 80077ea:	2800      	cmp	r0, #0
 80077ec:	f43f aef5 	beq.w	80075da <_dtoa_r+0x43a>
 80077f0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80077f2:	1e73      	subs	r3, r6, #1
 80077f4:	9315      	str	r3, [sp, #84]	@ 0x54
 80077f6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077fa:	2b30      	cmp	r3, #48	@ 0x30
 80077fc:	d0f8      	beq.n	80077f0 <_dtoa_r+0x650>
 80077fe:	9f04      	ldr	r7, [sp, #16]
 8007800:	e73e      	b.n	8007680 <_dtoa_r+0x4e0>
 8007802:	4b9b      	ldr	r3, [pc, #620]	@ (8007a70 <_dtoa_r+0x8d0>)
 8007804:	f7f8 fef8 	bl	80005f8 <__aeabi_dmul>
 8007808:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800780c:	e7bc      	b.n	8007788 <_dtoa_r+0x5e8>
 800780e:	d10c      	bne.n	800782a <_dtoa_r+0x68a>
 8007810:	4b98      	ldr	r3, [pc, #608]	@ (8007a74 <_dtoa_r+0x8d4>)
 8007812:	2200      	movs	r2, #0
 8007814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007818:	f7f8 feee 	bl	80005f8 <__aeabi_dmul>
 800781c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007820:	f7f9 f970 	bl	8000b04 <__aeabi_dcmpge>
 8007824:	2800      	cmp	r0, #0
 8007826:	f000 8157 	beq.w	8007ad8 <_dtoa_r+0x938>
 800782a:	2400      	movs	r4, #0
 800782c:	4625      	mov	r5, r4
 800782e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007830:	43db      	mvns	r3, r3
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	4656      	mov	r6, sl
 8007836:	2700      	movs	r7, #0
 8007838:	4621      	mov	r1, r4
 800783a:	4658      	mov	r0, fp
 800783c:	f000 fbb4 	bl	8007fa8 <_Bfree>
 8007840:	2d00      	cmp	r5, #0
 8007842:	d0dc      	beq.n	80077fe <_dtoa_r+0x65e>
 8007844:	b12f      	cbz	r7, 8007852 <_dtoa_r+0x6b2>
 8007846:	42af      	cmp	r7, r5
 8007848:	d003      	beq.n	8007852 <_dtoa_r+0x6b2>
 800784a:	4639      	mov	r1, r7
 800784c:	4658      	mov	r0, fp
 800784e:	f000 fbab 	bl	8007fa8 <_Bfree>
 8007852:	4629      	mov	r1, r5
 8007854:	4658      	mov	r0, fp
 8007856:	f000 fba7 	bl	8007fa8 <_Bfree>
 800785a:	e7d0      	b.n	80077fe <_dtoa_r+0x65e>
 800785c:	9704      	str	r7, [sp, #16]
 800785e:	4633      	mov	r3, r6
 8007860:	461e      	mov	r6, r3
 8007862:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007866:	2a39      	cmp	r2, #57	@ 0x39
 8007868:	d107      	bne.n	800787a <_dtoa_r+0x6da>
 800786a:	459a      	cmp	sl, r3
 800786c:	d1f8      	bne.n	8007860 <_dtoa_r+0x6c0>
 800786e:	9a04      	ldr	r2, [sp, #16]
 8007870:	3201      	adds	r2, #1
 8007872:	9204      	str	r2, [sp, #16]
 8007874:	2230      	movs	r2, #48	@ 0x30
 8007876:	f88a 2000 	strb.w	r2, [sl]
 800787a:	781a      	ldrb	r2, [r3, #0]
 800787c:	3201      	adds	r2, #1
 800787e:	701a      	strb	r2, [r3, #0]
 8007880:	e7bd      	b.n	80077fe <_dtoa_r+0x65e>
 8007882:	4b7b      	ldr	r3, [pc, #492]	@ (8007a70 <_dtoa_r+0x8d0>)
 8007884:	2200      	movs	r2, #0
 8007886:	f7f8 feb7 	bl	80005f8 <__aeabi_dmul>
 800788a:	2200      	movs	r2, #0
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	460d      	mov	r5, r1
 8007892:	f7f9 f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8007896:	2800      	cmp	r0, #0
 8007898:	f43f aebb 	beq.w	8007612 <_dtoa_r+0x472>
 800789c:	e6f0      	b.n	8007680 <_dtoa_r+0x4e0>
 800789e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078a0:	2a00      	cmp	r2, #0
 80078a2:	f000 80db 	beq.w	8007a5c <_dtoa_r+0x8bc>
 80078a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078a8:	2a01      	cmp	r2, #1
 80078aa:	f300 80bf 	bgt.w	8007a2c <_dtoa_r+0x88c>
 80078ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80078b0:	2a00      	cmp	r2, #0
 80078b2:	f000 80b7 	beq.w	8007a24 <_dtoa_r+0x884>
 80078b6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078ba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80078bc:	4646      	mov	r6, r8
 80078be:	9a08      	ldr	r2, [sp, #32]
 80078c0:	2101      	movs	r1, #1
 80078c2:	441a      	add	r2, r3
 80078c4:	4658      	mov	r0, fp
 80078c6:	4498      	add	r8, r3
 80078c8:	9208      	str	r2, [sp, #32]
 80078ca:	f000 fc21 	bl	8008110 <__i2b>
 80078ce:	4605      	mov	r5, r0
 80078d0:	b15e      	cbz	r6, 80078ea <_dtoa_r+0x74a>
 80078d2:	9b08      	ldr	r3, [sp, #32]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	dd08      	ble.n	80078ea <_dtoa_r+0x74a>
 80078d8:	42b3      	cmp	r3, r6
 80078da:	9a08      	ldr	r2, [sp, #32]
 80078dc:	bfa8      	it	ge
 80078de:	4633      	movge	r3, r6
 80078e0:	eba8 0803 	sub.w	r8, r8, r3
 80078e4:	1af6      	subs	r6, r6, r3
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	9308      	str	r3, [sp, #32]
 80078ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ec:	b1f3      	cbz	r3, 800792c <_dtoa_r+0x78c>
 80078ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f000 80b7 	beq.w	8007a64 <_dtoa_r+0x8c4>
 80078f6:	b18c      	cbz	r4, 800791c <_dtoa_r+0x77c>
 80078f8:	4629      	mov	r1, r5
 80078fa:	4622      	mov	r2, r4
 80078fc:	4658      	mov	r0, fp
 80078fe:	f000 fcc7 	bl	8008290 <__pow5mult>
 8007902:	464a      	mov	r2, r9
 8007904:	4601      	mov	r1, r0
 8007906:	4605      	mov	r5, r0
 8007908:	4658      	mov	r0, fp
 800790a:	f000 fc17 	bl	800813c <__multiply>
 800790e:	4649      	mov	r1, r9
 8007910:	9004      	str	r0, [sp, #16]
 8007912:	4658      	mov	r0, fp
 8007914:	f000 fb48 	bl	8007fa8 <_Bfree>
 8007918:	9b04      	ldr	r3, [sp, #16]
 800791a:	4699      	mov	r9, r3
 800791c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791e:	1b1a      	subs	r2, r3, r4
 8007920:	d004      	beq.n	800792c <_dtoa_r+0x78c>
 8007922:	4649      	mov	r1, r9
 8007924:	4658      	mov	r0, fp
 8007926:	f000 fcb3 	bl	8008290 <__pow5mult>
 800792a:	4681      	mov	r9, r0
 800792c:	2101      	movs	r1, #1
 800792e:	4658      	mov	r0, fp
 8007930:	f000 fbee 	bl	8008110 <__i2b>
 8007934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007936:	4604      	mov	r4, r0
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 81cf 	beq.w	8007cdc <_dtoa_r+0xb3c>
 800793e:	461a      	mov	r2, r3
 8007940:	4601      	mov	r1, r0
 8007942:	4658      	mov	r0, fp
 8007944:	f000 fca4 	bl	8008290 <__pow5mult>
 8007948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800794a:	2b01      	cmp	r3, #1
 800794c:	4604      	mov	r4, r0
 800794e:	f300 8095 	bgt.w	8007a7c <_dtoa_r+0x8dc>
 8007952:	9b02      	ldr	r3, [sp, #8]
 8007954:	2b00      	cmp	r3, #0
 8007956:	f040 8087 	bne.w	8007a68 <_dtoa_r+0x8c8>
 800795a:	9b03      	ldr	r3, [sp, #12]
 800795c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007960:	2b00      	cmp	r3, #0
 8007962:	f040 8089 	bne.w	8007a78 <_dtoa_r+0x8d8>
 8007966:	9b03      	ldr	r3, [sp, #12]
 8007968:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800796c:	0d1b      	lsrs	r3, r3, #20
 800796e:	051b      	lsls	r3, r3, #20
 8007970:	b12b      	cbz	r3, 800797e <_dtoa_r+0x7de>
 8007972:	9b08      	ldr	r3, [sp, #32]
 8007974:	3301      	adds	r3, #1
 8007976:	9308      	str	r3, [sp, #32]
 8007978:	f108 0801 	add.w	r8, r8, #1
 800797c:	2301      	movs	r3, #1
 800797e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 81b0 	beq.w	8007ce8 <_dtoa_r+0xb48>
 8007988:	6923      	ldr	r3, [r4, #16]
 800798a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800798e:	6918      	ldr	r0, [r3, #16]
 8007990:	f000 fb72 	bl	8008078 <__hi0bits>
 8007994:	f1c0 0020 	rsb	r0, r0, #32
 8007998:	9b08      	ldr	r3, [sp, #32]
 800799a:	4418      	add	r0, r3
 800799c:	f010 001f 	ands.w	r0, r0, #31
 80079a0:	d077      	beq.n	8007a92 <_dtoa_r+0x8f2>
 80079a2:	f1c0 0320 	rsb	r3, r0, #32
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	dd6b      	ble.n	8007a82 <_dtoa_r+0x8e2>
 80079aa:	9b08      	ldr	r3, [sp, #32]
 80079ac:	f1c0 001c 	rsb	r0, r0, #28
 80079b0:	4403      	add	r3, r0
 80079b2:	4480      	add	r8, r0
 80079b4:	4406      	add	r6, r0
 80079b6:	9308      	str	r3, [sp, #32]
 80079b8:	f1b8 0f00 	cmp.w	r8, #0
 80079bc:	dd05      	ble.n	80079ca <_dtoa_r+0x82a>
 80079be:	4649      	mov	r1, r9
 80079c0:	4642      	mov	r2, r8
 80079c2:	4658      	mov	r0, fp
 80079c4:	f000 fcbe 	bl	8008344 <__lshift>
 80079c8:	4681      	mov	r9, r0
 80079ca:	9b08      	ldr	r3, [sp, #32]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x83c>
 80079d0:	4621      	mov	r1, r4
 80079d2:	461a      	mov	r2, r3
 80079d4:	4658      	mov	r0, fp
 80079d6:	f000 fcb5 	bl	8008344 <__lshift>
 80079da:	4604      	mov	r4, r0
 80079dc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d059      	beq.n	8007a96 <_dtoa_r+0x8f6>
 80079e2:	4621      	mov	r1, r4
 80079e4:	4648      	mov	r0, r9
 80079e6:	f000 fd19 	bl	800841c <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	da53      	bge.n	8007a96 <_dtoa_r+0x8f6>
 80079ee:	1e7b      	subs	r3, r7, #1
 80079f0:	9304      	str	r3, [sp, #16]
 80079f2:	4649      	mov	r1, r9
 80079f4:	2300      	movs	r3, #0
 80079f6:	220a      	movs	r2, #10
 80079f8:	4658      	mov	r0, fp
 80079fa:	f000 faf7 	bl	8007fec <__multadd>
 80079fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a00:	4681      	mov	r9, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8172 	beq.w	8007cec <_dtoa_r+0xb4c>
 8007a08:	2300      	movs	r3, #0
 8007a0a:	4629      	mov	r1, r5
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	4658      	mov	r0, fp
 8007a10:	f000 faec 	bl	8007fec <__multadd>
 8007a14:	9b00      	ldr	r3, [sp, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	4605      	mov	r5, r0
 8007a1a:	dc67      	bgt.n	8007aec <_dtoa_r+0x94c>
 8007a1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	dc41      	bgt.n	8007aa6 <_dtoa_r+0x906>
 8007a22:	e063      	b.n	8007aec <_dtoa_r+0x94c>
 8007a24:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a2a:	e746      	b.n	80078ba <_dtoa_r+0x71a>
 8007a2c:	9b07      	ldr	r3, [sp, #28]
 8007a2e:	1e5c      	subs	r4, r3, #1
 8007a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	bfbf      	itttt	lt
 8007a36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007a38:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007a3a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007a3c:	1ae3      	sublt	r3, r4, r3
 8007a3e:	bfb4      	ite	lt
 8007a40:	18d2      	addlt	r2, r2, r3
 8007a42:	1b1c      	subge	r4, r3, r4
 8007a44:	9b07      	ldr	r3, [sp, #28]
 8007a46:	bfbc      	itt	lt
 8007a48:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007a4a:	2400      	movlt	r4, #0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	bfb5      	itete	lt
 8007a50:	eba8 0603 	sublt.w	r6, r8, r3
 8007a54:	9b07      	ldrge	r3, [sp, #28]
 8007a56:	2300      	movlt	r3, #0
 8007a58:	4646      	movge	r6, r8
 8007a5a:	e730      	b.n	80078be <_dtoa_r+0x71e>
 8007a5c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007a5e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007a60:	4646      	mov	r6, r8
 8007a62:	e735      	b.n	80078d0 <_dtoa_r+0x730>
 8007a64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a66:	e75c      	b.n	8007922 <_dtoa_r+0x782>
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e788      	b.n	800797e <_dtoa_r+0x7de>
 8007a6c:	3fe00000 	.word	0x3fe00000
 8007a70:	40240000 	.word	0x40240000
 8007a74:	40140000 	.word	0x40140000
 8007a78:	9b02      	ldr	r3, [sp, #8]
 8007a7a:	e780      	b.n	800797e <_dtoa_r+0x7de>
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a80:	e782      	b.n	8007988 <_dtoa_r+0x7e8>
 8007a82:	d099      	beq.n	80079b8 <_dtoa_r+0x818>
 8007a84:	9a08      	ldr	r2, [sp, #32]
 8007a86:	331c      	adds	r3, #28
 8007a88:	441a      	add	r2, r3
 8007a8a:	4498      	add	r8, r3
 8007a8c:	441e      	add	r6, r3
 8007a8e:	9208      	str	r2, [sp, #32]
 8007a90:	e792      	b.n	80079b8 <_dtoa_r+0x818>
 8007a92:	4603      	mov	r3, r0
 8007a94:	e7f6      	b.n	8007a84 <_dtoa_r+0x8e4>
 8007a96:	9b07      	ldr	r3, [sp, #28]
 8007a98:	9704      	str	r7, [sp, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	dc20      	bgt.n	8007ae0 <_dtoa_r+0x940>
 8007a9e:	9300      	str	r3, [sp, #0]
 8007aa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa2:	2b02      	cmp	r3, #2
 8007aa4:	dd1e      	ble.n	8007ae4 <_dtoa_r+0x944>
 8007aa6:	9b00      	ldr	r3, [sp, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f47f aec0 	bne.w	800782e <_dtoa_r+0x68e>
 8007aae:	4621      	mov	r1, r4
 8007ab0:	2205      	movs	r2, #5
 8007ab2:	4658      	mov	r0, fp
 8007ab4:	f000 fa9a 	bl	8007fec <__multadd>
 8007ab8:	4601      	mov	r1, r0
 8007aba:	4604      	mov	r4, r0
 8007abc:	4648      	mov	r0, r9
 8007abe:	f000 fcad 	bl	800841c <__mcmp>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f77f aeb3 	ble.w	800782e <_dtoa_r+0x68e>
 8007ac8:	4656      	mov	r6, sl
 8007aca:	2331      	movs	r3, #49	@ 0x31
 8007acc:	f806 3b01 	strb.w	r3, [r6], #1
 8007ad0:	9b04      	ldr	r3, [sp, #16]
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	e6ae      	b.n	8007836 <_dtoa_r+0x696>
 8007ad8:	9c07      	ldr	r4, [sp, #28]
 8007ada:	9704      	str	r7, [sp, #16]
 8007adc:	4625      	mov	r5, r4
 8007ade:	e7f3      	b.n	8007ac8 <_dtoa_r+0x928>
 8007ae0:	9b07      	ldr	r3, [sp, #28]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 8104 	beq.w	8007cf4 <_dtoa_r+0xb54>
 8007aec:	2e00      	cmp	r6, #0
 8007aee:	dd05      	ble.n	8007afc <_dtoa_r+0x95c>
 8007af0:	4629      	mov	r1, r5
 8007af2:	4632      	mov	r2, r6
 8007af4:	4658      	mov	r0, fp
 8007af6:	f000 fc25 	bl	8008344 <__lshift>
 8007afa:	4605      	mov	r5, r0
 8007afc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d05a      	beq.n	8007bb8 <_dtoa_r+0xa18>
 8007b02:	6869      	ldr	r1, [r5, #4]
 8007b04:	4658      	mov	r0, fp
 8007b06:	f000 fa0f 	bl	8007f28 <_Balloc>
 8007b0a:	4606      	mov	r6, r0
 8007b0c:	b928      	cbnz	r0, 8007b1a <_dtoa_r+0x97a>
 8007b0e:	4b84      	ldr	r3, [pc, #528]	@ (8007d20 <_dtoa_r+0xb80>)
 8007b10:	4602      	mov	r2, r0
 8007b12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b16:	f7ff bb5a 	b.w	80071ce <_dtoa_r+0x2e>
 8007b1a:	692a      	ldr	r2, [r5, #16]
 8007b1c:	3202      	adds	r2, #2
 8007b1e:	0092      	lsls	r2, r2, #2
 8007b20:	f105 010c 	add.w	r1, r5, #12
 8007b24:	300c      	adds	r0, #12
 8007b26:	f7ff faa2 	bl	800706e <memcpy>
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	4631      	mov	r1, r6
 8007b2e:	4658      	mov	r0, fp
 8007b30:	f000 fc08 	bl	8008344 <__lshift>
 8007b34:	f10a 0301 	add.w	r3, sl, #1
 8007b38:	9307      	str	r3, [sp, #28]
 8007b3a:	9b00      	ldr	r3, [sp, #0]
 8007b3c:	4453      	add	r3, sl
 8007b3e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b40:	9b02      	ldr	r3, [sp, #8]
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	462f      	mov	r7, r5
 8007b48:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b4a:	4605      	mov	r5, r0
 8007b4c:	9b07      	ldr	r3, [sp, #28]
 8007b4e:	4621      	mov	r1, r4
 8007b50:	3b01      	subs	r3, #1
 8007b52:	4648      	mov	r0, r9
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	f7ff fa98 	bl	800708a <quorem>
 8007b5a:	4639      	mov	r1, r7
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007b62:	4648      	mov	r0, r9
 8007b64:	f000 fc5a 	bl	800841c <__mcmp>
 8007b68:	462a      	mov	r2, r5
 8007b6a:	9008      	str	r0, [sp, #32]
 8007b6c:	4621      	mov	r1, r4
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f000 fc70 	bl	8008454 <__mdiff>
 8007b74:	68c2      	ldr	r2, [r0, #12]
 8007b76:	4606      	mov	r6, r0
 8007b78:	bb02      	cbnz	r2, 8007bbc <_dtoa_r+0xa1c>
 8007b7a:	4601      	mov	r1, r0
 8007b7c:	4648      	mov	r0, r9
 8007b7e:	f000 fc4d 	bl	800841c <__mcmp>
 8007b82:	4602      	mov	r2, r0
 8007b84:	4631      	mov	r1, r6
 8007b86:	4658      	mov	r0, fp
 8007b88:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b8a:	f000 fa0d 	bl	8007fa8 <_Bfree>
 8007b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b92:	9e07      	ldr	r6, [sp, #28]
 8007b94:	ea43 0102 	orr.w	r1, r3, r2
 8007b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b9a:	4319      	orrs	r1, r3
 8007b9c:	d110      	bne.n	8007bc0 <_dtoa_r+0xa20>
 8007b9e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ba2:	d029      	beq.n	8007bf8 <_dtoa_r+0xa58>
 8007ba4:	9b08      	ldr	r3, [sp, #32]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	dd02      	ble.n	8007bb0 <_dtoa_r+0xa10>
 8007baa:	9b02      	ldr	r3, [sp, #8]
 8007bac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007bb0:	9b00      	ldr	r3, [sp, #0]
 8007bb2:	f883 8000 	strb.w	r8, [r3]
 8007bb6:	e63f      	b.n	8007838 <_dtoa_r+0x698>
 8007bb8:	4628      	mov	r0, r5
 8007bba:	e7bb      	b.n	8007b34 <_dtoa_r+0x994>
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	e7e1      	b.n	8007b84 <_dtoa_r+0x9e4>
 8007bc0:	9b08      	ldr	r3, [sp, #32]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	db04      	blt.n	8007bd0 <_dtoa_r+0xa30>
 8007bc6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007bcc:	430b      	orrs	r3, r1
 8007bce:	d120      	bne.n	8007c12 <_dtoa_r+0xa72>
 8007bd0:	2a00      	cmp	r2, #0
 8007bd2:	dded      	ble.n	8007bb0 <_dtoa_r+0xa10>
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4658      	mov	r0, fp
 8007bda:	f000 fbb3 	bl	8008344 <__lshift>
 8007bde:	4621      	mov	r1, r4
 8007be0:	4681      	mov	r9, r0
 8007be2:	f000 fc1b 	bl	800841c <__mcmp>
 8007be6:	2800      	cmp	r0, #0
 8007be8:	dc03      	bgt.n	8007bf2 <_dtoa_r+0xa52>
 8007bea:	d1e1      	bne.n	8007bb0 <_dtoa_r+0xa10>
 8007bec:	f018 0f01 	tst.w	r8, #1
 8007bf0:	d0de      	beq.n	8007bb0 <_dtoa_r+0xa10>
 8007bf2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007bf6:	d1d8      	bne.n	8007baa <_dtoa_r+0xa0a>
 8007bf8:	9a00      	ldr	r2, [sp, #0]
 8007bfa:	2339      	movs	r3, #57	@ 0x39
 8007bfc:	7013      	strb	r3, [r2, #0]
 8007bfe:	4633      	mov	r3, r6
 8007c00:	461e      	mov	r6, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c08:	2a39      	cmp	r2, #57	@ 0x39
 8007c0a:	d052      	beq.n	8007cb2 <_dtoa_r+0xb12>
 8007c0c:	3201      	adds	r2, #1
 8007c0e:	701a      	strb	r2, [r3, #0]
 8007c10:	e612      	b.n	8007838 <_dtoa_r+0x698>
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	dd07      	ble.n	8007c26 <_dtoa_r+0xa86>
 8007c16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007c1a:	d0ed      	beq.n	8007bf8 <_dtoa_r+0xa58>
 8007c1c:	9a00      	ldr	r2, [sp, #0]
 8007c1e:	f108 0301 	add.w	r3, r8, #1
 8007c22:	7013      	strb	r3, [r2, #0]
 8007c24:	e608      	b.n	8007838 <_dtoa_r+0x698>
 8007c26:	9b07      	ldr	r3, [sp, #28]
 8007c28:	9a07      	ldr	r2, [sp, #28]
 8007c2a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007c2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d028      	beq.n	8007c86 <_dtoa_r+0xae6>
 8007c34:	4649      	mov	r1, r9
 8007c36:	2300      	movs	r3, #0
 8007c38:	220a      	movs	r2, #10
 8007c3a:	4658      	mov	r0, fp
 8007c3c:	f000 f9d6 	bl	8007fec <__multadd>
 8007c40:	42af      	cmp	r7, r5
 8007c42:	4681      	mov	r9, r0
 8007c44:	f04f 0300 	mov.w	r3, #0
 8007c48:	f04f 020a 	mov.w	r2, #10
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	4658      	mov	r0, fp
 8007c50:	d107      	bne.n	8007c62 <_dtoa_r+0xac2>
 8007c52:	f000 f9cb 	bl	8007fec <__multadd>
 8007c56:	4607      	mov	r7, r0
 8007c58:	4605      	mov	r5, r0
 8007c5a:	9b07      	ldr	r3, [sp, #28]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	9307      	str	r3, [sp, #28]
 8007c60:	e774      	b.n	8007b4c <_dtoa_r+0x9ac>
 8007c62:	f000 f9c3 	bl	8007fec <__multadd>
 8007c66:	4629      	mov	r1, r5
 8007c68:	4607      	mov	r7, r0
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4658      	mov	r0, fp
 8007c70:	f000 f9bc 	bl	8007fec <__multadd>
 8007c74:	4605      	mov	r5, r0
 8007c76:	e7f0      	b.n	8007c5a <_dtoa_r+0xaba>
 8007c78:	9b00      	ldr	r3, [sp, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	bfcc      	ite	gt
 8007c7e:	461e      	movgt	r6, r3
 8007c80:	2601      	movle	r6, #1
 8007c82:	4456      	add	r6, sl
 8007c84:	2700      	movs	r7, #0
 8007c86:	4649      	mov	r1, r9
 8007c88:	2201      	movs	r2, #1
 8007c8a:	4658      	mov	r0, fp
 8007c8c:	f000 fb5a 	bl	8008344 <__lshift>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4681      	mov	r9, r0
 8007c94:	f000 fbc2 	bl	800841c <__mcmp>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	dcb0      	bgt.n	8007bfe <_dtoa_r+0xa5e>
 8007c9c:	d102      	bne.n	8007ca4 <_dtoa_r+0xb04>
 8007c9e:	f018 0f01 	tst.w	r8, #1
 8007ca2:	d1ac      	bne.n	8007bfe <_dtoa_r+0xa5e>
 8007ca4:	4633      	mov	r3, r6
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cac:	2a30      	cmp	r2, #48	@ 0x30
 8007cae:	d0fa      	beq.n	8007ca6 <_dtoa_r+0xb06>
 8007cb0:	e5c2      	b.n	8007838 <_dtoa_r+0x698>
 8007cb2:	459a      	cmp	sl, r3
 8007cb4:	d1a4      	bne.n	8007c00 <_dtoa_r+0xa60>
 8007cb6:	9b04      	ldr	r3, [sp, #16]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9304      	str	r3, [sp, #16]
 8007cbc:	2331      	movs	r3, #49	@ 0x31
 8007cbe:	f88a 3000 	strb.w	r3, [sl]
 8007cc2:	e5b9      	b.n	8007838 <_dtoa_r+0x698>
 8007cc4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007cc6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007d24 <_dtoa_r+0xb84>
 8007cca:	b11b      	cbz	r3, 8007cd4 <_dtoa_r+0xb34>
 8007ccc:	f10a 0308 	add.w	r3, sl, #8
 8007cd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007cd2:	6013      	str	r3, [r2, #0]
 8007cd4:	4650      	mov	r0, sl
 8007cd6:	b019      	add	sp, #100	@ 0x64
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	f77f ae37 	ble.w	8007952 <_dtoa_r+0x7b2>
 8007ce4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ce6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ce8:	2001      	movs	r0, #1
 8007cea:	e655      	b.n	8007998 <_dtoa_r+0x7f8>
 8007cec:	9b00      	ldr	r3, [sp, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	f77f aed6 	ble.w	8007aa0 <_dtoa_r+0x900>
 8007cf4:	4656      	mov	r6, sl
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4648      	mov	r0, r9
 8007cfa:	f7ff f9c6 	bl	800708a <quorem>
 8007cfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007d02:	f806 8b01 	strb.w	r8, [r6], #1
 8007d06:	9b00      	ldr	r3, [sp, #0]
 8007d08:	eba6 020a 	sub.w	r2, r6, sl
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	ddb3      	ble.n	8007c78 <_dtoa_r+0xad8>
 8007d10:	4649      	mov	r1, r9
 8007d12:	2300      	movs	r3, #0
 8007d14:	220a      	movs	r2, #10
 8007d16:	4658      	mov	r0, fp
 8007d18:	f000 f968 	bl	8007fec <__multadd>
 8007d1c:	4681      	mov	r9, r0
 8007d1e:	e7ea      	b.n	8007cf6 <_dtoa_r+0xb56>
 8007d20:	08008f88 	.word	0x08008f88
 8007d24:	08008f0c 	.word	0x08008f0c

08007d28 <_free_r>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	d041      	beq.n	8007db4 <_free_r+0x8c>
 8007d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d34:	1f0c      	subs	r4, r1, #4
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	bfb8      	it	lt
 8007d3a:	18e4      	addlt	r4, r4, r3
 8007d3c:	f000 f8e8 	bl	8007f10 <__malloc_lock>
 8007d40:	4a1d      	ldr	r2, [pc, #116]	@ (8007db8 <_free_r+0x90>)
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	b933      	cbnz	r3, 8007d54 <_free_r+0x2c>
 8007d46:	6063      	str	r3, [r4, #4]
 8007d48:	6014      	str	r4, [r2, #0]
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d50:	f000 b8e4 	b.w	8007f1c <__malloc_unlock>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d908      	bls.n	8007d6a <_free_r+0x42>
 8007d58:	6820      	ldr	r0, [r4, #0]
 8007d5a:	1821      	adds	r1, r4, r0
 8007d5c:	428b      	cmp	r3, r1
 8007d5e:	bf01      	itttt	eq
 8007d60:	6819      	ldreq	r1, [r3, #0]
 8007d62:	685b      	ldreq	r3, [r3, #4]
 8007d64:	1809      	addeq	r1, r1, r0
 8007d66:	6021      	streq	r1, [r4, #0]
 8007d68:	e7ed      	b.n	8007d46 <_free_r+0x1e>
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	b10b      	cbz	r3, 8007d74 <_free_r+0x4c>
 8007d70:	42a3      	cmp	r3, r4
 8007d72:	d9fa      	bls.n	8007d6a <_free_r+0x42>
 8007d74:	6811      	ldr	r1, [r2, #0]
 8007d76:	1850      	adds	r0, r2, r1
 8007d78:	42a0      	cmp	r0, r4
 8007d7a:	d10b      	bne.n	8007d94 <_free_r+0x6c>
 8007d7c:	6820      	ldr	r0, [r4, #0]
 8007d7e:	4401      	add	r1, r0
 8007d80:	1850      	adds	r0, r2, r1
 8007d82:	4283      	cmp	r3, r0
 8007d84:	6011      	str	r1, [r2, #0]
 8007d86:	d1e0      	bne.n	8007d4a <_free_r+0x22>
 8007d88:	6818      	ldr	r0, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	6053      	str	r3, [r2, #4]
 8007d8e:	4408      	add	r0, r1
 8007d90:	6010      	str	r0, [r2, #0]
 8007d92:	e7da      	b.n	8007d4a <_free_r+0x22>
 8007d94:	d902      	bls.n	8007d9c <_free_r+0x74>
 8007d96:	230c      	movs	r3, #12
 8007d98:	602b      	str	r3, [r5, #0]
 8007d9a:	e7d6      	b.n	8007d4a <_free_r+0x22>
 8007d9c:	6820      	ldr	r0, [r4, #0]
 8007d9e:	1821      	adds	r1, r4, r0
 8007da0:	428b      	cmp	r3, r1
 8007da2:	bf04      	itt	eq
 8007da4:	6819      	ldreq	r1, [r3, #0]
 8007da6:	685b      	ldreq	r3, [r3, #4]
 8007da8:	6063      	str	r3, [r4, #4]
 8007daa:	bf04      	itt	eq
 8007dac:	1809      	addeq	r1, r1, r0
 8007dae:	6021      	streq	r1, [r4, #0]
 8007db0:	6054      	str	r4, [r2, #4]
 8007db2:	e7ca      	b.n	8007d4a <_free_r+0x22>
 8007db4:	bd38      	pop	{r3, r4, r5, pc}
 8007db6:	bf00      	nop
 8007db8:	20004d98 	.word	0x20004d98

08007dbc <malloc>:
 8007dbc:	4b02      	ldr	r3, [pc, #8]	@ (8007dc8 <malloc+0xc>)
 8007dbe:	4601      	mov	r1, r0
 8007dc0:	6818      	ldr	r0, [r3, #0]
 8007dc2:	f000 b825 	b.w	8007e10 <_malloc_r>
 8007dc6:	bf00      	nop
 8007dc8:	2000001c 	.word	0x2000001c

08007dcc <sbrk_aligned>:
 8007dcc:	b570      	push	{r4, r5, r6, lr}
 8007dce:	4e0f      	ldr	r6, [pc, #60]	@ (8007e0c <sbrk_aligned+0x40>)
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	6831      	ldr	r1, [r6, #0]
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	b911      	cbnz	r1, 8007dde <sbrk_aligned+0x12>
 8007dd8:	f000 fcd4 	bl	8008784 <_sbrk_r>
 8007ddc:	6030      	str	r0, [r6, #0]
 8007dde:	4621      	mov	r1, r4
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 fccf 	bl	8008784 <_sbrk_r>
 8007de6:	1c43      	adds	r3, r0, #1
 8007de8:	d103      	bne.n	8007df2 <sbrk_aligned+0x26>
 8007dea:	f04f 34ff 	mov.w	r4, #4294967295
 8007dee:	4620      	mov	r0, r4
 8007df0:	bd70      	pop	{r4, r5, r6, pc}
 8007df2:	1cc4      	adds	r4, r0, #3
 8007df4:	f024 0403 	bic.w	r4, r4, #3
 8007df8:	42a0      	cmp	r0, r4
 8007dfa:	d0f8      	beq.n	8007dee <sbrk_aligned+0x22>
 8007dfc:	1a21      	subs	r1, r4, r0
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 fcc0 	bl	8008784 <_sbrk_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d1f2      	bne.n	8007dee <sbrk_aligned+0x22>
 8007e08:	e7ef      	b.n	8007dea <sbrk_aligned+0x1e>
 8007e0a:	bf00      	nop
 8007e0c:	20004d94 	.word	0x20004d94

08007e10 <_malloc_r>:
 8007e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e14:	1ccd      	adds	r5, r1, #3
 8007e16:	f025 0503 	bic.w	r5, r5, #3
 8007e1a:	3508      	adds	r5, #8
 8007e1c:	2d0c      	cmp	r5, #12
 8007e1e:	bf38      	it	cc
 8007e20:	250c      	movcc	r5, #12
 8007e22:	2d00      	cmp	r5, #0
 8007e24:	4606      	mov	r6, r0
 8007e26:	db01      	blt.n	8007e2c <_malloc_r+0x1c>
 8007e28:	42a9      	cmp	r1, r5
 8007e2a:	d904      	bls.n	8007e36 <_malloc_r+0x26>
 8007e2c:	230c      	movs	r3, #12
 8007e2e:	6033      	str	r3, [r6, #0]
 8007e30:	2000      	movs	r0, #0
 8007e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f0c <_malloc_r+0xfc>
 8007e3a:	f000 f869 	bl	8007f10 <__malloc_lock>
 8007e3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e42:	461c      	mov	r4, r3
 8007e44:	bb44      	cbnz	r4, 8007e98 <_malloc_r+0x88>
 8007e46:	4629      	mov	r1, r5
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff ffbf 	bl	8007dcc <sbrk_aligned>
 8007e4e:	1c43      	adds	r3, r0, #1
 8007e50:	4604      	mov	r4, r0
 8007e52:	d158      	bne.n	8007f06 <_malloc_r+0xf6>
 8007e54:	f8d8 4000 	ldr.w	r4, [r8]
 8007e58:	4627      	mov	r7, r4
 8007e5a:	2f00      	cmp	r7, #0
 8007e5c:	d143      	bne.n	8007ee6 <_malloc_r+0xd6>
 8007e5e:	2c00      	cmp	r4, #0
 8007e60:	d04b      	beq.n	8007efa <_malloc_r+0xea>
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	4639      	mov	r1, r7
 8007e66:	4630      	mov	r0, r6
 8007e68:	eb04 0903 	add.w	r9, r4, r3
 8007e6c:	f000 fc8a 	bl	8008784 <_sbrk_r>
 8007e70:	4581      	cmp	r9, r0
 8007e72:	d142      	bne.n	8007efa <_malloc_r+0xea>
 8007e74:	6821      	ldr	r1, [r4, #0]
 8007e76:	1a6d      	subs	r5, r5, r1
 8007e78:	4629      	mov	r1, r5
 8007e7a:	4630      	mov	r0, r6
 8007e7c:	f7ff ffa6 	bl	8007dcc <sbrk_aligned>
 8007e80:	3001      	adds	r0, #1
 8007e82:	d03a      	beq.n	8007efa <_malloc_r+0xea>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	442b      	add	r3, r5
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007e8e:	685a      	ldr	r2, [r3, #4]
 8007e90:	bb62      	cbnz	r2, 8007eec <_malloc_r+0xdc>
 8007e92:	f8c8 7000 	str.w	r7, [r8]
 8007e96:	e00f      	b.n	8007eb8 <_malloc_r+0xa8>
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	1b52      	subs	r2, r2, r5
 8007e9c:	d420      	bmi.n	8007ee0 <_malloc_r+0xd0>
 8007e9e:	2a0b      	cmp	r2, #11
 8007ea0:	d917      	bls.n	8007ed2 <_malloc_r+0xc2>
 8007ea2:	1961      	adds	r1, r4, r5
 8007ea4:	42a3      	cmp	r3, r4
 8007ea6:	6025      	str	r5, [r4, #0]
 8007ea8:	bf18      	it	ne
 8007eaa:	6059      	strne	r1, [r3, #4]
 8007eac:	6863      	ldr	r3, [r4, #4]
 8007eae:	bf08      	it	eq
 8007eb0:	f8c8 1000 	streq.w	r1, [r8]
 8007eb4:	5162      	str	r2, [r4, r5]
 8007eb6:	604b      	str	r3, [r1, #4]
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f82f 	bl	8007f1c <__malloc_unlock>
 8007ebe:	f104 000b 	add.w	r0, r4, #11
 8007ec2:	1d23      	adds	r3, r4, #4
 8007ec4:	f020 0007 	bic.w	r0, r0, #7
 8007ec8:	1ac2      	subs	r2, r0, r3
 8007eca:	bf1c      	itt	ne
 8007ecc:	1a1b      	subne	r3, r3, r0
 8007ece:	50a3      	strne	r3, [r4, r2]
 8007ed0:	e7af      	b.n	8007e32 <_malloc_r+0x22>
 8007ed2:	6862      	ldr	r2, [r4, #4]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	bf0c      	ite	eq
 8007ed8:	f8c8 2000 	streq.w	r2, [r8]
 8007edc:	605a      	strne	r2, [r3, #4]
 8007ede:	e7eb      	b.n	8007eb8 <_malloc_r+0xa8>
 8007ee0:	4623      	mov	r3, r4
 8007ee2:	6864      	ldr	r4, [r4, #4]
 8007ee4:	e7ae      	b.n	8007e44 <_malloc_r+0x34>
 8007ee6:	463c      	mov	r4, r7
 8007ee8:	687f      	ldr	r7, [r7, #4]
 8007eea:	e7b6      	b.n	8007e5a <_malloc_r+0x4a>
 8007eec:	461a      	mov	r2, r3
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	42a3      	cmp	r3, r4
 8007ef2:	d1fb      	bne.n	8007eec <_malloc_r+0xdc>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	6053      	str	r3, [r2, #4]
 8007ef8:	e7de      	b.n	8007eb8 <_malloc_r+0xa8>
 8007efa:	230c      	movs	r3, #12
 8007efc:	6033      	str	r3, [r6, #0]
 8007efe:	4630      	mov	r0, r6
 8007f00:	f000 f80c 	bl	8007f1c <__malloc_unlock>
 8007f04:	e794      	b.n	8007e30 <_malloc_r+0x20>
 8007f06:	6005      	str	r5, [r0, #0]
 8007f08:	e7d6      	b.n	8007eb8 <_malloc_r+0xa8>
 8007f0a:	bf00      	nop
 8007f0c:	20004d98 	.word	0x20004d98

08007f10 <__malloc_lock>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__malloc_lock+0x8>)
 8007f12:	f7ff b8aa 	b.w	800706a <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20004d90 	.word	0x20004d90

08007f1c <__malloc_unlock>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	@ (8007f24 <__malloc_unlock+0x8>)
 8007f1e:	f7ff b8a5 	b.w	800706c <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20004d90 	.word	0x20004d90

08007f28 <_Balloc>:
 8007f28:	b570      	push	{r4, r5, r6, lr}
 8007f2a:	69c6      	ldr	r6, [r0, #28]
 8007f2c:	4604      	mov	r4, r0
 8007f2e:	460d      	mov	r5, r1
 8007f30:	b976      	cbnz	r6, 8007f50 <_Balloc+0x28>
 8007f32:	2010      	movs	r0, #16
 8007f34:	f7ff ff42 	bl	8007dbc <malloc>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	61e0      	str	r0, [r4, #28]
 8007f3c:	b920      	cbnz	r0, 8007f48 <_Balloc+0x20>
 8007f3e:	4b18      	ldr	r3, [pc, #96]	@ (8007fa0 <_Balloc+0x78>)
 8007f40:	4818      	ldr	r0, [pc, #96]	@ (8007fa4 <_Balloc+0x7c>)
 8007f42:	216b      	movs	r1, #107	@ 0x6b
 8007f44:	f000 fc2e 	bl	80087a4 <__assert_func>
 8007f48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f4c:	6006      	str	r6, [r0, #0]
 8007f4e:	60c6      	str	r6, [r0, #12]
 8007f50:	69e6      	ldr	r6, [r4, #28]
 8007f52:	68f3      	ldr	r3, [r6, #12]
 8007f54:	b183      	cbz	r3, 8007f78 <_Balloc+0x50>
 8007f56:	69e3      	ldr	r3, [r4, #28]
 8007f58:	68db      	ldr	r3, [r3, #12]
 8007f5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f5e:	b9b8      	cbnz	r0, 8007f90 <_Balloc+0x68>
 8007f60:	2101      	movs	r1, #1
 8007f62:	fa01 f605 	lsl.w	r6, r1, r5
 8007f66:	1d72      	adds	r2, r6, #5
 8007f68:	0092      	lsls	r2, r2, #2
 8007f6a:	4620      	mov	r0, r4
 8007f6c:	f000 fc38 	bl	80087e0 <_calloc_r>
 8007f70:	b160      	cbz	r0, 8007f8c <_Balloc+0x64>
 8007f72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f76:	e00e      	b.n	8007f96 <_Balloc+0x6e>
 8007f78:	2221      	movs	r2, #33	@ 0x21
 8007f7a:	2104      	movs	r1, #4
 8007f7c:	4620      	mov	r0, r4
 8007f7e:	f000 fc2f 	bl	80087e0 <_calloc_r>
 8007f82:	69e3      	ldr	r3, [r4, #28]
 8007f84:	60f0      	str	r0, [r6, #12]
 8007f86:	68db      	ldr	r3, [r3, #12]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1e4      	bne.n	8007f56 <_Balloc+0x2e>
 8007f8c:	2000      	movs	r0, #0
 8007f8e:	bd70      	pop	{r4, r5, r6, pc}
 8007f90:	6802      	ldr	r2, [r0, #0]
 8007f92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f96:	2300      	movs	r3, #0
 8007f98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007f9c:	e7f7      	b.n	8007f8e <_Balloc+0x66>
 8007f9e:	bf00      	nop
 8007fa0:	08008f19 	.word	0x08008f19
 8007fa4:	08008f99 	.word	0x08008f99

08007fa8 <_Bfree>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	69c6      	ldr	r6, [r0, #28]
 8007fac:	4605      	mov	r5, r0
 8007fae:	460c      	mov	r4, r1
 8007fb0:	b976      	cbnz	r6, 8007fd0 <_Bfree+0x28>
 8007fb2:	2010      	movs	r0, #16
 8007fb4:	f7ff ff02 	bl	8007dbc <malloc>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	61e8      	str	r0, [r5, #28]
 8007fbc:	b920      	cbnz	r0, 8007fc8 <_Bfree+0x20>
 8007fbe:	4b09      	ldr	r3, [pc, #36]	@ (8007fe4 <_Bfree+0x3c>)
 8007fc0:	4809      	ldr	r0, [pc, #36]	@ (8007fe8 <_Bfree+0x40>)
 8007fc2:	218f      	movs	r1, #143	@ 0x8f
 8007fc4:	f000 fbee 	bl	80087a4 <__assert_func>
 8007fc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fcc:	6006      	str	r6, [r0, #0]
 8007fce:	60c6      	str	r6, [r0, #12]
 8007fd0:	b13c      	cbz	r4, 8007fe2 <_Bfree+0x3a>
 8007fd2:	69eb      	ldr	r3, [r5, #28]
 8007fd4:	6862      	ldr	r2, [r4, #4]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fdc:	6021      	str	r1, [r4, #0]
 8007fde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	08008f19 	.word	0x08008f19
 8007fe8:	08008f99 	.word	0x08008f99

08007fec <__multadd>:
 8007fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff0:	690d      	ldr	r5, [r1, #16]
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	460c      	mov	r4, r1
 8007ff6:	461e      	mov	r6, r3
 8007ff8:	f101 0c14 	add.w	ip, r1, #20
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f8dc 3000 	ldr.w	r3, [ip]
 8008002:	b299      	uxth	r1, r3
 8008004:	fb02 6101 	mla	r1, r2, r1, r6
 8008008:	0c1e      	lsrs	r6, r3, #16
 800800a:	0c0b      	lsrs	r3, r1, #16
 800800c:	fb02 3306 	mla	r3, r2, r6, r3
 8008010:	b289      	uxth	r1, r1
 8008012:	3001      	adds	r0, #1
 8008014:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008018:	4285      	cmp	r5, r0
 800801a:	f84c 1b04 	str.w	r1, [ip], #4
 800801e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008022:	dcec      	bgt.n	8007ffe <__multadd+0x12>
 8008024:	b30e      	cbz	r6, 800806a <__multadd+0x7e>
 8008026:	68a3      	ldr	r3, [r4, #8]
 8008028:	42ab      	cmp	r3, r5
 800802a:	dc19      	bgt.n	8008060 <__multadd+0x74>
 800802c:	6861      	ldr	r1, [r4, #4]
 800802e:	4638      	mov	r0, r7
 8008030:	3101      	adds	r1, #1
 8008032:	f7ff ff79 	bl	8007f28 <_Balloc>
 8008036:	4680      	mov	r8, r0
 8008038:	b928      	cbnz	r0, 8008046 <__multadd+0x5a>
 800803a:	4602      	mov	r2, r0
 800803c:	4b0c      	ldr	r3, [pc, #48]	@ (8008070 <__multadd+0x84>)
 800803e:	480d      	ldr	r0, [pc, #52]	@ (8008074 <__multadd+0x88>)
 8008040:	21ba      	movs	r1, #186	@ 0xba
 8008042:	f000 fbaf 	bl	80087a4 <__assert_func>
 8008046:	6922      	ldr	r2, [r4, #16]
 8008048:	3202      	adds	r2, #2
 800804a:	f104 010c 	add.w	r1, r4, #12
 800804e:	0092      	lsls	r2, r2, #2
 8008050:	300c      	adds	r0, #12
 8008052:	f7ff f80c 	bl	800706e <memcpy>
 8008056:	4621      	mov	r1, r4
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ffa5 	bl	8007fa8 <_Bfree>
 800805e:	4644      	mov	r4, r8
 8008060:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008064:	3501      	adds	r5, #1
 8008066:	615e      	str	r6, [r3, #20]
 8008068:	6125      	str	r5, [r4, #16]
 800806a:	4620      	mov	r0, r4
 800806c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008070:	08008f88 	.word	0x08008f88
 8008074:	08008f99 	.word	0x08008f99

08008078 <__hi0bits>:
 8008078:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800807c:	4603      	mov	r3, r0
 800807e:	bf36      	itet	cc
 8008080:	0403      	lslcc	r3, r0, #16
 8008082:	2000      	movcs	r0, #0
 8008084:	2010      	movcc	r0, #16
 8008086:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800808a:	bf3c      	itt	cc
 800808c:	021b      	lslcc	r3, r3, #8
 800808e:	3008      	addcc	r0, #8
 8008090:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008094:	bf3c      	itt	cc
 8008096:	011b      	lslcc	r3, r3, #4
 8008098:	3004      	addcc	r0, #4
 800809a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800809e:	bf3c      	itt	cc
 80080a0:	009b      	lslcc	r3, r3, #2
 80080a2:	3002      	addcc	r0, #2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	db05      	blt.n	80080b4 <__hi0bits+0x3c>
 80080a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80080ac:	f100 0001 	add.w	r0, r0, #1
 80080b0:	bf08      	it	eq
 80080b2:	2020      	moveq	r0, #32
 80080b4:	4770      	bx	lr

080080b6 <__lo0bits>:
 80080b6:	6803      	ldr	r3, [r0, #0]
 80080b8:	4602      	mov	r2, r0
 80080ba:	f013 0007 	ands.w	r0, r3, #7
 80080be:	d00b      	beq.n	80080d8 <__lo0bits+0x22>
 80080c0:	07d9      	lsls	r1, r3, #31
 80080c2:	d421      	bmi.n	8008108 <__lo0bits+0x52>
 80080c4:	0798      	lsls	r0, r3, #30
 80080c6:	bf49      	itett	mi
 80080c8:	085b      	lsrmi	r3, r3, #1
 80080ca:	089b      	lsrpl	r3, r3, #2
 80080cc:	2001      	movmi	r0, #1
 80080ce:	6013      	strmi	r3, [r2, #0]
 80080d0:	bf5c      	itt	pl
 80080d2:	6013      	strpl	r3, [r2, #0]
 80080d4:	2002      	movpl	r0, #2
 80080d6:	4770      	bx	lr
 80080d8:	b299      	uxth	r1, r3
 80080da:	b909      	cbnz	r1, 80080e0 <__lo0bits+0x2a>
 80080dc:	0c1b      	lsrs	r3, r3, #16
 80080de:	2010      	movs	r0, #16
 80080e0:	b2d9      	uxtb	r1, r3
 80080e2:	b909      	cbnz	r1, 80080e8 <__lo0bits+0x32>
 80080e4:	3008      	adds	r0, #8
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	0719      	lsls	r1, r3, #28
 80080ea:	bf04      	itt	eq
 80080ec:	091b      	lsreq	r3, r3, #4
 80080ee:	3004      	addeq	r0, #4
 80080f0:	0799      	lsls	r1, r3, #30
 80080f2:	bf04      	itt	eq
 80080f4:	089b      	lsreq	r3, r3, #2
 80080f6:	3002      	addeq	r0, #2
 80080f8:	07d9      	lsls	r1, r3, #31
 80080fa:	d403      	bmi.n	8008104 <__lo0bits+0x4e>
 80080fc:	085b      	lsrs	r3, r3, #1
 80080fe:	f100 0001 	add.w	r0, r0, #1
 8008102:	d003      	beq.n	800810c <__lo0bits+0x56>
 8008104:	6013      	str	r3, [r2, #0]
 8008106:	4770      	bx	lr
 8008108:	2000      	movs	r0, #0
 800810a:	4770      	bx	lr
 800810c:	2020      	movs	r0, #32
 800810e:	4770      	bx	lr

08008110 <__i2b>:
 8008110:	b510      	push	{r4, lr}
 8008112:	460c      	mov	r4, r1
 8008114:	2101      	movs	r1, #1
 8008116:	f7ff ff07 	bl	8007f28 <_Balloc>
 800811a:	4602      	mov	r2, r0
 800811c:	b928      	cbnz	r0, 800812a <__i2b+0x1a>
 800811e:	4b05      	ldr	r3, [pc, #20]	@ (8008134 <__i2b+0x24>)
 8008120:	4805      	ldr	r0, [pc, #20]	@ (8008138 <__i2b+0x28>)
 8008122:	f240 1145 	movw	r1, #325	@ 0x145
 8008126:	f000 fb3d 	bl	80087a4 <__assert_func>
 800812a:	2301      	movs	r3, #1
 800812c:	6144      	str	r4, [r0, #20]
 800812e:	6103      	str	r3, [r0, #16]
 8008130:	bd10      	pop	{r4, pc}
 8008132:	bf00      	nop
 8008134:	08008f88 	.word	0x08008f88
 8008138:	08008f99 	.word	0x08008f99

0800813c <__multiply>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	4614      	mov	r4, r2
 8008142:	690a      	ldr	r2, [r1, #16]
 8008144:	6923      	ldr	r3, [r4, #16]
 8008146:	429a      	cmp	r2, r3
 8008148:	bfa8      	it	ge
 800814a:	4623      	movge	r3, r4
 800814c:	460f      	mov	r7, r1
 800814e:	bfa4      	itt	ge
 8008150:	460c      	movge	r4, r1
 8008152:	461f      	movge	r7, r3
 8008154:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008158:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800815c:	68a3      	ldr	r3, [r4, #8]
 800815e:	6861      	ldr	r1, [r4, #4]
 8008160:	eb0a 0609 	add.w	r6, sl, r9
 8008164:	42b3      	cmp	r3, r6
 8008166:	b085      	sub	sp, #20
 8008168:	bfb8      	it	lt
 800816a:	3101      	addlt	r1, #1
 800816c:	f7ff fedc 	bl	8007f28 <_Balloc>
 8008170:	b930      	cbnz	r0, 8008180 <__multiply+0x44>
 8008172:	4602      	mov	r2, r0
 8008174:	4b44      	ldr	r3, [pc, #272]	@ (8008288 <__multiply+0x14c>)
 8008176:	4845      	ldr	r0, [pc, #276]	@ (800828c <__multiply+0x150>)
 8008178:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800817c:	f000 fb12 	bl	80087a4 <__assert_func>
 8008180:	f100 0514 	add.w	r5, r0, #20
 8008184:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008188:	462b      	mov	r3, r5
 800818a:	2200      	movs	r2, #0
 800818c:	4543      	cmp	r3, r8
 800818e:	d321      	bcc.n	80081d4 <__multiply+0x98>
 8008190:	f107 0114 	add.w	r1, r7, #20
 8008194:	f104 0214 	add.w	r2, r4, #20
 8008198:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800819c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80081a0:	9302      	str	r3, [sp, #8]
 80081a2:	1b13      	subs	r3, r2, r4
 80081a4:	3b15      	subs	r3, #21
 80081a6:	f023 0303 	bic.w	r3, r3, #3
 80081aa:	3304      	adds	r3, #4
 80081ac:	f104 0715 	add.w	r7, r4, #21
 80081b0:	42ba      	cmp	r2, r7
 80081b2:	bf38      	it	cc
 80081b4:	2304      	movcc	r3, #4
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	9b02      	ldr	r3, [sp, #8]
 80081ba:	9103      	str	r1, [sp, #12]
 80081bc:	428b      	cmp	r3, r1
 80081be:	d80c      	bhi.n	80081da <__multiply+0x9e>
 80081c0:	2e00      	cmp	r6, #0
 80081c2:	dd03      	ble.n	80081cc <__multiply+0x90>
 80081c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d05b      	beq.n	8008284 <__multiply+0x148>
 80081cc:	6106      	str	r6, [r0, #16]
 80081ce:	b005      	add	sp, #20
 80081d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d4:	f843 2b04 	str.w	r2, [r3], #4
 80081d8:	e7d8      	b.n	800818c <__multiply+0x50>
 80081da:	f8b1 a000 	ldrh.w	sl, [r1]
 80081de:	f1ba 0f00 	cmp.w	sl, #0
 80081e2:	d024      	beq.n	800822e <__multiply+0xf2>
 80081e4:	f104 0e14 	add.w	lr, r4, #20
 80081e8:	46a9      	mov	r9, r5
 80081ea:	f04f 0c00 	mov.w	ip, #0
 80081ee:	f85e 7b04 	ldr.w	r7, [lr], #4
 80081f2:	f8d9 3000 	ldr.w	r3, [r9]
 80081f6:	fa1f fb87 	uxth.w	fp, r7
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8008200:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008204:	f8d9 7000 	ldr.w	r7, [r9]
 8008208:	4463      	add	r3, ip
 800820a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800820e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008212:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008216:	b29b      	uxth	r3, r3
 8008218:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800821c:	4572      	cmp	r2, lr
 800821e:	f849 3b04 	str.w	r3, [r9], #4
 8008222:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008226:	d8e2      	bhi.n	80081ee <__multiply+0xb2>
 8008228:	9b01      	ldr	r3, [sp, #4]
 800822a:	f845 c003 	str.w	ip, [r5, r3]
 800822e:	9b03      	ldr	r3, [sp, #12]
 8008230:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008234:	3104      	adds	r1, #4
 8008236:	f1b9 0f00 	cmp.w	r9, #0
 800823a:	d021      	beq.n	8008280 <__multiply+0x144>
 800823c:	682b      	ldr	r3, [r5, #0]
 800823e:	f104 0c14 	add.w	ip, r4, #20
 8008242:	46ae      	mov	lr, r5
 8008244:	f04f 0a00 	mov.w	sl, #0
 8008248:	f8bc b000 	ldrh.w	fp, [ip]
 800824c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008250:	fb09 770b 	mla	r7, r9, fp, r7
 8008254:	4457      	add	r7, sl
 8008256:	b29b      	uxth	r3, r3
 8008258:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800825c:	f84e 3b04 	str.w	r3, [lr], #4
 8008260:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008264:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008268:	f8be 3000 	ldrh.w	r3, [lr]
 800826c:	fb09 330a 	mla	r3, r9, sl, r3
 8008270:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008274:	4562      	cmp	r2, ip
 8008276:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800827a:	d8e5      	bhi.n	8008248 <__multiply+0x10c>
 800827c:	9f01      	ldr	r7, [sp, #4]
 800827e:	51eb      	str	r3, [r5, r7]
 8008280:	3504      	adds	r5, #4
 8008282:	e799      	b.n	80081b8 <__multiply+0x7c>
 8008284:	3e01      	subs	r6, #1
 8008286:	e79b      	b.n	80081c0 <__multiply+0x84>
 8008288:	08008f88 	.word	0x08008f88
 800828c:	08008f99 	.word	0x08008f99

08008290 <__pow5mult>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	4615      	mov	r5, r2
 8008296:	f012 0203 	ands.w	r2, r2, #3
 800829a:	4607      	mov	r7, r0
 800829c:	460e      	mov	r6, r1
 800829e:	d007      	beq.n	80082b0 <__pow5mult+0x20>
 80082a0:	4c25      	ldr	r4, [pc, #148]	@ (8008338 <__pow5mult+0xa8>)
 80082a2:	3a01      	subs	r2, #1
 80082a4:	2300      	movs	r3, #0
 80082a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80082aa:	f7ff fe9f 	bl	8007fec <__multadd>
 80082ae:	4606      	mov	r6, r0
 80082b0:	10ad      	asrs	r5, r5, #2
 80082b2:	d03d      	beq.n	8008330 <__pow5mult+0xa0>
 80082b4:	69fc      	ldr	r4, [r7, #28]
 80082b6:	b97c      	cbnz	r4, 80082d8 <__pow5mult+0x48>
 80082b8:	2010      	movs	r0, #16
 80082ba:	f7ff fd7f 	bl	8007dbc <malloc>
 80082be:	4602      	mov	r2, r0
 80082c0:	61f8      	str	r0, [r7, #28]
 80082c2:	b928      	cbnz	r0, 80082d0 <__pow5mult+0x40>
 80082c4:	4b1d      	ldr	r3, [pc, #116]	@ (800833c <__pow5mult+0xac>)
 80082c6:	481e      	ldr	r0, [pc, #120]	@ (8008340 <__pow5mult+0xb0>)
 80082c8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80082cc:	f000 fa6a 	bl	80087a4 <__assert_func>
 80082d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082d4:	6004      	str	r4, [r0, #0]
 80082d6:	60c4      	str	r4, [r0, #12]
 80082d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80082dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80082e0:	b94c      	cbnz	r4, 80082f6 <__pow5mult+0x66>
 80082e2:	f240 2171 	movw	r1, #625	@ 0x271
 80082e6:	4638      	mov	r0, r7
 80082e8:	f7ff ff12 	bl	8008110 <__i2b>
 80082ec:	2300      	movs	r3, #0
 80082ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80082f2:	4604      	mov	r4, r0
 80082f4:	6003      	str	r3, [r0, #0]
 80082f6:	f04f 0900 	mov.w	r9, #0
 80082fa:	07eb      	lsls	r3, r5, #31
 80082fc:	d50a      	bpl.n	8008314 <__pow5mult+0x84>
 80082fe:	4631      	mov	r1, r6
 8008300:	4622      	mov	r2, r4
 8008302:	4638      	mov	r0, r7
 8008304:	f7ff ff1a 	bl	800813c <__multiply>
 8008308:	4631      	mov	r1, r6
 800830a:	4680      	mov	r8, r0
 800830c:	4638      	mov	r0, r7
 800830e:	f7ff fe4b 	bl	8007fa8 <_Bfree>
 8008312:	4646      	mov	r6, r8
 8008314:	106d      	asrs	r5, r5, #1
 8008316:	d00b      	beq.n	8008330 <__pow5mult+0xa0>
 8008318:	6820      	ldr	r0, [r4, #0]
 800831a:	b938      	cbnz	r0, 800832c <__pow5mult+0x9c>
 800831c:	4622      	mov	r2, r4
 800831e:	4621      	mov	r1, r4
 8008320:	4638      	mov	r0, r7
 8008322:	f7ff ff0b 	bl	800813c <__multiply>
 8008326:	6020      	str	r0, [r4, #0]
 8008328:	f8c0 9000 	str.w	r9, [r0]
 800832c:	4604      	mov	r4, r0
 800832e:	e7e4      	b.n	80082fa <__pow5mult+0x6a>
 8008330:	4630      	mov	r0, r6
 8008332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008336:	bf00      	nop
 8008338:	08008ff4 	.word	0x08008ff4
 800833c:	08008f19 	.word	0x08008f19
 8008340:	08008f99 	.word	0x08008f99

08008344 <__lshift>:
 8008344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	460c      	mov	r4, r1
 800834a:	6849      	ldr	r1, [r1, #4]
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008352:	68a3      	ldr	r3, [r4, #8]
 8008354:	4607      	mov	r7, r0
 8008356:	4691      	mov	r9, r2
 8008358:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800835c:	f108 0601 	add.w	r6, r8, #1
 8008360:	42b3      	cmp	r3, r6
 8008362:	db0b      	blt.n	800837c <__lshift+0x38>
 8008364:	4638      	mov	r0, r7
 8008366:	f7ff fddf 	bl	8007f28 <_Balloc>
 800836a:	4605      	mov	r5, r0
 800836c:	b948      	cbnz	r0, 8008382 <__lshift+0x3e>
 800836e:	4602      	mov	r2, r0
 8008370:	4b28      	ldr	r3, [pc, #160]	@ (8008414 <__lshift+0xd0>)
 8008372:	4829      	ldr	r0, [pc, #164]	@ (8008418 <__lshift+0xd4>)
 8008374:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008378:	f000 fa14 	bl	80087a4 <__assert_func>
 800837c:	3101      	adds	r1, #1
 800837e:	005b      	lsls	r3, r3, #1
 8008380:	e7ee      	b.n	8008360 <__lshift+0x1c>
 8008382:	2300      	movs	r3, #0
 8008384:	f100 0114 	add.w	r1, r0, #20
 8008388:	f100 0210 	add.w	r2, r0, #16
 800838c:	4618      	mov	r0, r3
 800838e:	4553      	cmp	r3, sl
 8008390:	db33      	blt.n	80083fa <__lshift+0xb6>
 8008392:	6920      	ldr	r0, [r4, #16]
 8008394:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008398:	f104 0314 	add.w	r3, r4, #20
 800839c:	f019 091f 	ands.w	r9, r9, #31
 80083a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80083a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80083a8:	d02b      	beq.n	8008402 <__lshift+0xbe>
 80083aa:	f1c9 0e20 	rsb	lr, r9, #32
 80083ae:	468a      	mov	sl, r1
 80083b0:	2200      	movs	r2, #0
 80083b2:	6818      	ldr	r0, [r3, #0]
 80083b4:	fa00 f009 	lsl.w	r0, r0, r9
 80083b8:	4310      	orrs	r0, r2
 80083ba:	f84a 0b04 	str.w	r0, [sl], #4
 80083be:	f853 2b04 	ldr.w	r2, [r3], #4
 80083c2:	459c      	cmp	ip, r3
 80083c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80083c8:	d8f3      	bhi.n	80083b2 <__lshift+0x6e>
 80083ca:	ebac 0304 	sub.w	r3, ip, r4
 80083ce:	3b15      	subs	r3, #21
 80083d0:	f023 0303 	bic.w	r3, r3, #3
 80083d4:	3304      	adds	r3, #4
 80083d6:	f104 0015 	add.w	r0, r4, #21
 80083da:	4584      	cmp	ip, r0
 80083dc:	bf38      	it	cc
 80083de:	2304      	movcc	r3, #4
 80083e0:	50ca      	str	r2, [r1, r3]
 80083e2:	b10a      	cbz	r2, 80083e8 <__lshift+0xa4>
 80083e4:	f108 0602 	add.w	r6, r8, #2
 80083e8:	3e01      	subs	r6, #1
 80083ea:	4638      	mov	r0, r7
 80083ec:	612e      	str	r6, [r5, #16]
 80083ee:	4621      	mov	r1, r4
 80083f0:	f7ff fdda 	bl	8007fa8 <_Bfree>
 80083f4:	4628      	mov	r0, r5
 80083f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80083fe:	3301      	adds	r3, #1
 8008400:	e7c5      	b.n	800838e <__lshift+0x4a>
 8008402:	3904      	subs	r1, #4
 8008404:	f853 2b04 	ldr.w	r2, [r3], #4
 8008408:	f841 2f04 	str.w	r2, [r1, #4]!
 800840c:	459c      	cmp	ip, r3
 800840e:	d8f9      	bhi.n	8008404 <__lshift+0xc0>
 8008410:	e7ea      	b.n	80083e8 <__lshift+0xa4>
 8008412:	bf00      	nop
 8008414:	08008f88 	.word	0x08008f88
 8008418:	08008f99 	.word	0x08008f99

0800841c <__mcmp>:
 800841c:	690a      	ldr	r2, [r1, #16]
 800841e:	4603      	mov	r3, r0
 8008420:	6900      	ldr	r0, [r0, #16]
 8008422:	1a80      	subs	r0, r0, r2
 8008424:	b530      	push	{r4, r5, lr}
 8008426:	d10e      	bne.n	8008446 <__mcmp+0x2a>
 8008428:	3314      	adds	r3, #20
 800842a:	3114      	adds	r1, #20
 800842c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008430:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008434:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008438:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800843c:	4295      	cmp	r5, r2
 800843e:	d003      	beq.n	8008448 <__mcmp+0x2c>
 8008440:	d205      	bcs.n	800844e <__mcmp+0x32>
 8008442:	f04f 30ff 	mov.w	r0, #4294967295
 8008446:	bd30      	pop	{r4, r5, pc}
 8008448:	42a3      	cmp	r3, r4
 800844a:	d3f3      	bcc.n	8008434 <__mcmp+0x18>
 800844c:	e7fb      	b.n	8008446 <__mcmp+0x2a>
 800844e:	2001      	movs	r0, #1
 8008450:	e7f9      	b.n	8008446 <__mcmp+0x2a>
	...

08008454 <__mdiff>:
 8008454:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008458:	4689      	mov	r9, r1
 800845a:	4606      	mov	r6, r0
 800845c:	4611      	mov	r1, r2
 800845e:	4648      	mov	r0, r9
 8008460:	4614      	mov	r4, r2
 8008462:	f7ff ffdb 	bl	800841c <__mcmp>
 8008466:	1e05      	subs	r5, r0, #0
 8008468:	d112      	bne.n	8008490 <__mdiff+0x3c>
 800846a:	4629      	mov	r1, r5
 800846c:	4630      	mov	r0, r6
 800846e:	f7ff fd5b 	bl	8007f28 <_Balloc>
 8008472:	4602      	mov	r2, r0
 8008474:	b928      	cbnz	r0, 8008482 <__mdiff+0x2e>
 8008476:	4b3f      	ldr	r3, [pc, #252]	@ (8008574 <__mdiff+0x120>)
 8008478:	f240 2137 	movw	r1, #567	@ 0x237
 800847c:	483e      	ldr	r0, [pc, #248]	@ (8008578 <__mdiff+0x124>)
 800847e:	f000 f991 	bl	80087a4 <__assert_func>
 8008482:	2301      	movs	r3, #1
 8008484:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008488:	4610      	mov	r0, r2
 800848a:	b003      	add	sp, #12
 800848c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008490:	bfbc      	itt	lt
 8008492:	464b      	movlt	r3, r9
 8008494:	46a1      	movlt	r9, r4
 8008496:	4630      	mov	r0, r6
 8008498:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800849c:	bfba      	itte	lt
 800849e:	461c      	movlt	r4, r3
 80084a0:	2501      	movlt	r5, #1
 80084a2:	2500      	movge	r5, #0
 80084a4:	f7ff fd40 	bl	8007f28 <_Balloc>
 80084a8:	4602      	mov	r2, r0
 80084aa:	b918      	cbnz	r0, 80084b4 <__mdiff+0x60>
 80084ac:	4b31      	ldr	r3, [pc, #196]	@ (8008574 <__mdiff+0x120>)
 80084ae:	f240 2145 	movw	r1, #581	@ 0x245
 80084b2:	e7e3      	b.n	800847c <__mdiff+0x28>
 80084b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80084b8:	6926      	ldr	r6, [r4, #16]
 80084ba:	60c5      	str	r5, [r0, #12]
 80084bc:	f109 0310 	add.w	r3, r9, #16
 80084c0:	f109 0514 	add.w	r5, r9, #20
 80084c4:	f104 0e14 	add.w	lr, r4, #20
 80084c8:	f100 0b14 	add.w	fp, r0, #20
 80084cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80084d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	46d9      	mov	r9, fp
 80084d8:	f04f 0c00 	mov.w	ip, #0
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80084e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80084e6:	9301      	str	r3, [sp, #4]
 80084e8:	fa1f f38a 	uxth.w	r3, sl
 80084ec:	4619      	mov	r1, r3
 80084ee:	b283      	uxth	r3, r0
 80084f0:	1acb      	subs	r3, r1, r3
 80084f2:	0c00      	lsrs	r0, r0, #16
 80084f4:	4463      	add	r3, ip
 80084f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80084fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80084fe:	b29b      	uxth	r3, r3
 8008500:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008504:	4576      	cmp	r6, lr
 8008506:	f849 3b04 	str.w	r3, [r9], #4
 800850a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800850e:	d8e5      	bhi.n	80084dc <__mdiff+0x88>
 8008510:	1b33      	subs	r3, r6, r4
 8008512:	3b15      	subs	r3, #21
 8008514:	f023 0303 	bic.w	r3, r3, #3
 8008518:	3415      	adds	r4, #21
 800851a:	3304      	adds	r3, #4
 800851c:	42a6      	cmp	r6, r4
 800851e:	bf38      	it	cc
 8008520:	2304      	movcc	r3, #4
 8008522:	441d      	add	r5, r3
 8008524:	445b      	add	r3, fp
 8008526:	461e      	mov	r6, r3
 8008528:	462c      	mov	r4, r5
 800852a:	4544      	cmp	r4, r8
 800852c:	d30e      	bcc.n	800854c <__mdiff+0xf8>
 800852e:	f108 0103 	add.w	r1, r8, #3
 8008532:	1b49      	subs	r1, r1, r5
 8008534:	f021 0103 	bic.w	r1, r1, #3
 8008538:	3d03      	subs	r5, #3
 800853a:	45a8      	cmp	r8, r5
 800853c:	bf38      	it	cc
 800853e:	2100      	movcc	r1, #0
 8008540:	440b      	add	r3, r1
 8008542:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008546:	b191      	cbz	r1, 800856e <__mdiff+0x11a>
 8008548:	6117      	str	r7, [r2, #16]
 800854a:	e79d      	b.n	8008488 <__mdiff+0x34>
 800854c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008550:	46e6      	mov	lr, ip
 8008552:	0c08      	lsrs	r0, r1, #16
 8008554:	fa1c fc81 	uxtah	ip, ip, r1
 8008558:	4471      	add	r1, lr
 800855a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800855e:	b289      	uxth	r1, r1
 8008560:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008564:	f846 1b04 	str.w	r1, [r6], #4
 8008568:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800856c:	e7dd      	b.n	800852a <__mdiff+0xd6>
 800856e:	3f01      	subs	r7, #1
 8008570:	e7e7      	b.n	8008542 <__mdiff+0xee>
 8008572:	bf00      	nop
 8008574:	08008f88 	.word	0x08008f88
 8008578:	08008f99 	.word	0x08008f99

0800857c <__d2b>:
 800857c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008580:	460f      	mov	r7, r1
 8008582:	2101      	movs	r1, #1
 8008584:	ec59 8b10 	vmov	r8, r9, d0
 8008588:	4616      	mov	r6, r2
 800858a:	f7ff fccd 	bl	8007f28 <_Balloc>
 800858e:	4604      	mov	r4, r0
 8008590:	b930      	cbnz	r0, 80085a0 <__d2b+0x24>
 8008592:	4602      	mov	r2, r0
 8008594:	4b23      	ldr	r3, [pc, #140]	@ (8008624 <__d2b+0xa8>)
 8008596:	4824      	ldr	r0, [pc, #144]	@ (8008628 <__d2b+0xac>)
 8008598:	f240 310f 	movw	r1, #783	@ 0x30f
 800859c:	f000 f902 	bl	80087a4 <__assert_func>
 80085a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80085a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80085a8:	b10d      	cbz	r5, 80085ae <__d2b+0x32>
 80085aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	f1b8 0300 	subs.w	r3, r8, #0
 80085b4:	d023      	beq.n	80085fe <__d2b+0x82>
 80085b6:	4668      	mov	r0, sp
 80085b8:	9300      	str	r3, [sp, #0]
 80085ba:	f7ff fd7c 	bl	80080b6 <__lo0bits>
 80085be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80085c2:	b1d0      	cbz	r0, 80085fa <__d2b+0x7e>
 80085c4:	f1c0 0320 	rsb	r3, r0, #32
 80085c8:	fa02 f303 	lsl.w	r3, r2, r3
 80085cc:	430b      	orrs	r3, r1
 80085ce:	40c2      	lsrs	r2, r0
 80085d0:	6163      	str	r3, [r4, #20]
 80085d2:	9201      	str	r2, [sp, #4]
 80085d4:	9b01      	ldr	r3, [sp, #4]
 80085d6:	61a3      	str	r3, [r4, #24]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	bf0c      	ite	eq
 80085dc:	2201      	moveq	r2, #1
 80085de:	2202      	movne	r2, #2
 80085e0:	6122      	str	r2, [r4, #16]
 80085e2:	b1a5      	cbz	r5, 800860e <__d2b+0x92>
 80085e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80085e8:	4405      	add	r5, r0
 80085ea:	603d      	str	r5, [r7, #0]
 80085ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80085f0:	6030      	str	r0, [r6, #0]
 80085f2:	4620      	mov	r0, r4
 80085f4:	b003      	add	sp, #12
 80085f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085fa:	6161      	str	r1, [r4, #20]
 80085fc:	e7ea      	b.n	80085d4 <__d2b+0x58>
 80085fe:	a801      	add	r0, sp, #4
 8008600:	f7ff fd59 	bl	80080b6 <__lo0bits>
 8008604:	9b01      	ldr	r3, [sp, #4]
 8008606:	6163      	str	r3, [r4, #20]
 8008608:	3020      	adds	r0, #32
 800860a:	2201      	movs	r2, #1
 800860c:	e7e8      	b.n	80085e0 <__d2b+0x64>
 800860e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008612:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008616:	6038      	str	r0, [r7, #0]
 8008618:	6918      	ldr	r0, [r3, #16]
 800861a:	f7ff fd2d 	bl	8008078 <__hi0bits>
 800861e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008622:	e7e5      	b.n	80085f0 <__d2b+0x74>
 8008624:	08008f88 	.word	0x08008f88
 8008628:	08008f99 	.word	0x08008f99

0800862c <__sflush_r>:
 800862c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008634:	0716      	lsls	r6, r2, #28
 8008636:	4605      	mov	r5, r0
 8008638:	460c      	mov	r4, r1
 800863a:	d454      	bmi.n	80086e6 <__sflush_r+0xba>
 800863c:	684b      	ldr	r3, [r1, #4]
 800863e:	2b00      	cmp	r3, #0
 8008640:	dc02      	bgt.n	8008648 <__sflush_r+0x1c>
 8008642:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008644:	2b00      	cmp	r3, #0
 8008646:	dd48      	ble.n	80086da <__sflush_r+0xae>
 8008648:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800864a:	2e00      	cmp	r6, #0
 800864c:	d045      	beq.n	80086da <__sflush_r+0xae>
 800864e:	2300      	movs	r3, #0
 8008650:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008654:	682f      	ldr	r7, [r5, #0]
 8008656:	6a21      	ldr	r1, [r4, #32]
 8008658:	602b      	str	r3, [r5, #0]
 800865a:	d030      	beq.n	80086be <__sflush_r+0x92>
 800865c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	0759      	lsls	r1, r3, #29
 8008662:	d505      	bpl.n	8008670 <__sflush_r+0x44>
 8008664:	6863      	ldr	r3, [r4, #4]
 8008666:	1ad2      	subs	r2, r2, r3
 8008668:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800866a:	b10b      	cbz	r3, 8008670 <__sflush_r+0x44>
 800866c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800866e:	1ad2      	subs	r2, r2, r3
 8008670:	2300      	movs	r3, #0
 8008672:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008674:	6a21      	ldr	r1, [r4, #32]
 8008676:	4628      	mov	r0, r5
 8008678:	47b0      	blx	r6
 800867a:	1c43      	adds	r3, r0, #1
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	d106      	bne.n	800868e <__sflush_r+0x62>
 8008680:	6829      	ldr	r1, [r5, #0]
 8008682:	291d      	cmp	r1, #29
 8008684:	d82b      	bhi.n	80086de <__sflush_r+0xb2>
 8008686:	4a2a      	ldr	r2, [pc, #168]	@ (8008730 <__sflush_r+0x104>)
 8008688:	410a      	asrs	r2, r1
 800868a:	07d6      	lsls	r6, r2, #31
 800868c:	d427      	bmi.n	80086de <__sflush_r+0xb2>
 800868e:	2200      	movs	r2, #0
 8008690:	6062      	str	r2, [r4, #4]
 8008692:	04d9      	lsls	r1, r3, #19
 8008694:	6922      	ldr	r2, [r4, #16]
 8008696:	6022      	str	r2, [r4, #0]
 8008698:	d504      	bpl.n	80086a4 <__sflush_r+0x78>
 800869a:	1c42      	adds	r2, r0, #1
 800869c:	d101      	bne.n	80086a2 <__sflush_r+0x76>
 800869e:	682b      	ldr	r3, [r5, #0]
 80086a0:	b903      	cbnz	r3, 80086a4 <__sflush_r+0x78>
 80086a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80086a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80086a6:	602f      	str	r7, [r5, #0]
 80086a8:	b1b9      	cbz	r1, 80086da <__sflush_r+0xae>
 80086aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80086ae:	4299      	cmp	r1, r3
 80086b0:	d002      	beq.n	80086b8 <__sflush_r+0x8c>
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7ff fb38 	bl	8007d28 <_free_r>
 80086b8:	2300      	movs	r3, #0
 80086ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80086bc:	e00d      	b.n	80086da <__sflush_r+0xae>
 80086be:	2301      	movs	r3, #1
 80086c0:	4628      	mov	r0, r5
 80086c2:	47b0      	blx	r6
 80086c4:	4602      	mov	r2, r0
 80086c6:	1c50      	adds	r0, r2, #1
 80086c8:	d1c9      	bne.n	800865e <__sflush_r+0x32>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d0c6      	beq.n	800865e <__sflush_r+0x32>
 80086d0:	2b1d      	cmp	r3, #29
 80086d2:	d001      	beq.n	80086d8 <__sflush_r+0xac>
 80086d4:	2b16      	cmp	r3, #22
 80086d6:	d11e      	bne.n	8008716 <__sflush_r+0xea>
 80086d8:	602f      	str	r7, [r5, #0]
 80086da:	2000      	movs	r0, #0
 80086dc:	e022      	b.n	8008724 <__sflush_r+0xf8>
 80086de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086e2:	b21b      	sxth	r3, r3
 80086e4:	e01b      	b.n	800871e <__sflush_r+0xf2>
 80086e6:	690f      	ldr	r7, [r1, #16]
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	d0f6      	beq.n	80086da <__sflush_r+0xae>
 80086ec:	0793      	lsls	r3, r2, #30
 80086ee:	680e      	ldr	r6, [r1, #0]
 80086f0:	bf08      	it	eq
 80086f2:	694b      	ldreq	r3, [r1, #20]
 80086f4:	600f      	str	r7, [r1, #0]
 80086f6:	bf18      	it	ne
 80086f8:	2300      	movne	r3, #0
 80086fa:	eba6 0807 	sub.w	r8, r6, r7
 80086fe:	608b      	str	r3, [r1, #8]
 8008700:	f1b8 0f00 	cmp.w	r8, #0
 8008704:	dde9      	ble.n	80086da <__sflush_r+0xae>
 8008706:	6a21      	ldr	r1, [r4, #32]
 8008708:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800870a:	4643      	mov	r3, r8
 800870c:	463a      	mov	r2, r7
 800870e:	4628      	mov	r0, r5
 8008710:	47b0      	blx	r6
 8008712:	2800      	cmp	r0, #0
 8008714:	dc08      	bgt.n	8008728 <__sflush_r+0xfc>
 8008716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800871a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800871e:	81a3      	strh	r3, [r4, #12]
 8008720:	f04f 30ff 	mov.w	r0, #4294967295
 8008724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008728:	4407      	add	r7, r0
 800872a:	eba8 0800 	sub.w	r8, r8, r0
 800872e:	e7e7      	b.n	8008700 <__sflush_r+0xd4>
 8008730:	dfbffffe 	.word	0xdfbffffe

08008734 <_fflush_r>:
 8008734:	b538      	push	{r3, r4, r5, lr}
 8008736:	690b      	ldr	r3, [r1, #16]
 8008738:	4605      	mov	r5, r0
 800873a:	460c      	mov	r4, r1
 800873c:	b913      	cbnz	r3, 8008744 <_fflush_r+0x10>
 800873e:	2500      	movs	r5, #0
 8008740:	4628      	mov	r0, r5
 8008742:	bd38      	pop	{r3, r4, r5, pc}
 8008744:	b118      	cbz	r0, 800874e <_fflush_r+0x1a>
 8008746:	6a03      	ldr	r3, [r0, #32]
 8008748:	b90b      	cbnz	r3, 800874e <_fflush_r+0x1a>
 800874a:	f7fe fb41 	bl	8006dd0 <__sinit>
 800874e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0f3      	beq.n	800873e <_fflush_r+0xa>
 8008756:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008758:	07d0      	lsls	r0, r2, #31
 800875a:	d404      	bmi.n	8008766 <_fflush_r+0x32>
 800875c:	0599      	lsls	r1, r3, #22
 800875e:	d402      	bmi.n	8008766 <_fflush_r+0x32>
 8008760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008762:	f7fe fc82 	bl	800706a <__retarget_lock_acquire_recursive>
 8008766:	4628      	mov	r0, r5
 8008768:	4621      	mov	r1, r4
 800876a:	f7ff ff5f 	bl	800862c <__sflush_r>
 800876e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008770:	07da      	lsls	r2, r3, #31
 8008772:	4605      	mov	r5, r0
 8008774:	d4e4      	bmi.n	8008740 <_fflush_r+0xc>
 8008776:	89a3      	ldrh	r3, [r4, #12]
 8008778:	059b      	lsls	r3, r3, #22
 800877a:	d4e1      	bmi.n	8008740 <_fflush_r+0xc>
 800877c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800877e:	f7fe fc75 	bl	800706c <__retarget_lock_release_recursive>
 8008782:	e7dd      	b.n	8008740 <_fflush_r+0xc>

08008784 <_sbrk_r>:
 8008784:	b538      	push	{r3, r4, r5, lr}
 8008786:	4d06      	ldr	r5, [pc, #24]	@ (80087a0 <_sbrk_r+0x1c>)
 8008788:	2300      	movs	r3, #0
 800878a:	4604      	mov	r4, r0
 800878c:	4608      	mov	r0, r1
 800878e:	602b      	str	r3, [r5, #0]
 8008790:	f7f8 ff64 	bl	800165c <_sbrk>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_sbrk_r+0x1a>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_sbrk_r+0x1a>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20004d8c 	.word	0x20004d8c

080087a4 <__assert_func>:
 80087a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087a6:	4614      	mov	r4, r2
 80087a8:	461a      	mov	r2, r3
 80087aa:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <__assert_func+0x2c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4605      	mov	r5, r0
 80087b0:	68d8      	ldr	r0, [r3, #12]
 80087b2:	b954      	cbnz	r4, 80087ca <__assert_func+0x26>
 80087b4:	4b07      	ldr	r3, [pc, #28]	@ (80087d4 <__assert_func+0x30>)
 80087b6:	461c      	mov	r4, r3
 80087b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087bc:	9100      	str	r1, [sp, #0]
 80087be:	462b      	mov	r3, r5
 80087c0:	4905      	ldr	r1, [pc, #20]	@ (80087d8 <__assert_func+0x34>)
 80087c2:	f000 f841 	bl	8008848 <fiprintf>
 80087c6:	f000 f851 	bl	800886c <abort>
 80087ca:	4b04      	ldr	r3, [pc, #16]	@ (80087dc <__assert_func+0x38>)
 80087cc:	e7f4      	b.n	80087b8 <__assert_func+0x14>
 80087ce:	bf00      	nop
 80087d0:	2000001c 	.word	0x2000001c
 80087d4:	08009135 	.word	0x08009135
 80087d8:	08009107 	.word	0x08009107
 80087dc:	080090fa 	.word	0x080090fa

080087e0 <_calloc_r>:
 80087e0:	b570      	push	{r4, r5, r6, lr}
 80087e2:	fba1 5402 	umull	r5, r4, r1, r2
 80087e6:	b93c      	cbnz	r4, 80087f8 <_calloc_r+0x18>
 80087e8:	4629      	mov	r1, r5
 80087ea:	f7ff fb11 	bl	8007e10 <_malloc_r>
 80087ee:	4606      	mov	r6, r0
 80087f0:	b928      	cbnz	r0, 80087fe <_calloc_r+0x1e>
 80087f2:	2600      	movs	r6, #0
 80087f4:	4630      	mov	r0, r6
 80087f6:	bd70      	pop	{r4, r5, r6, pc}
 80087f8:	220c      	movs	r2, #12
 80087fa:	6002      	str	r2, [r0, #0]
 80087fc:	e7f9      	b.n	80087f2 <_calloc_r+0x12>
 80087fe:	462a      	mov	r2, r5
 8008800:	4621      	mov	r1, r4
 8008802:	f7fe fb5e 	bl	8006ec2 <memset>
 8008806:	e7f5      	b.n	80087f4 <_calloc_r+0x14>

08008808 <__ascii_mbtowc>:
 8008808:	b082      	sub	sp, #8
 800880a:	b901      	cbnz	r1, 800880e <__ascii_mbtowc+0x6>
 800880c:	a901      	add	r1, sp, #4
 800880e:	b142      	cbz	r2, 8008822 <__ascii_mbtowc+0x1a>
 8008810:	b14b      	cbz	r3, 8008826 <__ascii_mbtowc+0x1e>
 8008812:	7813      	ldrb	r3, [r2, #0]
 8008814:	600b      	str	r3, [r1, #0]
 8008816:	7812      	ldrb	r2, [r2, #0]
 8008818:	1e10      	subs	r0, r2, #0
 800881a:	bf18      	it	ne
 800881c:	2001      	movne	r0, #1
 800881e:	b002      	add	sp, #8
 8008820:	4770      	bx	lr
 8008822:	4610      	mov	r0, r2
 8008824:	e7fb      	b.n	800881e <__ascii_mbtowc+0x16>
 8008826:	f06f 0001 	mvn.w	r0, #1
 800882a:	e7f8      	b.n	800881e <__ascii_mbtowc+0x16>

0800882c <__ascii_wctomb>:
 800882c:	4603      	mov	r3, r0
 800882e:	4608      	mov	r0, r1
 8008830:	b141      	cbz	r1, 8008844 <__ascii_wctomb+0x18>
 8008832:	2aff      	cmp	r2, #255	@ 0xff
 8008834:	d904      	bls.n	8008840 <__ascii_wctomb+0x14>
 8008836:	228a      	movs	r2, #138	@ 0x8a
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	4770      	bx	lr
 8008840:	700a      	strb	r2, [r1, #0]
 8008842:	2001      	movs	r0, #1
 8008844:	4770      	bx	lr
	...

08008848 <fiprintf>:
 8008848:	b40e      	push	{r1, r2, r3}
 800884a:	b503      	push	{r0, r1, lr}
 800884c:	4601      	mov	r1, r0
 800884e:	ab03      	add	r3, sp, #12
 8008850:	4805      	ldr	r0, [pc, #20]	@ (8008868 <fiprintf+0x20>)
 8008852:	f853 2b04 	ldr.w	r2, [r3], #4
 8008856:	6800      	ldr	r0, [r0, #0]
 8008858:	9301      	str	r3, [sp, #4]
 800885a:	f000 f837 	bl	80088cc <_vfiprintf_r>
 800885e:	b002      	add	sp, #8
 8008860:	f85d eb04 	ldr.w	lr, [sp], #4
 8008864:	b003      	add	sp, #12
 8008866:	4770      	bx	lr
 8008868:	2000001c 	.word	0x2000001c

0800886c <abort>:
 800886c:	b508      	push	{r3, lr}
 800886e:	2006      	movs	r0, #6
 8008870:	f000 fa00 	bl	8008c74 <raise>
 8008874:	2001      	movs	r0, #1
 8008876:	f7f8 fe79 	bl	800156c <_exit>

0800887a <__sfputc_r>:
 800887a:	6893      	ldr	r3, [r2, #8]
 800887c:	3b01      	subs	r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	b410      	push	{r4}
 8008882:	6093      	str	r3, [r2, #8]
 8008884:	da08      	bge.n	8008898 <__sfputc_r+0x1e>
 8008886:	6994      	ldr	r4, [r2, #24]
 8008888:	42a3      	cmp	r3, r4
 800888a:	db01      	blt.n	8008890 <__sfputc_r+0x16>
 800888c:	290a      	cmp	r1, #10
 800888e:	d103      	bne.n	8008898 <__sfputc_r+0x1e>
 8008890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008894:	f000 b932 	b.w	8008afc <__swbuf_r>
 8008898:	6813      	ldr	r3, [r2, #0]
 800889a:	1c58      	adds	r0, r3, #1
 800889c:	6010      	str	r0, [r2, #0]
 800889e:	7019      	strb	r1, [r3, #0]
 80088a0:	4608      	mov	r0, r1
 80088a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <__sfputs_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	4614      	mov	r4, r2
 80088b0:	18d5      	adds	r5, r2, r3
 80088b2:	42ac      	cmp	r4, r5
 80088b4:	d101      	bne.n	80088ba <__sfputs_r+0x12>
 80088b6:	2000      	movs	r0, #0
 80088b8:	e007      	b.n	80088ca <__sfputs_r+0x22>
 80088ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088be:	463a      	mov	r2, r7
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff ffda 	bl	800887a <__sfputc_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d1f3      	bne.n	80088b2 <__sfputs_r+0xa>
 80088ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080088cc <_vfiprintf_r>:
 80088cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088d0:	460d      	mov	r5, r1
 80088d2:	b09d      	sub	sp, #116	@ 0x74
 80088d4:	4614      	mov	r4, r2
 80088d6:	4698      	mov	r8, r3
 80088d8:	4606      	mov	r6, r0
 80088da:	b118      	cbz	r0, 80088e4 <_vfiprintf_r+0x18>
 80088dc:	6a03      	ldr	r3, [r0, #32]
 80088de:	b90b      	cbnz	r3, 80088e4 <_vfiprintf_r+0x18>
 80088e0:	f7fe fa76 	bl	8006dd0 <__sinit>
 80088e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e6:	07d9      	lsls	r1, r3, #31
 80088e8:	d405      	bmi.n	80088f6 <_vfiprintf_r+0x2a>
 80088ea:	89ab      	ldrh	r3, [r5, #12]
 80088ec:	059a      	lsls	r2, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_vfiprintf_r+0x2a>
 80088f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088f2:	f7fe fbba 	bl	800706a <__retarget_lock_acquire_recursive>
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	071b      	lsls	r3, r3, #28
 80088fa:	d501      	bpl.n	8008900 <_vfiprintf_r+0x34>
 80088fc:	692b      	ldr	r3, [r5, #16]
 80088fe:	b99b      	cbnz	r3, 8008928 <_vfiprintf_r+0x5c>
 8008900:	4629      	mov	r1, r5
 8008902:	4630      	mov	r0, r6
 8008904:	f000 f938 	bl	8008b78 <__swsetup_r>
 8008908:	b170      	cbz	r0, 8008928 <_vfiprintf_r+0x5c>
 800890a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800890c:	07dc      	lsls	r4, r3, #31
 800890e:	d504      	bpl.n	800891a <_vfiprintf_r+0x4e>
 8008910:	f04f 30ff 	mov.w	r0, #4294967295
 8008914:	b01d      	add	sp, #116	@ 0x74
 8008916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800891a:	89ab      	ldrh	r3, [r5, #12]
 800891c:	0598      	lsls	r0, r3, #22
 800891e:	d4f7      	bmi.n	8008910 <_vfiprintf_r+0x44>
 8008920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008922:	f7fe fba3 	bl	800706c <__retarget_lock_release_recursive>
 8008926:	e7f3      	b.n	8008910 <_vfiprintf_r+0x44>
 8008928:	2300      	movs	r3, #0
 800892a:	9309      	str	r3, [sp, #36]	@ 0x24
 800892c:	2320      	movs	r3, #32
 800892e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008932:	f8cd 800c 	str.w	r8, [sp, #12]
 8008936:	2330      	movs	r3, #48	@ 0x30
 8008938:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ae8 <_vfiprintf_r+0x21c>
 800893c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008940:	f04f 0901 	mov.w	r9, #1
 8008944:	4623      	mov	r3, r4
 8008946:	469a      	mov	sl, r3
 8008948:	f813 2b01 	ldrb.w	r2, [r3], #1
 800894c:	b10a      	cbz	r2, 8008952 <_vfiprintf_r+0x86>
 800894e:	2a25      	cmp	r2, #37	@ 0x25
 8008950:	d1f9      	bne.n	8008946 <_vfiprintf_r+0x7a>
 8008952:	ebba 0b04 	subs.w	fp, sl, r4
 8008956:	d00b      	beq.n	8008970 <_vfiprintf_r+0xa4>
 8008958:	465b      	mov	r3, fp
 800895a:	4622      	mov	r2, r4
 800895c:	4629      	mov	r1, r5
 800895e:	4630      	mov	r0, r6
 8008960:	f7ff ffa2 	bl	80088a8 <__sfputs_r>
 8008964:	3001      	adds	r0, #1
 8008966:	f000 80a7 	beq.w	8008ab8 <_vfiprintf_r+0x1ec>
 800896a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800896c:	445a      	add	r2, fp
 800896e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008970:	f89a 3000 	ldrb.w	r3, [sl]
 8008974:	2b00      	cmp	r3, #0
 8008976:	f000 809f 	beq.w	8008ab8 <_vfiprintf_r+0x1ec>
 800897a:	2300      	movs	r3, #0
 800897c:	f04f 32ff 	mov.w	r2, #4294967295
 8008980:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008984:	f10a 0a01 	add.w	sl, sl, #1
 8008988:	9304      	str	r3, [sp, #16]
 800898a:	9307      	str	r3, [sp, #28]
 800898c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008990:	931a      	str	r3, [sp, #104]	@ 0x68
 8008992:	4654      	mov	r4, sl
 8008994:	2205      	movs	r2, #5
 8008996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800899a:	4853      	ldr	r0, [pc, #332]	@ (8008ae8 <_vfiprintf_r+0x21c>)
 800899c:	f7f7 fc18 	bl	80001d0 <memchr>
 80089a0:	9a04      	ldr	r2, [sp, #16]
 80089a2:	b9d8      	cbnz	r0, 80089dc <_vfiprintf_r+0x110>
 80089a4:	06d1      	lsls	r1, r2, #27
 80089a6:	bf44      	itt	mi
 80089a8:	2320      	movmi	r3, #32
 80089aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ae:	0713      	lsls	r3, r2, #28
 80089b0:	bf44      	itt	mi
 80089b2:	232b      	movmi	r3, #43	@ 0x2b
 80089b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089b8:	f89a 3000 	ldrb.w	r3, [sl]
 80089bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80089be:	d015      	beq.n	80089ec <_vfiprintf_r+0x120>
 80089c0:	9a07      	ldr	r2, [sp, #28]
 80089c2:	4654      	mov	r4, sl
 80089c4:	2000      	movs	r0, #0
 80089c6:	f04f 0c0a 	mov.w	ip, #10
 80089ca:	4621      	mov	r1, r4
 80089cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089d0:	3b30      	subs	r3, #48	@ 0x30
 80089d2:	2b09      	cmp	r3, #9
 80089d4:	d94b      	bls.n	8008a6e <_vfiprintf_r+0x1a2>
 80089d6:	b1b0      	cbz	r0, 8008a06 <_vfiprintf_r+0x13a>
 80089d8:	9207      	str	r2, [sp, #28]
 80089da:	e014      	b.n	8008a06 <_vfiprintf_r+0x13a>
 80089dc:	eba0 0308 	sub.w	r3, r0, r8
 80089e0:	fa09 f303 	lsl.w	r3, r9, r3
 80089e4:	4313      	orrs	r3, r2
 80089e6:	9304      	str	r3, [sp, #16]
 80089e8:	46a2      	mov	sl, r4
 80089ea:	e7d2      	b.n	8008992 <_vfiprintf_r+0xc6>
 80089ec:	9b03      	ldr	r3, [sp, #12]
 80089ee:	1d19      	adds	r1, r3, #4
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	9103      	str	r1, [sp, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bfbb      	ittet	lt
 80089f8:	425b      	neglt	r3, r3
 80089fa:	f042 0202 	orrlt.w	r2, r2, #2
 80089fe:	9307      	strge	r3, [sp, #28]
 8008a00:	9307      	strlt	r3, [sp, #28]
 8008a02:	bfb8      	it	lt
 8008a04:	9204      	strlt	r2, [sp, #16]
 8008a06:	7823      	ldrb	r3, [r4, #0]
 8008a08:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a0a:	d10a      	bne.n	8008a22 <_vfiprintf_r+0x156>
 8008a0c:	7863      	ldrb	r3, [r4, #1]
 8008a0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a10:	d132      	bne.n	8008a78 <_vfiprintf_r+0x1ac>
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	1d1a      	adds	r2, r3, #4
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	9203      	str	r2, [sp, #12]
 8008a1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a1e:	3402      	adds	r4, #2
 8008a20:	9305      	str	r3, [sp, #20]
 8008a22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008af8 <_vfiprintf_r+0x22c>
 8008a26:	7821      	ldrb	r1, [r4, #0]
 8008a28:	2203      	movs	r2, #3
 8008a2a:	4650      	mov	r0, sl
 8008a2c:	f7f7 fbd0 	bl	80001d0 <memchr>
 8008a30:	b138      	cbz	r0, 8008a42 <_vfiprintf_r+0x176>
 8008a32:	9b04      	ldr	r3, [sp, #16]
 8008a34:	eba0 000a 	sub.w	r0, r0, sl
 8008a38:	2240      	movs	r2, #64	@ 0x40
 8008a3a:	4082      	lsls	r2, r0
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	3401      	adds	r4, #1
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a46:	4829      	ldr	r0, [pc, #164]	@ (8008aec <_vfiprintf_r+0x220>)
 8008a48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a4c:	2206      	movs	r2, #6
 8008a4e:	f7f7 fbbf 	bl	80001d0 <memchr>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d03f      	beq.n	8008ad6 <_vfiprintf_r+0x20a>
 8008a56:	4b26      	ldr	r3, [pc, #152]	@ (8008af0 <_vfiprintf_r+0x224>)
 8008a58:	bb1b      	cbnz	r3, 8008aa2 <_vfiprintf_r+0x1d6>
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	3307      	adds	r3, #7
 8008a5e:	f023 0307 	bic.w	r3, r3, #7
 8008a62:	3308      	adds	r3, #8
 8008a64:	9303      	str	r3, [sp, #12]
 8008a66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a68:	443b      	add	r3, r7
 8008a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a6c:	e76a      	b.n	8008944 <_vfiprintf_r+0x78>
 8008a6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a72:	460c      	mov	r4, r1
 8008a74:	2001      	movs	r0, #1
 8008a76:	e7a8      	b.n	80089ca <_vfiprintf_r+0xfe>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	3401      	adds	r4, #1
 8008a7c:	9305      	str	r3, [sp, #20]
 8008a7e:	4619      	mov	r1, r3
 8008a80:	f04f 0c0a 	mov.w	ip, #10
 8008a84:	4620      	mov	r0, r4
 8008a86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a8a:	3a30      	subs	r2, #48	@ 0x30
 8008a8c:	2a09      	cmp	r2, #9
 8008a8e:	d903      	bls.n	8008a98 <_vfiprintf_r+0x1cc>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d0c6      	beq.n	8008a22 <_vfiprintf_r+0x156>
 8008a94:	9105      	str	r1, [sp, #20]
 8008a96:	e7c4      	b.n	8008a22 <_vfiprintf_r+0x156>
 8008a98:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e7f0      	b.n	8008a84 <_vfiprintf_r+0x1b8>
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	9300      	str	r3, [sp, #0]
 8008aa6:	462a      	mov	r2, r5
 8008aa8:	4b12      	ldr	r3, [pc, #72]	@ (8008af4 <_vfiprintf_r+0x228>)
 8008aaa:	a904      	add	r1, sp, #16
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7fd fd4b 	bl	8006548 <_printf_float>
 8008ab2:	4607      	mov	r7, r0
 8008ab4:	1c78      	adds	r0, r7, #1
 8008ab6:	d1d6      	bne.n	8008a66 <_vfiprintf_r+0x19a>
 8008ab8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008aba:	07d9      	lsls	r1, r3, #31
 8008abc:	d405      	bmi.n	8008aca <_vfiprintf_r+0x1fe>
 8008abe:	89ab      	ldrh	r3, [r5, #12]
 8008ac0:	059a      	lsls	r2, r3, #22
 8008ac2:	d402      	bmi.n	8008aca <_vfiprintf_r+0x1fe>
 8008ac4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ac6:	f7fe fad1 	bl	800706c <__retarget_lock_release_recursive>
 8008aca:	89ab      	ldrh	r3, [r5, #12]
 8008acc:	065b      	lsls	r3, r3, #25
 8008ace:	f53f af1f 	bmi.w	8008910 <_vfiprintf_r+0x44>
 8008ad2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ad4:	e71e      	b.n	8008914 <_vfiprintf_r+0x48>
 8008ad6:	ab03      	add	r3, sp, #12
 8008ad8:	9300      	str	r3, [sp, #0]
 8008ada:	462a      	mov	r2, r5
 8008adc:	4b05      	ldr	r3, [pc, #20]	@ (8008af4 <_vfiprintf_r+0x228>)
 8008ade:	a904      	add	r1, sp, #16
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	f7fd ffc9 	bl	8006a78 <_printf_i>
 8008ae6:	e7e4      	b.n	8008ab2 <_vfiprintf_r+0x1e6>
 8008ae8:	08009237 	.word	0x08009237
 8008aec:	08009241 	.word	0x08009241
 8008af0:	08006549 	.word	0x08006549
 8008af4:	080088a9 	.word	0x080088a9
 8008af8:	0800923d 	.word	0x0800923d

08008afc <__swbuf_r>:
 8008afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008afe:	460e      	mov	r6, r1
 8008b00:	4614      	mov	r4, r2
 8008b02:	4605      	mov	r5, r0
 8008b04:	b118      	cbz	r0, 8008b0e <__swbuf_r+0x12>
 8008b06:	6a03      	ldr	r3, [r0, #32]
 8008b08:	b90b      	cbnz	r3, 8008b0e <__swbuf_r+0x12>
 8008b0a:	f7fe f961 	bl	8006dd0 <__sinit>
 8008b0e:	69a3      	ldr	r3, [r4, #24]
 8008b10:	60a3      	str	r3, [r4, #8]
 8008b12:	89a3      	ldrh	r3, [r4, #12]
 8008b14:	071a      	lsls	r2, r3, #28
 8008b16:	d501      	bpl.n	8008b1c <__swbuf_r+0x20>
 8008b18:	6923      	ldr	r3, [r4, #16]
 8008b1a:	b943      	cbnz	r3, 8008b2e <__swbuf_r+0x32>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f000 f82a 	bl	8008b78 <__swsetup_r>
 8008b24:	b118      	cbz	r0, 8008b2e <__swbuf_r+0x32>
 8008b26:	f04f 37ff 	mov.w	r7, #4294967295
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	1a98      	subs	r0, r3, r2
 8008b34:	6963      	ldr	r3, [r4, #20]
 8008b36:	b2f6      	uxtb	r6, r6
 8008b38:	4283      	cmp	r3, r0
 8008b3a:	4637      	mov	r7, r6
 8008b3c:	dc05      	bgt.n	8008b4a <__swbuf_r+0x4e>
 8008b3e:	4621      	mov	r1, r4
 8008b40:	4628      	mov	r0, r5
 8008b42:	f7ff fdf7 	bl	8008734 <_fflush_r>
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d1ed      	bne.n	8008b26 <__swbuf_r+0x2a>
 8008b4a:	68a3      	ldr	r3, [r4, #8]
 8008b4c:	3b01      	subs	r3, #1
 8008b4e:	60a3      	str	r3, [r4, #8]
 8008b50:	6823      	ldr	r3, [r4, #0]
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	6022      	str	r2, [r4, #0]
 8008b56:	701e      	strb	r6, [r3, #0]
 8008b58:	6962      	ldr	r2, [r4, #20]
 8008b5a:	1c43      	adds	r3, r0, #1
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d004      	beq.n	8008b6a <__swbuf_r+0x6e>
 8008b60:	89a3      	ldrh	r3, [r4, #12]
 8008b62:	07db      	lsls	r3, r3, #31
 8008b64:	d5e1      	bpl.n	8008b2a <__swbuf_r+0x2e>
 8008b66:	2e0a      	cmp	r6, #10
 8008b68:	d1df      	bne.n	8008b2a <__swbuf_r+0x2e>
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	f7ff fde1 	bl	8008734 <_fflush_r>
 8008b72:	2800      	cmp	r0, #0
 8008b74:	d0d9      	beq.n	8008b2a <__swbuf_r+0x2e>
 8008b76:	e7d6      	b.n	8008b26 <__swbuf_r+0x2a>

08008b78 <__swsetup_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4b29      	ldr	r3, [pc, #164]	@ (8008c20 <__swsetup_r+0xa8>)
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	460c      	mov	r4, r1
 8008b82:	b118      	cbz	r0, 8008b8c <__swsetup_r+0x14>
 8008b84:	6a03      	ldr	r3, [r0, #32]
 8008b86:	b90b      	cbnz	r3, 8008b8c <__swsetup_r+0x14>
 8008b88:	f7fe f922 	bl	8006dd0 <__sinit>
 8008b8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b90:	0719      	lsls	r1, r3, #28
 8008b92:	d422      	bmi.n	8008bda <__swsetup_r+0x62>
 8008b94:	06da      	lsls	r2, r3, #27
 8008b96:	d407      	bmi.n	8008ba8 <__swsetup_r+0x30>
 8008b98:	2209      	movs	r2, #9
 8008b9a:	602a      	str	r2, [r5, #0]
 8008b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ba0:	81a3      	strh	r3, [r4, #12]
 8008ba2:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba6:	e033      	b.n	8008c10 <__swsetup_r+0x98>
 8008ba8:	0758      	lsls	r0, r3, #29
 8008baa:	d512      	bpl.n	8008bd2 <__swsetup_r+0x5a>
 8008bac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bae:	b141      	cbz	r1, 8008bc2 <__swsetup_r+0x4a>
 8008bb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008bb4:	4299      	cmp	r1, r3
 8008bb6:	d002      	beq.n	8008bbe <__swsetup_r+0x46>
 8008bb8:	4628      	mov	r0, r5
 8008bba:	f7ff f8b5 	bl	8007d28 <_free_r>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008bc8:	81a3      	strh	r3, [r4, #12]
 8008bca:	2300      	movs	r3, #0
 8008bcc:	6063      	str	r3, [r4, #4]
 8008bce:	6923      	ldr	r3, [r4, #16]
 8008bd0:	6023      	str	r3, [r4, #0]
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	f043 0308 	orr.w	r3, r3, #8
 8008bd8:	81a3      	strh	r3, [r4, #12]
 8008bda:	6923      	ldr	r3, [r4, #16]
 8008bdc:	b94b      	cbnz	r3, 8008bf2 <__swsetup_r+0x7a>
 8008bde:	89a3      	ldrh	r3, [r4, #12]
 8008be0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be8:	d003      	beq.n	8008bf2 <__swsetup_r+0x7a>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4628      	mov	r0, r5
 8008bee:	f000 f883 	bl	8008cf8 <__smakebuf_r>
 8008bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf6:	f013 0201 	ands.w	r2, r3, #1
 8008bfa:	d00a      	beq.n	8008c12 <__swsetup_r+0x9a>
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	60a2      	str	r2, [r4, #8]
 8008c00:	6962      	ldr	r2, [r4, #20]
 8008c02:	4252      	negs	r2, r2
 8008c04:	61a2      	str	r2, [r4, #24]
 8008c06:	6922      	ldr	r2, [r4, #16]
 8008c08:	b942      	cbnz	r2, 8008c1c <__swsetup_r+0xa4>
 8008c0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c0e:	d1c5      	bne.n	8008b9c <__swsetup_r+0x24>
 8008c10:	bd38      	pop	{r3, r4, r5, pc}
 8008c12:	0799      	lsls	r1, r3, #30
 8008c14:	bf58      	it	pl
 8008c16:	6962      	ldrpl	r2, [r4, #20]
 8008c18:	60a2      	str	r2, [r4, #8]
 8008c1a:	e7f4      	b.n	8008c06 <__swsetup_r+0x8e>
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	e7f7      	b.n	8008c10 <__swsetup_r+0x98>
 8008c20:	2000001c 	.word	0x2000001c

08008c24 <_raise_r>:
 8008c24:	291f      	cmp	r1, #31
 8008c26:	b538      	push	{r3, r4, r5, lr}
 8008c28:	4605      	mov	r5, r0
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	d904      	bls.n	8008c38 <_raise_r+0x14>
 8008c2e:	2316      	movs	r3, #22
 8008c30:	6003      	str	r3, [r0, #0]
 8008c32:	f04f 30ff 	mov.w	r0, #4294967295
 8008c36:	bd38      	pop	{r3, r4, r5, pc}
 8008c38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c3a:	b112      	cbz	r2, 8008c42 <_raise_r+0x1e>
 8008c3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c40:	b94b      	cbnz	r3, 8008c56 <_raise_r+0x32>
 8008c42:	4628      	mov	r0, r5
 8008c44:	f000 f830 	bl	8008ca8 <_getpid_r>
 8008c48:	4622      	mov	r2, r4
 8008c4a:	4601      	mov	r1, r0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c52:	f000 b817 	b.w	8008c84 <_kill_r>
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d00a      	beq.n	8008c70 <_raise_r+0x4c>
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	d103      	bne.n	8008c66 <_raise_r+0x42>
 8008c5e:	2316      	movs	r3, #22
 8008c60:	6003      	str	r3, [r0, #0]
 8008c62:	2001      	movs	r0, #1
 8008c64:	e7e7      	b.n	8008c36 <_raise_r+0x12>
 8008c66:	2100      	movs	r1, #0
 8008c68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	4798      	blx	r3
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7e0      	b.n	8008c36 <_raise_r+0x12>

08008c74 <raise>:
 8008c74:	4b02      	ldr	r3, [pc, #8]	@ (8008c80 <raise+0xc>)
 8008c76:	4601      	mov	r1, r0
 8008c78:	6818      	ldr	r0, [r3, #0]
 8008c7a:	f7ff bfd3 	b.w	8008c24 <_raise_r>
 8008c7e:	bf00      	nop
 8008c80:	2000001c 	.word	0x2000001c

08008c84 <_kill_r>:
 8008c84:	b538      	push	{r3, r4, r5, lr}
 8008c86:	4d07      	ldr	r5, [pc, #28]	@ (8008ca4 <_kill_r+0x20>)
 8008c88:	2300      	movs	r3, #0
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	4608      	mov	r0, r1
 8008c8e:	4611      	mov	r1, r2
 8008c90:	602b      	str	r3, [r5, #0]
 8008c92:	f7f8 fc5b 	bl	800154c <_kill>
 8008c96:	1c43      	adds	r3, r0, #1
 8008c98:	d102      	bne.n	8008ca0 <_kill_r+0x1c>
 8008c9a:	682b      	ldr	r3, [r5, #0]
 8008c9c:	b103      	cbz	r3, 8008ca0 <_kill_r+0x1c>
 8008c9e:	6023      	str	r3, [r4, #0]
 8008ca0:	bd38      	pop	{r3, r4, r5, pc}
 8008ca2:	bf00      	nop
 8008ca4:	20004d8c 	.word	0x20004d8c

08008ca8 <_getpid_r>:
 8008ca8:	f7f8 bc48 	b.w	800153c <_getpid>

08008cac <__swhatbuf_r>:
 8008cac:	b570      	push	{r4, r5, r6, lr}
 8008cae:	460c      	mov	r4, r1
 8008cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb4:	2900      	cmp	r1, #0
 8008cb6:	b096      	sub	sp, #88	@ 0x58
 8008cb8:	4615      	mov	r5, r2
 8008cba:	461e      	mov	r6, r3
 8008cbc:	da0d      	bge.n	8008cda <__swhatbuf_r+0x2e>
 8008cbe:	89a3      	ldrh	r3, [r4, #12]
 8008cc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008cc4:	f04f 0100 	mov.w	r1, #0
 8008cc8:	bf14      	ite	ne
 8008cca:	2340      	movne	r3, #64	@ 0x40
 8008ccc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008cd0:	2000      	movs	r0, #0
 8008cd2:	6031      	str	r1, [r6, #0]
 8008cd4:	602b      	str	r3, [r5, #0]
 8008cd6:	b016      	add	sp, #88	@ 0x58
 8008cd8:	bd70      	pop	{r4, r5, r6, pc}
 8008cda:	466a      	mov	r2, sp
 8008cdc:	f000 f848 	bl	8008d70 <_fstat_r>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	dbec      	blt.n	8008cbe <__swhatbuf_r+0x12>
 8008ce4:	9901      	ldr	r1, [sp, #4]
 8008ce6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008cea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008cee:	4259      	negs	r1, r3
 8008cf0:	4159      	adcs	r1, r3
 8008cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008cf6:	e7eb      	b.n	8008cd0 <__swhatbuf_r+0x24>

08008cf8 <__smakebuf_r>:
 8008cf8:	898b      	ldrh	r3, [r1, #12]
 8008cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008cfc:	079d      	lsls	r5, r3, #30
 8008cfe:	4606      	mov	r6, r0
 8008d00:	460c      	mov	r4, r1
 8008d02:	d507      	bpl.n	8008d14 <__smakebuf_r+0x1c>
 8008d04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d08:	6023      	str	r3, [r4, #0]
 8008d0a:	6123      	str	r3, [r4, #16]
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	6163      	str	r3, [r4, #20]
 8008d10:	b003      	add	sp, #12
 8008d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d14:	ab01      	add	r3, sp, #4
 8008d16:	466a      	mov	r2, sp
 8008d18:	f7ff ffc8 	bl	8008cac <__swhatbuf_r>
 8008d1c:	9f00      	ldr	r7, [sp, #0]
 8008d1e:	4605      	mov	r5, r0
 8008d20:	4639      	mov	r1, r7
 8008d22:	4630      	mov	r0, r6
 8008d24:	f7ff f874 	bl	8007e10 <_malloc_r>
 8008d28:	b948      	cbnz	r0, 8008d3e <__smakebuf_r+0x46>
 8008d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d2e:	059a      	lsls	r2, r3, #22
 8008d30:	d4ee      	bmi.n	8008d10 <__smakebuf_r+0x18>
 8008d32:	f023 0303 	bic.w	r3, r3, #3
 8008d36:	f043 0302 	orr.w	r3, r3, #2
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	e7e2      	b.n	8008d04 <__smakebuf_r+0xc>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	6020      	str	r0, [r4, #0]
 8008d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	9b01      	ldr	r3, [sp, #4]
 8008d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008d4e:	b15b      	cbz	r3, 8008d68 <__smakebuf_r+0x70>
 8008d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d54:	4630      	mov	r0, r6
 8008d56:	f000 f81d 	bl	8008d94 <_isatty_r>
 8008d5a:	b128      	cbz	r0, 8008d68 <__smakebuf_r+0x70>
 8008d5c:	89a3      	ldrh	r3, [r4, #12]
 8008d5e:	f023 0303 	bic.w	r3, r3, #3
 8008d62:	f043 0301 	orr.w	r3, r3, #1
 8008d66:	81a3      	strh	r3, [r4, #12]
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	431d      	orrs	r5, r3
 8008d6c:	81a5      	strh	r5, [r4, #12]
 8008d6e:	e7cf      	b.n	8008d10 <__smakebuf_r+0x18>

08008d70 <_fstat_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d07      	ldr	r5, [pc, #28]	@ (8008d90 <_fstat_r+0x20>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	4611      	mov	r1, r2
 8008d7c:	602b      	str	r3, [r5, #0]
 8008d7e:	f7f8 fc45 	bl	800160c <_fstat>
 8008d82:	1c43      	adds	r3, r0, #1
 8008d84:	d102      	bne.n	8008d8c <_fstat_r+0x1c>
 8008d86:	682b      	ldr	r3, [r5, #0]
 8008d88:	b103      	cbz	r3, 8008d8c <_fstat_r+0x1c>
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	bd38      	pop	{r3, r4, r5, pc}
 8008d8e:	bf00      	nop
 8008d90:	20004d8c 	.word	0x20004d8c

08008d94 <_isatty_r>:
 8008d94:	b538      	push	{r3, r4, r5, lr}
 8008d96:	4d06      	ldr	r5, [pc, #24]	@ (8008db0 <_isatty_r+0x1c>)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	4604      	mov	r4, r0
 8008d9c:	4608      	mov	r0, r1
 8008d9e:	602b      	str	r3, [r5, #0]
 8008da0:	f7f8 fc44 	bl	800162c <_isatty>
 8008da4:	1c43      	adds	r3, r0, #1
 8008da6:	d102      	bne.n	8008dae <_isatty_r+0x1a>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	b103      	cbz	r3, 8008dae <_isatty_r+0x1a>
 8008dac:	6023      	str	r3, [r4, #0]
 8008dae:	bd38      	pop	{r3, r4, r5, pc}
 8008db0:	20004d8c 	.word	0x20004d8c

08008db4 <_init>:
 8008db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db6:	bf00      	nop
 8008db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dba:	bc08      	pop	{r3}
 8008dbc:	469e      	mov	lr, r3
 8008dbe:	4770      	bx	lr

08008dc0 <_fini>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	bf00      	nop
 8008dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc6:	bc08      	pop	{r3}
 8008dc8:	469e      	mov	lr, r3
 8008dca:	4770      	bx	lr
