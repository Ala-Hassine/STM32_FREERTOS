
LAB_11_BINARY_IT_SEMAPHORE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000889c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  08008a30  08008a30  00009a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e80  08008e80  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008e80  08008e80  00009e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e88  08008e88  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e88  08008e88  00009e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e8c  08008e8c  00009e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008e90  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d8  2**0
                  CONTENTS
 10 .bss          00004bb0  200001d8  200001d8  0000a1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004d88  20004d88  0000a1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014a38  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f9f  00000000  00000000  0001ec40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00021be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e25  00000000  00000000  00022e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004206  00000000  00000000  00023c75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013d1c  00000000  00000000  00027e7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d519b  00000000  00000000  0003bb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00110d32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ca4  00000000  00000000  00110d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  00116a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a14 	.word	0x08008a14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008a14 	.word	0x08008a14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f000 fb42 	bl	8001524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f83e 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f8a6 	bl	8000ff4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ea8:	f001 fdde 	bl	8002a68 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem */
  myBinarySemHandle = osSemaphoreNew(1, 0, &myBinarySem_attributes);
 8000eac:	4a11      	ldr	r2, [pc, #68]	@ (8000ef4 <main+0x5c>)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f001 fed0 	bl	8002c56 <osSemaphoreNew>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4a0f      	ldr	r2, [pc, #60]	@ (8000ef8 <main+0x60>)
 8000eba:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ebc:	4a0f      	ldr	r2, [pc, #60]	@ (8000efc <main+0x64>)
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <main+0x68>)
 8000ec2:	f001 fe1b 	bl	8002afc <osThreadNew>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <main+0x6c>)
 8000eca:	6013      	str	r3, [r2, #0]

  /* creation of LED1_Task */
  LED1_TaskHandle = osThreadNew(StartLED1_Task, NULL, &LED1_Task_attributes);
 8000ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <main+0x70>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	480e      	ldr	r0, [pc, #56]	@ (8000f0c <main+0x74>)
 8000ed2:	f001 fe13 	bl	8002afc <osThreadNew>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <main+0x78>)
 8000eda:	6013      	str	r3, [r2, #0]

  /* creation of LED2_Task */
  LED2_TaskHandle = osThreadNew(StartLED2_Task, NULL, &LED2_Task_attributes);
 8000edc:	4a0d      	ldr	r2, [pc, #52]	@ (8000f14 <main+0x7c>)
 8000ede:	2100      	movs	r1, #0
 8000ee0:	480d      	ldr	r0, [pc, #52]	@ (8000f18 <main+0x80>)
 8000ee2:	f001 fe0b 	bl	8002afc <osThreadNew>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8000f1c <main+0x84>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000eec:	f001 fde0 	bl	8002ab0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <main+0x58>
 8000ef4:	08008ae4 	.word	0x08008ae4
 8000ef8:	20000200 	.word	0x20000200
 8000efc:	08008a78 	.word	0x08008a78
 8000f00:	080010f1 	.word	0x080010f1
 8000f04:	200001f4 	.word	0x200001f4
 8000f08:	08008a9c 	.word	0x08008a9c
 8000f0c:	08001101 	.word	0x08001101
 8000f10:	200001f8 	.word	0x200001f8
 8000f14:	08008ac0 	.word	0x08008ac0
 8000f18:	08001135 	.word	0x08001135
 8000f1c:	200001fc 	.word	0x200001fc

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	@ 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	@ 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fdf7 	bl	8006b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	4a27      	ldr	r2, [pc, #156]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f54:	4b25      	ldr	r3, [pc, #148]	@ (8000fec <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff0 <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f90:	2308      	movs	r3, #8
 8000f92:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f94:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f9e:	2307      	movs	r3, #7
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f000 fdc8 	bl	8001b3c <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000fb2:	f000 f8e3 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	230f      	movs	r3, #15
 8000fb8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000fc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fce:	f107 030c 	add.w	r3, r7, #12
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f001 f829 	bl	800202c <HAL_RCC_ClockConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000fe0:	f000 f8cc 	bl	800117c <Error_Handler>
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	3750      	adds	r7, #80	@ 0x50
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4b2b      	ldr	r3, [pc, #172]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	4a2a      	ldr	r2, [pc, #168]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001018:	6313      	str	r3, [r2, #48]	@ 0x30
 800101a:	4b28      	ldr	r3, [pc, #160]	@ (80010bc <MX_GPIO_Init+0xc8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <MX_GPIO_Init+0xc8>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a1c      	ldr	r2, [pc, #112]	@ (80010bc <MX_GPIO_Init+0xc8>)
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_GPIO_Init+0xc8>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED1_Pin|LED2_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001064:	4816      	ldr	r0, [pc, #88]	@ (80010c0 <MX_GPIO_Init+0xcc>)
 8001066:	f000 fd1d 	bl	8001aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106a:	2301      	movs	r3, #1
 800106c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800106e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001072:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	4619      	mov	r1, r3
 800107e:	4811      	ldr	r0, [pc, #68]	@ (80010c4 <MX_GPIO_Init+0xd0>)
 8001080:	f000 fb74 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8001084:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001088:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	4619      	mov	r1, r3
 800109c:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <MX_GPIO_Init+0xcc>)
 800109e:	f000 fb65 	bl	800176c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2006      	movs	r0, #6
 80010a8:	f000 fb36 	bl	8001718 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010ac:	2006      	movs	r0, #6
 80010ae:	f000 fb4f 	bl	8001750 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b2:	bf00      	nop
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020c00 	.word	0x40020c00
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_0) // Check if the interrupt is from PA0
 80010d2:	88fb      	ldrh	r3, [r7, #6]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d104      	bne.n	80010e2 <HAL_GPIO_EXTI_Callback+0x1a>
  {
    osSemaphoreRelease(myBinarySemHandle); // Release the semaphore
 80010d8:	4b04      	ldr	r3, [pc, #16]	@ (80010ec <HAL_GPIO_EXTI_Callback+0x24>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 fe95 	bl	8002e0c <osSemaphoreRelease>
  }
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000200 	.word	0x20000200

080010f0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f001 fd91 	bl	8002c20 <osDelay>
 80010fe:	e7fb      	b.n	80010f8 <StartDefaultTask+0x8>

08001100 <StartLED1_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED1_Task */
void StartLED1_Task(void *argument)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED1_Task */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8001108:	4b08      	ldr	r3, [pc, #32]	@ (800112c <StartLED1_Task+0x2c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f04f 31ff 	mov.w	r1, #4294967295
 8001110:	4618      	mov	r0, r3
 8001112:	f001 fe29 	bl	8002d68 <osSemaphoreAcquire>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001116:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <StartLED1_Task+0x30>)
 800111c:	f000 fcdb 	bl	8001ad6 <HAL_GPIO_TogglePin>
	  osDelay(500);
 8001120:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001124:	f001 fd7c 	bl	8002c20 <osDelay>
	  osSemaphoreAcquire(myBinarySemHandle, osWaitForever);
 8001128:	bf00      	nop
 800112a:	e7ed      	b.n	8001108 <StartLED1_Task+0x8>
 800112c:	20000200 	.word	0x20000200
 8001130:	40020c00 	.word	0x40020c00

08001134 <StartLED2_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLED2_Task */
void StartLED2_Task(void *argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLED2_Task */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800113c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001140:	4804      	ldr	r0, [pc, #16]	@ (8001154 <StartLED2_Task+0x20>)
 8001142:	f000 fcc8 	bl	8001ad6 <HAL_GPIO_TogglePin>
	  osDelay(500); // Delay for 500ms
 8001146:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800114a:	f001 fd69 	bl	8002c20 <osDelay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800114e:	bf00      	nop
 8001150:	e7f4      	b.n	800113c <StartLED2_Task+0x8>
 8001152:	bf00      	nop
 8001154:	40020c00 	.word	0x40020c00

08001158 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d101      	bne.n	800116e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800116a:	f000 f9fd 	bl	8001568 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40010000 	.word	0x40010000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <Error_Handler+0x8>

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <HAL_MspInit+0x54>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <HAL_MspInit+0x54>)
 8001198:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <HAL_MspInit+0x54>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_MspInit+0x54>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b2:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_MspInit+0x54>)
 80011b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_MspInit+0x54>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c2:	603b      	str	r3, [r7, #0]
 80011c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	210f      	movs	r1, #15
 80011ca:	f06f 0001 	mvn.w	r0, #1
 80011ce:	f000 faa3 	bl	8001718 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08c      	sub	sp, #48	@ 0x30
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80011f0:	2300      	movs	r3, #0
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	4b2f      	ldr	r3, [pc, #188]	@ (80012b4 <HAL_InitTick+0xd4>)
 80011f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f8:	4a2e      	ldr	r2, [pc, #184]	@ (80012b4 <HAL_InitTick+0xd4>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8001200:	4b2c      	ldr	r3, [pc, #176]	@ (80012b4 <HAL_InitTick+0xd4>)
 8001202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120c:	f107 020c 	add.w	r2, r7, #12
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4611      	mov	r1, r2
 8001216:	4618      	mov	r0, r3
 8001218:	f001 f914 	bl	8002444 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800121c:	f001 f8fe 	bl	800241c <HAL_RCC_GetPCLK2Freq>
 8001220:	4603      	mov	r3, r0
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001228:	4a23      	ldr	r2, [pc, #140]	@ (80012b8 <HAL_InitTick+0xd8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3b01      	subs	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001234:	4b21      	ldr	r3, [pc, #132]	@ (80012bc <HAL_InitTick+0xdc>)
 8001236:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <HAL_InitTick+0xe0>)
 8001238:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800123a:	4b20      	ldr	r3, [pc, #128]	@ (80012bc <HAL_InitTick+0xdc>)
 800123c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001240:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001242:	4a1e      	ldr	r2, [pc, #120]	@ (80012bc <HAL_InitTick+0xdc>)
 8001244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001246:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001248:	4b1c      	ldr	r3, [pc, #112]	@ (80012bc <HAL_InitTick+0xdc>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1b      	ldr	r3, [pc, #108]	@ (80012bc <HAL_InitTick+0xdc>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <HAL_InitTick+0xdc>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800125a:	4818      	ldr	r0, [pc, #96]	@ (80012bc <HAL_InitTick+0xdc>)
 800125c:	f001 f924 	bl	80024a8 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001266:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800126a:	2b00      	cmp	r3, #0
 800126c:	d11b      	bne.n	80012a6 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800126e:	4813      	ldr	r0, [pc, #76]	@ (80012bc <HAL_InitTick+0xdc>)
 8001270:	f001 f974 	bl	800255c <HAL_TIM_Base_Start_IT>
 8001274:	4603      	mov	r3, r0
 8001276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800127a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800127e:	2b00      	cmp	r3, #0
 8001280:	d111      	bne.n	80012a6 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001282:	2019      	movs	r0, #25
 8001284:	f000 fa64 	bl	8001750 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d808      	bhi.n	80012a0 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800128e:	2200      	movs	r2, #0
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	2019      	movs	r0, #25
 8001294:	f000 fa40 	bl	8001718 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001298:	4a0a      	ldr	r2, [pc, #40]	@ (80012c4 <HAL_InitTick+0xe4>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	e002      	b.n	80012a6 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3730      	adds	r7, #48	@ 0x30
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	431bde83 	.word	0x431bde83
 80012bc:	20000204 	.word	0x20000204
 80012c0:	40010000 	.word	0x40010000
 80012c4:	20000004 	.word	0x20000004

080012c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <NMI_Handler+0x4>

080012d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <HardFault_Handler+0x4>

080012d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <MemManage_Handler+0x4>

080012e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <BusFault_Handler+0x4>

080012e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <UsageFault_Handler+0x4>

080012f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001302:	2001      	movs	r0, #1
 8001304:	f000 fc02 	bl	8001b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001310:	4802      	ldr	r0, [pc, #8]	@ (800131c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001312:	f001 f993 	bl	800263c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000204 	.word	0x20000204

08001320 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return 1;
 8001324:	2301      	movs	r3, #1
}
 8001326:	4618      	mov	r0, r3
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <_kill>:

int _kill(int pid, int sig)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800133a:	f005 fc9b 	bl	8006c74 <__errno>
 800133e:	4603      	mov	r3, r0
 8001340:	2216      	movs	r2, #22
 8001342:	601a      	str	r2, [r3, #0]
  return -1;
 8001344:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <_exit>:

void _exit (int status)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001358:	f04f 31ff 	mov.w	r1, #4294967295
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ffe7 	bl	8001330 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001362:	bf00      	nop
 8001364:	e7fd      	b.n	8001362 <_exit+0x12>

08001366 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
 8001376:	e00a      	b.n	800138e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001378:	f3af 8000 	nop.w
 800137c:	4601      	mov	r1, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1c5a      	adds	r2, r3, #1
 8001382:	60ba      	str	r2, [r7, #8]
 8001384:	b2ca      	uxtb	r2, r1
 8001386:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	3301      	adds	r3, #1
 800138c:	617b      	str	r3, [r7, #20]
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	429a      	cmp	r2, r3
 8001394:	dbf0      	blt.n	8001378 <_read+0x12>
  }

  return len;
 8001396:	687b      	ldr	r3, [r7, #4]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b086      	sub	sp, #24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
 80013b0:	e009      	b.n	80013c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1c5a      	adds	r2, r3, #1
 80013b6:	60ba      	str	r2, [r7, #8]
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf1      	blt.n	80013b2 <_write+0x12>
  }
  return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_close>:

int _close(int file)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001400:	605a      	str	r2, [r3, #4]
  return 0;
 8001402:	2300      	movs	r3, #0
}
 8001404:	4618      	mov	r0, r3
 8001406:	370c      	adds	r7, #12
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_isatty>:

int _isatty(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001418:	2301      	movs	r3, #1
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001426:	b480      	push	{r7}
 8001428:	b085      	sub	sp, #20
 800142a:	af00      	add	r7, sp, #0
 800142c:	60f8      	str	r0, [r7, #12]
 800142e:	60b9      	str	r1, [r7, #8]
 8001430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	@ (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	@ (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	@ (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f005 fc00 	bl	8006c74 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	@ (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	@ (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	@ (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20020000 	.word	0x20020000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	2000024c 	.word	0x2000024c
 80014a8:	20004d88 	.word	0x20004d88

080014ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001508 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014d4:	f7ff ffea 	bl	80014ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d8:	480c      	ldr	r0, [pc, #48]	@ (800150c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014da:	490d      	ldr	r1, [pc, #52]	@ (8001510 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014dc:	4a0d      	ldr	r2, [pc, #52]	@ (8001514 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e0:	e002      	b.n	80014e8 <LoopCopyDataInit>

080014e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014e6:	3304      	adds	r3, #4

080014e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014ec:	d3f9      	bcc.n	80014e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001518 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014f0:	4c0a      	ldr	r4, [pc, #40]	@ (800151c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f4:	e001      	b.n	80014fa <LoopFillZerobss>

080014f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f8:	3204      	adds	r2, #4

080014fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014fc:	d3fb      	bcc.n	80014f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014fe:	f005 fbbf 	bl	8006c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001502:	f7ff fcc9 	bl	8000e98 <main>
  bx  lr    
 8001506:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800150c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001510:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001514:	08008e90 	.word	0x08008e90
  ldr r2, =_sbss
 8001518:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800151c:	20004d88 	.word	0x20004d88

08001520 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001520:	e7fe      	b.n	8001520 <ADC_IRQHandler>
	...

08001524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001528:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <HAL_Init+0x40>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <HAL_Init+0x40>)
 800152e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_Init+0x40>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <HAL_Init+0x40>)
 800153a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800153e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <HAL_Init+0x40>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_Init+0x40>)
 8001546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800154a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800154c:	2003      	movs	r0, #3
 800154e:	f000 f8d8 	bl	8001702 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001552:	200f      	movs	r0, #15
 8001554:	f7ff fe44 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001558:	f7ff fe16 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40023c00 	.word	0x40023c00

08001568 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_IncTick+0x20>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	461a      	mov	r2, r3
 8001572:	4b06      	ldr	r3, [pc, #24]	@ (800158c <HAL_IncTick+0x24>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4413      	add	r3, r2
 8001578:	4a04      	ldr	r2, [pc, #16]	@ (800158c <HAL_IncTick+0x24>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	20000008 	.word	0x20000008
 800158c:	20000250 	.word	0x20000250

08001590 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return uwTick;
 8001594:	4b03      	ldr	r3, [pc, #12]	@ (80015a4 <HAL_GetTick+0x14>)
 8001596:	681b      	ldr	r3, [r3, #0]
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000250 	.word	0x20000250

080015a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015c4:	4013      	ands	r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015da:	4a04      	ldr	r2, [pc, #16]	@ (80015ec <__NVIC_SetPriorityGrouping+0x44>)
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	60d3      	str	r3, [r2, #12]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f4:	4b04      	ldr	r3, [pc, #16]	@ (8001608 <__NVIC_GetPriorityGrouping+0x18>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	0a1b      	lsrs	r3, r3, #8
 80015fa:	f003 0307 	and.w	r3, r3, #7
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	2b00      	cmp	r3, #0
 800161c:	db0b      	blt.n	8001636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	f003 021f 	and.w	r2, r3, #31
 8001624:	4907      	ldr	r1, [pc, #28]	@ (8001644 <__NVIC_EnableIRQ+0x38>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	095b      	lsrs	r3, r3, #5
 800162c:	2001      	movs	r0, #1
 800162e:	fa00 f202 	lsl.w	r2, r0, r2
 8001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100

08001648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	6039      	str	r1, [r7, #0]
 8001652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	2b00      	cmp	r3, #0
 800165a:	db0a      	blt.n	8001672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	b2da      	uxtb	r2, r3
 8001660:	490c      	ldr	r1, [pc, #48]	@ (8001694 <__NVIC_SetPriority+0x4c>)
 8001662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001666:	0112      	lsls	r2, r2, #4
 8001668:	b2d2      	uxtb	r2, r2
 800166a:	440b      	add	r3, r1
 800166c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001670:	e00a      	b.n	8001688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4908      	ldr	r1, [pc, #32]	@ (8001698 <__NVIC_SetPriority+0x50>)
 8001678:	79fb      	ldrb	r3, [r7, #7]
 800167a:	f003 030f 	and.w	r3, r3, #15
 800167e:	3b04      	subs	r3, #4
 8001680:	0112      	lsls	r2, r2, #4
 8001682:	b2d2      	uxtb	r2, r2
 8001684:	440b      	add	r3, r1
 8001686:	761a      	strb	r2, [r3, #24]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	e000e100 	.word	0xe000e100
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169c:	b480      	push	{r7}
 800169e:	b089      	sub	sp, #36	@ 0x24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b0:	69fb      	ldr	r3, [r7, #28]
 80016b2:	f1c3 0307 	rsb	r3, r3, #7
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	bf28      	it	cs
 80016ba:	2304      	movcs	r3, #4
 80016bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	3304      	adds	r3, #4
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d902      	bls.n	80016cc <NVIC_EncodePriority+0x30>
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3b03      	subs	r3, #3
 80016ca:	e000      	b.n	80016ce <NVIC_EncodePriority+0x32>
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d0:	f04f 32ff 	mov.w	r2, #4294967295
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43da      	mvns	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	401a      	ands	r2, r3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e4:	f04f 31ff 	mov.w	r1, #4294967295
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	fa01 f303 	lsl.w	r3, r1, r3
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	4313      	orrs	r3, r2
         );
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3724      	adds	r7, #36	@ 0x24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff ff4c 	bl	80015a8 <__NVIC_SetPriorityGrouping>
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172a:	f7ff ff61 	bl	80015f0 <__NVIC_GetPriorityGrouping>
 800172e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	68b9      	ldr	r1, [r7, #8]
 8001734:	6978      	ldr	r0, [r7, #20]
 8001736:	f7ff ffb1 	bl	800169c <NVIC_EncodePriority>
 800173a:	4602      	mov	r2, r0
 800173c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff ff80 	bl	8001648 <__NVIC_SetPriority>
}
 8001748:	bf00      	nop
 800174a:	3718      	adds	r7, #24
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff ff54 	bl	800160c <__NVIC_EnableIRQ>
}
 8001764:	bf00      	nop
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	@ 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800177a:	2300      	movs	r3, #0
 800177c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
 8001786:	e16b      	b.n	8001a60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	f040 815a 	bne.w	8001a5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d005      	beq.n	80017be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d130      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f4:	2201      	movs	r2, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	091b      	lsrs	r3, r3, #4
 800180a:	f003 0201 	and.w	r2, r3, #1
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0303 	and.w	r3, r3, #3
 8001828:	2b03      	cmp	r3, #3
 800182a:	d017      	beq.n	800185c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d123      	bne.n	80018b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	08da      	lsrs	r2, r3, #3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3208      	adds	r2, #8
 8001870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f003 0307 	and.w	r3, r3, #7
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	220f      	movs	r2, #15
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	43db      	mvns	r3, r3
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	4013      	ands	r3, r2
 800188a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	691a      	ldr	r2, [r3, #16]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	08da      	lsrs	r2, r3, #3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3208      	adds	r2, #8
 80018aa:	69b9      	ldr	r1, [r7, #24]
 80018ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	2203      	movs	r2, #3
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 0203 	and.w	r2, r3, #3
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f000 80b4 	beq.w	8001a5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	4b60      	ldr	r3, [pc, #384]	@ (8001a78 <HAL_GPIO_Init+0x30c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fa:	4a5f      	ldr	r2, [pc, #380]	@ (8001a78 <HAL_GPIO_Init+0x30c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001900:	6453      	str	r3, [r2, #68]	@ 0x44
 8001902:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <HAL_GPIO_Init+0x30c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800190e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a7c <HAL_GPIO_Init+0x310>)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a52      	ldr	r2, [pc, #328]	@ (8001a80 <HAL_GPIO_Init+0x314>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d02b      	beq.n	8001992 <HAL_GPIO_Init+0x226>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a51      	ldr	r2, [pc, #324]	@ (8001a84 <HAL_GPIO_Init+0x318>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d025      	beq.n	800198e <HAL_GPIO_Init+0x222>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <HAL_GPIO_Init+0x31c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <HAL_GPIO_Init+0x21e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4f      	ldr	r2, [pc, #316]	@ (8001a8c <HAL_GPIO_Init+0x320>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4e      	ldr	r2, [pc, #312]	@ (8001a90 <HAL_GPIO_Init+0x324>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x216>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4d      	ldr	r2, [pc, #308]	@ (8001a94 <HAL_GPIO_Init+0x328>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x212>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4c      	ldr	r2, [pc, #304]	@ (8001a98 <HAL_GPIO_Init+0x32c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x20e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4b      	ldr	r2, [pc, #300]	@ (8001a9c <HAL_GPIO_Init+0x330>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x20a>
 8001972:	2307      	movs	r3, #7
 8001974:	e00e      	b.n	8001994 <HAL_GPIO_Init+0x228>
 8001976:	2308      	movs	r3, #8
 8001978:	e00c      	b.n	8001994 <HAL_GPIO_Init+0x228>
 800197a:	2306      	movs	r3, #6
 800197c:	e00a      	b.n	8001994 <HAL_GPIO_Init+0x228>
 800197e:	2305      	movs	r3, #5
 8001980:	e008      	b.n	8001994 <HAL_GPIO_Init+0x228>
 8001982:	2304      	movs	r3, #4
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x228>
 8001986:	2303      	movs	r3, #3
 8001988:	e004      	b.n	8001994 <HAL_GPIO_Init+0x228>
 800198a:	2302      	movs	r3, #2
 800198c:	e002      	b.n	8001994 <HAL_GPIO_Init+0x228>
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <HAL_GPIO_Init+0x228>
 8001992:	2300      	movs	r3, #0
 8001994:	69fa      	ldr	r2, [r7, #28]
 8001996:	f002 0203 	and.w	r2, r2, #3
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	4093      	lsls	r3, r2
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a4:	4935      	ldr	r1, [pc, #212]	@ (8001a7c <HAL_GPIO_Init+0x310>)
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	3302      	adds	r3, #2
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b2:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d6:	4a32      	ldr	r2, [pc, #200]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019dc:	4b30      	ldr	r3, [pc, #192]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a00:	4a27      	ldr	r2, [pc, #156]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a06:	4b26      	ldr	r3, [pc, #152]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	43db      	mvns	r3, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4013      	ands	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a2a:	4a1d      	ldr	r2, [pc, #116]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a54:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <HAL_GPIO_Init+0x334>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	61fb      	str	r3, [r7, #28]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	f67f ae90 	bls.w	8001788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	3724      	adds	r7, #36	@ 0x24
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	40020400 	.word	0x40020400
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020c00 	.word	0x40020c00
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40021400 	.word	0x40021400
 8001a98:	40021800 	.word	0x40021800
 8001a9c:	40021c00 	.word	0x40021c00
 8001aa0:	40013c00 	.word	0x40013c00

08001aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	460b      	mov	r3, r1
 8001aae:	807b      	strh	r3, [r7, #2]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab4:	787b      	ldrb	r3, [r7, #1]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac0:	e003      	b.n	8001aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac2:	887b      	ldrh	r3, [r7, #2]
 8001ac4:	041a      	lsls	r2, r3, #16
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	619a      	str	r2, [r3, #24]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b085      	sub	sp, #20
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	4013      	ands	r3, r2
 8001aee:	041a      	lsls	r2, r3, #16
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	887b      	ldrh	r3, [r7, #2]
 8001af6:	400b      	ands	r3, r1
 8001af8:	431a      	orrs	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	619a      	str	r2, [r3, #24]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001b16:	4b08      	ldr	r3, [pc, #32]	@ (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b22:	4a05      	ldr	r2, [pc, #20]	@ (8001b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b28:	88fb      	ldrh	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff facc 	bl	80010c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40013c00 	.word	0x40013c00

08001b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e267      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d075      	beq.n	8001c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b5a:	4b88      	ldr	r3, [pc, #544]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 030c 	and.w	r3, r3, #12
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d00c      	beq.n	8001b80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b66:	4b85      	ldr	r3, [pc, #532]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b6e:	2b08      	cmp	r3, #8
 8001b70:	d112      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b72:	4b82      	ldr	r3, [pc, #520]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b7e:	d10b      	bne.n	8001b98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b80:	4b7e      	ldr	r3, [pc, #504]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d05b      	beq.n	8001c44 <HAL_RCC_OscConfig+0x108>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d157      	bne.n	8001c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e242      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ba0:	d106      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x74>
 8001ba2:	4b76      	ldr	r3, [pc, #472]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a75      	ldr	r2, [pc, #468]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ba8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	e01d      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x98>
 8001bba:	4b70      	ldr	r3, [pc, #448]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a6f      	ldr	r2, [pc, #444]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc4:	6013      	str	r3, [r2, #0]
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a6c      	ldr	r2, [pc, #432]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd0:	6013      	str	r3, [r2, #0]
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0xb0>
 8001bd4:	4b69      	ldr	r3, [pc, #420]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a68      	ldr	r2, [pc, #416]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	4b66      	ldr	r3, [pc, #408]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a65      	ldr	r2, [pc, #404]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001be6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fccc 	bl	8001590 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fcc8 	bl	8001590 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b64      	cmp	r3, #100	@ 0x64
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e207      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c0e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0xc0>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fcb8 	bl	8001590 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c24:	f7ff fcb4 	bl	8001590 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b64      	cmp	r3, #100	@ 0x64
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e1f3      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c36:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f0      	bne.n	8001c24 <HAL_RCC_OscConfig+0xe8>
 8001c42:	e000      	b.n	8001c46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d063      	beq.n	8001d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c52:	4b4a      	ldr	r3, [pc, #296]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c5e:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d11c      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	4b44      	ldr	r3, [pc, #272]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d116      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c76:	4b41      	ldr	r3, [pc, #260]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x152>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d001      	beq.n	8001c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e1c7      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4937      	ldr	r1, [pc, #220]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ca2:	e03a      	b.n	8001d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d020      	beq.n	8001cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cac:	4b34      	ldr	r3, [pc, #208]	@ (8001d80 <HAL_RCC_OscConfig+0x244>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb2:	f7ff fc6d 	bl	8001590 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb8:	e008      	b.n	8001ccc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cba:	f7ff fc69 	bl	8001590 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d901      	bls.n	8001ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e1a8      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0302 	and.w	r3, r3, #2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d0f0      	beq.n	8001cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	00db      	lsls	r3, r3, #3
 8001ce6:	4925      	ldr	r1, [pc, #148]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	600b      	str	r3, [r1, #0]
 8001cec:	e015      	b.n	8001d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_OscConfig+0x244>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fc4c 	bl	8001590 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cfc:	f7ff fc48 	bl	8001590 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e187      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0308 	and.w	r3, r3, #8
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d036      	beq.n	8001d94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d016      	beq.n	8001d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2e:	4b15      	ldr	r3, [pc, #84]	@ (8001d84 <HAL_RCC_OscConfig+0x248>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d34:	f7ff fc2c 	bl	8001590 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fc28 	bl	8001590 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e167      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d7c <HAL_RCC_OscConfig+0x240>)
 8001d50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x200>
 8001d5a:	e01b      	b.n	8001d94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5c:	4b09      	ldr	r3, [pc, #36]	@ (8001d84 <HAL_RCC_OscConfig+0x248>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fc15 	bl	8001590 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d68:	e00e      	b.n	8001d88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d6a:	f7ff fc11 	bl	8001590 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d907      	bls.n	8001d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e150      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	42470000 	.word	0x42470000
 8001d84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ea      	bne.n	8001d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 8097 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da6:	4b81      	ldr	r3, [pc, #516]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d10f      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dba:	4a7c      	ldr	r2, [pc, #496]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	60bb      	str	r3, [r7, #8]
 8001dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	4b77      	ldr	r3, [pc, #476]	@ (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d118      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dde:	4b74      	ldr	r3, [pc, #464]	@ (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a73      	ldr	r2, [pc, #460]	@ (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dea:	f7ff fbd1 	bl	8001590 <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df2:	f7ff fbcd 	bl	8001590 <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e10c      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e04:	4b6a      	ldr	r3, [pc, #424]	@ (8001fb0 <HAL_RCC_OscConfig+0x474>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d106      	bne.n	8001e26 <HAL_RCC_OscConfig+0x2ea>
 8001e18:	4b64      	ldr	r3, [pc, #400]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e1c:	4a63      	ldr	r2, [pc, #396]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e24:	e01c      	b.n	8001e60 <HAL_RCC_OscConfig+0x324>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b05      	cmp	r3, #5
 8001e2c:	d10c      	bne.n	8001e48 <HAL_RCC_OscConfig+0x30c>
 8001e2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e32:	4a5e      	ldr	r2, [pc, #376]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e34:	f043 0304 	orr.w	r3, r3, #4
 8001e38:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e3a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e46:	e00b      	b.n	8001e60 <HAL_RCC_OscConfig+0x324>
 8001e48:	4b58      	ldr	r3, [pc, #352]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e4c:	4a57      	ldr	r2, [pc, #348]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e4e:	f023 0301 	bic.w	r3, r3, #1
 8001e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e54:	4b55      	ldr	r3, [pc, #340]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e58:	4a54      	ldr	r2, [pc, #336]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f023 0304 	bic.w	r3, r3, #4
 8001e5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d015      	beq.n	8001e94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e68:	f7ff fb92 	bl	8001590 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6e:	e00a      	b.n	8001e86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7ff fb8e 	bl	8001590 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0cb      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	4b49      	ldr	r3, [pc, #292]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d0ee      	beq.n	8001e70 <HAL_RCC_OscConfig+0x334>
 8001e92:	e014      	b.n	8001ebe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e94:	f7ff fb7c 	bl	8001590 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e9a:	e00a      	b.n	8001eb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb78 	bl	8001590 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e0b5      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001eb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d1ee      	bne.n	8001e9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ebe:	7dfb      	ldrb	r3, [r7, #23]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d105      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ec4:	4b39      	ldr	r3, [pc, #228]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec8:	4a38      	ldr	r2, [pc, #224]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ece:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a1 	beq.w	800201c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001eda:	4b34      	ldr	r3, [pc, #208]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b08      	cmp	r3, #8
 8001ee4:	d05c      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d141      	bne.n	8001f72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eee:	4b31      	ldr	r3, [pc, #196]	@ (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef4:	f7ff fb4c 	bl	8001590 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff fb48 	bl	8001590 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e087      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	4b27      	ldr	r3, [pc, #156]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f0      	bne.n	8001efc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69da      	ldr	r2, [r3, #28]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	019b      	lsls	r3, r3, #6
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	085b      	lsrs	r3, r3, #1
 8001f32:	3b01      	subs	r3, #1
 8001f34:	041b      	lsls	r3, r3, #16
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	061b      	lsls	r3, r3, #24
 8001f3e:	491b      	ldr	r1, [pc, #108]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f44:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001f46:	2201      	movs	r2, #1
 8001f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4a:	f7ff fb21 	bl	8001590 <HAL_GetTick>
 8001f4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f52:	f7ff fb1d 	bl	8001590 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e05c      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f64:	4b11      	ldr	r3, [pc, #68]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f0      	beq.n	8001f52 <HAL_RCC_OscConfig+0x416>
 8001f70:	e054      	b.n	800201c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f72:	4b10      	ldr	r3, [pc, #64]	@ (8001fb4 <HAL_RCC_OscConfig+0x478>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f78:	f7ff fb0a 	bl	8001590 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff fb06 	bl	8001590 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e045      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_OscConfig+0x470>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x444>
 8001f9e:	e03d      	b.n	800201c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d107      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e038      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000
 8001fb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002028 <HAL_RCC_OscConfig+0x4ec>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d028      	beq.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d121      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d11a      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001fe8:	4013      	ands	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001fee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d111      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffe:	085b      	lsrs	r3, r3, #1
 8002000:	3b01      	subs	r3, #1
 8002002:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002004:	429a      	cmp	r2, r3
 8002006:	d107      	bne.n	8002018 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e000      	b.n	800201e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800

0800202c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0cc      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002040:	4b68      	ldr	r3, [pc, #416]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	683a      	ldr	r2, [r7, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d90c      	bls.n	8002068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800204e:	4b65      	ldr	r3, [pc, #404]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	4a58      	ldr	r2, [pc, #352]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002086:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800208a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	4a52      	ldr	r2, [pc, #328]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800209e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d044      	beq.n	800214c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d119      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d003      	beq.n	80020ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020ea:	4b3f      	ldr	r3, [pc, #252]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d109      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b3b      	ldr	r3, [pc, #236]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e067      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800210a:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f023 0203 	bic.w	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4934      	ldr	r1, [pc, #208]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	4313      	orrs	r3, r2
 800211a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800211c:	f7ff fa38 	bl	8001590 <HAL_GetTick>
 8002120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002122:	e00a      	b.n	800213a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002124:	f7ff fa34 	bl	8001590 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002132:	4293      	cmp	r3, r2
 8002134:	d901      	bls.n	800213a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e04f      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800213a:	4b2b      	ldr	r3, [pc, #172]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f003 020c 	and.w	r2, r3, #12
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	429a      	cmp	r2, r3
 800214a:	d1eb      	bne.n	8002124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800214c:	4b25      	ldr	r3, [pc, #148]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d20c      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215a:	4b22      	ldr	r3, [pc, #136]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	@ (80021e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 800218e:	4313      	orrs	r3, r2
 8002190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	490a      	ldr	r1, [pc, #40]	@ (80021ec <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_ClockConfig+0x1c8>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f804 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023c00 	.word	0x40023c00
 80021e8:	40023800 	.word	0x40023800
 80021ec:	08008af4 	.word	0x08008af4
 80021f0:	20000000 	.word	0x20000000
 80021f4:	20000004 	.word	0x20000004

080021f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021fc:	b094      	sub	sp, #80	@ 0x50
 80021fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002210:	4b79      	ldr	r3, [pc, #484]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d00d      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x40>
 800221c:	2b08      	cmp	r3, #8
 800221e:	f200 80e1 	bhi.w	80023e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_RCC_GetSysClockFreq+0x34>
 8002226:	2b04      	cmp	r3, #4
 8002228:	d003      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x3a>
 800222a:	e0db      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800222c:	4b73      	ldr	r3, [pc, #460]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x204>)
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002230:	e0db      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002232:	4b73      	ldr	r3, [pc, #460]	@ (8002400 <HAL_RCC_GetSysClockFreq+0x208>)
 8002234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002236:	e0d8      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002238:	4b6f      	ldr	r3, [pc, #444]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002240:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002242:	4b6d      	ldr	r3, [pc, #436]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d063      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224e:	4b6a      	ldr	r3, [pc, #424]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	2200      	movs	r2, #0
 8002256:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002258:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800225a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002260:	633b      	str	r3, [r7, #48]	@ 0x30
 8002262:	2300      	movs	r3, #0
 8002264:	637b      	str	r3, [r7, #52]	@ 0x34
 8002266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800226a:	4622      	mov	r2, r4
 800226c:	462b      	mov	r3, r5
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	0159      	lsls	r1, r3, #5
 8002278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227c:	0150      	lsls	r0, r2, #5
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4621      	mov	r1, r4
 8002284:	1a51      	subs	r1, r2, r1
 8002286:	6139      	str	r1, [r7, #16]
 8002288:	4629      	mov	r1, r5
 800228a:	eb63 0301 	sbc.w	r3, r3, r1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800229c:	4659      	mov	r1, fp
 800229e:	018b      	lsls	r3, r1, #6
 80022a0:	4651      	mov	r1, sl
 80022a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a6:	4651      	mov	r1, sl
 80022a8:	018a      	lsls	r2, r1, #6
 80022aa:	4651      	mov	r1, sl
 80022ac:	ebb2 0801 	subs.w	r8, r2, r1
 80022b0:	4659      	mov	r1, fp
 80022b2:	eb63 0901 	sbc.w	r9, r3, r1
 80022b6:	f04f 0200 	mov.w	r2, #0
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ca:	4690      	mov	r8, r2
 80022cc:	4699      	mov	r9, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	eb18 0303 	adds.w	r3, r8, r3
 80022d4:	60bb      	str	r3, [r7, #8]
 80022d6:	462b      	mov	r3, r5
 80022d8:	eb49 0303 	adc.w	r3, r9, r3
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	f04f 0200 	mov.w	r2, #0
 80022e2:	f04f 0300 	mov.w	r3, #0
 80022e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80022ea:	4629      	mov	r1, r5
 80022ec:	024b      	lsls	r3, r1, #9
 80022ee:	4621      	mov	r1, r4
 80022f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f4:	4621      	mov	r1, r4
 80022f6:	024a      	lsls	r2, r1, #9
 80022f8:	4610      	mov	r0, r2
 80022fa:	4619      	mov	r1, r3
 80022fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022fe:	2200      	movs	r2, #0
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002302:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002308:	f7fe fc4e 	bl	8000ba8 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4613      	mov	r3, r2
 8002312:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002314:	e058      	b.n	80023c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002316:	4b38      	ldr	r3, [pc, #224]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	099b      	lsrs	r3, r3, #6
 800231c:	2200      	movs	r2, #0
 800231e:	4618      	mov	r0, r3
 8002320:	4611      	mov	r1, r2
 8002322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	2300      	movs	r3, #0
 800232a:	627b      	str	r3, [r7, #36]	@ 0x24
 800232c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002330:	4642      	mov	r2, r8
 8002332:	464b      	mov	r3, r9
 8002334:	f04f 0000 	mov.w	r0, #0
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	0159      	lsls	r1, r3, #5
 800233e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002342:	0150      	lsls	r0, r2, #5
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4641      	mov	r1, r8
 800234a:	ebb2 0a01 	subs.w	sl, r2, r1
 800234e:	4649      	mov	r1, r9
 8002350:	eb63 0b01 	sbc.w	fp, r3, r1
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002368:	ebb2 040a 	subs.w	r4, r2, sl
 800236c:	eb63 050b 	sbc.w	r5, r3, fp
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	00eb      	lsls	r3, r5, #3
 800237a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800237e:	00e2      	lsls	r2, r4, #3
 8002380:	4614      	mov	r4, r2
 8002382:	461d      	mov	r5, r3
 8002384:	4643      	mov	r3, r8
 8002386:	18e3      	adds	r3, r4, r3
 8002388:	603b      	str	r3, [r7, #0]
 800238a:	464b      	mov	r3, r9
 800238c:	eb45 0303 	adc.w	r3, r5, r3
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800239e:	4629      	mov	r1, r5
 80023a0:	028b      	lsls	r3, r1, #10
 80023a2:	4621      	mov	r1, r4
 80023a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023a8:	4621      	mov	r1, r4
 80023aa:	028a      	lsls	r2, r1, #10
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b2:	2200      	movs	r2, #0
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	61fa      	str	r2, [r7, #28]
 80023b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023bc:	f7fe fbf4 	bl	8000ba8 <__aeabi_uldivmod>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4613      	mov	r3, r2
 80023c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023c8:	4b0b      	ldr	r3, [pc, #44]	@ (80023f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	0c1b      	lsrs	r3, r3, #16
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	3301      	adds	r3, #1
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetSysClockFreq+0x204>)
 80023e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3750      	adds	r7, #80	@ 0x50
 80023f0:	46bd      	mov	sp, r7
 80023f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	007a1200 	.word	0x007a1200

08002404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002408:	4b03      	ldr	r3, [pc, #12]	@ (8002418 <HAL_RCC_GetHCLKFreq+0x14>)
 800240a:	681b      	ldr	r3, [r3, #0]
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	20000000 	.word	0x20000000

0800241c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002420:	f7ff fff0 	bl	8002404 <HAL_RCC_GetHCLKFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	0b5b      	lsrs	r3, r3, #13
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	4903      	ldr	r1, [pc, #12]	@ (8002440 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002438:	4618      	mov	r0, r3
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40023800 	.word	0x40023800
 8002440:	08008b04 	.word	0x08008b04

08002444 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	220f      	movs	r2, #15
 8002452:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002454:	4b12      	ldr	r3, [pc, #72]	@ (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0203 	and.w	r2, r3, #3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002460:	4b0f      	ldr	r3, [pc, #60]	@ (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800246c:	4b0c      	ldr	r3, [pc, #48]	@ (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002478:	4b09      	ldr	r3, [pc, #36]	@ (80024a0 <HAL_RCC_GetClockConfig+0x5c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	08db      	lsrs	r3, r3, #3
 800247e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002486:	4b07      	ldr	r3, [pc, #28]	@ (80024a4 <HAL_RCC_GetClockConfig+0x60>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0207 	and.w	r2, r3, #7
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	601a      	str	r2, [r3, #0]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40023c00 	.word	0x40023c00

080024a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e041      	b.n	800253e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d106      	bne.n	80024d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024ce:	6878      	ldr	r0, [r7, #4]
 80024d0:	f000 f839 	bl	8002546 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3304      	adds	r3, #4
 80024e4:	4619      	mov	r1, r3
 80024e6:	4610      	mov	r0, r2
 80024e8:	f000 f9c0 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002546:	b480      	push	{r7}
 8002548:	b083      	sub	sp, #12
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
	...

0800255c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e04e      	b.n	8002612 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a23      	ldr	r2, [pc, #140]	@ (8002620 <HAL_TIM_Base_Start_IT+0xc4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259e:	d01d      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <HAL_TIM_Base_Start_IT+0xc8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002628 <HAL_TIM_Base_Start_IT+0xcc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1c      	ldr	r2, [pc, #112]	@ (800262c <HAL_TIM_Base_Start_IT+0xd0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002630 <HAL_TIM_Base_Start_IT+0xd4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	@ (8002634 <HAL_TIM_Base_Start_IT+0xd8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_TIM_Base_Start_IT+0x80>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a18      	ldr	r2, [pc, #96]	@ (8002638 <HAL_TIM_Base_Start_IT+0xdc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d111      	bne.n	8002600 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b06      	cmp	r3, #6
 80025ec:	d010      	beq.n	8002610 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f042 0201 	orr.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025fe:	e007      	b.n	8002610 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0201 	orr.w	r2, r2, #1
 800260e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40010000 	.word	0x40010000
 8002624:	40000400 	.word	0x40000400
 8002628:	40000800 	.word	0x40000800
 800262c:	40000c00 	.word	0x40000c00
 8002630:	40010400 	.word	0x40010400
 8002634:	40014000 	.word	0x40014000
 8002638:	40001800 	.word	0x40001800

0800263c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d020      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d01b      	beq.n	80026a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f06f 0202 	mvn.w	r2, #2
 8002670:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699b      	ldr	r3, [r3, #24]
 800267e:	f003 0303 	and.w	r3, r3, #3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f8d2 	bl	8002830 <HAL_TIM_IC_CaptureCallback>
 800268c:	e005      	b.n	800269a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f8c4 	bl	800281c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f000 f8d5 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d01b      	beq.n	80026ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0204 	mvn.w	r2, #4
 80026bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2202      	movs	r2, #2
 80026c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8ac 	bl	8002830 <HAL_TIM_IC_CaptureCallback>
 80026d8:	e005      	b.n	80026e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f89e 	bl	800281c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f8af 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0308 	and.w	r3, r3, #8
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d020      	beq.n	8002738 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0308 	and.w	r3, r3, #8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0208 	mvn.w	r2, #8
 8002708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2204      	movs	r2, #4
 800270e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f886 	bl	8002830 <HAL_TIM_IC_CaptureCallback>
 8002724:	e005      	b.n	8002732 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 f878 	bl	800281c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f889 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	f003 0310 	and.w	r3, r3, #16
 800273e:	2b00      	cmp	r3, #0
 8002740:	d020      	beq.n	8002784 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0210 	mvn.w	r2, #16
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2208      	movs	r2, #8
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f860 	bl	8002830 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f852 	bl	800281c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f863 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0201 	mvn.w	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7fe fcd8 	bl	8001158 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f900 	bl	80029cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00c      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d007      	beq.n	80027f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80027e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f834 	bl	8002858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f003 0320 	and.w	r3, r3, #32
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00c      	beq.n	8002814 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f003 0320 	and.w	r3, r3, #32
 8002800:	2b00      	cmp	r3, #0
 8002802:	d007      	beq.n	8002814 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f06f 0220 	mvn.w	r2, #32
 800280c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8d2 	bl	80029b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a43      	ldr	r2, [pc, #268]	@ (800298c <TIM_Base_SetConfig+0x120>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800288a:	d00f      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a40      	ldr	r2, [pc, #256]	@ (8002990 <TIM_Base_SetConfig+0x124>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3f      	ldr	r2, [pc, #252]	@ (8002994 <TIM_Base_SetConfig+0x128>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3e      	ldr	r2, [pc, #248]	@ (8002998 <TIM_Base_SetConfig+0x12c>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3d      	ldr	r2, [pc, #244]	@ (800299c <TIM_Base_SetConfig+0x130>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a32      	ldr	r2, [pc, #200]	@ (800298c <TIM_Base_SetConfig+0x120>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028cc:	d027      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002990 <TIM_Base_SetConfig+0x124>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d023      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a2e      	ldr	r2, [pc, #184]	@ (8002994 <TIM_Base_SetConfig+0x128>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002998 <TIM_Base_SetConfig+0x12c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a2c      	ldr	r2, [pc, #176]	@ (800299c <TIM_Base_SetConfig+0x130>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d017      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a2b      	ldr	r2, [pc, #172]	@ (80029a0 <TIM_Base_SetConfig+0x134>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <TIM_Base_SetConfig+0x138>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00f      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a29      	ldr	r2, [pc, #164]	@ (80029a8 <TIM_Base_SetConfig+0x13c>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <TIM_Base_SetConfig+0x140>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <TIM_Base_SetConfig+0x144>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a26      	ldr	r2, [pc, #152]	@ (80029b4 <TIM_Base_SetConfig+0x148>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <TIM_Base_SetConfig+0x120>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d003      	beq.n	800295e <TIM_Base_SetConfig+0xf2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a10      	ldr	r2, [pc, #64]	@ (800299c <TIM_Base_SetConfig+0x130>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d103      	bne.n	8002966 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2201      	movs	r2, #1
 8002976:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	601a      	str	r2, [r3, #0]
}
 800297e:	bf00      	nop
 8002980:	3714      	adds	r7, #20
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40010000 	.word	0x40010000
 8002990:	40000400 	.word	0x40000400
 8002994:	40000800 	.word	0x40000800
 8002998:	40000c00 	.word	0x40000c00
 800299c:	40010400 	.word	0x40010400
 80029a0:	40014000 	.word	0x40014000
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800
 80029ac:	40001800 	.word	0x40001800
 80029b0:	40001c00 	.word	0x40001c00
 80029b4:	40002000 	.word	0x40002000

080029b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <__NVIC_SetPriority>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	@ (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	@ (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002a38:	4b05      	ldr	r3, [pc, #20]	@ (8002a50 <SysTick_Handler+0x1c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002a3c:	f002 f996 	bl	8004d6c <xTaskGetSchedulerState>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002a46:	f003 f88f 	bl	8005b68 <xPortSysTickHandler>
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	e000e010 	.word	0xe000e010

08002a54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002a58:	2100      	movs	r1, #0
 8002a5a:	f06f 0004 	mvn.w	r0, #4
 8002a5e:	f7ff ffbf 	bl	80029e0 <__NVIC_SetPriority>
#endif
}
 8002a62:	bf00      	nop
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a6e:	f3ef 8305 	mrs	r3, IPSR
 8002a72:	603b      	str	r3, [r7, #0]
  return(result);
 8002a74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002a7a:	f06f 0305 	mvn.w	r3, #5
 8002a7e:	607b      	str	r3, [r7, #4]
 8002a80:	e00c      	b.n	8002a9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002a82:	4b0a      	ldr	r3, [pc, #40]	@ (8002aac <osKernelInitialize+0x44>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d105      	bne.n	8002a96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002a8a:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <osKernelInitialize+0x44>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	607b      	str	r3, [r7, #4]
 8002a94:	e002      	b.n	8002a9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002a96:	f04f 33ff 	mov.w	r3, #4294967295
 8002a9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a9c:	687b      	ldr	r3, [r7, #4]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	20000254 	.word	0x20000254

08002ab0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ab6:	f3ef 8305 	mrs	r3, IPSR
 8002aba:	603b      	str	r3, [r7, #0]
  return(result);
 8002abc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <osKernelStart+0x1a>
    stat = osErrorISR;
 8002ac2:	f06f 0305 	mvn.w	r3, #5
 8002ac6:	607b      	str	r3, [r7, #4]
 8002ac8:	e010      	b.n	8002aec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <osKernelStart+0x48>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d109      	bne.n	8002ae6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ad2:	f7ff ffbf 	bl	8002a54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <osKernelStart+0x48>)
 8002ad8:	2202      	movs	r2, #2
 8002ada:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002adc:	f001 fce2 	bl	80044a4 <vTaskStartScheduler>
      stat = osOK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	e002      	b.n	8002aec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002aec:	687b      	ldr	r3, [r7, #4]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000254 	.word	0x20000254

08002afc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08e      	sub	sp, #56	@ 0x38
 8002b00:	af04      	add	r7, sp, #16
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b0c:	f3ef 8305 	mrs	r3, IPSR
 8002b10:	617b      	str	r3, [r7, #20]
  return(result);
 8002b12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d17e      	bne.n	8002c16 <osThreadNew+0x11a>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d07b      	beq.n	8002c16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002b1e:	2380      	movs	r3, #128	@ 0x80
 8002b20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002b22:	2318      	movs	r3, #24
 8002b24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d045      	beq.n	8002bc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <osThreadNew+0x48>
        name = attr->name;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d002      	beq.n	8002b52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d008      	beq.n	8002b6a <osThreadNew+0x6e>
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	2b38      	cmp	r3, #56	@ 0x38
 8002b5c:	d805      	bhi.n	8002b6a <osThreadNew+0x6e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <osThreadNew+0x72>
        return (NULL);
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	e054      	b.n	8002c18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	089b      	lsrs	r3, r3, #2
 8002b7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <osThreadNew+0xa8>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2ba7      	cmp	r3, #167	@ 0xa7
 8002b8c:	d90a      	bls.n	8002ba4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d006      	beq.n	8002ba4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d002      	beq.n	8002ba4 <osThreadNew+0xa8>
        mem = 1;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	61bb      	str	r3, [r7, #24]
 8002ba2:	e010      	b.n	8002bc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <osThreadNew+0xca>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d108      	bne.n	8002bc6 <osThreadNew+0xca>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	691b      	ldr	r3, [r3, #16]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d104      	bne.n	8002bc6 <osThreadNew+0xca>
          mem = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
 8002bc0:	e001      	b.n	8002bc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d110      	bne.n	8002bee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002bd4:	9202      	str	r2, [sp, #8]
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	6a3a      	ldr	r2, [r7, #32]
 8002be0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f001 fa6a 	bl	80040bc <xTaskCreateStatic>
 8002be8:	4603      	mov	r3, r0
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e013      	b.n	8002c16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d110      	bne.n	8002c16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	f107 0310 	add.w	r3, r7, #16
 8002bfc:	9301      	str	r3, [sp, #4]
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	9300      	str	r3, [sp, #0]
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f001 fab8 	bl	800417c <xTaskCreate>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <osThreadNew+0x11a>
            hTask = NULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002c16:	693b      	ldr	r3, [r7, #16]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	@ 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c28:	f3ef 8305 	mrs	r3, IPSR
 8002c2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <osDelay+0x1c>
    stat = osErrorISR;
 8002c34:	f06f 0305 	mvn.w	r3, #5
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	e007      	b.n	8002c4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f001 fbf6 	bl	8004438 <vTaskDelay>
    }
  }

  return (stat);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b08a      	sub	sp, #40	@ 0x28
 8002c5a:	af02      	add	r7, sp, #8
 8002c5c:	60f8      	str	r0, [r7, #12]
 8002c5e:	60b9      	str	r1, [r7, #8]
 8002c60:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c66:	f3ef 8305 	mrs	r3, IPSR
 8002c6a:	613b      	str	r3, [r7, #16]
  return(result);
 8002c6c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d175      	bne.n	8002d5e <osSemaphoreNew+0x108>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d072      	beq.n	8002d5e <osSemaphoreNew+0x108>
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d86e      	bhi.n	8002d5e <osSemaphoreNew+0x108>
    mem = -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
 8002c84:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <osSemaphoreNew+0x4c>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b4f      	cmp	r3, #79	@ 0x4f
 8002c9a:	d902      	bls.n	8002ca2 <osSemaphoreNew+0x4c>
        mem = 1;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	e00c      	b.n	8002cbc <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d108      	bne.n	8002cbc <osSemaphoreNew+0x66>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <osSemaphoreNew+0x66>
          mem = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	e001      	b.n	8002cbc <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc2:	d04c      	beq.n	8002d5e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d128      	bne.n	8002d1c <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10a      	bne.n	8002ce6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2203      	movs	r2, #3
 8002cd6:	9200      	str	r2, [sp, #0]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2001      	movs	r0, #1
 8002cde:	f000 fa2b 	bl	8003138 <xQueueGenericCreateStatic>
 8002ce2:	61f8      	str	r0, [r7, #28]
 8002ce4:	e005      	b.n	8002cf2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	2100      	movs	r1, #0
 8002cea:	2001      	movs	r0, #1
 8002cec:	f000 faa1 	bl	8003232 <xQueueGenericCreate>
 8002cf0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d022      	beq.n	8002d3e <osSemaphoreNew+0xe8>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d01f      	beq.n	8002d3e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	2200      	movs	r2, #0
 8002d02:	2100      	movs	r1, #0
 8002d04:	69f8      	ldr	r0, [r7, #28]
 8002d06:	f000 fb61 	bl	80033cc <xQueueGenericSend>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d016      	beq.n	8002d3e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002d10:	69f8      	ldr	r0, [r7, #28]
 8002d12:	f000 ffff 	bl	8003d14 <vQueueDelete>
            hSemaphore = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e010      	b.n	8002d3e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d108      	bne.n	8002d34 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	461a      	mov	r2, r3
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	68f8      	ldr	r0, [r7, #12]
 8002d2c:	f000 fadf 	bl	80032ee <xQueueCreateCountingSemaphoreStatic>
 8002d30:	61f8      	str	r0, [r7, #28]
 8002d32:	e004      	b.n	8002d3e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fb12 	bl	8003360 <xQueueCreateCountingSemaphore>
 8002d3c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00c      	beq.n	8002d5e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <osSemaphoreNew+0xfc>
          name = attr->name;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	e001      	b.n	8002d56 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002d56:	6979      	ldr	r1, [r7, #20]
 8002d58:	69f8      	ldr	r0, [r7, #28]
 8002d5a:	f001 f927 	bl	8003fac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002d5e:	69fb      	ldr	r3, [r7, #28]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d103      	bne.n	8002d88 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8002d80:	f06f 0303 	mvn.w	r3, #3
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e039      	b.n	8002dfc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d88:	f3ef 8305 	mrs	r3, IPSR
 8002d8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d022      	beq.n	8002dda <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8002d9a:	f06f 0303 	mvn.w	r3, #3
 8002d9e:	617b      	str	r3, [r7, #20]
 8002da0:	e02c      	b.n	8002dfc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8002da6:	f107 0308 	add.w	r3, r7, #8
 8002daa:	461a      	mov	r2, r3
 8002dac:	2100      	movs	r1, #0
 8002dae:	6938      	ldr	r0, [r7, #16]
 8002db0:	f000 ff2e 	bl	8003c10 <xQueueReceiveFromISR>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d003      	beq.n	8002dc2 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8002dba:	f06f 0302 	mvn.w	r3, #2
 8002dbe:	617b      	str	r3, [r7, #20]
 8002dc0:	e01c      	b.n	8002dfc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d019      	beq.n	8002dfc <osSemaphoreAcquire+0x94>
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002e08 <osSemaphoreAcquire+0xa0>)
 8002dca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	f3bf 8f6f 	isb	sy
 8002dd8:	e010      	b.n	8002dfc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8002dda:	6839      	ldr	r1, [r7, #0]
 8002ddc:	6938      	ldr	r0, [r7, #16]
 8002dde:	f000 fe07 	bl	80039f0 <xQueueSemaphoreTake>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d009      	beq.n	8002dfc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002dee:	f06f 0301 	mvn.w	r3, #1
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e002      	b.n	8002dfc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8002df6:	f06f 0302 	mvn.w	r3, #2
 8002dfa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000ed04 	.word	0xe000ed04

08002e0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002e22:	f06f 0303 	mvn.w	r3, #3
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e02c      	b.n	8002e84 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e2a:	f3ef 8305 	mrs	r3, IPSR
 8002e2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01a      	beq.n	8002e6c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6938      	ldr	r0, [r7, #16]
 8002e42:	f000 fc63 	bl	800370c <xQueueGiveFromISR>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d003      	beq.n	8002e54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002e4c:	f06f 0302 	mvn.w	r3, #2
 8002e50:	617b      	str	r3, [r7, #20]
 8002e52:	e017      	b.n	8002e84 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d014      	beq.n	8002e84 <osSemaphoreRelease+0x78>
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <osSemaphoreRelease+0x84>)
 8002e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e60:	601a      	str	r2, [r3, #0]
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	e00b      	b.n	8002e84 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	6938      	ldr	r0, [r7, #16]
 8002e74:	f000 faaa 	bl	80033cc <xQueueGenericSend>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d002      	beq.n	8002e84 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8002e7e:	f06f 0302 	mvn.w	r3, #2
 8002e82:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8002e84:	697b      	ldr	r3, [r7, #20]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	e000ed04 	.word	0xe000ed04

08002e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	4a07      	ldr	r2, [pc, #28]	@ (8002ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4a06      	ldr	r2, [pc, #24]	@ (8002ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8002eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000258 	.word	0x20000258
 8002ec4:	20000300 	.word	0x20000300

08002ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a06      	ldr	r2, [pc, #24]	@ (8002ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8002ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ee6:	601a      	str	r2, [r3, #0]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr
 8002ef4:	20000500 	.word	0x20000500
 8002ef8:	200005a8 	.word	0x200005a8

08002efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f103 0208 	add.w	r2, r3, #8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f04f 32ff 	mov.w	r2, #4294967295
 8002f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f103 0208 	add.w	r2, r3, #8
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f103 0208 	add.w	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d103      	bne.n	8002fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e00c      	b.n	8002fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	3308      	adds	r3, #8
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	e002      	b.n	8002fcc <vListInsert+0x2e>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d2f6      	bcs.n	8002fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	601a      	str	r2, [r3, #0]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	6892      	ldr	r2, [r2, #8]
 8003026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6852      	ldr	r2, [r2, #4]
 8003030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	429a      	cmp	r2, r3
 800303a:	d103      	bne.n	8003044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689a      	ldr	r2, [r3, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	1e5a      	subs	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d10b      	bne.n	8003090 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800308a:	bf00      	nop
 800308c:	bf00      	nop
 800308e:	e7fd      	b.n	800308c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003090:	f002 fcda 	bl	8005a48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309c:	68f9      	ldr	r1, [r7, #12]
 800309e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030a0:	fb01 f303 	mul.w	r3, r1, r3
 80030a4:	441a      	add	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c0:	3b01      	subs	r3, #1
 80030c2:	68f9      	ldr	r1, [r7, #12]
 80030c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80030c6:	fb01 f303 	mul.w	r3, r1, r3
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	22ff      	movs	r2, #255	@ 0xff
 80030d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	22ff      	movs	r2, #255	@ 0xff
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d114      	bne.n	8003110 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d01a      	beq.n	8003124 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3310      	adds	r3, #16
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fc74 	bl	80049e0 <xTaskRemoveFromEventList>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d012      	beq.n	8003124 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80030fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003134 <xQueueGenericReset+0xd0>)
 8003100:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	e009      	b.n	8003124 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3310      	adds	r3, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f7ff fef1 	bl	8002efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	3324      	adds	r3, #36	@ 0x24
 800311e:	4618      	mov	r0, r3
 8003120:	f7ff feec 	bl	8002efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003124:	f002 fcc2 	bl	8005aac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003128:	2301      	movs	r3, #1
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	e000ed04 	.word	0xe000ed04

08003138 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003138:	b580      	push	{r7, lr}
 800313a:	b08e      	sub	sp, #56	@ 0x38
 800313c:	af02      	add	r7, sp, #8
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d10b      	bne.n	8003164 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10b      	bne.n	8003182 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800316a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316e:	f383 8811 	msr	BASEPRI, r3
 8003172:	f3bf 8f6f 	isb	sy
 8003176:	f3bf 8f4f 	dsb	sy
 800317a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	e7fd      	b.n	800317e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <xQueueGenericCreateStatic+0x56>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <xQueueGenericCreateStatic+0x5a>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <xQueueGenericCreateStatic+0x5c>
 8003192:	2300      	movs	r3, #0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d10b      	bne.n	80031b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003198:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319c:	f383 8811 	msr	BASEPRI, r3
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	f3bf 8f4f 	dsb	sy
 80031a8:	623b      	str	r3, [r7, #32]
}
 80031aa:	bf00      	nop
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <xQueueGenericCreateStatic+0x84>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <xQueueGenericCreateStatic+0x88>
 80031bc:	2301      	movs	r3, #1
 80031be:	e000      	b.n	80031c2 <xQueueGenericCreateStatic+0x8a>
 80031c0:	2300      	movs	r3, #0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10b      	bne.n	80031de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ca:	f383 8811 	msr	BASEPRI, r3
 80031ce:	f3bf 8f6f 	isb	sy
 80031d2:	f3bf 8f4f 	dsb	sy
 80031d6:	61fb      	str	r3, [r7, #28]
}
 80031d8:	bf00      	nop
 80031da:	bf00      	nop
 80031dc:	e7fd      	b.n	80031da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031de:	2350      	movs	r3, #80	@ 0x50
 80031e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	2b50      	cmp	r3, #80	@ 0x50
 80031e6:	d00b      	beq.n	8003200 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80031e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	61bb      	str	r3, [r7, #24]
}
 80031fa:	bf00      	nop
 80031fc:	bf00      	nop
 80031fe:	e7fd      	b.n	80031fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003200:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00d      	beq.n	8003228 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800320c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003214:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	4613      	mov	r3, r2
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f840 	bl	80032a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800322a:	4618      	mov	r0, r3
 800322c:	3730      	adds	r7, #48	@ 0x30
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003232:	b580      	push	{r7, lr}
 8003234:	b08a      	sub	sp, #40	@ 0x28
 8003236:	af02      	add	r7, sp, #8
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	4613      	mov	r3, r2
 800323e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800324a:	f383 8811 	msr	BASEPRI, r3
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	f3bf 8f4f 	dsb	sy
 8003256:	613b      	str	r3, [r7, #16]
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	e7fd      	b.n	800325a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	68ba      	ldr	r2, [r7, #8]
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3350      	adds	r3, #80	@ 0x50
 800326c:	4618      	mov	r0, r3
 800326e:	f002 fd0d 	bl	8005c8c <pvPortMalloc>
 8003272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d011      	beq.n	800329e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	3350      	adds	r3, #80	@ 0x50
 8003282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800328c:	79fa      	ldrb	r2, [r7, #7]
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	9300      	str	r3, [sp, #0]
 8003292:	4613      	mov	r3, r2
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	68b9      	ldr	r1, [r7, #8]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f805 	bl	80032a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800329e:	69bb      	ldr	r3, [r7, #24]
	}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3720      	adds	r7, #32
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d103      	bne.n	80032c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e002      	b.n	80032ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80032d6:	2101      	movs	r1, #1
 80032d8:	69b8      	ldr	r0, [r7, #24]
 80032da:	f7ff fec3 	bl	8003064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80032de:	69bb      	ldr	r3, [r7, #24]
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80032e6:	bf00      	nop
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b08a      	sub	sp, #40	@ 0x28
 80032f2:	af02      	add	r7, sp, #8
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10b      	bne.n	8003318 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8003300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003304:	f383 8811 	msr	BASEPRI, r3
 8003308:	f3bf 8f6f 	isb	sy
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	61bb      	str	r3, [r7, #24]
}
 8003312:	bf00      	nop
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	429a      	cmp	r2, r3
 800331e:	d90b      	bls.n	8003338 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8003320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003324:	f383 8811 	msr	BASEPRI, r3
 8003328:	f3bf 8f6f 	isb	sy
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	617b      	str	r3, [r7, #20]
}
 8003332:	bf00      	nop
 8003334:	bf00      	nop
 8003336:	e7fd      	b.n	8003334 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003338:	2302      	movs	r3, #2
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	2100      	movs	r1, #0
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f7ff fef8 	bl	8003138 <xQueueGenericCreateStatic>
 8003348:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003356:	69fb      	ldr	r3, [r7, #28]
	}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	613b      	str	r3, [r7, #16]
}
 8003382:	bf00      	nop
 8003384:	bf00      	nop
 8003386:	e7fd      	b.n	8003384 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	429a      	cmp	r2, r3
 800338e:	d90b      	bls.n	80033a8 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003394:	f383 8811 	msr	BASEPRI, r3
 8003398:	f3bf 8f6f 	isb	sy
 800339c:	f3bf 8f4f 	dsb	sy
 80033a0:	60fb      	str	r3, [r7, #12]
}
 80033a2:	bf00      	nop
 80033a4:	bf00      	nop
 80033a6:	e7fd      	b.n	80033a4 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80033a8:	2202      	movs	r2, #2
 80033aa:	2100      	movs	r1, #0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff40 	bl	8003232 <xQueueGenericCreate>
 80033b2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80033c0:	697b      	ldr	r3, [r7, #20]
	}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b08e      	sub	sp, #56	@ 0x38
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	60b9      	str	r1, [r7, #8]
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80033da:	2300      	movs	r3, #0
 80033dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80033e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10b      	bne.n	8003400 <xQueueGenericSend+0x34>
	__asm volatile
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
 80033f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80033fa:	bf00      	nop
 80033fc:	bf00      	nop
 80033fe:	e7fd      	b.n	80033fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d103      	bne.n	800340e <xQueueGenericSend+0x42>
 8003406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <xQueueGenericSend+0x46>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <xQueueGenericSend+0x48>
 8003412:	2300      	movs	r3, #0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d10b      	bne.n	8003430 <xQueueGenericSend+0x64>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800342a:	bf00      	nop
 800342c:	bf00      	nop
 800342e:	e7fd      	b.n	800342c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d103      	bne.n	800343e <xQueueGenericSend+0x72>
 8003436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <xQueueGenericSend+0x76>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <xQueueGenericSend+0x78>
 8003442:	2300      	movs	r3, #0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <xQueueGenericSend+0x94>
	__asm volatile
 8003448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800344c:	f383 8811 	msr	BASEPRI, r3
 8003450:	f3bf 8f6f 	isb	sy
 8003454:	f3bf 8f4f 	dsb	sy
 8003458:	623b      	str	r3, [r7, #32]
}
 800345a:	bf00      	nop
 800345c:	bf00      	nop
 800345e:	e7fd      	b.n	800345c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003460:	f001 fc84 	bl	8004d6c <xTaskGetSchedulerState>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <xQueueGenericSend+0xa4>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <xQueueGenericSend+0xa8>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <xQueueGenericSend+0xaa>
 8003474:	2300      	movs	r3, #0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10b      	bne.n	8003492 <xQueueGenericSend+0xc6>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	61fb      	str	r3, [r7, #28]
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	e7fd      	b.n	800348e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003492:	f002 fad9 	bl	8005a48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800349a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	429a      	cmp	r2, r3
 80034a0:	d302      	bcc.n	80034a8 <xQueueGenericSend+0xdc>
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d129      	bne.n	80034fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80034ae:	f000 fc6d 	bl	8003d8c <prvCopyDataToQueue>
 80034b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d010      	beq.n	80034de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034be:	3324      	adds	r3, #36	@ 0x24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f001 fa8d 	bl	80049e0 <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d013      	beq.n	80034f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80034cc:	4b3f      	ldr	r3, [pc, #252]	@ (80035cc <xQueueGenericSend+0x200>)
 80034ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	e00a      	b.n	80034f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80034de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80034e4:	4b39      	ldr	r3, [pc, #228]	@ (80035cc <xQueueGenericSend+0x200>)
 80034e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80034f4:	f002 fada 	bl	8005aac <vPortExitCritical>
				return pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e063      	b.n	80035c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d103      	bne.n	800350a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003502:	f002 fad3 	bl	8005aac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003506:	2300      	movs	r3, #0
 8003508:	e05c      	b.n	80035c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800350a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800350c:	2b00      	cmp	r3, #0
 800350e:	d106      	bne.n	800351e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003510:	f107 0314 	add.w	r3, r7, #20
 8003514:	4618      	mov	r0, r3
 8003516:	f001 fac7 	bl	8004aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800351a:	2301      	movs	r3, #1
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800351e:	f002 fac5 	bl	8005aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003522:	f001 f82f 	bl	8004584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003526:	f002 fa8f 	bl	8005a48 <vPortEnterCritical>
 800352a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003530:	b25b      	sxtb	r3, r3
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d103      	bne.n	8003540 <xQueueGenericSend+0x174>
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003542:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003546:	b25b      	sxtb	r3, r3
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x18a>
 800354e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003556:	f002 faa9 	bl	8005aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800355a:	1d3a      	adds	r2, r7, #4
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fab6 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d124      	bne.n	80035b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800356e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003570:	f000 fd04 	bl	8003f7c <prvIsQueueFull>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d018      	beq.n	80035ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800357a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357c:	3310      	adds	r3, #16
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4611      	mov	r1, r2
 8003582:	4618      	mov	r0, r3
 8003584:	f001 f9da 	bl	800493c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003588:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800358a:	f000 fc8f 	bl	8003eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800358e:	f001 f807 	bl	80045a0 <xTaskResumeAll>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	f47f af7c 	bne.w	8003492 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800359a:	4b0c      	ldr	r3, [pc, #48]	@ (80035cc <xQueueGenericSend+0x200>)
 800359c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	f3bf 8f6f 	isb	sy
 80035aa:	e772      	b.n	8003492 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ae:	f000 fc7d 	bl	8003eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035b2:	f000 fff5 	bl	80045a0 <xTaskResumeAll>
 80035b6:	e76c      	b.n	8003492 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80035b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80035ba:	f000 fc77 	bl	8003eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80035be:	f000 ffef 	bl	80045a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80035c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3738      	adds	r7, #56	@ 0x38
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b090      	sub	sp, #64	@ 0x40
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80035e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d10b      	bne.n	8003600 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80035e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ec:	f383 8811 	msr	BASEPRI, r3
 80035f0:	f3bf 8f6f 	isb	sy
 80035f4:	f3bf 8f4f 	dsb	sy
 80035f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035fa:	bf00      	nop
 80035fc:	bf00      	nop
 80035fe:	e7fd      	b.n	80035fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <xQueueGenericSendFromISR+0x3e>
 8003606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <xQueueGenericSendFromISR+0x42>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <xQueueGenericSendFromISR+0x44>
 8003612:	2300      	movs	r3, #0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10b      	bne.n	8003630 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800361c:	f383 8811 	msr	BASEPRI, r3
 8003620:	f3bf 8f6f 	isb	sy
 8003624:	f3bf 8f4f 	dsb	sy
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800362a:	bf00      	nop
 800362c:	bf00      	nop
 800362e:	e7fd      	b.n	800362c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b02      	cmp	r3, #2
 8003634:	d103      	bne.n	800363e <xQueueGenericSendFromISR+0x6e>
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <xQueueGenericSendFromISR+0x72>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <xQueueGenericSendFromISR+0x74>
 8003642:	2300      	movs	r3, #0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364c:	f383 8811 	msr	BASEPRI, r3
 8003650:	f3bf 8f6f 	isb	sy
 8003654:	f3bf 8f4f 	dsb	sy
 8003658:	623b      	str	r3, [r7, #32]
}
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	e7fd      	b.n	800365c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003660:	f002 fad2 	bl	8005c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003664:	f3ef 8211 	mrs	r2, BASEPRI
 8003668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	61fa      	str	r2, [r7, #28]
 800367a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800367c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800367e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003682:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	429a      	cmp	r2, r3
 800368a:	d302      	bcc.n	8003692 <xQueueGenericSendFromISR+0xc2>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b02      	cmp	r3, #2
 8003690:	d12f      	bne.n	80036f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003698:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	68b9      	ldr	r1, [r7, #8]
 80036a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80036a8:	f000 fb70 	bl	8003d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d112      	bne.n	80036dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d016      	beq.n	80036ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c0:	3324      	adds	r3, #36	@ 0x24
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f98c 	bl	80049e0 <xTaskRemoveFromEventList>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00e      	beq.n	80036ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00b      	beq.n	80036ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
 80036da:	e007      	b.n	80036ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80036dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036e0:	3301      	adds	r3, #1
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	b25a      	sxtb	r2, r3
 80036e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80036ec:	2301      	movs	r3, #1
 80036ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80036f0:	e001      	b.n	80036f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80036f2:	2300      	movs	r3, #0
 80036f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003700:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003704:	4618      	mov	r0, r3
 8003706:	3740      	adds	r7, #64	@ 0x40
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b08e      	sub	sp, #56	@ 0x38
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
}
 8003732:	bf00      	nop
 8003734:	bf00      	nop
 8003736:	e7fd      	b.n	8003734 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	61fb      	str	r3, [r7, #28]
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d103      	bne.n	8003768 <xQueueGiveFromISR+0x5c>
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <xQueueGiveFromISR+0x60>
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <xQueueGiveFromISR+0x62>
 800376c:	2300      	movs	r3, #0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10b      	bne.n	800378a <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003776:	f383 8811 	msr	BASEPRI, r3
 800377a:	f3bf 8f6f 	isb	sy
 800377e:	f3bf 8f4f 	dsb	sy
 8003782:	61bb      	str	r3, [r7, #24]
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	e7fd      	b.n	8003786 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800378a:	f002 fa3d 	bl	8005c08 <vPortValidateInterruptPriority>
	__asm volatile
 800378e:	f3ef 8211 	mrs	r2, BASEPRI
 8003792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003796:	f383 8811 	msr	BASEPRI, r3
 800379a:	f3bf 8f6f 	isb	sy
 800379e:	f3bf 8f4f 	dsb	sy
 80037a2:	617a      	str	r2, [r7, #20]
 80037a4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80037a6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ae:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80037b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d22b      	bcs.n	8003812 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80037ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80037cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d4:	d112      	bne.n	80037fc <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d016      	beq.n	800380c <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e0:	3324      	adds	r3, #36	@ 0x24
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 f8fc 	bl	80049e0 <xTaskRemoveFromEventList>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d00e      	beq.n	800380c <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00b      	beq.n	800380c <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	2201      	movs	r2, #1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	e007      	b.n	800380c <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80037fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003800:	3301      	adds	r3, #1
 8003802:	b2db      	uxtb	r3, r3
 8003804:	b25a      	sxtb	r2, r3
 8003806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800380c:	2301      	movs	r3, #1
 800380e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003810:	e001      	b.n	8003816 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003812:	2300      	movs	r3, #0
 8003814:	637b      	str	r3, [r7, #52]	@ 0x34
 8003816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003818:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f383 8811 	msr	BASEPRI, r3
}
 8003820:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003824:	4618      	mov	r0, r3
 8003826:	3738      	adds	r7, #56	@ 0x38
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	@ 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10b      	bne.n	800385e <xQueueReceive+0x32>
	__asm volatile
 8003846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384a:	f383 8811 	msr	BASEPRI, r3
 800384e:	f3bf 8f6f 	isb	sy
 8003852:	f3bf 8f4f 	dsb	sy
 8003856:	623b      	str	r3, [r7, #32]
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	e7fd      	b.n	800385a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <xQueueReceive+0x40>
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <xQueueReceive+0x44>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <xQueueReceive+0x46>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <xQueueReceive+0x62>
	__asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	61fb      	str	r3, [r7, #28]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800388e:	f001 fa6d 	bl	8004d6c <xTaskGetSchedulerState>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <xQueueReceive+0x72>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d101      	bne.n	80038a2 <xQueueReceive+0x76>
 800389e:	2301      	movs	r3, #1
 80038a0:	e000      	b.n	80038a4 <xQueueReceive+0x78>
 80038a2:	2300      	movs	r3, #0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xQueueReceive+0x94>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	61bb      	str	r3, [r7, #24]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038c0:	f002 f8c2 	bl	8005a48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01f      	beq.n	8003910 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038d0:	68b9      	ldr	r1, [r7, #8]
 80038d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80038d4:	f000 fac4 	bl	8003e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	1e5a      	subs	r2, r3, #1
 80038dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038de:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00f      	beq.n	8003908 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ea:	3310      	adds	r3, #16
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 f877 	bl	80049e0 <xTaskRemoveFromEventList>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d007      	beq.n	8003908 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80038f8:	4b3c      	ldr	r3, [pc, #240]	@ (80039ec <xQueueReceive+0x1c0>)
 80038fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003908:	f002 f8d0 	bl	8005aac <vPortExitCritical>
				return pdPASS;
 800390c:	2301      	movs	r3, #1
 800390e:	e069      	b.n	80039e4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003916:	f002 f8c9 	bl	8005aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800391a:	2300      	movs	r3, #0
 800391c:	e062      	b.n	80039e4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800391e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d106      	bne.n	8003932 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4618      	mov	r0, r3
 800392a:	f001 f8bd 	bl	8004aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800392e:	2301      	movs	r3, #1
 8003930:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003932:	f002 f8bb 	bl	8005aac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003936:	f000 fe25 	bl	8004584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800393a:	f002 f885 	bl	8005a48 <vPortEnterCritical>
 800393e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003940:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003944:	b25b      	sxtb	r3, r3
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d103      	bne.n	8003954 <xQueueReceive+0x128>
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800395a:	b25b      	sxtb	r3, r3
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d103      	bne.n	800396a <xQueueReceive+0x13e>
 8003962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800396a:	f002 f89f 	bl	8005aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800396e:	1d3a      	adds	r2, r7, #4
 8003970:	f107 0310 	add.w	r3, r7, #16
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f8ac 	bl	8004ad4 <xTaskCheckForTimeOut>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d123      	bne.n	80039ca <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003982:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003984:	f000 fae4 	bl	8003f50 <prvIsQueueEmpty>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d017      	beq.n	80039be <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	3324      	adds	r3, #36	@ 0x24
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f000 ffd0 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800399c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800399e:	f000 fa85 	bl	8003eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80039a2:	f000 fdfd 	bl	80045a0 <xTaskResumeAll>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d189      	bne.n	80038c0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80039ac:	4b0f      	ldr	r3, [pc, #60]	@ (80039ec <xQueueReceive+0x1c0>)
 80039ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	e780      	b.n	80038c0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80039be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039c0:	f000 fa74 	bl	8003eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039c4:	f000 fdec 	bl	80045a0 <xTaskResumeAll>
 80039c8:	e77a      	b.n	80038c0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80039ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039cc:	f000 fa6e 	bl	8003eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039d0:	f000 fde6 	bl	80045a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80039d6:	f000 fabb 	bl	8003f50 <prvIsQueueEmpty>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f43f af6f 	beq.w	80038c0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80039e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3730      	adds	r7, #48	@ 0x30
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	e000ed04 	.word	0xe000ed04

080039f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b08e      	sub	sp, #56	@ 0x38
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80039fa:	2300      	movs	r3, #0
 80039fc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10b      	bne.n	8003a24 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	623b      	str	r3, [r7, #32]
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	e7fd      	b.n	8003a20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	61fb      	str	r3, [r7, #28]
}
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a44:	f001 f992 	bl	8004d6c <xTaskGetSchedulerState>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d102      	bne.n	8003a54 <xQueueSemaphoreTake+0x64>
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <xQueueSemaphoreTake+0x68>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <xQueueSemaphoreTake+0x6a>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10b      	bne.n	8003a76 <xQueueSemaphoreTake+0x86>
	__asm volatile
 8003a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a62:	f383 8811 	msr	BASEPRI, r3
 8003a66:	f3bf 8f6f 	isb	sy
 8003a6a:	f3bf 8f4f 	dsb	sy
 8003a6e:	61bb      	str	r3, [r7, #24]
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	e7fd      	b.n	8003a72 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a76:	f001 ffe7 	bl	8005a48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a7e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d024      	beq.n	8003ad0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a96:	f001 fae3 	bl	8005060 <pvTaskIncrementMutexHeldCount>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00f      	beq.n	8003ac8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	3310      	adds	r3, #16
 8003aac:	4618      	mov	r0, r3
 8003aae:	f000 ff97 	bl	80049e0 <xTaskRemoveFromEventList>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ab8:	4b54      	ldr	r3, [pc, #336]	@ (8003c0c <xQueueSemaphoreTake+0x21c>)
 8003aba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003abe:	601a      	str	r2, [r3, #0]
 8003ac0:	f3bf 8f4f 	dsb	sy
 8003ac4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003ac8:	f001 fff0 	bl	8005aac <vPortExitCritical>
				return pdPASS;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e098      	b.n	8003c02 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d112      	bne.n	8003afc <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d00b      	beq.n	8003af4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	617b      	str	r3, [r7, #20]
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	e7fd      	b.n	8003af0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003af4:	f001 ffda 	bl	8005aac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e082      	b.n	8003c02 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003afc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b02:	f107 030c 	add.w	r3, r7, #12
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 ffce 	bl	8004aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b10:	f001 ffcc 	bl	8005aac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b14:	f000 fd36 	bl	8004584 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b18:	f001 ff96 	bl	8005a48 <vPortEnterCritical>
 8003b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b22:	b25b      	sxtb	r3, r3
 8003b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b28:	d103      	bne.n	8003b32 <xQueueSemaphoreTake+0x142>
 8003b2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b38:	b25b      	sxtb	r3, r3
 8003b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3e:	d103      	bne.n	8003b48 <xQueueSemaphoreTake+0x158>
 8003b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b42:	2200      	movs	r2, #0
 8003b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b48:	f001 ffb0 	bl	8005aac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b4c:	463a      	mov	r2, r7
 8003b4e:	f107 030c 	add.w	r3, r7, #12
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f000 ffbd 	bl	8004ad4 <xTaskCheckForTimeOut>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d132      	bne.n	8003bc6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b62:	f000 f9f5 	bl	8003f50 <prvIsQueueEmpty>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d026      	beq.n	8003bba <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003b74:	f001 ff68 	bl	8005a48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f001 f913 	bl	8004da8 <xTaskPriorityInherit>
 8003b82:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8003b84:	f001 ff92 	bl	8005aac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8a:	3324      	adds	r3, #36	@ 0x24
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	4611      	mov	r1, r2
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fed3 	bl	800493c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b96:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003b98:	f000 f988 	bl	8003eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b9c:	f000 fd00 	bl	80045a0 <xTaskResumeAll>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f47f af67 	bne.w	8003a76 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003ba8:	4b18      	ldr	r3, [pc, #96]	@ (8003c0c <xQueueSemaphoreTake+0x21c>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	e75d      	b.n	8003a76 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bbc:	f000 f976 	bl	8003eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bc0:	f000 fcee 	bl	80045a0 <xTaskResumeAll>
 8003bc4:	e757      	b.n	8003a76 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003bc6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bc8:	f000 f970 	bl	8003eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bcc:	f000 fce8 	bl	80045a0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bd0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bd2:	f000 f9bd 	bl	8003f50 <prvIsQueueEmpty>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f43f af4c 	beq.w	8003a76 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003bde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003be4:	f001 ff30 	bl	8005a48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003be8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003bea:	f000 f8b7 	bl	8003d5c <prvGetDisinheritPriorityAfterTimeout>
 8003bee:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f001 f9ae 	bl	8004f58 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003bfc:	f001 ff56 	bl	8005aac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003c00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3738      	adds	r7, #56	@ 0x38
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	e000ed04 	.word	0xe000ed04

08003c10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b08e      	sub	sp, #56	@ 0x38
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10b      	bne.n	8003c3e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8003c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2a:	f383 8811 	msr	BASEPRI, r3
 8003c2e:	f3bf 8f6f 	isb	sy
 8003c32:	f3bf 8f4f 	dsb	sy
 8003c36:	623b      	str	r3, [r7, #32]
}
 8003c38:	bf00      	nop
 8003c3a:	bf00      	nop
 8003c3c:	e7fd      	b.n	8003c3a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d103      	bne.n	8003c4c <xQueueReceiveFromISR+0x3c>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <xQueueReceiveFromISR+0x40>
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <xQueueReceiveFromISR+0x42>
 8003c50:	2300      	movs	r3, #0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	61fb      	str	r3, [r7, #28]
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c6e:	f001 ffcb 	bl	8005c08 <vPortValidateInterruptPriority>
	__asm volatile
 8003c72:	f3ef 8211 	mrs	r2, BASEPRI
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	61ba      	str	r2, [r7, #24]
 8003c88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003c8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c92:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d02f      	beq.n	8003cfa <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ca8:	f000 f8da 	bl	8003e60 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cae:	1e5a      	subs	r2, r3, #1
 8003cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003cb4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d112      	bne.n	8003ce4 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d016      	beq.n	8003cf4 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc8:	3310      	adds	r3, #16
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fe88 	bl	80049e0 <xTaskRemoveFromEventList>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00e      	beq.n	8003cf4 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	e007      	b.n	8003cf4 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003ce8:	3301      	adds	r3, #1
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	b25a      	sxtb	r2, r3
 8003cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf8:	e001      	b.n	8003cfe <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	f383 8811 	msr	BASEPRI, r3
}
 8003d08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3738      	adds	r7, #56	@ 0x38
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <vQueueDelete+0x2a>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	60bb      	str	r3, [r7, #8]
}
 8003d38:	bf00      	nop
 8003d3a:	bf00      	nop
 8003d3c:	e7fd      	b.n	8003d3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 f95e 	bl	8004000 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f002 f86a 	bl	8005e28 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e001      	b.n	8003d7e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
	}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b086      	sub	sp, #24
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10d      	bne.n	8003dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d14d      	bne.n	8003e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f001 f85e 	bl	8004e78 <xTaskPriorityDisinherit>
 8003dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	609a      	str	r2, [r3, #8]
 8003dc4:	e043      	b.n	8003e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d119      	bne.n	8003e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6858      	ldr	r0, [r3, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	f002 ff79 	bl	8006cce <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	441a      	add	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d32b      	bcc.n	8003e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	e026      	b.n	8003e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	68d8      	ldr	r0, [r3, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	f002 ff5f 	bl	8006cce <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68da      	ldr	r2, [r3, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e18:	425b      	negs	r3, r3
 8003e1a:	441a      	add	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d207      	bcs.n	8003e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	425b      	negs	r3, r3
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b02      	cmp	r3, #2
 8003e40:	d105      	bne.n	8003e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003e56:	697b      	ldr	r3, [r7, #20]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d018      	beq.n	8003ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7a:	441a      	add	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68da      	ldr	r2, [r3, #12]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d303      	bcc.n	8003e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68d9      	ldr	r1, [r3, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	6838      	ldr	r0, [r7, #0]
 8003ea0:	f002 ff15 	bl	8006cce <memcpy>
	}
}
 8003ea4:	bf00      	nop
 8003ea6:	3708      	adds	r7, #8
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003eb4:	f001 fdc8 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ec0:	e011      	b.n	8003ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d012      	beq.n	8003ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	3324      	adds	r3, #36	@ 0x24
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fd86 	bl	80049e0 <xTaskRemoveFromEventList>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003eda:	f000 fe5f 	bl	8004b9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	dce9      	bgt.n	8003ec2 <prvUnlockQueue+0x16>
 8003eee:	e000      	b.n	8003ef2 <prvUnlockQueue+0x46>
					break;
 8003ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	22ff      	movs	r2, #255	@ 0xff
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003efa:	f001 fdd7 	bl	8005aac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003efe:	f001 fda3 	bl	8005a48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f0a:	e011      	b.n	8003f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d012      	beq.n	8003f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3310      	adds	r3, #16
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f000 fd61 	bl	80049e0 <xTaskRemoveFromEventList>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d001      	beq.n	8003f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f24:	f000 fe3a 	bl	8004b9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f28:	7bbb      	ldrb	r3, [r7, #14]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	dce9      	bgt.n	8003f0c <prvUnlockQueue+0x60>
 8003f38:	e000      	b.n	8003f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	22ff      	movs	r2, #255	@ 0xff
 8003f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003f44:	f001 fdb2 	bl	8005aac <vPortExitCritical>
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f58:	f001 fd76 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f64:	2301      	movs	r3, #1
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	e001      	b.n	8003f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f6e:	f001 fd9d 	bl	8005aac <vPortExitCritical>

	return xReturn;
 8003f72:	68fb      	ldr	r3, [r7, #12]
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f84:	f001 fd60 	bl	8005a48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d102      	bne.n	8003f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003f94:	2301      	movs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	e001      	b.n	8003f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f9e:	f001 fd85 	bl	8005aac <vPortExitCritical>

	return xReturn;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	e014      	b.n	8003fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8003ffc <vQueueAddToRegistry+0x50>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d10b      	bne.n	8003fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fc8:	490c      	ldr	r1, [pc, #48]	@ (8003ffc <vQueueAddToRegistry+0x50>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8003ffc <vQueueAddToRegistry+0x50>)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003fde:	e006      	b.n	8003fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2b07      	cmp	r3, #7
 8003fea:	d9e7      	bls.n	8003fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3714      	adds	r7, #20
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	200009a8 	.word	0x200009a8

08004000 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e016      	b.n	800403c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800400e:	4a10      	ldr	r2, [pc, #64]	@ (8004050 <vQueueUnregisterQueue+0x50>)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4413      	add	r3, r2
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	429a      	cmp	r2, r3
 800401c:	d10b      	bne.n	8004036 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800401e:	4a0c      	ldr	r2, [pc, #48]	@ (8004050 <vQueueUnregisterQueue+0x50>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2100      	movs	r1, #0
 8004024:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004028:	4a09      	ldr	r2, [pc, #36]	@ (8004050 <vQueueUnregisterQueue+0x50>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	2200      	movs	r2, #0
 8004032:	605a      	str	r2, [r3, #4]
				break;
 8004034:	e006      	b.n	8004044 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3301      	adds	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b07      	cmp	r3, #7
 8004040:	d9e5      	bls.n	800400e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	200009a8 	.word	0x200009a8

08004054 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004054:	b580      	push	{r7, lr}
 8004056:	b086      	sub	sp, #24
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004064:	f001 fcf0 	bl	8005a48 <vPortEnterCritical>
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800406e:	b25b      	sxtb	r3, r3
 8004070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004074:	d103      	bne.n	800407e <vQueueWaitForMessageRestricted+0x2a>
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004084:	b25b      	sxtb	r3, r3
 8004086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800408a:	d103      	bne.n	8004094 <vQueueWaitForMessageRestricted+0x40>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004094:	f001 fd0a 	bl	8005aac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409c:	2b00      	cmp	r3, #0
 800409e:	d106      	bne.n	80040ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	3324      	adds	r3, #36	@ 0x24
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68b9      	ldr	r1, [r7, #8]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fc6d 	bl	8004988 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80040ae:	6978      	ldr	r0, [r7, #20]
 80040b0:	f7ff fefc 	bl	8003eac <prvUnlockQueue>
	}
 80040b4:	bf00      	nop
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b08e      	sub	sp, #56	@ 0x38
 80040c0:	af04      	add	r7, sp, #16
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	623b      	str	r3, [r7, #32]
}
 80040e2:	bf00      	nop
 80040e4:	bf00      	nop
 80040e6:	e7fd      	b.n	80040e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <xTaskCreateStatic+0x4a>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	61fb      	str	r3, [r7, #28]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004106:	23a8      	movs	r3, #168	@ 0xa8
 8004108:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2ba8      	cmp	r3, #168	@ 0xa8
 800410e:	d00b      	beq.n	8004128 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	61bb      	str	r3, [r7, #24]
}
 8004122:	bf00      	nop
 8004124:	bf00      	nop
 8004126:	e7fd      	b.n	8004124 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004128:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800412a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01e      	beq.n	800416e <xTaskCreateStatic+0xb2>
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01b      	beq.n	800416e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800413a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800413e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004142:	2202      	movs	r2, #2
 8004144:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004148:	2300      	movs	r3, #0
 800414a:	9303      	str	r3, [sp, #12]
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	9302      	str	r3, [sp, #8]
 8004150:	f107 0314 	add.w	r3, r7, #20
 8004154:	9301      	str	r3, [sp, #4]
 8004156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68b9      	ldr	r1, [r7, #8]
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f851 	bl	8004208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004168:	f000 f8f6 	bl	8004358 <prvAddNewTaskToReadyList>
 800416c:	e001      	b.n	8004172 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004172:	697b      	ldr	r3, [r7, #20]
	}
 8004174:	4618      	mov	r0, r3
 8004176:	3728      	adds	r7, #40	@ 0x28
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	@ 0x30
 8004180:	af04      	add	r7, sp, #16
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	603b      	str	r3, [r7, #0]
 8004188:	4613      	mov	r3, r2
 800418a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f001 fd7b 	bl	8005c8c <pvPortMalloc>
 8004196:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00e      	beq.n	80041bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800419e:	20a8      	movs	r0, #168	@ 0xa8
 80041a0:	f001 fd74 	bl	8005c8c <pvPortMalloc>
 80041a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80041b2:	e005      	b.n	80041c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041b4:	6978      	ldr	r0, [r7, #20]
 80041b6:	f001 fe37 	bl	8005e28 <vPortFree>
 80041ba:	e001      	b.n	80041c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041bc:	2300      	movs	r3, #0
 80041be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d017      	beq.n	80041f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	2300      	movs	r3, #0
 80041d2:	9303      	str	r3, [sp, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	9302      	str	r3, [sp, #8]
 80041d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f80f 	bl	8004208 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041ea:	69f8      	ldr	r0, [r7, #28]
 80041ec:	f000 f8b4 	bl	8004358 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f0:	2301      	movs	r3, #1
 80041f2:	61bb      	str	r3, [r7, #24]
 80041f4:	e002      	b.n	80041fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041f6:	f04f 33ff 	mov.w	r3, #4294967295
 80041fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041fc:	69bb      	ldr	r3, [r7, #24]
	}
 80041fe:	4618      	mov	r0, r3
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
	...

08004208 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004218:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	461a      	mov	r2, r3
 8004220:	21a5      	movs	r1, #165	@ 0xa5
 8004222:	f002 fc7e 	bl	8006b22 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004228:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004230:	3b01      	subs	r3, #1
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	f023 0307 	bic.w	r3, r3, #7
 800423e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00b      	beq.n	8004262 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800424a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	617b      	str	r3, [r7, #20]
}
 800425c:	bf00      	nop
 800425e:	bf00      	nop
 8004260:	e7fd      	b.n	800425e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01f      	beq.n	80042a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004268:	2300      	movs	r3, #0
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e012      	b.n	8004294 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	4413      	add	r3, r2
 8004274:	7819      	ldrb	r1, [r3, #0]
 8004276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	4413      	add	r3, r2
 800427c:	3334      	adds	r3, #52	@ 0x34
 800427e:	460a      	mov	r2, r1
 8004280:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	4413      	add	r3, r2
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d006      	beq.n	800429c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3301      	adds	r3, #1
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b0f      	cmp	r3, #15
 8004298:	d9e9      	bls.n	800426e <prvInitialiseNewTask+0x66>
 800429a:	e000      	b.n	800429e <prvInitialiseNewTask+0x96>
			{
				break;
 800429c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800429e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042a6:	e003      	b.n	80042b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b2:	2b37      	cmp	r3, #55	@ 0x37
 80042b4:	d901      	bls.n	80042ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042b6:	2337      	movs	r3, #55	@ 0x37
 80042b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80042c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	3304      	adds	r3, #4
 80042d0:	4618      	mov	r0, r3
 80042d2:	f7fe fe33 	bl	8002f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d8:	3318      	adds	r3, #24
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fe2e 	bl	8002f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80042ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004300:	2200      	movs	r2, #0
 8004302:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	3354      	adds	r3, #84	@ 0x54
 800430a:	224c      	movs	r2, #76	@ 0x4c
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f002 fc07 	bl	8006b22 <memset>
 8004314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004316:	4a0d      	ldr	r2, [pc, #52]	@ (800434c <prvInitialiseNewTask+0x144>)
 8004318:	659a      	str	r2, [r3, #88]	@ 0x58
 800431a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431c:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <prvInitialiseNewTask+0x148>)
 800431e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004322:	4a0c      	ldr	r2, [pc, #48]	@ (8004354 <prvInitialiseNewTask+0x14c>)
 8004324:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	68f9      	ldr	r1, [r7, #12]
 800432a:	69b8      	ldr	r0, [r7, #24]
 800432c:	f001 fa5a 	bl	80057e4 <pxPortInitialiseStack>
 8004330:	4602      	mov	r2, r0
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004342:	bf00      	nop
 8004344:	3720      	adds	r7, #32
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20004c3c 	.word	0x20004c3c
 8004350:	20004ca4 	.word	0x20004ca4
 8004354:	20004d0c 	.word	0x20004d0c

08004358 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004360:	f001 fb72 	bl	8005a48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004364:	4b2d      	ldr	r3, [pc, #180]	@ (800441c <prvAddNewTaskToReadyList+0xc4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	4a2c      	ldr	r2, [pc, #176]	@ (800441c <prvAddNewTaskToReadyList+0xc4>)
 800436c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800436e:	4b2c      	ldr	r3, [pc, #176]	@ (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d109      	bne.n	800438a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004376:	4a2a      	ldr	r2, [pc, #168]	@ (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800437c:	4b27      	ldr	r3, [pc, #156]	@ (800441c <prvAddNewTaskToReadyList+0xc4>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d110      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004384:	f000 fc2e 	bl	8004be4 <prvInitialiseTaskLists>
 8004388:	e00d      	b.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800438a:	4b26      	ldr	r3, [pc, #152]	@ (8004424 <prvAddNewTaskToReadyList+0xcc>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d109      	bne.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004392:	4b23      	ldr	r3, [pc, #140]	@ (8004420 <prvAddNewTaskToReadyList+0xc8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	429a      	cmp	r2, r3
 800439e:	d802      	bhi.n	80043a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043a6:	4b20      	ldr	r3, [pc, #128]	@ (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004428 <prvAddNewTaskToReadyList+0xd0>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043bc:	4b1b      	ldr	r3, [pc, #108]	@ (800442c <prvAddNewTaskToReadyList+0xd4>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d903      	bls.n	80043cc <prvAddNewTaskToReadyList+0x74>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	4a18      	ldr	r2, [pc, #96]	@ (800442c <prvAddNewTaskToReadyList+0xd4>)
 80043ca:	6013      	str	r3, [r2, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043d0:	4613      	mov	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4a15      	ldr	r2, [pc, #84]	@ (8004430 <prvAddNewTaskToReadyList+0xd8>)
 80043da:	441a      	add	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	3304      	adds	r3, #4
 80043e0:	4619      	mov	r1, r3
 80043e2:	4610      	mov	r0, r2
 80043e4:	f7fe fdb7 	bl	8002f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043e8:	f001 fb60 	bl	8005aac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004424 <prvAddNewTaskToReadyList+0xcc>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00e      	beq.n	8004412 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043f4:	4b0a      	ldr	r3, [pc, #40]	@ (8004420 <prvAddNewTaskToReadyList+0xc8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fe:	429a      	cmp	r2, r3
 8004400:	d207      	bcs.n	8004412 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004402:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <prvAddNewTaskToReadyList+0xdc>)
 8004404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004408:	601a      	str	r2, [r3, #0]
 800440a:	f3bf 8f4f 	dsb	sy
 800440e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004412:	bf00      	nop
 8004414:	3708      	adds	r7, #8
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000ebc 	.word	0x20000ebc
 8004420:	200009e8 	.word	0x200009e8
 8004424:	20000ec8 	.word	0x20000ec8
 8004428:	20000ed8 	.word	0x20000ed8
 800442c:	20000ec4 	.word	0x20000ec4
 8004430:	200009ec 	.word	0x200009ec
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800444a:	4b14      	ldr	r3, [pc, #80]	@ (800449c <vTaskDelay+0x64>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00b      	beq.n	800446a <vTaskDelay+0x32>
	__asm volatile
 8004452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004456:	f383 8811 	msr	BASEPRI, r3
 800445a:	f3bf 8f6f 	isb	sy
 800445e:	f3bf 8f4f 	dsb	sy
 8004462:	60bb      	str	r3, [r7, #8]
}
 8004464:	bf00      	nop
 8004466:	bf00      	nop
 8004468:	e7fd      	b.n	8004466 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800446a:	f000 f88b 	bl	8004584 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800446e:	2100      	movs	r1, #0
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 fe09 	bl	8005088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004476:	f000 f893 	bl	80045a0 <xTaskResumeAll>
 800447a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d107      	bne.n	8004492 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004482:	4b07      	ldr	r3, [pc, #28]	@ (80044a0 <vTaskDelay+0x68>)
 8004484:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004488:	601a      	str	r2, [r3, #0]
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004492:	bf00      	nop
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000ee4 	.word	0x20000ee4
 80044a0:	e000ed04 	.word	0xe000ed04

080044a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b08a      	sub	sp, #40	@ 0x28
 80044a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80044b2:	463a      	mov	r2, r7
 80044b4:	1d39      	adds	r1, r7, #4
 80044b6:	f107 0308 	add.w	r3, r7, #8
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe fcea 	bl	8002e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80044c0:	6839      	ldr	r1, [r7, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	9202      	str	r2, [sp, #8]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	2300      	movs	r3, #0
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	2300      	movs	r3, #0
 80044d0:	460a      	mov	r2, r1
 80044d2:	4924      	ldr	r1, [pc, #144]	@ (8004564 <vTaskStartScheduler+0xc0>)
 80044d4:	4824      	ldr	r0, [pc, #144]	@ (8004568 <vTaskStartScheduler+0xc4>)
 80044d6:	f7ff fdf1 	bl	80040bc <xTaskCreateStatic>
 80044da:	4603      	mov	r3, r0
 80044dc:	4a23      	ldr	r2, [pc, #140]	@ (800456c <vTaskStartScheduler+0xc8>)
 80044de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80044e0:	4b22      	ldr	r3, [pc, #136]	@ (800456c <vTaskStartScheduler+0xc8>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80044e8:	2301      	movs	r3, #1
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e001      	b.n	80044f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d102      	bne.n	80044fe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80044f8:	f000 fe1a 	bl	8005130 <xTimerCreateTimerTask>
 80044fc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d11b      	bne.n	800453c <vTaskStartScheduler+0x98>
	__asm volatile
 8004504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004508:	f383 8811 	msr	BASEPRI, r3
 800450c:	f3bf 8f6f 	isb	sy
 8004510:	f3bf 8f4f 	dsb	sy
 8004514:	613b      	str	r3, [r7, #16]
}
 8004516:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004518:	4b15      	ldr	r3, [pc, #84]	@ (8004570 <vTaskStartScheduler+0xcc>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3354      	adds	r3, #84	@ 0x54
 800451e:	4a15      	ldr	r2, [pc, #84]	@ (8004574 <vTaskStartScheduler+0xd0>)
 8004520:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004522:	4b15      	ldr	r3, [pc, #84]	@ (8004578 <vTaskStartScheduler+0xd4>)
 8004524:	f04f 32ff 	mov.w	r2, #4294967295
 8004528:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800452a:	4b14      	ldr	r3, [pc, #80]	@ (800457c <vTaskStartScheduler+0xd8>)
 800452c:	2201      	movs	r2, #1
 800452e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004530:	4b13      	ldr	r3, [pc, #76]	@ (8004580 <vTaskStartScheduler+0xdc>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004536:	f001 f9e3 	bl	8005900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800453a:	e00f      	b.n	800455c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004542:	d10b      	bne.n	800455c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	60fb      	str	r3, [r7, #12]
}
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <vTaskStartScheduler+0xb4>
}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	08008a60 	.word	0x08008a60
 8004568:	08004bb5 	.word	0x08004bb5
 800456c:	20000ee0 	.word	0x20000ee0
 8004570:	200009e8 	.word	0x200009e8
 8004574:	2000001c 	.word	0x2000001c
 8004578:	20000edc 	.word	0x20000edc
 800457c:	20000ec8 	.word	0x20000ec8
 8004580:	20000ec0 	.word	0x20000ec0

08004584 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004588:	4b04      	ldr	r3, [pc, #16]	@ (800459c <vTaskSuspendAll+0x18>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	3301      	adds	r3, #1
 800458e:	4a03      	ldr	r2, [pc, #12]	@ (800459c <vTaskSuspendAll+0x18>)
 8004590:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004592:	bf00      	nop
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr
 800459c:	20000ee4 	.word	0x20000ee4

080045a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80045ae:	4b42      	ldr	r3, [pc, #264]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <xTaskResumeAll+0x2e>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	603b      	str	r3, [r7, #0]
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	e7fd      	b.n	80045ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80045ce:	f001 fa3b 	bl	8005a48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80045d2:	4b39      	ldr	r3, [pc, #228]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	4a37      	ldr	r2, [pc, #220]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <xTaskResumeAll+0x118>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d162      	bne.n	80046aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80045e4:	4b35      	ldr	r3, [pc, #212]	@ (80046bc <xTaskResumeAll+0x11c>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d05e      	beq.n	80046aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ec:	e02f      	b.n	800464e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ee:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <xTaskResumeAll+0x120>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fe fd08 	bl	8003010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe fd03 	bl	8003010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460e:	4b2d      	ldr	r3, [pc, #180]	@ (80046c4 <xTaskResumeAll+0x124>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <xTaskResumeAll+0x7e>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800461a:	4a2a      	ldr	r2, [pc, #168]	@ (80046c4 <xTaskResumeAll+0x124>)
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004622:	4613      	mov	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4a27      	ldr	r2, [pc, #156]	@ (80046c8 <xTaskResumeAll+0x128>)
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f7fe fc8e 	bl	8002f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800463e:	4b23      	ldr	r3, [pc, #140]	@ (80046cc <xTaskResumeAll+0x12c>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	429a      	cmp	r2, r3
 8004646:	d302      	bcc.n	800464e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004648:	4b21      	ldr	r3, [pc, #132]	@ (80046d0 <xTaskResumeAll+0x130>)
 800464a:	2201      	movs	r2, #1
 800464c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800464e:	4b1c      	ldr	r3, [pc, #112]	@ (80046c0 <xTaskResumeAll+0x120>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1cb      	bne.n	80045ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800465c:	f000 fb66 	bl	8004d2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004660:	4b1c      	ldr	r3, [pc, #112]	@ (80046d4 <xTaskResumeAll+0x134>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d010      	beq.n	800468e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800466c:	f000 f846 	bl	80046fc <xTaskIncrementTick>
 8004670:	4603      	mov	r3, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	d002      	beq.n	800467c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004676:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004678:	2201      	movs	r2, #1
 800467a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f1      	bne.n	800466c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004688:	4b12      	ldr	r3, [pc, #72]	@ (80046d4 <xTaskResumeAll+0x134>)
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800468e:	4b10      	ldr	r3, [pc, #64]	@ (80046d0 <xTaskResumeAll+0x130>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004696:	2301      	movs	r3, #1
 8004698:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800469a:	4b0f      	ldr	r3, [pc, #60]	@ (80046d8 <xTaskResumeAll+0x138>)
 800469c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046aa:	f001 f9ff 	bl	8005aac <vPortExitCritical>

	return xAlreadyYielded;
 80046ae:	68bb      	ldr	r3, [r7, #8]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	20000ee4 	.word	0x20000ee4
 80046bc:	20000ebc 	.word	0x20000ebc
 80046c0:	20000e7c 	.word	0x20000e7c
 80046c4:	20000ec4 	.word	0x20000ec4
 80046c8:	200009ec 	.word	0x200009ec
 80046cc:	200009e8 	.word	0x200009e8
 80046d0:	20000ed0 	.word	0x20000ed0
 80046d4:	20000ecc 	.word	0x20000ecc
 80046d8:	e000ed04 	.word	0xe000ed04

080046dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80046e2:	4b05      	ldr	r3, [pc, #20]	@ (80046f8 <xTaskGetTickCount+0x1c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80046e8:	687b      	ldr	r3, [r7, #4]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	20000ec0 	.word	0x20000ec0

080046fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004706:	4b4f      	ldr	r3, [pc, #316]	@ (8004844 <xTaskIncrementTick+0x148>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2b00      	cmp	r3, #0
 800470c:	f040 8090 	bne.w	8004830 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004710:	4b4d      	ldr	r3, [pc, #308]	@ (8004848 <xTaskIncrementTick+0x14c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3301      	adds	r3, #1
 8004716:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004718:	4a4b      	ldr	r2, [pc, #300]	@ (8004848 <xTaskIncrementTick+0x14c>)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d121      	bne.n	8004768 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004724:	4b49      	ldr	r3, [pc, #292]	@ (800484c <xTaskIncrementTick+0x150>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <xTaskIncrementTick+0x4a>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	603b      	str	r3, [r7, #0]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <xTaskIncrementTick+0x46>
 8004746:	4b41      	ldr	r3, [pc, #260]	@ (800484c <xTaskIncrementTick+0x150>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	60fb      	str	r3, [r7, #12]
 800474c:	4b40      	ldr	r3, [pc, #256]	@ (8004850 <xTaskIncrementTick+0x154>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a3e      	ldr	r2, [pc, #248]	@ (800484c <xTaskIncrementTick+0x150>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4a3e      	ldr	r2, [pc, #248]	@ (8004850 <xTaskIncrementTick+0x154>)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	4b3e      	ldr	r3, [pc, #248]	@ (8004854 <xTaskIncrementTick+0x158>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	3301      	adds	r3, #1
 8004760:	4a3c      	ldr	r2, [pc, #240]	@ (8004854 <xTaskIncrementTick+0x158>)
 8004762:	6013      	str	r3, [r2, #0]
 8004764:	f000 fae2 	bl	8004d2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004768:	4b3b      	ldr	r3, [pc, #236]	@ (8004858 <xTaskIncrementTick+0x15c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	429a      	cmp	r2, r3
 8004770:	d349      	bcc.n	8004806 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004772:	4b36      	ldr	r3, [pc, #216]	@ (800484c <xTaskIncrementTick+0x150>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800477c:	4b36      	ldr	r3, [pc, #216]	@ (8004858 <xTaskIncrementTick+0x15c>)
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	601a      	str	r2, [r3, #0]
					break;
 8004784:	e03f      	b.n	8004806 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004786:	4b31      	ldr	r3, [pc, #196]	@ (800484c <xTaskIncrementTick+0x150>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d203      	bcs.n	80047a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800479e:	4a2e      	ldr	r2, [pc, #184]	@ (8004858 <xTaskIncrementTick+0x15c>)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80047a4:	e02f      	b.n	8004806 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	3304      	adds	r3, #4
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7fe fc30 	bl	8003010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d004      	beq.n	80047c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	3318      	adds	r3, #24
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fc27 	bl	8003010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c6:	4b25      	ldr	r3, [pc, #148]	@ (800485c <xTaskIncrementTick+0x160>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d903      	bls.n	80047d6 <xTaskIncrementTick+0xda>
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047d2:	4a22      	ldr	r2, [pc, #136]	@ (800485c <xTaskIncrementTick+0x160>)
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004860 <xTaskIncrementTick+0x164>)
 80047e4:	441a      	add	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3304      	adds	r3, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	4610      	mov	r0, r2
 80047ee:	f7fe fbb2 	bl	8002f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004864 <xTaskIncrementTick+0x168>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d3b8      	bcc.n	8004772 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004800:	2301      	movs	r3, #1
 8004802:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004804:	e7b5      	b.n	8004772 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004806:	4b17      	ldr	r3, [pc, #92]	@ (8004864 <xTaskIncrementTick+0x168>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480c:	4914      	ldr	r1, [pc, #80]	@ (8004860 <xTaskIncrementTick+0x164>)
 800480e:	4613      	mov	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4413      	add	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	440b      	add	r3, r1
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d901      	bls.n	8004822 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800481e:	2301      	movs	r3, #1
 8004820:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004822:	4b11      	ldr	r3, [pc, #68]	@ (8004868 <xTaskIncrementTick+0x16c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d007      	beq.n	800483a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800482a:	2301      	movs	r3, #1
 800482c:	617b      	str	r3, [r7, #20]
 800482e:	e004      	b.n	800483a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004830:	4b0e      	ldr	r3, [pc, #56]	@ (800486c <xTaskIncrementTick+0x170>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	4a0d      	ldr	r2, [pc, #52]	@ (800486c <xTaskIncrementTick+0x170>)
 8004838:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800483a:	697b      	ldr	r3, [r7, #20]
}
 800483c:	4618      	mov	r0, r3
 800483e:	3718      	adds	r7, #24
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000ee4 	.word	0x20000ee4
 8004848:	20000ec0 	.word	0x20000ec0
 800484c:	20000e74 	.word	0x20000e74
 8004850:	20000e78 	.word	0x20000e78
 8004854:	20000ed4 	.word	0x20000ed4
 8004858:	20000edc 	.word	0x20000edc
 800485c:	20000ec4 	.word	0x20000ec4
 8004860:	200009ec 	.word	0x200009ec
 8004864:	200009e8 	.word	0x200009e8
 8004868:	20000ed0 	.word	0x20000ed0
 800486c:	20000ecc 	.word	0x20000ecc

08004870 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004870:	b480      	push	{r7}
 8004872:	b085      	sub	sp, #20
 8004874:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004876:	4b2b      	ldr	r3, [pc, #172]	@ (8004924 <vTaskSwitchContext+0xb4>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800487e:	4b2a      	ldr	r3, [pc, #168]	@ (8004928 <vTaskSwitchContext+0xb8>)
 8004880:	2201      	movs	r2, #1
 8004882:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004884:	e047      	b.n	8004916 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004886:	4b28      	ldr	r3, [pc, #160]	@ (8004928 <vTaskSwitchContext+0xb8>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800488c:	4b27      	ldr	r3, [pc, #156]	@ (800492c <vTaskSwitchContext+0xbc>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e011      	b.n	80048b8 <vTaskSwitchContext+0x48>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10b      	bne.n	80048b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	607b      	str	r3, [r7, #4]
}
 80048ac:	bf00      	nop
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <vTaskSwitchContext+0x3e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	491d      	ldr	r1, [pc, #116]	@ (8004930 <vTaskSwitchContext+0xc0>)
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0e3      	beq.n	8004894 <vTaskSwitchContext+0x24>
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4613      	mov	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	4413      	add	r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	4a16      	ldr	r2, [pc, #88]	@ (8004930 <vTaskSwitchContext+0xc0>)
 80048d8:	4413      	add	r3, r2
 80048da:	60bb      	str	r3, [r7, #8]
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	685a      	ldr	r2, [r3, #4]
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	605a      	str	r2, [r3, #4]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	685a      	ldr	r2, [r3, #4]
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	3308      	adds	r3, #8
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d104      	bne.n	80048fc <vTaskSwitchContext+0x8c>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	685a      	ldr	r2, [r3, #4]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	605a      	str	r2, [r3, #4]
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	4a0c      	ldr	r2, [pc, #48]	@ (8004934 <vTaskSwitchContext+0xc4>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4a09      	ldr	r2, [pc, #36]	@ (800492c <vTaskSwitchContext+0xbc>)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800490c:	4b09      	ldr	r3, [pc, #36]	@ (8004934 <vTaskSwitchContext+0xc4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3354      	adds	r3, #84	@ 0x54
 8004912:	4a09      	ldr	r2, [pc, #36]	@ (8004938 <vTaskSwitchContext+0xc8>)
 8004914:	6013      	str	r3, [r2, #0]
}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	20000ee4 	.word	0x20000ee4
 8004928:	20000ed0 	.word	0x20000ed0
 800492c:	20000ec4 	.word	0x20000ec4
 8004930:	200009ec 	.word	0x200009ec
 8004934:	200009e8 	.word	0x200009e8
 8004938:	2000001c 	.word	0x2000001c

0800493c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10b      	bne.n	8004964 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800494c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004950:	f383 8811 	msr	BASEPRI, r3
 8004954:	f3bf 8f6f 	isb	sy
 8004958:	f3bf 8f4f 	dsb	sy
 800495c:	60fb      	str	r3, [r7, #12]
}
 800495e:	bf00      	nop
 8004960:	bf00      	nop
 8004962:	e7fd      	b.n	8004960 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004964:	4b07      	ldr	r3, [pc, #28]	@ (8004984 <vTaskPlaceOnEventList+0x48>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	3318      	adds	r3, #24
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fe fb16 	bl	8002f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004972:	2101      	movs	r1, #1
 8004974:	6838      	ldr	r0, [r7, #0]
 8004976:	f000 fb87 	bl	8005088 <prvAddCurrentTaskToDelayedList>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	200009e8 	.word	0x200009e8

08004988 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800499a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800499e:	f383 8811 	msr	BASEPRI, r3
 80049a2:	f3bf 8f6f 	isb	sy
 80049a6:	f3bf 8f4f 	dsb	sy
 80049aa:	617b      	str	r3, [r7, #20]
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	e7fd      	b.n	80049ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049b2:	4b0a      	ldr	r3, [pc, #40]	@ (80049dc <vTaskPlaceOnEventListRestricted+0x54>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3318      	adds	r3, #24
 80049b8:	4619      	mov	r1, r3
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7fe facb 	bl	8002f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80049c6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	68b8      	ldr	r0, [r7, #8]
 80049d0:	f000 fb5a 	bl	8005088 <prvAddCurrentTaskToDelayedList>
	}
 80049d4:	bf00      	nop
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	200009e8 	.word	0x200009e8

080049e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d10b      	bne.n	8004a0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60fb      	str	r3, [r7, #12]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	3318      	adds	r3, #24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fe fafc 	bl	8003010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a18:	4b1d      	ldr	r3, [pc, #116]	@ (8004a90 <xTaskRemoveFromEventList+0xb0>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d11d      	bne.n	8004a5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fe faf3 	bl	8003010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a2e:	4b19      	ldr	r3, [pc, #100]	@ (8004a94 <xTaskRemoveFromEventList+0xb4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d903      	bls.n	8004a3e <xTaskRemoveFromEventList+0x5e>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3a:	4a16      	ldr	r2, [pc, #88]	@ (8004a94 <xTaskRemoveFromEventList+0xb4>)
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <xTaskRemoveFromEventList+0xb8>)
 8004a4c:	441a      	add	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	3304      	adds	r3, #4
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7fe fa7e 	bl	8002f56 <vListInsertEnd>
 8004a5a:	e005      	b.n	8004a68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4619      	mov	r1, r3
 8004a62:	480e      	ldr	r0, [pc, #56]	@ (8004a9c <xTaskRemoveFromEventList+0xbc>)
 8004a64:	f7fe fa77 	bl	8002f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa0 <xTaskRemoveFromEventList+0xc0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d905      	bls.n	8004a82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004a76:	2301      	movs	r3, #1
 8004a78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa4 <xTaskRemoveFromEventList+0xc4>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	e001      	b.n	8004a86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004a86:	697b      	ldr	r3, [r7, #20]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000ee4 	.word	0x20000ee4
 8004a94:	20000ec4 	.word	0x20000ec4
 8004a98:	200009ec 	.word	0x200009ec
 8004a9c:	20000e7c 	.word	0x20000e7c
 8004aa0:	200009e8 	.word	0x200009e8
 8004aa4:	20000ed0 	.word	0x20000ed0

08004aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ab0:	4b06      	ldr	r3, [pc, #24]	@ (8004acc <vTaskInternalSetTimeOutState+0x24>)
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <vTaskInternalSetTimeOutState+0x28>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	605a      	str	r2, [r3, #4]
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr
 8004acc:	20000ed4 	.word	0x20000ed4
 8004ad0:	20000ec0 	.word	0x20000ec0

08004ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10b      	bne.n	8004afc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	613b      	str	r3, [r7, #16]
}
 8004af6:	bf00      	nop
 8004af8:	bf00      	nop
 8004afa:	e7fd      	b.n	8004af8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d10b      	bne.n	8004b1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	60fb      	str	r3, [r7, #12]
}
 8004b14:	bf00      	nop
 8004b16:	bf00      	nop
 8004b18:	e7fd      	b.n	8004b16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004b1a:	f000 ff95 	bl	8005a48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8004b94 <xTaskCheckForTimeOut+0xc0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d102      	bne.n	8004b3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e023      	b.n	8004b86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	4b15      	ldr	r3, [pc, #84]	@ (8004b98 <xTaskCheckForTimeOut+0xc4>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d007      	beq.n	8004b5a <xTaskCheckForTimeOut+0x86>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d302      	bcc.n	8004b5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004b54:	2301      	movs	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e015      	b.n	8004b86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	697a      	ldr	r2, [r7, #20]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d20b      	bcs.n	8004b7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f7ff ff99 	bl	8004aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61fb      	str	r3, [r7, #28]
 8004b7a:	e004      	b.n	8004b86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004b86:	f000 ff91 	bl	8005aac <vPortExitCritical>

	return xReturn;
 8004b8a:	69fb      	ldr	r3, [r7, #28]
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3720      	adds	r7, #32
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000ec0 	.word	0x20000ec0
 8004b98:	20000ed4 	.word	0x20000ed4

08004b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ba0:	4b03      	ldr	r3, [pc, #12]	@ (8004bb0 <vTaskMissedYield+0x14>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000ed0 	.word	0x20000ed0

08004bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004bbc:	f000 f852 	bl	8004c64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004bc0:	4b06      	ldr	r3, [pc, #24]	@ (8004bdc <prvIdleTask+0x28>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d9f9      	bls.n	8004bbc <prvIdleTask+0x8>
			{
				taskYIELD();
 8004bc8:	4b05      	ldr	r3, [pc, #20]	@ (8004be0 <prvIdleTask+0x2c>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004bd8:	e7f0      	b.n	8004bbc <prvIdleTask+0x8>
 8004bda:	bf00      	nop
 8004bdc:	200009ec 	.word	0x200009ec
 8004be0:	e000ed04 	.word	0xe000ed04

08004be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
 8004bee:	e00c      	b.n	8004c0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4413      	add	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4a12      	ldr	r2, [pc, #72]	@ (8004c44 <prvInitialiseTaskLists+0x60>)
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f7fe f97c 	bl	8002efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3301      	adds	r3, #1
 8004c08:	607b      	str	r3, [r7, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b37      	cmp	r3, #55	@ 0x37
 8004c0e:	d9ef      	bls.n	8004bf0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c10:	480d      	ldr	r0, [pc, #52]	@ (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c12:	f7fe f973 	bl	8002efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c16:	480d      	ldr	r0, [pc, #52]	@ (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c18:	f7fe f970 	bl	8002efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c1c:	480c      	ldr	r0, [pc, #48]	@ (8004c50 <prvInitialiseTaskLists+0x6c>)
 8004c1e:	f7fe f96d 	bl	8002efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c22:	480c      	ldr	r0, [pc, #48]	@ (8004c54 <prvInitialiseTaskLists+0x70>)
 8004c24:	f7fe f96a 	bl	8002efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c28:	480b      	ldr	r0, [pc, #44]	@ (8004c58 <prvInitialiseTaskLists+0x74>)
 8004c2a:	f7fe f967 	bl	8002efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c5c <prvInitialiseTaskLists+0x78>)
 8004c30:	4a05      	ldr	r2, [pc, #20]	@ (8004c48 <prvInitialiseTaskLists+0x64>)
 8004c32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c34:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <prvInitialiseTaskLists+0x7c>)
 8004c36:	4a05      	ldr	r2, [pc, #20]	@ (8004c4c <prvInitialiseTaskLists+0x68>)
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3708      	adds	r7, #8
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	200009ec 	.word	0x200009ec
 8004c48:	20000e4c 	.word	0x20000e4c
 8004c4c:	20000e60 	.word	0x20000e60
 8004c50:	20000e7c 	.word	0x20000e7c
 8004c54:	20000e90 	.word	0x20000e90
 8004c58:	20000ea8 	.word	0x20000ea8
 8004c5c:	20000e74 	.word	0x20000e74
 8004c60:	20000e78 	.word	0x20000e78

08004c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c6a:	e019      	b.n	8004ca0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004c6c:	f000 feec 	bl	8005a48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c70:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <prvCheckTasksWaitingTermination+0x50>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fe f9c7 	bl	8003010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004c82:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb8 <prvCheckTasksWaitingTermination+0x54>)
 8004c8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	3b01      	subs	r3, #1
 8004c92:	4a0a      	ldr	r2, [pc, #40]	@ (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004c94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004c96:	f000 ff09 	bl	8005aac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f810 	bl	8004cc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ca0:	4b06      	ldr	r3, [pc, #24]	@ (8004cbc <prvCheckTasksWaitingTermination+0x58>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e1      	bne.n	8004c6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ca8:	bf00      	nop
 8004caa:	bf00      	nop
 8004cac:	3708      	adds	r7, #8
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20000e90 	.word	0x20000e90
 8004cb8:	20000ebc 	.word	0x20000ebc
 8004cbc:	20000ea4 	.word	0x20000ea4

08004cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3354      	adds	r3, #84	@ 0x54
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f001 ff45 	bl	8006b5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d108      	bne.n	8004cee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f001 f8a1 	bl	8005e28 <vPortFree>
				vPortFree( pxTCB );
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f001 f89e 	bl	8005e28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004cec:	e019      	b.n	8004d22 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d103      	bne.n	8004d00 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f001 f895 	bl	8005e28 <vPortFree>
	}
 8004cfe:	e010      	b.n	8004d22 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d00b      	beq.n	8004d22 <prvDeleteTCB+0x62>
	__asm volatile
 8004d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	60fb      	str	r3, [r7, #12]
}
 8004d1c:	bf00      	nop
 8004d1e:	bf00      	nop
 8004d20:	e7fd      	b.n	8004d1e <prvDeleteTCB+0x5e>
	}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d32:	4b0c      	ldr	r3, [pc, #48]	@ (8004d64 <prvResetNextTaskUnblockTime+0x38>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d68 <prvResetNextTaskUnblockTime+0x3c>)
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d44:	e008      	b.n	8004d58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d46:	4b07      	ldr	r3, [pc, #28]	@ (8004d64 <prvResetNextTaskUnblockTime+0x38>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	4a04      	ldr	r2, [pc, #16]	@ (8004d68 <prvResetNextTaskUnblockTime+0x3c>)
 8004d56:	6013      	str	r3, [r2, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20000e74 	.word	0x20000e74
 8004d68:	20000edc 	.word	0x20000edc

08004d6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d72:	4b0b      	ldr	r3, [pc, #44]	@ (8004da0 <xTaskGetSchedulerState+0x34>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d102      	bne.n	8004d80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	e008      	b.n	8004d92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d80:	4b08      	ldr	r3, [pc, #32]	@ (8004da4 <xTaskGetSchedulerState+0x38>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d102      	bne.n	8004d8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	607b      	str	r3, [r7, #4]
 8004d8c:	e001      	b.n	8004d92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d92:	687b      	ldr	r3, [r7, #4]
	}
 8004d94:	4618      	mov	r0, r3
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	20000ec8 	.word	0x20000ec8
 8004da4:	20000ee4 	.word	0x20000ee4

08004da8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d051      	beq.n	8004e62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e6c <xTaskPriorityInherit+0xc4>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d241      	bcs.n	8004e50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	699b      	ldr	r3, [r3, #24]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	db06      	blt.n	8004de2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd4:	4b25      	ldr	r3, [pc, #148]	@ (8004e6c <xTaskPriorityInherit+0xc4>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	6959      	ldr	r1, [r3, #20]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e70 <xTaskPriorityInherit+0xc8>)
 8004df4:	4413      	add	r3, r2
 8004df6:	4299      	cmp	r1, r3
 8004df8:	d122      	bne.n	8004e40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe f906 	bl	8003010 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e04:	4b19      	ldr	r3, [pc, #100]	@ (8004e6c <xTaskPriorityInherit+0xc4>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e12:	4b18      	ldr	r3, [pc, #96]	@ (8004e74 <xTaskPriorityInherit+0xcc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d903      	bls.n	8004e22 <xTaskPriorityInherit+0x7a>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4a15      	ldr	r2, [pc, #84]	@ (8004e74 <xTaskPriorityInherit+0xcc>)
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	4a10      	ldr	r2, [pc, #64]	@ (8004e70 <xTaskPriorityInherit+0xc8>)
 8004e30:	441a      	add	r2, r3
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	3304      	adds	r3, #4
 8004e36:	4619      	mov	r1, r3
 8004e38:	4610      	mov	r0, r2
 8004e3a:	f7fe f88c 	bl	8002f56 <vListInsertEnd>
 8004e3e:	e004      	b.n	8004e4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004e40:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <xTaskPriorityInherit+0xc4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e008      	b.n	8004e62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e54:	4b05      	ldr	r3, [pc, #20]	@ (8004e6c <xTaskPriorityInherit+0xc4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d201      	bcs.n	8004e62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e62:	68fb      	ldr	r3, [r7, #12]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	200009e8 	.word	0x200009e8
 8004e70:	200009ec 	.word	0x200009ec
 8004e74:	20000ec4 	.word	0x20000ec4

08004e78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d058      	beq.n	8004f40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004e8e:	4b2f      	ldr	r3, [pc, #188]	@ (8004f4c <xTaskPriorityDisinherit+0xd4>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d00b      	beq.n	8004eb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9c:	f383 8811 	msr	BASEPRI, r3
 8004ea0:	f3bf 8f6f 	isb	sy
 8004ea4:	f3bf 8f4f 	dsb	sy
 8004ea8:	60fb      	str	r3, [r7, #12]
}
 8004eaa:	bf00      	nop
 8004eac:	bf00      	nop
 8004eae:	e7fd      	b.n	8004eac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10b      	bne.n	8004ed0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	60bb      	str	r3, [r7, #8]
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	e7fd      	b.n	8004ecc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed4:	1e5a      	subs	r2, r3, #1
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d02c      	beq.n	8004f40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d128      	bne.n	8004f40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fe f88c 	bl	8003010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f10:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <xTaskPriorityDisinherit+0xd8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d903      	bls.n	8004f20 <xTaskPriorityDisinherit+0xa8>
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f50 <xTaskPriorityDisinherit+0xd8>)
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4a09      	ldr	r2, [pc, #36]	@ (8004f54 <xTaskPriorityDisinherit+0xdc>)
 8004f2e:	441a      	add	r2, r3
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	3304      	adds	r3, #4
 8004f34:	4619      	mov	r1, r3
 8004f36:	4610      	mov	r0, r2
 8004f38:	f7fe f80d 	bl	8002f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004f40:	697b      	ldr	r3, [r7, #20]
	}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200009e8 	.word	0x200009e8
 8004f50:	20000ec4 	.word	0x20000ec4
 8004f54:	200009ec 	.word	0x200009ec

08004f58 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004f66:	2301      	movs	r3, #1
 8004f68:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d06c      	beq.n	800504a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10b      	bne.n	8004f90 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	60fb      	str	r3, [r7, #12]
}
 8004f8a:	bf00      	nop
 8004f8c:	bf00      	nop
 8004f8e:	e7fd      	b.n	8004f8c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d902      	bls.n	8004fa0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e002      	b.n	8004fa6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d04c      	beq.n	800504a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fb4:	697a      	ldr	r2, [r7, #20]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d147      	bne.n	800504a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004fba:	4b26      	ldr	r3, [pc, #152]	@ (8005054 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69ba      	ldr	r2, [r7, #24]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d10b      	bne.n	8004fdc <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc8:	f383 8811 	msr	BASEPRI, r3
 8004fcc:	f3bf 8f6f 	isb	sy
 8004fd0:	f3bf 8f4f 	dsb	sy
 8004fd4:	60bb      	str	r3, [r7, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	69fa      	ldr	r2, [r7, #28]
 8004fe6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	699b      	ldr	r3, [r3, #24]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	db04      	blt.n	8004ffa <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a13      	ldr	r2, [pc, #76]	@ (8005058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800500a:	4413      	add	r3, r2
 800500c:	4299      	cmp	r1, r3
 800500e:	d11c      	bne.n	800504a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fd fffb 	bl	8003010 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501e:	4b0f      	ldr	r3, [pc, #60]	@ (800505c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d903      	bls.n	800502e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	4a0c      	ldr	r2, [pc, #48]	@ (800505c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a07      	ldr	r2, [pc, #28]	@ (8005058 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800503c:	441a      	add	r2, r3
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7fd ff86 	bl	8002f56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800504a:	bf00      	nop
 800504c:	3720      	adds	r7, #32
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	200009e8 	.word	0x200009e8
 8005058:	200009ec 	.word	0x200009ec
 800505c:	20000ec4 	.word	0x20000ec4

08005060 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005064:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <pvTaskIncrementMutexHeldCount+0x24>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d004      	beq.n	8005076 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800506c:	4b05      	ldr	r3, [pc, #20]	@ (8005084 <pvTaskIncrementMutexHeldCount+0x24>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005072:	3201      	adds	r2, #1
 8005074:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005076:	4b03      	ldr	r3, [pc, #12]	@ (8005084 <pvTaskIncrementMutexHeldCount+0x24>)
 8005078:	681b      	ldr	r3, [r3, #0]
	}
 800507a:	4618      	mov	r0, r3
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	200009e8 	.word	0x200009e8

08005088 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005092:	4b21      	ldr	r3, [pc, #132]	@ (8005118 <prvAddCurrentTaskToDelayedList+0x90>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005098:	4b20      	ldr	r3, [pc, #128]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd ffb6 	bl	8003010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050aa:	d10a      	bne.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b1a      	ldr	r3, [pc, #104]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	4619      	mov	r1, r3
 80050ba:	4819      	ldr	r0, [pc, #100]	@ (8005120 <prvAddCurrentTaskToDelayedList+0x98>)
 80050bc:	f7fd ff4b 	bl	8002f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80050c0:	e026      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4413      	add	r3, r2
 80050c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80050ca:	4b14      	ldr	r3, [pc, #80]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d209      	bcs.n	80050ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b0f      	ldr	r3, [pc, #60]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f7fd ff59 	bl	8002f9e <vListInsert>
}
 80050ec:	e010      	b.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005128 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	4b0a      	ldr	r3, [pc, #40]	@ (800511c <prvAddCurrentTaskToDelayedList+0x94>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f7fd ff4f 	bl	8002f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005100:	4b0a      	ldr	r3, [pc, #40]	@ (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d202      	bcs.n	8005110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800510a:	4a08      	ldr	r2, [pc, #32]	@ (800512c <prvAddCurrentTaskToDelayedList+0xa4>)
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	6013      	str	r3, [r2, #0]
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	20000ec0 	.word	0x20000ec0
 800511c:	200009e8 	.word	0x200009e8
 8005120:	20000ea8 	.word	0x20000ea8
 8005124:	20000e78 	.word	0x20000e78
 8005128:	20000e74 	.word	0x20000e74
 800512c:	20000edc 	.word	0x20000edc

08005130 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08a      	sub	sp, #40	@ 0x28
 8005134:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800513a:	f000 fb13 	bl	8005764 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800513e:	4b1d      	ldr	r3, [pc, #116]	@ (80051b4 <xTimerCreateTimerTask+0x84>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800514e:	1d3a      	adds	r2, r7, #4
 8005150:	f107 0108 	add.w	r1, r7, #8
 8005154:	f107 030c 	add.w	r3, r7, #12
 8005158:	4618      	mov	r0, r3
 800515a:	f7fd feb5 	bl	8002ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800515e:	6879      	ldr	r1, [r7, #4]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	9202      	str	r2, [sp, #8]
 8005166:	9301      	str	r3, [sp, #4]
 8005168:	2302      	movs	r3, #2
 800516a:	9300      	str	r3, [sp, #0]
 800516c:	2300      	movs	r3, #0
 800516e:	460a      	mov	r2, r1
 8005170:	4911      	ldr	r1, [pc, #68]	@ (80051b8 <xTimerCreateTimerTask+0x88>)
 8005172:	4812      	ldr	r0, [pc, #72]	@ (80051bc <xTimerCreateTimerTask+0x8c>)
 8005174:	f7fe ffa2 	bl	80040bc <xTaskCreateStatic>
 8005178:	4603      	mov	r3, r0
 800517a:	4a11      	ldr	r2, [pc, #68]	@ (80051c0 <xTimerCreateTimerTask+0x90>)
 800517c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800517e:	4b10      	ldr	r3, [pc, #64]	@ (80051c0 <xTimerCreateTimerTask+0x90>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005186:	2301      	movs	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d10b      	bne.n	80051a8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80051a8:	697b      	ldr	r3, [r7, #20]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3718      	adds	r7, #24
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000f18 	.word	0x20000f18
 80051b8:	08008a68 	.word	0x08008a68
 80051bc:	080052fd 	.word	0x080052fd
 80051c0:	20000f1c 	.word	0x20000f1c

080051c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b08a      	sub	sp, #40	@ 0x28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
 80051d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10b      	bne.n	80051f4 <xTimerGenericCommand+0x30>
	__asm volatile
 80051dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e0:	f383 8811 	msr	BASEPRI, r3
 80051e4:	f3bf 8f6f 	isb	sy
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	623b      	str	r3, [r7, #32]
}
 80051ee:	bf00      	nop
 80051f0:	bf00      	nop
 80051f2:	e7fd      	b.n	80051f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051f4:	4b19      	ldr	r3, [pc, #100]	@ (800525c <xTimerGenericCommand+0x98>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d02a      	beq.n	8005252 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b05      	cmp	r3, #5
 800520c:	dc18      	bgt.n	8005240 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800520e:	f7ff fdad 	bl	8004d6c <xTaskGetSchedulerState>
 8005212:	4603      	mov	r3, r0
 8005214:	2b02      	cmp	r3, #2
 8005216:	d109      	bne.n	800522c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005218:	4b10      	ldr	r3, [pc, #64]	@ (800525c <xTimerGenericCommand+0x98>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	f107 0110 	add.w	r1, r7, #16
 8005220:	2300      	movs	r3, #0
 8005222:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005224:	f7fe f8d2 	bl	80033cc <xQueueGenericSend>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24
 800522a:	e012      	b.n	8005252 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800522c:	4b0b      	ldr	r3, [pc, #44]	@ (800525c <xTimerGenericCommand+0x98>)
 800522e:	6818      	ldr	r0, [r3, #0]
 8005230:	f107 0110 	add.w	r1, r7, #16
 8005234:	2300      	movs	r3, #0
 8005236:	2200      	movs	r2, #0
 8005238:	f7fe f8c8 	bl	80033cc <xQueueGenericSend>
 800523c:	6278      	str	r0, [r7, #36]	@ 0x24
 800523e:	e008      	b.n	8005252 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005240:	4b06      	ldr	r3, [pc, #24]	@ (800525c <xTimerGenericCommand+0x98>)
 8005242:	6818      	ldr	r0, [r3, #0]
 8005244:	f107 0110 	add.w	r1, r7, #16
 8005248:	2300      	movs	r3, #0
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	f7fe f9c0 	bl	80035d0 <xQueueGenericSendFromISR>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005254:	4618      	mov	r0, r3
 8005256:	3728      	adds	r7, #40	@ 0x28
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000f18 	.word	0x20000f18

08005260 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b088      	sub	sp, #32
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800526a:	4b23      	ldr	r3, [pc, #140]	@ (80052f8 <prvProcessExpiredTimer+0x98>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	3304      	adds	r3, #4
 8005278:	4618      	mov	r0, r3
 800527a:	f7fd fec9 	bl	8003010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d023      	beq.n	80052d4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	699a      	ldr	r2, [r3, #24]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	18d1      	adds	r1, r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	6978      	ldr	r0, [r7, #20]
 800529a:	f000 f8d5 	bl	8005448 <prvInsertTimerInActiveList>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d020      	beq.n	80052e6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a4:	2300      	movs	r3, #0
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	2300      	movs	r3, #0
 80052aa:	687a      	ldr	r2, [r7, #4]
 80052ac:	2100      	movs	r1, #0
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	f7ff ff88 	bl	80051c4 <xTimerGenericCommand>
 80052b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d114      	bne.n	80052e6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80052bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c0:	f383 8811 	msr	BASEPRI, r3
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	f3bf 8f4f 	dsb	sy
 80052cc:	60fb      	str	r3, [r7, #12]
}
 80052ce:	bf00      	nop
 80052d0:	bf00      	nop
 80052d2:	e7fd      	b.n	80052d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052da:	f023 0301 	bic.w	r3, r3, #1
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
 80052ea:	6978      	ldr	r0, [r7, #20]
 80052ec:	4798      	blx	r3
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20000f10 	.word	0x20000f10

080052fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005304:	f107 0308 	add.w	r3, r7, #8
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f859 	bl	80053c0 <prvGetNextExpireTime>
 800530e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	4619      	mov	r1, r3
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f805 	bl	8005324 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800531a:	f000 f8d7 	bl	80054cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800531e:	bf00      	nop
 8005320:	e7f0      	b.n	8005304 <prvTimerTask+0x8>
	...

08005324 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
 800532c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800532e:	f7ff f929 	bl	8004584 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005332:	f107 0308 	add.w	r3, r7, #8
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f866 	bl	8005408 <prvSampleTimeNow>
 800533c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d130      	bne.n	80053a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10a      	bne.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	429a      	cmp	r2, r3
 8005350:	d806      	bhi.n	8005360 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005352:	f7ff f925 	bl	80045a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005356:	68f9      	ldr	r1, [r7, #12]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff81 	bl	8005260 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800535e:	e024      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d008      	beq.n	8005378 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005366:	4b13      	ldr	r3, [pc, #76]	@ (80053b4 <prvProcessTimerOrBlockTask+0x90>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <prvProcessTimerOrBlockTask+0x50>
 8005370:	2301      	movs	r3, #1
 8005372:	e000      	b.n	8005376 <prvProcessTimerOrBlockTask+0x52>
 8005374:	2300      	movs	r3, #0
 8005376:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005378:	4b0f      	ldr	r3, [pc, #60]	@ (80053b8 <prvProcessTimerOrBlockTask+0x94>)
 800537a:	6818      	ldr	r0, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	4619      	mov	r1, r3
 8005386:	f7fe fe65 	bl	8004054 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800538a:	f7ff f909 	bl	80045a0 <xTaskResumeAll>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10a      	bne.n	80053aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005394:	4b09      	ldr	r3, [pc, #36]	@ (80053bc <prvProcessTimerOrBlockTask+0x98>)
 8005396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	f3bf 8f6f 	isb	sy
}
 80053a4:	e001      	b.n	80053aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80053a6:	f7ff f8fb 	bl	80045a0 <xTaskResumeAll>
}
 80053aa:	bf00      	nop
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20000f14 	.word	0x20000f14
 80053b8:	20000f18 	.word	0x20000f18
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80053c0:	b480      	push	{r7}
 80053c2:	b085      	sub	sp, #20
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005404 <prvGetNextExpireTime+0x44>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <prvGetNextExpireTime+0x16>
 80053d2:	2201      	movs	r2, #1
 80053d4:	e000      	b.n	80053d8 <prvGetNextExpireTime+0x18>
 80053d6:	2200      	movs	r2, #0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d105      	bne.n	80053f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053e4:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <prvGetNextExpireTime+0x44>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e001      	b.n	80053f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053f4:	68fb      	ldr	r3, [r7, #12]
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr
 8005402:	bf00      	nop
 8005404:	20000f10 	.word	0x20000f10

08005408 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005410:	f7ff f964 	bl	80046dc <xTaskGetTickCount>
 8005414:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005416:	4b0b      	ldr	r3, [pc, #44]	@ (8005444 <prvSampleTimeNow+0x3c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	429a      	cmp	r2, r3
 800541e:	d205      	bcs.n	800542c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005420:	f000 f93a 	bl	8005698 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	e002      	b.n	8005432 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005432:	4a04      	ldr	r2, [pc, #16]	@ (8005444 <prvSampleTimeNow+0x3c>)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005438:	68fb      	ldr	r3, [r7, #12]
}
 800543a:	4618      	mov	r0, r3
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000f20 	.word	0x20000f20

08005448 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	429a      	cmp	r2, r3
 800546c:	d812      	bhi.n	8005494 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	1ad2      	subs	r2, r2, r3
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e01b      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005482:	4b10      	ldr	r3, [pc, #64]	@ (80054c4 <prvInsertTimerInActiveList+0x7c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fd fd86 	bl	8002f9e <vListInsert>
 8005492:	e012      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	429a      	cmp	r2, r3
 800549a:	d206      	bcs.n	80054aa <prvInsertTimerInActiveList+0x62>
 800549c:	68ba      	ldr	r2, [r7, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d302      	bcc.n	80054aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80054a4:	2301      	movs	r3, #1
 80054a6:	617b      	str	r3, [r7, #20]
 80054a8:	e007      	b.n	80054ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054aa:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <prvInsertTimerInActiveList+0x80>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3304      	adds	r3, #4
 80054b2:	4619      	mov	r1, r3
 80054b4:	4610      	mov	r0, r2
 80054b6:	f7fd fd72 	bl	8002f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80054ba:	697b      	ldr	r3, [r7, #20]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	20000f14 	.word	0x20000f14
 80054c8:	20000f10 	.word	0x20000f10

080054cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b08e      	sub	sp, #56	@ 0x38
 80054d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054d2:	e0ce      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	da19      	bge.n	800550e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80054da:	1d3b      	adds	r3, r7, #4
 80054dc:	3304      	adds	r3, #4
 80054de:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10b      	bne.n	80054fe <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	61fb      	str	r3, [r7, #28]
}
 80054f8:	bf00      	nop
 80054fa:	bf00      	nop
 80054fc:	e7fd      	b.n	80054fa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005504:	6850      	ldr	r0, [r2, #4]
 8005506:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005508:	6892      	ldr	r2, [r2, #8]
 800550a:	4611      	mov	r1, r2
 800550c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	f2c0 80ae 	blt.w	8005672 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005524:	3304      	adds	r3, #4
 8005526:	4618      	mov	r0, r3
 8005528:	f7fd fd72 	bl	8003010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800552c:	463b      	mov	r3, r7
 800552e:	4618      	mov	r0, r3
 8005530:	f7ff ff6a 	bl	8005408 <prvSampleTimeNow>
 8005534:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b09      	cmp	r3, #9
 800553a:	f200 8097 	bhi.w	800566c <prvProcessReceivedCommands+0x1a0>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <prvProcessReceivedCommands+0x78>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	0800556d 	.word	0x0800556d
 8005548:	0800556d 	.word	0x0800556d
 800554c:	0800556d 	.word	0x0800556d
 8005550:	080055e3 	.word	0x080055e3
 8005554:	080055f7 	.word	0x080055f7
 8005558:	08005643 	.word	0x08005643
 800555c:	0800556d 	.word	0x0800556d
 8005560:	0800556d 	.word	0x0800556d
 8005564:	080055e3 	.word	0x080055e3
 8005568:	080055f7 	.word	0x080055f7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005572:	f043 0301 	orr.w	r3, r3, #1
 8005576:	b2da      	uxtb	r2, r3
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005582:	699b      	ldr	r3, [r3, #24]
 8005584:	18d1      	adds	r1, r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558c:	f7ff ff5c 	bl	8005448 <prvInsertTimerInActiveList>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d06c      	beq.n	8005670 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005598:	6a1b      	ldr	r3, [r3, #32]
 800559a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800559c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d061      	beq.n	8005670 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	441a      	add	r2, r3
 80055b4:	2300      	movs	r3, #0
 80055b6:	9300      	str	r3, [sp, #0]
 80055b8:	2300      	movs	r3, #0
 80055ba:	2100      	movs	r1, #0
 80055bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055be:	f7ff fe01 	bl	80051c4 <xTimerGenericCommand>
 80055c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80055c4:	6a3b      	ldr	r3, [r7, #32]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d152      	bne.n	8005670 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80055ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ce:	f383 8811 	msr	BASEPRI, r3
 80055d2:	f3bf 8f6f 	isb	sy
 80055d6:	f3bf 8f4f 	dsb	sy
 80055da:	61bb      	str	r3, [r7, #24]
}
 80055dc:	bf00      	nop
 80055de:	bf00      	nop
 80055e0:	e7fd      	b.n	80055de <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055e8:	f023 0301 	bic.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055f4:	e03d      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	b2da      	uxtb	r2, r3
 8005602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005604:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800560c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800560e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	617b      	str	r3, [r7, #20]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005634:	18d1      	adds	r1, r2, r3
 8005636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800563a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800563c:	f7ff ff04 	bl	8005448 <prvInsertTimerInActiveList>
					break;
 8005640:	e017      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005644:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d103      	bne.n	8005658 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005652:	f000 fbe9 	bl	8005e28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005656:	e00c      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800565a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800565e:	f023 0301 	bic.w	r3, r3, #1
 8005662:	b2da      	uxtb	r2, r3
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005666:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800566a:	e002      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800566c:	bf00      	nop
 800566e:	e000      	b.n	8005672 <prvProcessReceivedCommands+0x1a6>
					break;
 8005670:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005672:	4b08      	ldr	r3, [pc, #32]	@ (8005694 <prvProcessReceivedCommands+0x1c8>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	1d39      	adds	r1, r7, #4
 8005678:	2200      	movs	r2, #0
 800567a:	4618      	mov	r0, r3
 800567c:	f7fe f8d6 	bl	800382c <xQueueReceive>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f47f af26 	bne.w	80054d4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005688:	bf00      	nop
 800568a:	bf00      	nop
 800568c:	3730      	adds	r7, #48	@ 0x30
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000f18 	.word	0x20000f18

08005698 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569e:	e049      	b.n	8005734 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80056a0:	4b2e      	ldr	r3, [pc, #184]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056aa:	4b2c      	ldr	r3, [pc, #176]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	3304      	adds	r3, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fd fca9 	bl	8003010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	68f8      	ldr	r0, [r7, #12]
 80056c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02f      	beq.n	8005734 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056de:	68ba      	ldr	r2, [r7, #8]
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d90e      	bls.n	8005704 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b1a      	ldr	r3, [pc, #104]	@ (800575c <prvSwitchTimerLists+0xc4>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fd fc4e 	bl	8002f9e <vListInsert>
 8005702:	e017      	b.n	8005734 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005704:	2300      	movs	r3, #0
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	2100      	movs	r1, #0
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff fd58 	bl	80051c4 <xTimerGenericCommand>
 8005714:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10b      	bne.n	8005734 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800571c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005720:	f383 8811 	msr	BASEPRI, r3
 8005724:	f3bf 8f6f 	isb	sy
 8005728:	f3bf 8f4f 	dsb	sy
 800572c:	603b      	str	r3, [r7, #0]
}
 800572e:	bf00      	nop
 8005730:	bf00      	nop
 8005732:	e7fd      	b.n	8005730 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005734:	4b09      	ldr	r3, [pc, #36]	@ (800575c <prvSwitchTimerLists+0xc4>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d1b0      	bne.n	80056a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800573e:	4b07      	ldr	r3, [pc, #28]	@ (800575c <prvSwitchTimerLists+0xc4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005744:	4b06      	ldr	r3, [pc, #24]	@ (8005760 <prvSwitchTimerLists+0xc8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a04      	ldr	r2, [pc, #16]	@ (800575c <prvSwitchTimerLists+0xc4>)
 800574a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800574c:	4a04      	ldr	r2, [pc, #16]	@ (8005760 <prvSwitchTimerLists+0xc8>)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	6013      	str	r3, [r2, #0]
}
 8005752:	bf00      	nop
 8005754:	3718      	adds	r7, #24
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000f10 	.word	0x20000f10
 8005760:	20000f14 	.word	0x20000f14

08005764 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800576a:	f000 f96d 	bl	8005a48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800576e:	4b15      	ldr	r3, [pc, #84]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d120      	bne.n	80057b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005776:	4814      	ldr	r0, [pc, #80]	@ (80057c8 <prvCheckForValidListAndQueue+0x64>)
 8005778:	f7fd fbc0 	bl	8002efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800577c:	4813      	ldr	r0, [pc, #76]	@ (80057cc <prvCheckForValidListAndQueue+0x68>)
 800577e:	f7fd fbbd 	bl	8002efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005782:	4b13      	ldr	r3, [pc, #76]	@ (80057d0 <prvCheckForValidListAndQueue+0x6c>)
 8005784:	4a10      	ldr	r2, [pc, #64]	@ (80057c8 <prvCheckForValidListAndQueue+0x64>)
 8005786:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005788:	4b12      	ldr	r3, [pc, #72]	@ (80057d4 <prvCheckForValidListAndQueue+0x70>)
 800578a:	4a10      	ldr	r2, [pc, #64]	@ (80057cc <prvCheckForValidListAndQueue+0x68>)
 800578c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800578e:	2300      	movs	r3, #0
 8005790:	9300      	str	r3, [sp, #0]
 8005792:	4b11      	ldr	r3, [pc, #68]	@ (80057d8 <prvCheckForValidListAndQueue+0x74>)
 8005794:	4a11      	ldr	r2, [pc, #68]	@ (80057dc <prvCheckForValidListAndQueue+0x78>)
 8005796:	2110      	movs	r1, #16
 8005798:	200a      	movs	r0, #10
 800579a:	f7fd fccd 	bl	8003138 <xQueueGenericCreateStatic>
 800579e:	4603      	mov	r3, r0
 80057a0:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80057a4:	4b07      	ldr	r3, [pc, #28]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057ac:	4b05      	ldr	r3, [pc, #20]	@ (80057c4 <prvCheckForValidListAndQueue+0x60>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	490b      	ldr	r1, [pc, #44]	@ (80057e0 <prvCheckForValidListAndQueue+0x7c>)
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fe fbfa 	bl	8003fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057b8:	f000 f978 	bl	8005aac <vPortExitCritical>
}
 80057bc:	bf00      	nop
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000f18 	.word	0x20000f18
 80057c8:	20000ee8 	.word	0x20000ee8
 80057cc:	20000efc 	.word	0x20000efc
 80057d0:	20000f10 	.word	0x20000f10
 80057d4:	20000f14 	.word	0x20000f14
 80057d8:	20000fc4 	.word	0x20000fc4
 80057dc:	20000f24 	.word	0x20000f24
 80057e0:	08008a70 	.word	0x08008a70

080057e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	3b04      	subs	r3, #4
 80057f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3b04      	subs	r3, #4
 8005802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f023 0201 	bic.w	r2, r3, #1
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005814:	4a0c      	ldr	r2, [pc, #48]	@ (8005848 <pxPortInitialiseStack+0x64>)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3b14      	subs	r3, #20
 800581e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	3b04      	subs	r3, #4
 800582a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f06f 0202 	mvn.w	r2, #2
 8005832:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	3b20      	subs	r3, #32
 8005838:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800583a:	68fb      	ldr	r3, [r7, #12]
}
 800583c:	4618      	mov	r0, r3
 800583e:	3714      	adds	r7, #20
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr
 8005848:	0800584d 	.word	0x0800584d

0800584c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005852:	2300      	movs	r3, #0
 8005854:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005856:	4b13      	ldr	r3, [pc, #76]	@ (80058a4 <prvTaskExitError+0x58>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585e:	d00b      	beq.n	8005878 <prvTaskExitError+0x2c>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60fb      	str	r3, [r7, #12]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <prvTaskExitError+0x28>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60bb      	str	r3, [r7, #8]
}
 800588a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800588c:	bf00      	nop
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0fc      	beq.n	800588e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	2000000c 	.word	0x2000000c
	...

080058b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <pxCurrentTCBConst2>)
 80058b2:	6819      	ldr	r1, [r3, #0]
 80058b4:	6808      	ldr	r0, [r1, #0]
 80058b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ba:	f380 8809 	msr	PSP, r0
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8811 	msr	BASEPRI, r0
 80058ca:	4770      	bx	lr
 80058cc:	f3af 8000 	nop.w

080058d0 <pxCurrentTCBConst2>:
 80058d0:	200009e8 	.word	0x200009e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop

080058d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80058d8:	4808      	ldr	r0, [pc, #32]	@ (80058fc <prvPortStartFirstTask+0x24>)
 80058da:	6800      	ldr	r0, [r0, #0]
 80058dc:	6800      	ldr	r0, [r0, #0]
 80058de:	f380 8808 	msr	MSP, r0
 80058e2:	f04f 0000 	mov.w	r0, #0
 80058e6:	f380 8814 	msr	CONTROL, r0
 80058ea:	b662      	cpsie	i
 80058ec:	b661      	cpsie	f
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	df00      	svc	0
 80058f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058fa:	bf00      	nop
 80058fc:	e000ed08 	.word	0xe000ed08

08005900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005906:	4b47      	ldr	r3, [pc, #284]	@ (8005a24 <xPortStartScheduler+0x124>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a47      	ldr	r2, [pc, #284]	@ (8005a28 <xPortStartScheduler+0x128>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d10b      	bne.n	8005928 <xPortStartScheduler+0x28>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005928:	4b3e      	ldr	r3, [pc, #248]	@ (8005a24 <xPortStartScheduler+0x124>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a3f      	ldr	r2, [pc, #252]	@ (8005a2c <xPortStartScheduler+0x12c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d10b      	bne.n	800594a <xPortStartScheduler+0x4a>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	60fb      	str	r3, [r7, #12]
}
 8005944:	bf00      	nop
 8005946:	bf00      	nop
 8005948:	e7fd      	b.n	8005946 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800594a:	4b39      	ldr	r3, [pc, #228]	@ (8005a30 <xPortStartScheduler+0x130>)
 800594c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	22ff      	movs	r2, #255	@ 0xff
 800595a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	b2db      	uxtb	r3, r3
 8005962:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005964:	78fb      	ldrb	r3, [r7, #3]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800596c:	b2da      	uxtb	r2, r3
 800596e:	4b31      	ldr	r3, [pc, #196]	@ (8005a34 <xPortStartScheduler+0x134>)
 8005970:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005972:	4b31      	ldr	r3, [pc, #196]	@ (8005a38 <xPortStartScheduler+0x138>)
 8005974:	2207      	movs	r2, #7
 8005976:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005978:	e009      	b.n	800598e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800597a:	4b2f      	ldr	r3, [pc, #188]	@ (8005a38 <xPortStartScheduler+0x138>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	3b01      	subs	r3, #1
 8005980:	4a2d      	ldr	r2, [pc, #180]	@ (8005a38 <xPortStartScheduler+0x138>)
 8005982:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800598e:	78fb      	ldrb	r3, [r7, #3]
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005996:	2b80      	cmp	r3, #128	@ 0x80
 8005998:	d0ef      	beq.n	800597a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800599a:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <xPortStartScheduler+0x138>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1c3 0307 	rsb	r3, r3, #7
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d00b      	beq.n	80059be <xPortStartScheduler+0xbe>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	60bb      	str	r3, [r7, #8]
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059be:	4b1e      	ldr	r3, [pc, #120]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059c8:	4b1b      	ldr	r3, [pc, #108]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059d0:	4a19      	ldr	r2, [pc, #100]	@ (8005a38 <xPortStartScheduler+0x138>)
 80059d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80059dc:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a16      	ldr	r2, [pc, #88]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059e8:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a13      	ldr	r2, [pc, #76]	@ (8005a3c <xPortStartScheduler+0x13c>)
 80059ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059f4:	f000 f8da 	bl	8005bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059f8:	4b11      	ldr	r3, [pc, #68]	@ (8005a40 <xPortStartScheduler+0x140>)
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059fe:	f000 f8f9 	bl	8005bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a02:	4b10      	ldr	r3, [pc, #64]	@ (8005a44 <xPortStartScheduler+0x144>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a0f      	ldr	r2, [pc, #60]	@ (8005a44 <xPortStartScheduler+0x144>)
 8005a08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005a0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a0e:	f7ff ff63 	bl	80058d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a12:	f7fe ff2d 	bl	8004870 <vTaskSwitchContext>
	prvTaskExitError();
 8005a16:	f7ff ff19 	bl	800584c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3718      	adds	r7, #24
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	e000ed00 	.word	0xe000ed00
 8005a28:	410fc271 	.word	0x410fc271
 8005a2c:	410fc270 	.word	0x410fc270
 8005a30:	e000e400 	.word	0xe000e400
 8005a34:	20001014 	.word	0x20001014
 8005a38:	20001018 	.word	0x20001018
 8005a3c:	e000ed20 	.word	0xe000ed20
 8005a40:	2000000c 	.word	0x2000000c
 8005a44:	e000ef34 	.word	0xe000ef34

08005a48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a52:	f383 8811 	msr	BASEPRI, r3
 8005a56:	f3bf 8f6f 	isb	sy
 8005a5a:	f3bf 8f4f 	dsb	sy
 8005a5e:	607b      	str	r3, [r7, #4]
}
 8005a60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	3301      	adds	r3, #1
 8005a68:	4a0e      	ldr	r2, [pc, #56]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005aa4 <vPortEnterCritical+0x5c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d110      	bne.n	8005a96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a74:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa8 <vPortEnterCritical+0x60>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00b      	beq.n	8005a96 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	603b      	str	r3, [r7, #0]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <vPortEnterCritical+0x4a>
	}
}
 8005a96:	bf00      	nop
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	2000000c 	.word	0x2000000c
 8005aa8:	e000ed04 	.word	0xe000ed04

08005aac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ab2:	4b12      	ldr	r3, [pc, #72]	@ (8005afc <vPortExitCritical+0x50>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10b      	bne.n	8005ad2 <vPortExitCritical+0x26>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	607b      	str	r3, [r7, #4]
}
 8005acc:	bf00      	nop
 8005ace:	bf00      	nop
 8005ad0:	e7fd      	b.n	8005ace <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <vPortExitCritical+0x50>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3b01      	subs	r3, #1
 8005ad8:	4a08      	ldr	r2, [pc, #32]	@ (8005afc <vPortExitCritical+0x50>)
 8005ada:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005adc:	4b07      	ldr	r3, [pc, #28]	@ (8005afc <vPortExitCritical+0x50>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <vPortExitCritical+0x44>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	f383 8811 	msr	BASEPRI, r3
}
 8005aee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	2000000c 	.word	0x2000000c

08005b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b00:	f3ef 8009 	mrs	r0, PSP
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	4b15      	ldr	r3, [pc, #84]	@ (8005b60 <pxCurrentTCBConst>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	f01e 0f10 	tst.w	lr, #16
 8005b10:	bf08      	it	eq
 8005b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1a:	6010      	str	r0, [r2, #0]
 8005b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b24:	f380 8811 	msr	BASEPRI, r0
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f7fe fe9e 	bl	8004870 <vTaskSwitchContext>
 8005b34:	f04f 0000 	mov.w	r0, #0
 8005b38:	f380 8811 	msr	BASEPRI, r0
 8005b3c:	bc09      	pop	{r0, r3}
 8005b3e:	6819      	ldr	r1, [r3, #0]
 8005b40:	6808      	ldr	r0, [r1, #0]
 8005b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b46:	f01e 0f10 	tst.w	lr, #16
 8005b4a:	bf08      	it	eq
 8005b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b50:	f380 8809 	msr	PSP, r0
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w

08005b60 <pxCurrentTCBConst>:
 8005b60:	200009e8 	.word	0x200009e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop

08005b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b72:	f383 8811 	msr	BASEPRI, r3
 8005b76:	f3bf 8f6f 	isb	sy
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	607b      	str	r3, [r7, #4]
}
 8005b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b82:	f7fe fdbb 	bl	80046fc <xTaskIncrementTick>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d003      	beq.n	8005b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b8c:	4b06      	ldr	r3, [pc, #24]	@ (8005ba8 <xPortSysTickHandler+0x40>)
 8005b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b92:	601a      	str	r2, [r3, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f383 8811 	msr	BASEPRI, r3
}
 8005b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ba0:	bf00      	nop
 8005ba2:	3708      	adds	r7, #8
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bac:	b480      	push	{r7}
 8005bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8005be4 <vPortSetupTimerInterrupt+0x38>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005be8 <vPortSetupTimerInterrupt+0x3c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bec <vPortSetupTimerInterrupt+0x40>)
 8005bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	4a09      	ldr	r2, [pc, #36]	@ (8005bf0 <vPortSetupTimerInterrupt+0x44>)
 8005bca:	3b01      	subs	r3, #1
 8005bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bce:	4b04      	ldr	r3, [pc, #16]	@ (8005be0 <vPortSetupTimerInterrupt+0x34>)
 8005bd0:	2207      	movs	r2, #7
 8005bd2:	601a      	str	r2, [r3, #0]
}
 8005bd4:	bf00      	nop
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	e000e010 	.word	0xe000e010
 8005be4:	e000e018 	.word	0xe000e018
 8005be8:	20000000 	.word	0x20000000
 8005bec:	10624dd3 	.word	0x10624dd3
 8005bf0:	e000e014 	.word	0xe000e014

08005bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005c04 <vPortEnableVFP+0x10>
 8005bf8:	6801      	ldr	r1, [r0, #0]
 8005bfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bfe:	6001      	str	r1, [r0, #0]
 8005c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c02:	bf00      	nop
 8005c04:	e000ed88 	.word	0xe000ed88

08005c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c0e:	f3ef 8305 	mrs	r3, IPSR
 8005c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b0f      	cmp	r3, #15
 8005c18:	d915      	bls.n	8005c46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c1a:	4a18      	ldr	r2, [pc, #96]	@ (8005c7c <vPortValidateInterruptPriority+0x74>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	781b      	ldrb	r3, [r3, #0]
 8005c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c24:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <vPortValidateInterruptPriority+0x78>)
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	7afa      	ldrb	r2, [r7, #11]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d20b      	bcs.n	8005c46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	607b      	str	r3, [r7, #4]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c46:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <vPortValidateInterruptPriority+0x7c>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c88 <vPortValidateInterruptPriority+0x80>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d90b      	bls.n	8005c6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	603b      	str	r3, [r7, #0]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <vPortValidateInterruptPriority+0x62>
	}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	e000e3f0 	.word	0xe000e3f0
 8005c80:	20001014 	.word	0x20001014
 8005c84:	e000ed0c 	.word	0xe000ed0c
 8005c88:	20001018 	.word	0x20001018

08005c8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b08a      	sub	sp, #40	@ 0x28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c98:	f7fe fc74 	bl	8004584 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8005e10 <pvPortMalloc+0x184>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d101      	bne.n	8005ca8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ca4:	f000 f924 	bl	8005ef0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ca8:	4b5a      	ldr	r3, [pc, #360]	@ (8005e14 <pvPortMalloc+0x188>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 8095 	bne.w	8005de0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01e      	beq.n	8005cfa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d015      	beq.n	8005cfa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f003 0307 	and.w	r3, r3, #7
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00b      	beq.n	8005cfa <pvPortMalloc+0x6e>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	617b      	str	r3, [r7, #20]
}
 8005cf4:	bf00      	nop
 8005cf6:	bf00      	nop
 8005cf8:	e7fd      	b.n	8005cf6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d06f      	beq.n	8005de0 <pvPortMalloc+0x154>
 8005d00:	4b45      	ldr	r3, [pc, #276]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d86a      	bhi.n	8005de0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d0a:	4b44      	ldr	r3, [pc, #272]	@ (8005e1c <pvPortMalloc+0x190>)
 8005d0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d0e:	4b43      	ldr	r3, [pc, #268]	@ (8005e1c <pvPortMalloc+0x190>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d14:	e004      	b.n	8005d20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d903      	bls.n	8005d32 <pvPortMalloc+0xa6>
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f1      	bne.n	8005d16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d32:	4b37      	ldr	r3, [pc, #220]	@ (8005e10 <pvPortMalloc+0x184>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d051      	beq.n	8005de0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2208      	movs	r2, #8
 8005d42:	4413      	add	r3, r2
 8005d44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	6a3b      	ldr	r3, [r7, #32]
 8005d4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	2308      	movs	r3, #8
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d920      	bls.n	8005da0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	4413      	add	r3, r2
 8005d64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	f003 0307 	and.w	r3, r3, #7
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00b      	beq.n	8005d88 <pvPortMalloc+0xfc>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	613b      	str	r3, [r7, #16]
}
 8005d82:	bf00      	nop
 8005d84:	bf00      	nop
 8005d86:	e7fd      	b.n	8005d84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	1ad2      	subs	r2, r2, r3
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d9a:	69b8      	ldr	r0, [r7, #24]
 8005d9c:	f000 f90a 	bl	8005fb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005da0:	4b1d      	ldr	r3, [pc, #116]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	4a1b      	ldr	r2, [pc, #108]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005dac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dae:	4b1a      	ldr	r3, [pc, #104]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	4b1b      	ldr	r3, [pc, #108]	@ (8005e20 <pvPortMalloc+0x194>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d203      	bcs.n	8005dc2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dba:	4b17      	ldr	r3, [pc, #92]	@ (8005e18 <pvPortMalloc+0x18c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a18      	ldr	r2, [pc, #96]	@ (8005e20 <pvPortMalloc+0x194>)
 8005dc0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	4b13      	ldr	r3, [pc, #76]	@ (8005e14 <pvPortMalloc+0x188>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005dd6:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <pvPortMalloc+0x198>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3301      	adds	r3, #1
 8005ddc:	4a11      	ldr	r2, [pc, #68]	@ (8005e24 <pvPortMalloc+0x198>)
 8005dde:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005de0:	f7fe fbde 	bl	80045a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de4:	69fb      	ldr	r3, [r7, #28]
 8005de6:	f003 0307 	and.w	r3, r3, #7
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00b      	beq.n	8005e06 <pvPortMalloc+0x17a>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	60fb      	str	r3, [r7, #12]
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <pvPortMalloc+0x176>
	return pvReturn;
 8005e06:	69fb      	ldr	r3, [r7, #28]
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3728      	adds	r7, #40	@ 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}
 8005e10:	20004c24 	.word	0x20004c24
 8005e14:	20004c38 	.word	0x20004c38
 8005e18:	20004c28 	.word	0x20004c28
 8005e1c:	20004c1c 	.word	0x20004c1c
 8005e20:	20004c2c 	.word	0x20004c2c
 8005e24:	20004c30 	.word	0x20004c30

08005e28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d04f      	beq.n	8005eda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	425b      	negs	r3, r3
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4413      	add	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	685a      	ldr	r2, [r3, #4]
 8005e4c:	4b25      	ldr	r3, [pc, #148]	@ (8005ee4 <vPortFree+0xbc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4013      	ands	r3, r2
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10b      	bne.n	8005e6e <vPortFree+0x46>
	__asm volatile
 8005e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5a:	f383 8811 	msr	BASEPRI, r3
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	f3bf 8f4f 	dsb	sy
 8005e66:	60fb      	str	r3, [r7, #12]
}
 8005e68:	bf00      	nop
 8005e6a:	bf00      	nop
 8005e6c:	e7fd      	b.n	8005e6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <vPortFree+0x66>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	60bb      	str	r3, [r7, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	4b14      	ldr	r3, [pc, #80]	@ (8005ee4 <vPortFree+0xbc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4013      	ands	r3, r2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d01e      	beq.n	8005eda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d11a      	bne.n	8005eda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ee4 <vPortFree+0xbc>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	43db      	mvns	r3, r3
 8005eae:	401a      	ands	r2, r3
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005eb4:	f7fe fb66 	bl	8004584 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	685a      	ldr	r2, [r3, #4]
 8005ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ee8 <vPortFree+0xc0>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	4a09      	ldr	r2, [pc, #36]	@ (8005ee8 <vPortFree+0xc0>)
 8005ec4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ec6:	6938      	ldr	r0, [r7, #16]
 8005ec8:	f000 f874 	bl	8005fb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005ecc:	4b07      	ldr	r3, [pc, #28]	@ (8005eec <vPortFree+0xc4>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	4a06      	ldr	r2, [pc, #24]	@ (8005eec <vPortFree+0xc4>)
 8005ed4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005ed6:	f7fe fb63 	bl	80045a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005eda:	bf00      	nop
 8005edc:	3718      	adds	r7, #24
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	20004c38 	.word	0x20004c38
 8005ee8:	20004c28 	.word	0x20004c28
 8005eec:	20004c34 	.word	0x20004c34

08005ef0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005ef6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005efa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005efc:	4b27      	ldr	r3, [pc, #156]	@ (8005f9c <prvHeapInit+0xac>)
 8005efe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00c      	beq.n	8005f24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3307      	adds	r3, #7
 8005f0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f023 0307 	bic.w	r3, r3, #7
 8005f16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f9c <prvHeapInit+0xac>)
 8005f20:	4413      	add	r3, r2
 8005f22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f28:	4a1d      	ldr	r2, [pc, #116]	@ (8005fa0 <prvHeapInit+0xb0>)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8005fa0 <prvHeapInit+0xb0>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	4413      	add	r3, r2
 8005f3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1a9b      	subs	r3, r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 0307 	bic.w	r3, r3, #7
 8005f4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4a15      	ldr	r2, [pc, #84]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f52:	4b14      	ldr	r3, [pc, #80]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2200      	movs	r2, #0
 8005f58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f5a:	4b12      	ldr	r3, [pc, #72]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	1ad2      	subs	r2, r2, r3
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f70:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa4 <prvHeapInit+0xb4>)
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8005fa8 <prvHeapInit+0xb8>)
 8005f7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4a09      	ldr	r2, [pc, #36]	@ (8005fac <prvHeapInit+0xbc>)
 8005f86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f88:	4b09      	ldr	r3, [pc, #36]	@ (8005fb0 <prvHeapInit+0xc0>)
 8005f8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f8e:	601a      	str	r2, [r3, #0]
}
 8005f90:	bf00      	nop
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	2000101c 	.word	0x2000101c
 8005fa0:	20004c1c 	.word	0x20004c1c
 8005fa4:	20004c24 	.word	0x20004c24
 8005fa8:	20004c2c 	.word	0x20004c2c
 8005fac:	20004c28 	.word	0x20004c28
 8005fb0:	20004c38 	.word	0x20004c38

08005fb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fbc:	4b28      	ldr	r3, [pc, #160]	@ (8006060 <prvInsertBlockIntoFreeList+0xac>)
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e002      	b.n	8005fc8 <prvInsertBlockIntoFreeList+0x14>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d8f7      	bhi.n	8005fc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	4413      	add	r3, r2
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d108      	bne.n	8005ff6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	441a      	add	r2, r3
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d118      	bne.n	800603c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	4b15      	ldr	r3, [pc, #84]	@ (8006064 <prvInsertBlockIntoFreeList+0xb0>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d00d      	beq.n	8006032 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	441a      	add	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e008      	b.n	8006044 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006032:	4b0c      	ldr	r3, [pc, #48]	@ (8006064 <prvInsertBlockIntoFreeList+0xb0>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e003      	b.n	8006044 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	d002      	beq.n	8006052 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006052:	bf00      	nop
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	20004c1c 	.word	0x20004c1c
 8006064:	20004c24 	.word	0x20004c24

08006068 <__cvt>:
 8006068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800606c:	ec57 6b10 	vmov	r6, r7, d0
 8006070:	2f00      	cmp	r7, #0
 8006072:	460c      	mov	r4, r1
 8006074:	4619      	mov	r1, r3
 8006076:	463b      	mov	r3, r7
 8006078:	bfbb      	ittet	lt
 800607a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800607e:	461f      	movlt	r7, r3
 8006080:	2300      	movge	r3, #0
 8006082:	232d      	movlt	r3, #45	@ 0x2d
 8006084:	700b      	strb	r3, [r1, #0]
 8006086:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006088:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800608c:	4691      	mov	r9, r2
 800608e:	f023 0820 	bic.w	r8, r3, #32
 8006092:	bfbc      	itt	lt
 8006094:	4632      	movlt	r2, r6
 8006096:	4616      	movlt	r6, r2
 8006098:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800609c:	d005      	beq.n	80060aa <__cvt+0x42>
 800609e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80060a2:	d100      	bne.n	80060a6 <__cvt+0x3e>
 80060a4:	3401      	adds	r4, #1
 80060a6:	2102      	movs	r1, #2
 80060a8:	e000      	b.n	80060ac <__cvt+0x44>
 80060aa:	2103      	movs	r1, #3
 80060ac:	ab03      	add	r3, sp, #12
 80060ae:	9301      	str	r3, [sp, #4]
 80060b0:	ab02      	add	r3, sp, #8
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	ec47 6b10 	vmov	d0, r6, r7
 80060b8:	4653      	mov	r3, sl
 80060ba:	4622      	mov	r2, r4
 80060bc:	f000 fea0 	bl	8006e00 <_dtoa_r>
 80060c0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060c4:	4605      	mov	r5, r0
 80060c6:	d119      	bne.n	80060fc <__cvt+0x94>
 80060c8:	f019 0f01 	tst.w	r9, #1
 80060cc:	d00e      	beq.n	80060ec <__cvt+0x84>
 80060ce:	eb00 0904 	add.w	r9, r0, r4
 80060d2:	2200      	movs	r2, #0
 80060d4:	2300      	movs	r3, #0
 80060d6:	4630      	mov	r0, r6
 80060d8:	4639      	mov	r1, r7
 80060da:	f7fa fcf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80060de:	b108      	cbz	r0, 80060e4 <__cvt+0x7c>
 80060e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80060e4:	2230      	movs	r2, #48	@ 0x30
 80060e6:	9b03      	ldr	r3, [sp, #12]
 80060e8:	454b      	cmp	r3, r9
 80060ea:	d31e      	bcc.n	800612a <__cvt+0xc2>
 80060ec:	9b03      	ldr	r3, [sp, #12]
 80060ee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060f0:	1b5b      	subs	r3, r3, r5
 80060f2:	4628      	mov	r0, r5
 80060f4:	6013      	str	r3, [r2, #0]
 80060f6:	b004      	add	sp, #16
 80060f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006100:	eb00 0904 	add.w	r9, r0, r4
 8006104:	d1e5      	bne.n	80060d2 <__cvt+0x6a>
 8006106:	7803      	ldrb	r3, [r0, #0]
 8006108:	2b30      	cmp	r3, #48	@ 0x30
 800610a:	d10a      	bne.n	8006122 <__cvt+0xba>
 800610c:	2200      	movs	r2, #0
 800610e:	2300      	movs	r3, #0
 8006110:	4630      	mov	r0, r6
 8006112:	4639      	mov	r1, r7
 8006114:	f7fa fcd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006118:	b918      	cbnz	r0, 8006122 <__cvt+0xba>
 800611a:	f1c4 0401 	rsb	r4, r4, #1
 800611e:	f8ca 4000 	str.w	r4, [sl]
 8006122:	f8da 3000 	ldr.w	r3, [sl]
 8006126:	4499      	add	r9, r3
 8006128:	e7d3      	b.n	80060d2 <__cvt+0x6a>
 800612a:	1c59      	adds	r1, r3, #1
 800612c:	9103      	str	r1, [sp, #12]
 800612e:	701a      	strb	r2, [r3, #0]
 8006130:	e7d9      	b.n	80060e6 <__cvt+0x7e>

08006132 <__exponent>:
 8006132:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006134:	2900      	cmp	r1, #0
 8006136:	bfba      	itte	lt
 8006138:	4249      	neglt	r1, r1
 800613a:	232d      	movlt	r3, #45	@ 0x2d
 800613c:	232b      	movge	r3, #43	@ 0x2b
 800613e:	2909      	cmp	r1, #9
 8006140:	7002      	strb	r2, [r0, #0]
 8006142:	7043      	strb	r3, [r0, #1]
 8006144:	dd29      	ble.n	800619a <__exponent+0x68>
 8006146:	f10d 0307 	add.w	r3, sp, #7
 800614a:	461d      	mov	r5, r3
 800614c:	270a      	movs	r7, #10
 800614e:	461a      	mov	r2, r3
 8006150:	fbb1 f6f7 	udiv	r6, r1, r7
 8006154:	fb07 1416 	mls	r4, r7, r6, r1
 8006158:	3430      	adds	r4, #48	@ 0x30
 800615a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800615e:	460c      	mov	r4, r1
 8006160:	2c63      	cmp	r4, #99	@ 0x63
 8006162:	f103 33ff 	add.w	r3, r3, #4294967295
 8006166:	4631      	mov	r1, r6
 8006168:	dcf1      	bgt.n	800614e <__exponent+0x1c>
 800616a:	3130      	adds	r1, #48	@ 0x30
 800616c:	1e94      	subs	r4, r2, #2
 800616e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006172:	1c41      	adds	r1, r0, #1
 8006174:	4623      	mov	r3, r4
 8006176:	42ab      	cmp	r3, r5
 8006178:	d30a      	bcc.n	8006190 <__exponent+0x5e>
 800617a:	f10d 0309 	add.w	r3, sp, #9
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	42ac      	cmp	r4, r5
 8006182:	bf88      	it	hi
 8006184:	2300      	movhi	r3, #0
 8006186:	3302      	adds	r3, #2
 8006188:	4403      	add	r3, r0
 800618a:	1a18      	subs	r0, r3, r0
 800618c:	b003      	add	sp, #12
 800618e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006190:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006194:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006198:	e7ed      	b.n	8006176 <__exponent+0x44>
 800619a:	2330      	movs	r3, #48	@ 0x30
 800619c:	3130      	adds	r1, #48	@ 0x30
 800619e:	7083      	strb	r3, [r0, #2]
 80061a0:	70c1      	strb	r1, [r0, #3]
 80061a2:	1d03      	adds	r3, r0, #4
 80061a4:	e7f1      	b.n	800618a <__exponent+0x58>
	...

080061a8 <_printf_float>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	b08d      	sub	sp, #52	@ 0x34
 80061ae:	460c      	mov	r4, r1
 80061b0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061b4:	4616      	mov	r6, r2
 80061b6:	461f      	mov	r7, r3
 80061b8:	4605      	mov	r5, r0
 80061ba:	f000 fcbb 	bl	8006b34 <_localeconv_r>
 80061be:	6803      	ldr	r3, [r0, #0]
 80061c0:	9304      	str	r3, [sp, #16]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa f854 	bl	8000270 <strlen>
 80061c8:	2300      	movs	r3, #0
 80061ca:	930a      	str	r3, [sp, #40]	@ 0x28
 80061cc:	f8d8 3000 	ldr.w	r3, [r8]
 80061d0:	9005      	str	r0, [sp, #20]
 80061d2:	3307      	adds	r3, #7
 80061d4:	f023 0307 	bic.w	r3, r3, #7
 80061d8:	f103 0208 	add.w	r2, r3, #8
 80061dc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061e0:	f8d4 b000 	ldr.w	fp, [r4]
 80061e4:	f8c8 2000 	str.w	r2, [r8]
 80061e8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061ec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	f8cd 8018 	str.w	r8, [sp, #24]
 80061f6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061fe:	4b9c      	ldr	r3, [pc, #624]	@ (8006470 <_printf_float+0x2c8>)
 8006200:	f04f 32ff 	mov.w	r2, #4294967295
 8006204:	f7fa fc92 	bl	8000b2c <__aeabi_dcmpun>
 8006208:	bb70      	cbnz	r0, 8006268 <_printf_float+0xc0>
 800620a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800620e:	4b98      	ldr	r3, [pc, #608]	@ (8006470 <_printf_float+0x2c8>)
 8006210:	f04f 32ff 	mov.w	r2, #4294967295
 8006214:	f7fa fc6c 	bl	8000af0 <__aeabi_dcmple>
 8006218:	bb30      	cbnz	r0, 8006268 <_printf_float+0xc0>
 800621a:	2200      	movs	r2, #0
 800621c:	2300      	movs	r3, #0
 800621e:	4640      	mov	r0, r8
 8006220:	4649      	mov	r1, r9
 8006222:	f7fa fc5b 	bl	8000adc <__aeabi_dcmplt>
 8006226:	b110      	cbz	r0, 800622e <_printf_float+0x86>
 8006228:	232d      	movs	r3, #45	@ 0x2d
 800622a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800622e:	4a91      	ldr	r2, [pc, #580]	@ (8006474 <_printf_float+0x2cc>)
 8006230:	4b91      	ldr	r3, [pc, #580]	@ (8006478 <_printf_float+0x2d0>)
 8006232:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006236:	bf94      	ite	ls
 8006238:	4690      	movls	r8, r2
 800623a:	4698      	movhi	r8, r3
 800623c:	2303      	movs	r3, #3
 800623e:	6123      	str	r3, [r4, #16]
 8006240:	f02b 0304 	bic.w	r3, fp, #4
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	f04f 0900 	mov.w	r9, #0
 800624a:	9700      	str	r7, [sp, #0]
 800624c:	4633      	mov	r3, r6
 800624e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006250:	4621      	mov	r1, r4
 8006252:	4628      	mov	r0, r5
 8006254:	f000 f9d2 	bl	80065fc <_printf_common>
 8006258:	3001      	adds	r0, #1
 800625a:	f040 808d 	bne.w	8006378 <_printf_float+0x1d0>
 800625e:	f04f 30ff 	mov.w	r0, #4294967295
 8006262:	b00d      	add	sp, #52	@ 0x34
 8006264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006268:	4642      	mov	r2, r8
 800626a:	464b      	mov	r3, r9
 800626c:	4640      	mov	r0, r8
 800626e:	4649      	mov	r1, r9
 8006270:	f7fa fc5c 	bl	8000b2c <__aeabi_dcmpun>
 8006274:	b140      	cbz	r0, 8006288 <_printf_float+0xe0>
 8006276:	464b      	mov	r3, r9
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfbc      	itt	lt
 800627c:	232d      	movlt	r3, #45	@ 0x2d
 800627e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006282:	4a7e      	ldr	r2, [pc, #504]	@ (800647c <_printf_float+0x2d4>)
 8006284:	4b7e      	ldr	r3, [pc, #504]	@ (8006480 <_printf_float+0x2d8>)
 8006286:	e7d4      	b.n	8006232 <_printf_float+0x8a>
 8006288:	6863      	ldr	r3, [r4, #4]
 800628a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800628e:	9206      	str	r2, [sp, #24]
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	d13b      	bne.n	800630c <_printf_float+0x164>
 8006294:	2306      	movs	r3, #6
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800629c:	2300      	movs	r3, #0
 800629e:	6022      	str	r2, [r4, #0]
 80062a0:	9303      	str	r3, [sp, #12]
 80062a2:	ab0a      	add	r3, sp, #40	@ 0x28
 80062a4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80062a8:	ab09      	add	r3, sp, #36	@ 0x24
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	6861      	ldr	r1, [r4, #4]
 80062ae:	ec49 8b10 	vmov	d0, r8, r9
 80062b2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062b6:	4628      	mov	r0, r5
 80062b8:	f7ff fed6 	bl	8006068 <__cvt>
 80062bc:	9b06      	ldr	r3, [sp, #24]
 80062be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062c0:	2b47      	cmp	r3, #71	@ 0x47
 80062c2:	4680      	mov	r8, r0
 80062c4:	d129      	bne.n	800631a <_printf_float+0x172>
 80062c6:	1cc8      	adds	r0, r1, #3
 80062c8:	db02      	blt.n	80062d0 <_printf_float+0x128>
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	4299      	cmp	r1, r3
 80062ce:	dd41      	ble.n	8006354 <_printf_float+0x1ac>
 80062d0:	f1aa 0a02 	sub.w	sl, sl, #2
 80062d4:	fa5f fa8a 	uxtb.w	sl, sl
 80062d8:	3901      	subs	r1, #1
 80062da:	4652      	mov	r2, sl
 80062dc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062e0:	9109      	str	r1, [sp, #36]	@ 0x24
 80062e2:	f7ff ff26 	bl	8006132 <__exponent>
 80062e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062e8:	1813      	adds	r3, r2, r0
 80062ea:	2a01      	cmp	r2, #1
 80062ec:	4681      	mov	r9, r0
 80062ee:	6123      	str	r3, [r4, #16]
 80062f0:	dc02      	bgt.n	80062f8 <_printf_float+0x150>
 80062f2:	6822      	ldr	r2, [r4, #0]
 80062f4:	07d2      	lsls	r2, r2, #31
 80062f6:	d501      	bpl.n	80062fc <_printf_float+0x154>
 80062f8:	3301      	adds	r3, #1
 80062fa:	6123      	str	r3, [r4, #16]
 80062fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0a2      	beq.n	800624a <_printf_float+0xa2>
 8006304:	232d      	movs	r3, #45	@ 0x2d
 8006306:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800630a:	e79e      	b.n	800624a <_printf_float+0xa2>
 800630c:	9a06      	ldr	r2, [sp, #24]
 800630e:	2a47      	cmp	r2, #71	@ 0x47
 8006310:	d1c2      	bne.n	8006298 <_printf_float+0xf0>
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1c0      	bne.n	8006298 <_printf_float+0xf0>
 8006316:	2301      	movs	r3, #1
 8006318:	e7bd      	b.n	8006296 <_printf_float+0xee>
 800631a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800631e:	d9db      	bls.n	80062d8 <_printf_float+0x130>
 8006320:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006324:	d118      	bne.n	8006358 <_printf_float+0x1b0>
 8006326:	2900      	cmp	r1, #0
 8006328:	6863      	ldr	r3, [r4, #4]
 800632a:	dd0b      	ble.n	8006344 <_printf_float+0x19c>
 800632c:	6121      	str	r1, [r4, #16]
 800632e:	b913      	cbnz	r3, 8006336 <_printf_float+0x18e>
 8006330:	6822      	ldr	r2, [r4, #0]
 8006332:	07d0      	lsls	r0, r2, #31
 8006334:	d502      	bpl.n	800633c <_printf_float+0x194>
 8006336:	3301      	adds	r3, #1
 8006338:	440b      	add	r3, r1
 800633a:	6123      	str	r3, [r4, #16]
 800633c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800633e:	f04f 0900 	mov.w	r9, #0
 8006342:	e7db      	b.n	80062fc <_printf_float+0x154>
 8006344:	b913      	cbnz	r3, 800634c <_printf_float+0x1a4>
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	07d2      	lsls	r2, r2, #31
 800634a:	d501      	bpl.n	8006350 <_printf_float+0x1a8>
 800634c:	3302      	adds	r3, #2
 800634e:	e7f4      	b.n	800633a <_printf_float+0x192>
 8006350:	2301      	movs	r3, #1
 8006352:	e7f2      	b.n	800633a <_printf_float+0x192>
 8006354:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800635a:	4299      	cmp	r1, r3
 800635c:	db05      	blt.n	800636a <_printf_float+0x1c2>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	6121      	str	r1, [r4, #16]
 8006362:	07d8      	lsls	r0, r3, #31
 8006364:	d5ea      	bpl.n	800633c <_printf_float+0x194>
 8006366:	1c4b      	adds	r3, r1, #1
 8006368:	e7e7      	b.n	800633a <_printf_float+0x192>
 800636a:	2900      	cmp	r1, #0
 800636c:	bfd4      	ite	le
 800636e:	f1c1 0202 	rsble	r2, r1, #2
 8006372:	2201      	movgt	r2, #1
 8006374:	4413      	add	r3, r2
 8006376:	e7e0      	b.n	800633a <_printf_float+0x192>
 8006378:	6823      	ldr	r3, [r4, #0]
 800637a:	055a      	lsls	r2, r3, #21
 800637c:	d407      	bmi.n	800638e <_printf_float+0x1e6>
 800637e:	6923      	ldr	r3, [r4, #16]
 8006380:	4642      	mov	r2, r8
 8006382:	4631      	mov	r1, r6
 8006384:	4628      	mov	r0, r5
 8006386:	47b8      	blx	r7
 8006388:	3001      	adds	r0, #1
 800638a:	d12b      	bne.n	80063e4 <_printf_float+0x23c>
 800638c:	e767      	b.n	800625e <_printf_float+0xb6>
 800638e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006392:	f240 80dd 	bls.w	8006550 <_printf_float+0x3a8>
 8006396:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800639a:	2200      	movs	r2, #0
 800639c:	2300      	movs	r3, #0
 800639e:	f7fa fb93 	bl	8000ac8 <__aeabi_dcmpeq>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d033      	beq.n	800640e <_printf_float+0x266>
 80063a6:	4a37      	ldr	r2, [pc, #220]	@ (8006484 <_printf_float+0x2dc>)
 80063a8:	2301      	movs	r3, #1
 80063aa:	4631      	mov	r1, r6
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b8      	blx	r7
 80063b0:	3001      	adds	r0, #1
 80063b2:	f43f af54 	beq.w	800625e <_printf_float+0xb6>
 80063b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063ba:	4543      	cmp	r3, r8
 80063bc:	db02      	blt.n	80063c4 <_printf_float+0x21c>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	07d8      	lsls	r0, r3, #31
 80063c2:	d50f      	bpl.n	80063e4 <_printf_float+0x23c>
 80063c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063c8:	4631      	mov	r1, r6
 80063ca:	4628      	mov	r0, r5
 80063cc:	47b8      	blx	r7
 80063ce:	3001      	adds	r0, #1
 80063d0:	f43f af45 	beq.w	800625e <_printf_float+0xb6>
 80063d4:	f04f 0900 	mov.w	r9, #0
 80063d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80063dc:	f104 0a1a 	add.w	sl, r4, #26
 80063e0:	45c8      	cmp	r8, r9
 80063e2:	dc09      	bgt.n	80063f8 <_printf_float+0x250>
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	079b      	lsls	r3, r3, #30
 80063e8:	f100 8103 	bmi.w	80065f2 <_printf_float+0x44a>
 80063ec:	68e0      	ldr	r0, [r4, #12]
 80063ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063f0:	4298      	cmp	r0, r3
 80063f2:	bfb8      	it	lt
 80063f4:	4618      	movlt	r0, r3
 80063f6:	e734      	b.n	8006262 <_printf_float+0xba>
 80063f8:	2301      	movs	r3, #1
 80063fa:	4652      	mov	r2, sl
 80063fc:	4631      	mov	r1, r6
 80063fe:	4628      	mov	r0, r5
 8006400:	47b8      	blx	r7
 8006402:	3001      	adds	r0, #1
 8006404:	f43f af2b 	beq.w	800625e <_printf_float+0xb6>
 8006408:	f109 0901 	add.w	r9, r9, #1
 800640c:	e7e8      	b.n	80063e0 <_printf_float+0x238>
 800640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006410:	2b00      	cmp	r3, #0
 8006412:	dc39      	bgt.n	8006488 <_printf_float+0x2e0>
 8006414:	4a1b      	ldr	r2, [pc, #108]	@ (8006484 <_printf_float+0x2dc>)
 8006416:	2301      	movs	r3, #1
 8006418:	4631      	mov	r1, r6
 800641a:	4628      	mov	r0, r5
 800641c:	47b8      	blx	r7
 800641e:	3001      	adds	r0, #1
 8006420:	f43f af1d 	beq.w	800625e <_printf_float+0xb6>
 8006424:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006428:	ea59 0303 	orrs.w	r3, r9, r3
 800642c:	d102      	bne.n	8006434 <_printf_float+0x28c>
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	07d9      	lsls	r1, r3, #31
 8006432:	d5d7      	bpl.n	80063e4 <_printf_float+0x23c>
 8006434:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006438:	4631      	mov	r1, r6
 800643a:	4628      	mov	r0, r5
 800643c:	47b8      	blx	r7
 800643e:	3001      	adds	r0, #1
 8006440:	f43f af0d 	beq.w	800625e <_printf_float+0xb6>
 8006444:	f04f 0a00 	mov.w	sl, #0
 8006448:	f104 0b1a 	add.w	fp, r4, #26
 800644c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800644e:	425b      	negs	r3, r3
 8006450:	4553      	cmp	r3, sl
 8006452:	dc01      	bgt.n	8006458 <_printf_float+0x2b0>
 8006454:	464b      	mov	r3, r9
 8006456:	e793      	b.n	8006380 <_printf_float+0x1d8>
 8006458:	2301      	movs	r3, #1
 800645a:	465a      	mov	r2, fp
 800645c:	4631      	mov	r1, r6
 800645e:	4628      	mov	r0, r5
 8006460:	47b8      	blx	r7
 8006462:	3001      	adds	r0, #1
 8006464:	f43f aefb 	beq.w	800625e <_printf_float+0xb6>
 8006468:	f10a 0a01 	add.w	sl, sl, #1
 800646c:	e7ee      	b.n	800644c <_printf_float+0x2a4>
 800646e:	bf00      	nop
 8006470:	7fefffff 	.word	0x7fefffff
 8006474:	08008b0c 	.word	0x08008b0c
 8006478:	08008b10 	.word	0x08008b10
 800647c:	08008b14 	.word	0x08008b14
 8006480:	08008b18 	.word	0x08008b18
 8006484:	08008b1c 	.word	0x08008b1c
 8006488:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800648a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800648e:	4553      	cmp	r3, sl
 8006490:	bfa8      	it	ge
 8006492:	4653      	movge	r3, sl
 8006494:	2b00      	cmp	r3, #0
 8006496:	4699      	mov	r9, r3
 8006498:	dc36      	bgt.n	8006508 <_printf_float+0x360>
 800649a:	f04f 0b00 	mov.w	fp, #0
 800649e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064a2:	f104 021a 	add.w	r2, r4, #26
 80064a6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80064a8:	9306      	str	r3, [sp, #24]
 80064aa:	eba3 0309 	sub.w	r3, r3, r9
 80064ae:	455b      	cmp	r3, fp
 80064b0:	dc31      	bgt.n	8006516 <_printf_float+0x36e>
 80064b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064b4:	459a      	cmp	sl, r3
 80064b6:	dc3a      	bgt.n	800652e <_printf_float+0x386>
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	07da      	lsls	r2, r3, #31
 80064bc:	d437      	bmi.n	800652e <_printf_float+0x386>
 80064be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c0:	ebaa 0903 	sub.w	r9, sl, r3
 80064c4:	9b06      	ldr	r3, [sp, #24]
 80064c6:	ebaa 0303 	sub.w	r3, sl, r3
 80064ca:	4599      	cmp	r9, r3
 80064cc:	bfa8      	it	ge
 80064ce:	4699      	movge	r9, r3
 80064d0:	f1b9 0f00 	cmp.w	r9, #0
 80064d4:	dc33      	bgt.n	800653e <_printf_float+0x396>
 80064d6:	f04f 0800 	mov.w	r8, #0
 80064da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064de:	f104 0b1a 	add.w	fp, r4, #26
 80064e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e4:	ebaa 0303 	sub.w	r3, sl, r3
 80064e8:	eba3 0309 	sub.w	r3, r3, r9
 80064ec:	4543      	cmp	r3, r8
 80064ee:	f77f af79 	ble.w	80063e4 <_printf_float+0x23c>
 80064f2:	2301      	movs	r3, #1
 80064f4:	465a      	mov	r2, fp
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	f43f aeae 	beq.w	800625e <_printf_float+0xb6>
 8006502:	f108 0801 	add.w	r8, r8, #1
 8006506:	e7ec      	b.n	80064e2 <_printf_float+0x33a>
 8006508:	4642      	mov	r2, r8
 800650a:	4631      	mov	r1, r6
 800650c:	4628      	mov	r0, r5
 800650e:	47b8      	blx	r7
 8006510:	3001      	adds	r0, #1
 8006512:	d1c2      	bne.n	800649a <_printf_float+0x2f2>
 8006514:	e6a3      	b.n	800625e <_printf_float+0xb6>
 8006516:	2301      	movs	r3, #1
 8006518:	4631      	mov	r1, r6
 800651a:	4628      	mov	r0, r5
 800651c:	9206      	str	r2, [sp, #24]
 800651e:	47b8      	blx	r7
 8006520:	3001      	adds	r0, #1
 8006522:	f43f ae9c 	beq.w	800625e <_printf_float+0xb6>
 8006526:	9a06      	ldr	r2, [sp, #24]
 8006528:	f10b 0b01 	add.w	fp, fp, #1
 800652c:	e7bb      	b.n	80064a6 <_printf_float+0x2fe>
 800652e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006532:	4631      	mov	r1, r6
 8006534:	4628      	mov	r0, r5
 8006536:	47b8      	blx	r7
 8006538:	3001      	adds	r0, #1
 800653a:	d1c0      	bne.n	80064be <_printf_float+0x316>
 800653c:	e68f      	b.n	800625e <_printf_float+0xb6>
 800653e:	9a06      	ldr	r2, [sp, #24]
 8006540:	464b      	mov	r3, r9
 8006542:	4442      	add	r2, r8
 8006544:	4631      	mov	r1, r6
 8006546:	4628      	mov	r0, r5
 8006548:	47b8      	blx	r7
 800654a:	3001      	adds	r0, #1
 800654c:	d1c3      	bne.n	80064d6 <_printf_float+0x32e>
 800654e:	e686      	b.n	800625e <_printf_float+0xb6>
 8006550:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006554:	f1ba 0f01 	cmp.w	sl, #1
 8006558:	dc01      	bgt.n	800655e <_printf_float+0x3b6>
 800655a:	07db      	lsls	r3, r3, #31
 800655c:	d536      	bpl.n	80065cc <_printf_float+0x424>
 800655e:	2301      	movs	r3, #1
 8006560:	4642      	mov	r2, r8
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f ae78 	beq.w	800625e <_printf_float+0xb6>
 800656e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006572:	4631      	mov	r1, r6
 8006574:	4628      	mov	r0, r5
 8006576:	47b8      	blx	r7
 8006578:	3001      	adds	r0, #1
 800657a:	f43f ae70 	beq.w	800625e <_printf_float+0xb6>
 800657e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006582:	2200      	movs	r2, #0
 8006584:	2300      	movs	r3, #0
 8006586:	f10a 3aff 	add.w	sl, sl, #4294967295
 800658a:	f7fa fa9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800658e:	b9c0      	cbnz	r0, 80065c2 <_printf_float+0x41a>
 8006590:	4653      	mov	r3, sl
 8006592:	f108 0201 	add.w	r2, r8, #1
 8006596:	4631      	mov	r1, r6
 8006598:	4628      	mov	r0, r5
 800659a:	47b8      	blx	r7
 800659c:	3001      	adds	r0, #1
 800659e:	d10c      	bne.n	80065ba <_printf_float+0x412>
 80065a0:	e65d      	b.n	800625e <_printf_float+0xb6>
 80065a2:	2301      	movs	r3, #1
 80065a4:	465a      	mov	r2, fp
 80065a6:	4631      	mov	r1, r6
 80065a8:	4628      	mov	r0, r5
 80065aa:	47b8      	blx	r7
 80065ac:	3001      	adds	r0, #1
 80065ae:	f43f ae56 	beq.w	800625e <_printf_float+0xb6>
 80065b2:	f108 0801 	add.w	r8, r8, #1
 80065b6:	45d0      	cmp	r8, sl
 80065b8:	dbf3      	blt.n	80065a2 <_printf_float+0x3fa>
 80065ba:	464b      	mov	r3, r9
 80065bc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065c0:	e6df      	b.n	8006382 <_printf_float+0x1da>
 80065c2:	f04f 0800 	mov.w	r8, #0
 80065c6:	f104 0b1a 	add.w	fp, r4, #26
 80065ca:	e7f4      	b.n	80065b6 <_printf_float+0x40e>
 80065cc:	2301      	movs	r3, #1
 80065ce:	4642      	mov	r2, r8
 80065d0:	e7e1      	b.n	8006596 <_printf_float+0x3ee>
 80065d2:	2301      	movs	r3, #1
 80065d4:	464a      	mov	r2, r9
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	f43f ae3e 	beq.w	800625e <_printf_float+0xb6>
 80065e2:	f108 0801 	add.w	r8, r8, #1
 80065e6:	68e3      	ldr	r3, [r4, #12]
 80065e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065ea:	1a5b      	subs	r3, r3, r1
 80065ec:	4543      	cmp	r3, r8
 80065ee:	dcf0      	bgt.n	80065d2 <_printf_float+0x42a>
 80065f0:	e6fc      	b.n	80063ec <_printf_float+0x244>
 80065f2:	f04f 0800 	mov.w	r8, #0
 80065f6:	f104 0919 	add.w	r9, r4, #25
 80065fa:	e7f4      	b.n	80065e6 <_printf_float+0x43e>

080065fc <_printf_common>:
 80065fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006600:	4616      	mov	r6, r2
 8006602:	4698      	mov	r8, r3
 8006604:	688a      	ldr	r2, [r1, #8]
 8006606:	690b      	ldr	r3, [r1, #16]
 8006608:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800660c:	4293      	cmp	r3, r2
 800660e:	bfb8      	it	lt
 8006610:	4613      	movlt	r3, r2
 8006612:	6033      	str	r3, [r6, #0]
 8006614:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006618:	4607      	mov	r7, r0
 800661a:	460c      	mov	r4, r1
 800661c:	b10a      	cbz	r2, 8006622 <_printf_common+0x26>
 800661e:	3301      	adds	r3, #1
 8006620:	6033      	str	r3, [r6, #0]
 8006622:	6823      	ldr	r3, [r4, #0]
 8006624:	0699      	lsls	r1, r3, #26
 8006626:	bf42      	ittt	mi
 8006628:	6833      	ldrmi	r3, [r6, #0]
 800662a:	3302      	addmi	r3, #2
 800662c:	6033      	strmi	r3, [r6, #0]
 800662e:	6825      	ldr	r5, [r4, #0]
 8006630:	f015 0506 	ands.w	r5, r5, #6
 8006634:	d106      	bne.n	8006644 <_printf_common+0x48>
 8006636:	f104 0a19 	add.w	sl, r4, #25
 800663a:	68e3      	ldr	r3, [r4, #12]
 800663c:	6832      	ldr	r2, [r6, #0]
 800663e:	1a9b      	subs	r3, r3, r2
 8006640:	42ab      	cmp	r3, r5
 8006642:	dc26      	bgt.n	8006692 <_printf_common+0x96>
 8006644:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	3b00      	subs	r3, #0
 800664c:	bf18      	it	ne
 800664e:	2301      	movne	r3, #1
 8006650:	0692      	lsls	r2, r2, #26
 8006652:	d42b      	bmi.n	80066ac <_printf_common+0xb0>
 8006654:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006658:	4641      	mov	r1, r8
 800665a:	4638      	mov	r0, r7
 800665c:	47c8      	blx	r9
 800665e:	3001      	adds	r0, #1
 8006660:	d01e      	beq.n	80066a0 <_printf_common+0xa4>
 8006662:	6823      	ldr	r3, [r4, #0]
 8006664:	6922      	ldr	r2, [r4, #16]
 8006666:	f003 0306 	and.w	r3, r3, #6
 800666a:	2b04      	cmp	r3, #4
 800666c:	bf02      	ittt	eq
 800666e:	68e5      	ldreq	r5, [r4, #12]
 8006670:	6833      	ldreq	r3, [r6, #0]
 8006672:	1aed      	subeq	r5, r5, r3
 8006674:	68a3      	ldr	r3, [r4, #8]
 8006676:	bf0c      	ite	eq
 8006678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800667c:	2500      	movne	r5, #0
 800667e:	4293      	cmp	r3, r2
 8006680:	bfc4      	itt	gt
 8006682:	1a9b      	subgt	r3, r3, r2
 8006684:	18ed      	addgt	r5, r5, r3
 8006686:	2600      	movs	r6, #0
 8006688:	341a      	adds	r4, #26
 800668a:	42b5      	cmp	r5, r6
 800668c:	d11a      	bne.n	80066c4 <_printf_common+0xc8>
 800668e:	2000      	movs	r0, #0
 8006690:	e008      	b.n	80066a4 <_printf_common+0xa8>
 8006692:	2301      	movs	r3, #1
 8006694:	4652      	mov	r2, sl
 8006696:	4641      	mov	r1, r8
 8006698:	4638      	mov	r0, r7
 800669a:	47c8      	blx	r9
 800669c:	3001      	adds	r0, #1
 800669e:	d103      	bne.n	80066a8 <_printf_common+0xac>
 80066a0:	f04f 30ff 	mov.w	r0, #4294967295
 80066a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a8:	3501      	adds	r5, #1
 80066aa:	e7c6      	b.n	800663a <_printf_common+0x3e>
 80066ac:	18e1      	adds	r1, r4, r3
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	2030      	movs	r0, #48	@ 0x30
 80066b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066b6:	4422      	add	r2, r4
 80066b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066c0:	3302      	adds	r3, #2
 80066c2:	e7c7      	b.n	8006654 <_printf_common+0x58>
 80066c4:	2301      	movs	r3, #1
 80066c6:	4622      	mov	r2, r4
 80066c8:	4641      	mov	r1, r8
 80066ca:	4638      	mov	r0, r7
 80066cc:	47c8      	blx	r9
 80066ce:	3001      	adds	r0, #1
 80066d0:	d0e6      	beq.n	80066a0 <_printf_common+0xa4>
 80066d2:	3601      	adds	r6, #1
 80066d4:	e7d9      	b.n	800668a <_printf_common+0x8e>
	...

080066d8 <_printf_i>:
 80066d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066dc:	7e0f      	ldrb	r7, [r1, #24]
 80066de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066e0:	2f78      	cmp	r7, #120	@ 0x78
 80066e2:	4691      	mov	r9, r2
 80066e4:	4680      	mov	r8, r0
 80066e6:	460c      	mov	r4, r1
 80066e8:	469a      	mov	sl, r3
 80066ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066ee:	d807      	bhi.n	8006700 <_printf_i+0x28>
 80066f0:	2f62      	cmp	r7, #98	@ 0x62
 80066f2:	d80a      	bhi.n	800670a <_printf_i+0x32>
 80066f4:	2f00      	cmp	r7, #0
 80066f6:	f000 80d2 	beq.w	800689e <_printf_i+0x1c6>
 80066fa:	2f58      	cmp	r7, #88	@ 0x58
 80066fc:	f000 80b9 	beq.w	8006872 <_printf_i+0x19a>
 8006700:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006704:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006708:	e03a      	b.n	8006780 <_printf_i+0xa8>
 800670a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800670e:	2b15      	cmp	r3, #21
 8006710:	d8f6      	bhi.n	8006700 <_printf_i+0x28>
 8006712:	a101      	add	r1, pc, #4	@ (adr r1, 8006718 <_printf_i+0x40>)
 8006714:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006718:	08006771 	.word	0x08006771
 800671c:	08006785 	.word	0x08006785
 8006720:	08006701 	.word	0x08006701
 8006724:	08006701 	.word	0x08006701
 8006728:	08006701 	.word	0x08006701
 800672c:	08006701 	.word	0x08006701
 8006730:	08006785 	.word	0x08006785
 8006734:	08006701 	.word	0x08006701
 8006738:	08006701 	.word	0x08006701
 800673c:	08006701 	.word	0x08006701
 8006740:	08006701 	.word	0x08006701
 8006744:	08006885 	.word	0x08006885
 8006748:	080067af 	.word	0x080067af
 800674c:	0800683f 	.word	0x0800683f
 8006750:	08006701 	.word	0x08006701
 8006754:	08006701 	.word	0x08006701
 8006758:	080068a7 	.word	0x080068a7
 800675c:	08006701 	.word	0x08006701
 8006760:	080067af 	.word	0x080067af
 8006764:	08006701 	.word	0x08006701
 8006768:	08006701 	.word	0x08006701
 800676c:	08006847 	.word	0x08006847
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	6032      	str	r2, [r6, #0]
 8006778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800677c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006780:	2301      	movs	r3, #1
 8006782:	e09d      	b.n	80068c0 <_printf_i+0x1e8>
 8006784:	6833      	ldr	r3, [r6, #0]
 8006786:	6820      	ldr	r0, [r4, #0]
 8006788:	1d19      	adds	r1, r3, #4
 800678a:	6031      	str	r1, [r6, #0]
 800678c:	0606      	lsls	r6, r0, #24
 800678e:	d501      	bpl.n	8006794 <_printf_i+0xbc>
 8006790:	681d      	ldr	r5, [r3, #0]
 8006792:	e003      	b.n	800679c <_printf_i+0xc4>
 8006794:	0645      	lsls	r5, r0, #25
 8006796:	d5fb      	bpl.n	8006790 <_printf_i+0xb8>
 8006798:	f9b3 5000 	ldrsh.w	r5, [r3]
 800679c:	2d00      	cmp	r5, #0
 800679e:	da03      	bge.n	80067a8 <_printf_i+0xd0>
 80067a0:	232d      	movs	r3, #45	@ 0x2d
 80067a2:	426d      	negs	r5, r5
 80067a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067a8:	4859      	ldr	r0, [pc, #356]	@ (8006910 <_printf_i+0x238>)
 80067aa:	230a      	movs	r3, #10
 80067ac:	e011      	b.n	80067d2 <_printf_i+0xfa>
 80067ae:	6821      	ldr	r1, [r4, #0]
 80067b0:	6833      	ldr	r3, [r6, #0]
 80067b2:	0608      	lsls	r0, r1, #24
 80067b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80067b8:	d402      	bmi.n	80067c0 <_printf_i+0xe8>
 80067ba:	0649      	lsls	r1, r1, #25
 80067bc:	bf48      	it	mi
 80067be:	b2ad      	uxthmi	r5, r5
 80067c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80067c2:	4853      	ldr	r0, [pc, #332]	@ (8006910 <_printf_i+0x238>)
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	bf14      	ite	ne
 80067c8:	230a      	movne	r3, #10
 80067ca:	2308      	moveq	r3, #8
 80067cc:	2100      	movs	r1, #0
 80067ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067d2:	6866      	ldr	r6, [r4, #4]
 80067d4:	60a6      	str	r6, [r4, #8]
 80067d6:	2e00      	cmp	r6, #0
 80067d8:	bfa2      	ittt	ge
 80067da:	6821      	ldrge	r1, [r4, #0]
 80067dc:	f021 0104 	bicge.w	r1, r1, #4
 80067e0:	6021      	strge	r1, [r4, #0]
 80067e2:	b90d      	cbnz	r5, 80067e8 <_printf_i+0x110>
 80067e4:	2e00      	cmp	r6, #0
 80067e6:	d04b      	beq.n	8006880 <_printf_i+0x1a8>
 80067e8:	4616      	mov	r6, r2
 80067ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80067ee:	fb03 5711 	mls	r7, r3, r1, r5
 80067f2:	5dc7      	ldrb	r7, [r0, r7]
 80067f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067f8:	462f      	mov	r7, r5
 80067fa:	42bb      	cmp	r3, r7
 80067fc:	460d      	mov	r5, r1
 80067fe:	d9f4      	bls.n	80067ea <_printf_i+0x112>
 8006800:	2b08      	cmp	r3, #8
 8006802:	d10b      	bne.n	800681c <_printf_i+0x144>
 8006804:	6823      	ldr	r3, [r4, #0]
 8006806:	07df      	lsls	r7, r3, #31
 8006808:	d508      	bpl.n	800681c <_printf_i+0x144>
 800680a:	6923      	ldr	r3, [r4, #16]
 800680c:	6861      	ldr	r1, [r4, #4]
 800680e:	4299      	cmp	r1, r3
 8006810:	bfde      	ittt	le
 8006812:	2330      	movle	r3, #48	@ 0x30
 8006814:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006818:	f106 36ff 	addle.w	r6, r6, #4294967295
 800681c:	1b92      	subs	r2, r2, r6
 800681e:	6122      	str	r2, [r4, #16]
 8006820:	f8cd a000 	str.w	sl, [sp]
 8006824:	464b      	mov	r3, r9
 8006826:	aa03      	add	r2, sp, #12
 8006828:	4621      	mov	r1, r4
 800682a:	4640      	mov	r0, r8
 800682c:	f7ff fee6 	bl	80065fc <_printf_common>
 8006830:	3001      	adds	r0, #1
 8006832:	d14a      	bne.n	80068ca <_printf_i+0x1f2>
 8006834:	f04f 30ff 	mov.w	r0, #4294967295
 8006838:	b004      	add	sp, #16
 800683a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f043 0320 	orr.w	r3, r3, #32
 8006844:	6023      	str	r3, [r4, #0]
 8006846:	4833      	ldr	r0, [pc, #204]	@ (8006914 <_printf_i+0x23c>)
 8006848:	2778      	movs	r7, #120	@ 0x78
 800684a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	6831      	ldr	r1, [r6, #0]
 8006852:	061f      	lsls	r7, r3, #24
 8006854:	f851 5b04 	ldr.w	r5, [r1], #4
 8006858:	d402      	bmi.n	8006860 <_printf_i+0x188>
 800685a:	065f      	lsls	r7, r3, #25
 800685c:	bf48      	it	mi
 800685e:	b2ad      	uxthmi	r5, r5
 8006860:	6031      	str	r1, [r6, #0]
 8006862:	07d9      	lsls	r1, r3, #31
 8006864:	bf44      	itt	mi
 8006866:	f043 0320 	orrmi.w	r3, r3, #32
 800686a:	6023      	strmi	r3, [r4, #0]
 800686c:	b11d      	cbz	r5, 8006876 <_printf_i+0x19e>
 800686e:	2310      	movs	r3, #16
 8006870:	e7ac      	b.n	80067cc <_printf_i+0xf4>
 8006872:	4827      	ldr	r0, [pc, #156]	@ (8006910 <_printf_i+0x238>)
 8006874:	e7e9      	b.n	800684a <_printf_i+0x172>
 8006876:	6823      	ldr	r3, [r4, #0]
 8006878:	f023 0320 	bic.w	r3, r3, #32
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	e7f6      	b.n	800686e <_printf_i+0x196>
 8006880:	4616      	mov	r6, r2
 8006882:	e7bd      	b.n	8006800 <_printf_i+0x128>
 8006884:	6833      	ldr	r3, [r6, #0]
 8006886:	6825      	ldr	r5, [r4, #0]
 8006888:	6961      	ldr	r1, [r4, #20]
 800688a:	1d18      	adds	r0, r3, #4
 800688c:	6030      	str	r0, [r6, #0]
 800688e:	062e      	lsls	r6, r5, #24
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	d501      	bpl.n	8006898 <_printf_i+0x1c0>
 8006894:	6019      	str	r1, [r3, #0]
 8006896:	e002      	b.n	800689e <_printf_i+0x1c6>
 8006898:	0668      	lsls	r0, r5, #25
 800689a:	d5fb      	bpl.n	8006894 <_printf_i+0x1bc>
 800689c:	8019      	strh	r1, [r3, #0]
 800689e:	2300      	movs	r3, #0
 80068a0:	6123      	str	r3, [r4, #16]
 80068a2:	4616      	mov	r6, r2
 80068a4:	e7bc      	b.n	8006820 <_printf_i+0x148>
 80068a6:	6833      	ldr	r3, [r6, #0]
 80068a8:	1d1a      	adds	r2, r3, #4
 80068aa:	6032      	str	r2, [r6, #0]
 80068ac:	681e      	ldr	r6, [r3, #0]
 80068ae:	6862      	ldr	r2, [r4, #4]
 80068b0:	2100      	movs	r1, #0
 80068b2:	4630      	mov	r0, r6
 80068b4:	f7f9 fc8c 	bl	80001d0 <memchr>
 80068b8:	b108      	cbz	r0, 80068be <_printf_i+0x1e6>
 80068ba:	1b80      	subs	r0, r0, r6
 80068bc:	6060      	str	r0, [r4, #4]
 80068be:	6863      	ldr	r3, [r4, #4]
 80068c0:	6123      	str	r3, [r4, #16]
 80068c2:	2300      	movs	r3, #0
 80068c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068c8:	e7aa      	b.n	8006820 <_printf_i+0x148>
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	4632      	mov	r2, r6
 80068ce:	4649      	mov	r1, r9
 80068d0:	4640      	mov	r0, r8
 80068d2:	47d0      	blx	sl
 80068d4:	3001      	adds	r0, #1
 80068d6:	d0ad      	beq.n	8006834 <_printf_i+0x15c>
 80068d8:	6823      	ldr	r3, [r4, #0]
 80068da:	079b      	lsls	r3, r3, #30
 80068dc:	d413      	bmi.n	8006906 <_printf_i+0x22e>
 80068de:	68e0      	ldr	r0, [r4, #12]
 80068e0:	9b03      	ldr	r3, [sp, #12]
 80068e2:	4298      	cmp	r0, r3
 80068e4:	bfb8      	it	lt
 80068e6:	4618      	movlt	r0, r3
 80068e8:	e7a6      	b.n	8006838 <_printf_i+0x160>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4632      	mov	r2, r6
 80068ee:	4649      	mov	r1, r9
 80068f0:	4640      	mov	r0, r8
 80068f2:	47d0      	blx	sl
 80068f4:	3001      	adds	r0, #1
 80068f6:	d09d      	beq.n	8006834 <_printf_i+0x15c>
 80068f8:	3501      	adds	r5, #1
 80068fa:	68e3      	ldr	r3, [r4, #12]
 80068fc:	9903      	ldr	r1, [sp, #12]
 80068fe:	1a5b      	subs	r3, r3, r1
 8006900:	42ab      	cmp	r3, r5
 8006902:	dcf2      	bgt.n	80068ea <_printf_i+0x212>
 8006904:	e7eb      	b.n	80068de <_printf_i+0x206>
 8006906:	2500      	movs	r5, #0
 8006908:	f104 0619 	add.w	r6, r4, #25
 800690c:	e7f5      	b.n	80068fa <_printf_i+0x222>
 800690e:	bf00      	nop
 8006910:	08008b1e 	.word	0x08008b1e
 8006914:	08008b2f 	.word	0x08008b2f

08006918 <std>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	e9c0 3300 	strd	r3, r3, [r0]
 8006922:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006926:	6083      	str	r3, [r0, #8]
 8006928:	8181      	strh	r1, [r0, #12]
 800692a:	6643      	str	r3, [r0, #100]	@ 0x64
 800692c:	81c2      	strh	r2, [r0, #14]
 800692e:	6183      	str	r3, [r0, #24]
 8006930:	4619      	mov	r1, r3
 8006932:	2208      	movs	r2, #8
 8006934:	305c      	adds	r0, #92	@ 0x5c
 8006936:	f000 f8f4 	bl	8006b22 <memset>
 800693a:	4b0d      	ldr	r3, [pc, #52]	@ (8006970 <std+0x58>)
 800693c:	6263      	str	r3, [r4, #36]	@ 0x24
 800693e:	4b0d      	ldr	r3, [pc, #52]	@ (8006974 <std+0x5c>)
 8006940:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006942:	4b0d      	ldr	r3, [pc, #52]	@ (8006978 <std+0x60>)
 8006944:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006946:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <std+0x64>)
 8006948:	6323      	str	r3, [r4, #48]	@ 0x30
 800694a:	4b0d      	ldr	r3, [pc, #52]	@ (8006980 <std+0x68>)
 800694c:	6224      	str	r4, [r4, #32]
 800694e:	429c      	cmp	r4, r3
 8006950:	d006      	beq.n	8006960 <std+0x48>
 8006952:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006956:	4294      	cmp	r4, r2
 8006958:	d002      	beq.n	8006960 <std+0x48>
 800695a:	33d0      	adds	r3, #208	@ 0xd0
 800695c:	429c      	cmp	r4, r3
 800695e:	d105      	bne.n	800696c <std+0x54>
 8006960:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f000 b9ae 	b.w	8006cc8 <__retarget_lock_init_recursive>
 800696c:	bd10      	pop	{r4, pc}
 800696e:	bf00      	nop
 8006970:	08006a9d 	.word	0x08006a9d
 8006974:	08006abf 	.word	0x08006abf
 8006978:	08006af7 	.word	0x08006af7
 800697c:	08006b1b 	.word	0x08006b1b
 8006980:	20004c3c 	.word	0x20004c3c

08006984 <stdio_exit_handler>:
 8006984:	4a02      	ldr	r2, [pc, #8]	@ (8006990 <stdio_exit_handler+0xc>)
 8006986:	4903      	ldr	r1, [pc, #12]	@ (8006994 <stdio_exit_handler+0x10>)
 8006988:	4803      	ldr	r0, [pc, #12]	@ (8006998 <stdio_exit_handler+0x14>)
 800698a:	f000 b869 	b.w	8006a60 <_fwalk_sglue>
 800698e:	bf00      	nop
 8006990:	20000010 	.word	0x20000010
 8006994:	08008395 	.word	0x08008395
 8006998:	20000020 	.word	0x20000020

0800699c <cleanup_stdio>:
 800699c:	6841      	ldr	r1, [r0, #4]
 800699e:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <cleanup_stdio+0x34>)
 80069a0:	4299      	cmp	r1, r3
 80069a2:	b510      	push	{r4, lr}
 80069a4:	4604      	mov	r4, r0
 80069a6:	d001      	beq.n	80069ac <cleanup_stdio+0x10>
 80069a8:	f001 fcf4 	bl	8008394 <_fflush_r>
 80069ac:	68a1      	ldr	r1, [r4, #8]
 80069ae:	4b09      	ldr	r3, [pc, #36]	@ (80069d4 <cleanup_stdio+0x38>)
 80069b0:	4299      	cmp	r1, r3
 80069b2:	d002      	beq.n	80069ba <cleanup_stdio+0x1e>
 80069b4:	4620      	mov	r0, r4
 80069b6:	f001 fced 	bl	8008394 <_fflush_r>
 80069ba:	68e1      	ldr	r1, [r4, #12]
 80069bc:	4b06      	ldr	r3, [pc, #24]	@ (80069d8 <cleanup_stdio+0x3c>)
 80069be:	4299      	cmp	r1, r3
 80069c0:	d004      	beq.n	80069cc <cleanup_stdio+0x30>
 80069c2:	4620      	mov	r0, r4
 80069c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069c8:	f001 bce4 	b.w	8008394 <_fflush_r>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	bf00      	nop
 80069d0:	20004c3c 	.word	0x20004c3c
 80069d4:	20004ca4 	.word	0x20004ca4
 80069d8:	20004d0c 	.word	0x20004d0c

080069dc <global_stdio_init.part.0>:
 80069dc:	b510      	push	{r4, lr}
 80069de:	4b0b      	ldr	r3, [pc, #44]	@ (8006a0c <global_stdio_init.part.0+0x30>)
 80069e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006a10 <global_stdio_init.part.0+0x34>)
 80069e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006a14 <global_stdio_init.part.0+0x38>)
 80069e4:	601a      	str	r2, [r3, #0]
 80069e6:	4620      	mov	r0, r4
 80069e8:	2200      	movs	r2, #0
 80069ea:	2104      	movs	r1, #4
 80069ec:	f7ff ff94 	bl	8006918 <std>
 80069f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80069f4:	2201      	movs	r2, #1
 80069f6:	2109      	movs	r1, #9
 80069f8:	f7ff ff8e 	bl	8006918 <std>
 80069fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006a00:	2202      	movs	r2, #2
 8006a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a06:	2112      	movs	r1, #18
 8006a08:	f7ff bf86 	b.w	8006918 <std>
 8006a0c:	20004d74 	.word	0x20004d74
 8006a10:	20004c3c 	.word	0x20004c3c
 8006a14:	08006985 	.word	0x08006985

08006a18 <__sfp_lock_acquire>:
 8006a18:	4801      	ldr	r0, [pc, #4]	@ (8006a20 <__sfp_lock_acquire+0x8>)
 8006a1a:	f000 b956 	b.w	8006cca <__retarget_lock_acquire_recursive>
 8006a1e:	bf00      	nop
 8006a20:	20004d7d 	.word	0x20004d7d

08006a24 <__sfp_lock_release>:
 8006a24:	4801      	ldr	r0, [pc, #4]	@ (8006a2c <__sfp_lock_release+0x8>)
 8006a26:	f000 b951 	b.w	8006ccc <__retarget_lock_release_recursive>
 8006a2a:	bf00      	nop
 8006a2c:	20004d7d 	.word	0x20004d7d

08006a30 <__sinit>:
 8006a30:	b510      	push	{r4, lr}
 8006a32:	4604      	mov	r4, r0
 8006a34:	f7ff fff0 	bl	8006a18 <__sfp_lock_acquire>
 8006a38:	6a23      	ldr	r3, [r4, #32]
 8006a3a:	b11b      	cbz	r3, 8006a44 <__sinit+0x14>
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f7ff bff0 	b.w	8006a24 <__sfp_lock_release>
 8006a44:	4b04      	ldr	r3, [pc, #16]	@ (8006a58 <__sinit+0x28>)
 8006a46:	6223      	str	r3, [r4, #32]
 8006a48:	4b04      	ldr	r3, [pc, #16]	@ (8006a5c <__sinit+0x2c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1f5      	bne.n	8006a3c <__sinit+0xc>
 8006a50:	f7ff ffc4 	bl	80069dc <global_stdio_init.part.0>
 8006a54:	e7f2      	b.n	8006a3c <__sinit+0xc>
 8006a56:	bf00      	nop
 8006a58:	0800699d 	.word	0x0800699d
 8006a5c:	20004d74 	.word	0x20004d74

08006a60 <_fwalk_sglue>:
 8006a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a64:	4607      	mov	r7, r0
 8006a66:	4688      	mov	r8, r1
 8006a68:	4614      	mov	r4, r2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a70:	f1b9 0901 	subs.w	r9, r9, #1
 8006a74:	d505      	bpl.n	8006a82 <_fwalk_sglue+0x22>
 8006a76:	6824      	ldr	r4, [r4, #0]
 8006a78:	2c00      	cmp	r4, #0
 8006a7a:	d1f7      	bne.n	8006a6c <_fwalk_sglue+0xc>
 8006a7c:	4630      	mov	r0, r6
 8006a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a82:	89ab      	ldrh	r3, [r5, #12]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d907      	bls.n	8006a98 <_fwalk_sglue+0x38>
 8006a88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	d003      	beq.n	8006a98 <_fwalk_sglue+0x38>
 8006a90:	4629      	mov	r1, r5
 8006a92:	4638      	mov	r0, r7
 8006a94:	47c0      	blx	r8
 8006a96:	4306      	orrs	r6, r0
 8006a98:	3568      	adds	r5, #104	@ 0x68
 8006a9a:	e7e9      	b.n	8006a70 <_fwalk_sglue+0x10>

08006a9c <__sread>:
 8006a9c:	b510      	push	{r4, lr}
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aa4:	f000 f8c2 	bl	8006c2c <_read_r>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	bfab      	itete	ge
 8006aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006aae:	89a3      	ldrhlt	r3, [r4, #12]
 8006ab0:	181b      	addge	r3, r3, r0
 8006ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ab6:	bfac      	ite	ge
 8006ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006aba:	81a3      	strhlt	r3, [r4, #12]
 8006abc:	bd10      	pop	{r4, pc}

08006abe <__swrite>:
 8006abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ac2:	461f      	mov	r7, r3
 8006ac4:	898b      	ldrh	r3, [r1, #12]
 8006ac6:	05db      	lsls	r3, r3, #23
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	4616      	mov	r6, r2
 8006ace:	d505      	bpl.n	8006adc <__swrite+0x1e>
 8006ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f000 f896 	bl	8006c08 <_lseek_r>
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	4632      	mov	r2, r6
 8006aea:	463b      	mov	r3, r7
 8006aec:	4628      	mov	r0, r5
 8006aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006af2:	f000 b8ad 	b.w	8006c50 <_write_r>

08006af6 <__sseek>:
 8006af6:	b510      	push	{r4, lr}
 8006af8:	460c      	mov	r4, r1
 8006afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006afe:	f000 f883 	bl	8006c08 <_lseek_r>
 8006b02:	1c43      	adds	r3, r0, #1
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	bf15      	itete	ne
 8006b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b12:	81a3      	strheq	r3, [r4, #12]
 8006b14:	bf18      	it	ne
 8006b16:	81a3      	strhne	r3, [r4, #12]
 8006b18:	bd10      	pop	{r4, pc}

08006b1a <__sclose>:
 8006b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1e:	f000 b80d 	b.w	8006b3c <_close_r>

08006b22 <memset>:
 8006b22:	4402      	add	r2, r0
 8006b24:	4603      	mov	r3, r0
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d100      	bne.n	8006b2c <memset+0xa>
 8006b2a:	4770      	bx	lr
 8006b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8006b30:	e7f9      	b.n	8006b26 <memset+0x4>
	...

08006b34 <_localeconv_r>:
 8006b34:	4800      	ldr	r0, [pc, #0]	@ (8006b38 <_localeconv_r+0x4>)
 8006b36:	4770      	bx	lr
 8006b38:	2000015c 	.word	0x2000015c

08006b3c <_close_r>:
 8006b3c:	b538      	push	{r3, r4, r5, lr}
 8006b3e:	4d06      	ldr	r5, [pc, #24]	@ (8006b58 <_close_r+0x1c>)
 8006b40:	2300      	movs	r3, #0
 8006b42:	4604      	mov	r4, r0
 8006b44:	4608      	mov	r0, r1
 8006b46:	602b      	str	r3, [r5, #0]
 8006b48:	f7fa fc46 	bl	80013d8 <_close>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_close_r+0x1a>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_close_r+0x1a>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20004d78 	.word	0x20004d78

08006b5c <_reclaim_reent>:
 8006b5c:	4b29      	ldr	r3, [pc, #164]	@ (8006c04 <_reclaim_reent+0xa8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4283      	cmp	r3, r0
 8006b62:	b570      	push	{r4, r5, r6, lr}
 8006b64:	4604      	mov	r4, r0
 8006b66:	d04b      	beq.n	8006c00 <_reclaim_reent+0xa4>
 8006b68:	69c3      	ldr	r3, [r0, #28]
 8006b6a:	b1ab      	cbz	r3, 8006b98 <_reclaim_reent+0x3c>
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	b16b      	cbz	r3, 8006b8c <_reclaim_reent+0x30>
 8006b70:	2500      	movs	r5, #0
 8006b72:	69e3      	ldr	r3, [r4, #28]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	5959      	ldr	r1, [r3, r5]
 8006b78:	2900      	cmp	r1, #0
 8006b7a:	d13b      	bne.n	8006bf4 <_reclaim_reent+0x98>
 8006b7c:	3504      	adds	r5, #4
 8006b7e:	2d80      	cmp	r5, #128	@ 0x80
 8006b80:	d1f7      	bne.n	8006b72 <_reclaim_reent+0x16>
 8006b82:	69e3      	ldr	r3, [r4, #28]
 8006b84:	4620      	mov	r0, r4
 8006b86:	68d9      	ldr	r1, [r3, #12]
 8006b88:	f000 fefe 	bl	8007988 <_free_r>
 8006b8c:	69e3      	ldr	r3, [r4, #28]
 8006b8e:	6819      	ldr	r1, [r3, #0]
 8006b90:	b111      	cbz	r1, 8006b98 <_reclaim_reent+0x3c>
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fef8 	bl	8007988 <_free_r>
 8006b98:	6961      	ldr	r1, [r4, #20]
 8006b9a:	b111      	cbz	r1, 8006ba2 <_reclaim_reent+0x46>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fef3 	bl	8007988 <_free_r>
 8006ba2:	69e1      	ldr	r1, [r4, #28]
 8006ba4:	b111      	cbz	r1, 8006bac <_reclaim_reent+0x50>
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 feee 	bl	8007988 <_free_r>
 8006bac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006bae:	b111      	cbz	r1, 8006bb6 <_reclaim_reent+0x5a>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	f000 fee9 	bl	8007988 <_free_r>
 8006bb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bb8:	b111      	cbz	r1, 8006bc0 <_reclaim_reent+0x64>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 fee4 	bl	8007988 <_free_r>
 8006bc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006bc2:	b111      	cbz	r1, 8006bca <_reclaim_reent+0x6e>
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f000 fedf 	bl	8007988 <_free_r>
 8006bca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006bcc:	b111      	cbz	r1, 8006bd4 <_reclaim_reent+0x78>
 8006bce:	4620      	mov	r0, r4
 8006bd0:	f000 feda 	bl	8007988 <_free_r>
 8006bd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006bd6:	b111      	cbz	r1, 8006bde <_reclaim_reent+0x82>
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 fed5 	bl	8007988 <_free_r>
 8006bde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006be0:	b111      	cbz	r1, 8006be8 <_reclaim_reent+0x8c>
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 fed0 	bl	8007988 <_free_r>
 8006be8:	6a23      	ldr	r3, [r4, #32]
 8006bea:	b14b      	cbz	r3, 8006c00 <_reclaim_reent+0xa4>
 8006bec:	4620      	mov	r0, r4
 8006bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006bf2:	4718      	bx	r3
 8006bf4:	680e      	ldr	r6, [r1, #0]
 8006bf6:	4620      	mov	r0, r4
 8006bf8:	f000 fec6 	bl	8007988 <_free_r>
 8006bfc:	4631      	mov	r1, r6
 8006bfe:	e7bb      	b.n	8006b78 <_reclaim_reent+0x1c>
 8006c00:	bd70      	pop	{r4, r5, r6, pc}
 8006c02:	bf00      	nop
 8006c04:	2000001c 	.word	0x2000001c

08006c08 <_lseek_r>:
 8006c08:	b538      	push	{r3, r4, r5, lr}
 8006c0a:	4d07      	ldr	r5, [pc, #28]	@ (8006c28 <_lseek_r+0x20>)
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	4608      	mov	r0, r1
 8006c10:	4611      	mov	r1, r2
 8006c12:	2200      	movs	r2, #0
 8006c14:	602a      	str	r2, [r5, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f7fa fc05 	bl	8001426 <_lseek>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d102      	bne.n	8006c26 <_lseek_r+0x1e>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	b103      	cbz	r3, 8006c26 <_lseek_r+0x1e>
 8006c24:	6023      	str	r3, [r4, #0]
 8006c26:	bd38      	pop	{r3, r4, r5, pc}
 8006c28:	20004d78 	.word	0x20004d78

08006c2c <_read_r>:
 8006c2c:	b538      	push	{r3, r4, r5, lr}
 8006c2e:	4d07      	ldr	r5, [pc, #28]	@ (8006c4c <_read_r+0x20>)
 8006c30:	4604      	mov	r4, r0
 8006c32:	4608      	mov	r0, r1
 8006c34:	4611      	mov	r1, r2
 8006c36:	2200      	movs	r2, #0
 8006c38:	602a      	str	r2, [r5, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f7fa fb93 	bl	8001366 <_read>
 8006c40:	1c43      	adds	r3, r0, #1
 8006c42:	d102      	bne.n	8006c4a <_read_r+0x1e>
 8006c44:	682b      	ldr	r3, [r5, #0]
 8006c46:	b103      	cbz	r3, 8006c4a <_read_r+0x1e>
 8006c48:	6023      	str	r3, [r4, #0]
 8006c4a:	bd38      	pop	{r3, r4, r5, pc}
 8006c4c:	20004d78 	.word	0x20004d78

08006c50 <_write_r>:
 8006c50:	b538      	push	{r3, r4, r5, lr}
 8006c52:	4d07      	ldr	r5, [pc, #28]	@ (8006c70 <_write_r+0x20>)
 8006c54:	4604      	mov	r4, r0
 8006c56:	4608      	mov	r0, r1
 8006c58:	4611      	mov	r1, r2
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	602a      	str	r2, [r5, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	f7fa fb9e 	bl	80013a0 <_write>
 8006c64:	1c43      	adds	r3, r0, #1
 8006c66:	d102      	bne.n	8006c6e <_write_r+0x1e>
 8006c68:	682b      	ldr	r3, [r5, #0]
 8006c6a:	b103      	cbz	r3, 8006c6e <_write_r+0x1e>
 8006c6c:	6023      	str	r3, [r4, #0]
 8006c6e:	bd38      	pop	{r3, r4, r5, pc}
 8006c70:	20004d78 	.word	0x20004d78

08006c74 <__errno>:
 8006c74:	4b01      	ldr	r3, [pc, #4]	@ (8006c7c <__errno+0x8>)
 8006c76:	6818      	ldr	r0, [r3, #0]
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	2000001c 	.word	0x2000001c

08006c80 <__libc_init_array>:
 8006c80:	b570      	push	{r4, r5, r6, lr}
 8006c82:	4d0d      	ldr	r5, [pc, #52]	@ (8006cb8 <__libc_init_array+0x38>)
 8006c84:	4c0d      	ldr	r4, [pc, #52]	@ (8006cbc <__libc_init_array+0x3c>)
 8006c86:	1b64      	subs	r4, r4, r5
 8006c88:	10a4      	asrs	r4, r4, #2
 8006c8a:	2600      	movs	r6, #0
 8006c8c:	42a6      	cmp	r6, r4
 8006c8e:	d109      	bne.n	8006ca4 <__libc_init_array+0x24>
 8006c90:	4d0b      	ldr	r5, [pc, #44]	@ (8006cc0 <__libc_init_array+0x40>)
 8006c92:	4c0c      	ldr	r4, [pc, #48]	@ (8006cc4 <__libc_init_array+0x44>)
 8006c94:	f001 febe 	bl	8008a14 <_init>
 8006c98:	1b64      	subs	r4, r4, r5
 8006c9a:	10a4      	asrs	r4, r4, #2
 8006c9c:	2600      	movs	r6, #0
 8006c9e:	42a6      	cmp	r6, r4
 8006ca0:	d105      	bne.n	8006cae <__libc_init_array+0x2e>
 8006ca2:	bd70      	pop	{r4, r5, r6, pc}
 8006ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca8:	4798      	blx	r3
 8006caa:	3601      	adds	r6, #1
 8006cac:	e7ee      	b.n	8006c8c <__libc_init_array+0xc>
 8006cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cb2:	4798      	blx	r3
 8006cb4:	3601      	adds	r6, #1
 8006cb6:	e7f2      	b.n	8006c9e <__libc_init_array+0x1e>
 8006cb8:	08008e88 	.word	0x08008e88
 8006cbc:	08008e88 	.word	0x08008e88
 8006cc0:	08008e88 	.word	0x08008e88
 8006cc4:	08008e8c 	.word	0x08008e8c

08006cc8 <__retarget_lock_init_recursive>:
 8006cc8:	4770      	bx	lr

08006cca <__retarget_lock_acquire_recursive>:
 8006cca:	4770      	bx	lr

08006ccc <__retarget_lock_release_recursive>:
 8006ccc:	4770      	bx	lr

08006cce <memcpy>:
 8006cce:	440a      	add	r2, r1
 8006cd0:	4291      	cmp	r1, r2
 8006cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd6:	d100      	bne.n	8006cda <memcpy+0xc>
 8006cd8:	4770      	bx	lr
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce4:	4291      	cmp	r1, r2
 8006ce6:	d1f9      	bne.n	8006cdc <memcpy+0xe>
 8006ce8:	bd10      	pop	{r4, pc}

08006cea <quorem>:
 8006cea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cee:	6903      	ldr	r3, [r0, #16]
 8006cf0:	690c      	ldr	r4, [r1, #16]
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	4607      	mov	r7, r0
 8006cf6:	db7e      	blt.n	8006df6 <quorem+0x10c>
 8006cf8:	3c01      	subs	r4, #1
 8006cfa:	f101 0814 	add.w	r8, r1, #20
 8006cfe:	00a3      	lsls	r3, r4, #2
 8006d00:	f100 0514 	add.w	r5, r0, #20
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d0a:	9301      	str	r3, [sp, #4]
 8006d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d14:	3301      	adds	r3, #1
 8006d16:	429a      	cmp	r2, r3
 8006d18:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006d1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006d20:	d32e      	bcc.n	8006d80 <quorem+0x96>
 8006d22:	f04f 0a00 	mov.w	sl, #0
 8006d26:	46c4      	mov	ip, r8
 8006d28:	46ae      	mov	lr, r5
 8006d2a:	46d3      	mov	fp, sl
 8006d2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006d30:	b298      	uxth	r0, r3
 8006d32:	fb06 a000 	mla	r0, r6, r0, sl
 8006d36:	0c02      	lsrs	r2, r0, #16
 8006d38:	0c1b      	lsrs	r3, r3, #16
 8006d3a:	fb06 2303 	mla	r3, r6, r3, r2
 8006d3e:	f8de 2000 	ldr.w	r2, [lr]
 8006d42:	b280      	uxth	r0, r0
 8006d44:	b292      	uxth	r2, r2
 8006d46:	1a12      	subs	r2, r2, r0
 8006d48:	445a      	add	r2, fp
 8006d4a:	f8de 0000 	ldr.w	r0, [lr]
 8006d4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006d58:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006d5c:	b292      	uxth	r2, r2
 8006d5e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006d62:	45e1      	cmp	r9, ip
 8006d64:	f84e 2b04 	str.w	r2, [lr], #4
 8006d68:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006d6c:	d2de      	bcs.n	8006d2c <quorem+0x42>
 8006d6e:	9b00      	ldr	r3, [sp, #0]
 8006d70:	58eb      	ldr	r3, [r5, r3]
 8006d72:	b92b      	cbnz	r3, 8006d80 <quorem+0x96>
 8006d74:	9b01      	ldr	r3, [sp, #4]
 8006d76:	3b04      	subs	r3, #4
 8006d78:	429d      	cmp	r5, r3
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	d32f      	bcc.n	8006dde <quorem+0xf4>
 8006d7e:	613c      	str	r4, [r7, #16]
 8006d80:	4638      	mov	r0, r7
 8006d82:	f001 f97b 	bl	800807c <__mcmp>
 8006d86:	2800      	cmp	r0, #0
 8006d88:	db25      	blt.n	8006dd6 <quorem+0xec>
 8006d8a:	4629      	mov	r1, r5
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d92:	f8d1 c000 	ldr.w	ip, [r1]
 8006d96:	fa1f fe82 	uxth.w	lr, r2
 8006d9a:	fa1f f38c 	uxth.w	r3, ip
 8006d9e:	eba3 030e 	sub.w	r3, r3, lr
 8006da2:	4403      	add	r3, r0
 8006da4:	0c12      	lsrs	r2, r2, #16
 8006da6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006daa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006db4:	45c1      	cmp	r9, r8
 8006db6:	f841 3b04 	str.w	r3, [r1], #4
 8006dba:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006dbe:	d2e6      	bcs.n	8006d8e <quorem+0xa4>
 8006dc0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dc8:	b922      	cbnz	r2, 8006dd4 <quorem+0xea>
 8006dca:	3b04      	subs	r3, #4
 8006dcc:	429d      	cmp	r5, r3
 8006dce:	461a      	mov	r2, r3
 8006dd0:	d30b      	bcc.n	8006dea <quorem+0x100>
 8006dd2:	613c      	str	r4, [r7, #16]
 8006dd4:	3601      	adds	r6, #1
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	b003      	add	sp, #12
 8006dda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	3b04      	subs	r3, #4
 8006de2:	2a00      	cmp	r2, #0
 8006de4:	d1cb      	bne.n	8006d7e <quorem+0x94>
 8006de6:	3c01      	subs	r4, #1
 8006de8:	e7c6      	b.n	8006d78 <quorem+0x8e>
 8006dea:	6812      	ldr	r2, [r2, #0]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	2a00      	cmp	r2, #0
 8006df0:	d1ef      	bne.n	8006dd2 <quorem+0xe8>
 8006df2:	3c01      	subs	r4, #1
 8006df4:	e7ea      	b.n	8006dcc <quorem+0xe2>
 8006df6:	2000      	movs	r0, #0
 8006df8:	e7ee      	b.n	8006dd8 <quorem+0xee>
 8006dfa:	0000      	movs	r0, r0
 8006dfc:	0000      	movs	r0, r0
	...

08006e00 <_dtoa_r>:
 8006e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e04:	69c7      	ldr	r7, [r0, #28]
 8006e06:	b099      	sub	sp, #100	@ 0x64
 8006e08:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006e0c:	ec55 4b10 	vmov	r4, r5, d0
 8006e10:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006e12:	9109      	str	r1, [sp, #36]	@ 0x24
 8006e14:	4683      	mov	fp, r0
 8006e16:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e18:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e1a:	b97f      	cbnz	r7, 8006e3c <_dtoa_r+0x3c>
 8006e1c:	2010      	movs	r0, #16
 8006e1e:	f000 fdfd 	bl	8007a1c <malloc>
 8006e22:	4602      	mov	r2, r0
 8006e24:	f8cb 001c 	str.w	r0, [fp, #28]
 8006e28:	b920      	cbnz	r0, 8006e34 <_dtoa_r+0x34>
 8006e2a:	4ba7      	ldr	r3, [pc, #668]	@ (80070c8 <_dtoa_r+0x2c8>)
 8006e2c:	21ef      	movs	r1, #239	@ 0xef
 8006e2e:	48a7      	ldr	r0, [pc, #668]	@ (80070cc <_dtoa_r+0x2cc>)
 8006e30:	f001 fae8 	bl	8008404 <__assert_func>
 8006e34:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006e38:	6007      	str	r7, [r0, #0]
 8006e3a:	60c7      	str	r7, [r0, #12]
 8006e3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e40:	6819      	ldr	r1, [r3, #0]
 8006e42:	b159      	cbz	r1, 8006e5c <_dtoa_r+0x5c>
 8006e44:	685a      	ldr	r2, [r3, #4]
 8006e46:	604a      	str	r2, [r1, #4]
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4093      	lsls	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
 8006e4e:	4658      	mov	r0, fp
 8006e50:	f000 feda 	bl	8007c08 <_Bfree>
 8006e54:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	1e2b      	subs	r3, r5, #0
 8006e5e:	bfb9      	ittee	lt
 8006e60:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006e64:	9303      	strlt	r3, [sp, #12]
 8006e66:	2300      	movge	r3, #0
 8006e68:	6033      	strge	r3, [r6, #0]
 8006e6a:	9f03      	ldr	r7, [sp, #12]
 8006e6c:	4b98      	ldr	r3, [pc, #608]	@ (80070d0 <_dtoa_r+0x2d0>)
 8006e6e:	bfbc      	itt	lt
 8006e70:	2201      	movlt	r2, #1
 8006e72:	6032      	strlt	r2, [r6, #0]
 8006e74:	43bb      	bics	r3, r7
 8006e76:	d112      	bne.n	8006e9e <_dtoa_r+0x9e>
 8006e78:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006e7a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006e7e:	6013      	str	r3, [r2, #0]
 8006e80:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006e84:	4323      	orrs	r3, r4
 8006e86:	f000 854d 	beq.w	8007924 <_dtoa_r+0xb24>
 8006e8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e8c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80070e4 <_dtoa_r+0x2e4>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 854f 	beq.w	8007934 <_dtoa_r+0xb34>
 8006e96:	f10a 0303 	add.w	r3, sl, #3
 8006e9a:	f000 bd49 	b.w	8007930 <_dtoa_r+0xb30>
 8006e9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	ec51 0b17 	vmov	r0, r1, d7
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006eae:	f7f9 fe0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	b158      	cbz	r0, 8006ece <_dtoa_r+0xce>
 8006eb6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006eb8:	2301      	movs	r3, #1
 8006eba:	6013      	str	r3, [r2, #0]
 8006ebc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ebe:	b113      	cbz	r3, 8006ec6 <_dtoa_r+0xc6>
 8006ec0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006ec2:	4b84      	ldr	r3, [pc, #528]	@ (80070d4 <_dtoa_r+0x2d4>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80070e8 <_dtoa_r+0x2e8>
 8006eca:	f000 bd33 	b.w	8007934 <_dtoa_r+0xb34>
 8006ece:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006ed2:	aa16      	add	r2, sp, #88	@ 0x58
 8006ed4:	a917      	add	r1, sp, #92	@ 0x5c
 8006ed6:	4658      	mov	r0, fp
 8006ed8:	f001 f980 	bl	80081dc <__d2b>
 8006edc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006ee0:	4681      	mov	r9, r0
 8006ee2:	2e00      	cmp	r6, #0
 8006ee4:	d077      	beq.n	8006fd6 <_dtoa_r+0x1d6>
 8006ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ee8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006eec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ef0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006ef4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006ef8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006efc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006f00:	4619      	mov	r1, r3
 8006f02:	2200      	movs	r2, #0
 8006f04:	4b74      	ldr	r3, [pc, #464]	@ (80070d8 <_dtoa_r+0x2d8>)
 8006f06:	f7f9 f9bf 	bl	8000288 <__aeabi_dsub>
 8006f0a:	a369      	add	r3, pc, #420	@ (adr r3, 80070b0 <_dtoa_r+0x2b0>)
 8006f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f10:	f7f9 fb72 	bl	80005f8 <__aeabi_dmul>
 8006f14:	a368      	add	r3, pc, #416	@ (adr r3, 80070b8 <_dtoa_r+0x2b8>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 f9b7 	bl	800028c <__adddf3>
 8006f1e:	4604      	mov	r4, r0
 8006f20:	4630      	mov	r0, r6
 8006f22:	460d      	mov	r5, r1
 8006f24:	f7f9 fafe 	bl	8000524 <__aeabi_i2d>
 8006f28:	a365      	add	r3, pc, #404	@ (adr r3, 80070c0 <_dtoa_r+0x2c0>)
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f7f9 fb63 	bl	80005f8 <__aeabi_dmul>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4620      	mov	r0, r4
 8006f38:	4629      	mov	r1, r5
 8006f3a:	f7f9 f9a7 	bl	800028c <__adddf3>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	460d      	mov	r5, r1
 8006f42:	f7f9 fe09 	bl	8000b58 <__aeabi_d2iz>
 8006f46:	2200      	movs	r2, #0
 8006f48:	4607      	mov	r7, r0
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	4629      	mov	r1, r5
 8006f50:	f7f9 fdc4 	bl	8000adc <__aeabi_dcmplt>
 8006f54:	b140      	cbz	r0, 8006f68 <_dtoa_r+0x168>
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7f9 fae4 	bl	8000524 <__aeabi_i2d>
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	462b      	mov	r3, r5
 8006f60:	f7f9 fdb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f64:	b900      	cbnz	r0, 8006f68 <_dtoa_r+0x168>
 8006f66:	3f01      	subs	r7, #1
 8006f68:	2f16      	cmp	r7, #22
 8006f6a:	d851      	bhi.n	8007010 <_dtoa_r+0x210>
 8006f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80070dc <_dtoa_r+0x2dc>)
 8006f6e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f7a:	f7f9 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d048      	beq.n	8007014 <_dtoa_r+0x214>
 8006f82:	3f01      	subs	r7, #1
 8006f84:	2300      	movs	r3, #0
 8006f86:	9312      	str	r3, [sp, #72]	@ 0x48
 8006f88:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006f8a:	1b9b      	subs	r3, r3, r6
 8006f8c:	1e5a      	subs	r2, r3, #1
 8006f8e:	bf44      	itt	mi
 8006f90:	f1c3 0801 	rsbmi	r8, r3, #1
 8006f94:	2300      	movmi	r3, #0
 8006f96:	9208      	str	r2, [sp, #32]
 8006f98:	bf54      	ite	pl
 8006f9a:	f04f 0800 	movpl.w	r8, #0
 8006f9e:	9308      	strmi	r3, [sp, #32]
 8006fa0:	2f00      	cmp	r7, #0
 8006fa2:	db39      	blt.n	8007018 <_dtoa_r+0x218>
 8006fa4:	9b08      	ldr	r3, [sp, #32]
 8006fa6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006fa8:	443b      	add	r3, r7
 8006faa:	9308      	str	r3, [sp, #32]
 8006fac:	2300      	movs	r3, #0
 8006fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb2:	2b09      	cmp	r3, #9
 8006fb4:	d864      	bhi.n	8007080 <_dtoa_r+0x280>
 8006fb6:	2b05      	cmp	r3, #5
 8006fb8:	bfc4      	itt	gt
 8006fba:	3b04      	subgt	r3, #4
 8006fbc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8006fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fc0:	f1a3 0302 	sub.w	r3, r3, #2
 8006fc4:	bfcc      	ite	gt
 8006fc6:	2400      	movgt	r4, #0
 8006fc8:	2401      	movle	r4, #1
 8006fca:	2b03      	cmp	r3, #3
 8006fcc:	d863      	bhi.n	8007096 <_dtoa_r+0x296>
 8006fce:	e8df f003 	tbb	[pc, r3]
 8006fd2:	372a      	.short	0x372a
 8006fd4:	5535      	.short	0x5535
 8006fd6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8006fda:	441e      	add	r6, r3
 8006fdc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	bfc1      	itttt	gt
 8006fe4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006fe8:	409f      	lslgt	r7, r3
 8006fea:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006fee:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ff2:	bfd6      	itet	le
 8006ff4:	f1c3 0320 	rsble	r3, r3, #32
 8006ff8:	ea47 0003 	orrgt.w	r0, r7, r3
 8006ffc:	fa04 f003 	lslle.w	r0, r4, r3
 8007000:	f7f9 fa80 	bl	8000504 <__aeabi_ui2d>
 8007004:	2201      	movs	r2, #1
 8007006:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800700a:	3e01      	subs	r6, #1
 800700c:	9214      	str	r2, [sp, #80]	@ 0x50
 800700e:	e777      	b.n	8006f00 <_dtoa_r+0x100>
 8007010:	2301      	movs	r3, #1
 8007012:	e7b8      	b.n	8006f86 <_dtoa_r+0x186>
 8007014:	9012      	str	r0, [sp, #72]	@ 0x48
 8007016:	e7b7      	b.n	8006f88 <_dtoa_r+0x188>
 8007018:	427b      	negs	r3, r7
 800701a:	930a      	str	r3, [sp, #40]	@ 0x28
 800701c:	2300      	movs	r3, #0
 800701e:	eba8 0807 	sub.w	r8, r8, r7
 8007022:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007024:	e7c4      	b.n	8006fb0 <_dtoa_r+0x1b0>
 8007026:	2300      	movs	r3, #0
 8007028:	930b      	str	r3, [sp, #44]	@ 0x2c
 800702a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800702c:	2b00      	cmp	r3, #0
 800702e:	dc35      	bgt.n	800709c <_dtoa_r+0x29c>
 8007030:	2301      	movs	r3, #1
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	9307      	str	r3, [sp, #28]
 8007036:	461a      	mov	r2, r3
 8007038:	920e      	str	r2, [sp, #56]	@ 0x38
 800703a:	e00b      	b.n	8007054 <_dtoa_r+0x254>
 800703c:	2301      	movs	r3, #1
 800703e:	e7f3      	b.n	8007028 <_dtoa_r+0x228>
 8007040:	2300      	movs	r3, #0
 8007042:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007044:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007046:	18fb      	adds	r3, r7, r3
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	3301      	adds	r3, #1
 800704c:	2b01      	cmp	r3, #1
 800704e:	9307      	str	r3, [sp, #28]
 8007050:	bfb8      	it	lt
 8007052:	2301      	movlt	r3, #1
 8007054:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007058:	2100      	movs	r1, #0
 800705a:	2204      	movs	r2, #4
 800705c:	f102 0514 	add.w	r5, r2, #20
 8007060:	429d      	cmp	r5, r3
 8007062:	d91f      	bls.n	80070a4 <_dtoa_r+0x2a4>
 8007064:	6041      	str	r1, [r0, #4]
 8007066:	4658      	mov	r0, fp
 8007068:	f000 fd8e 	bl	8007b88 <_Balloc>
 800706c:	4682      	mov	sl, r0
 800706e:	2800      	cmp	r0, #0
 8007070:	d13c      	bne.n	80070ec <_dtoa_r+0x2ec>
 8007072:	4b1b      	ldr	r3, [pc, #108]	@ (80070e0 <_dtoa_r+0x2e0>)
 8007074:	4602      	mov	r2, r0
 8007076:	f240 11af 	movw	r1, #431	@ 0x1af
 800707a:	e6d8      	b.n	8006e2e <_dtoa_r+0x2e>
 800707c:	2301      	movs	r3, #1
 800707e:	e7e0      	b.n	8007042 <_dtoa_r+0x242>
 8007080:	2401      	movs	r4, #1
 8007082:	2300      	movs	r3, #0
 8007084:	9309      	str	r3, [sp, #36]	@ 0x24
 8007086:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	9300      	str	r3, [sp, #0]
 800708e:	9307      	str	r3, [sp, #28]
 8007090:	2200      	movs	r2, #0
 8007092:	2312      	movs	r3, #18
 8007094:	e7d0      	b.n	8007038 <_dtoa_r+0x238>
 8007096:	2301      	movs	r3, #1
 8007098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800709a:	e7f5      	b.n	8007088 <_dtoa_r+0x288>
 800709c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800709e:	9300      	str	r3, [sp, #0]
 80070a0:	9307      	str	r3, [sp, #28]
 80070a2:	e7d7      	b.n	8007054 <_dtoa_r+0x254>
 80070a4:	3101      	adds	r1, #1
 80070a6:	0052      	lsls	r2, r2, #1
 80070a8:	e7d8      	b.n	800705c <_dtoa_r+0x25c>
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w
 80070b0:	636f4361 	.word	0x636f4361
 80070b4:	3fd287a7 	.word	0x3fd287a7
 80070b8:	8b60c8b3 	.word	0x8b60c8b3
 80070bc:	3fc68a28 	.word	0x3fc68a28
 80070c0:	509f79fb 	.word	0x509f79fb
 80070c4:	3fd34413 	.word	0x3fd34413
 80070c8:	08008b4d 	.word	0x08008b4d
 80070cc:	08008b64 	.word	0x08008b64
 80070d0:	7ff00000 	.word	0x7ff00000
 80070d4:	08008b1d 	.word	0x08008b1d
 80070d8:	3ff80000 	.word	0x3ff80000
 80070dc:	08008c60 	.word	0x08008c60
 80070e0:	08008bbc 	.word	0x08008bbc
 80070e4:	08008b49 	.word	0x08008b49
 80070e8:	08008b1c 	.word	0x08008b1c
 80070ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80070f0:	6018      	str	r0, [r3, #0]
 80070f2:	9b07      	ldr	r3, [sp, #28]
 80070f4:	2b0e      	cmp	r3, #14
 80070f6:	f200 80a4 	bhi.w	8007242 <_dtoa_r+0x442>
 80070fa:	2c00      	cmp	r4, #0
 80070fc:	f000 80a1 	beq.w	8007242 <_dtoa_r+0x442>
 8007100:	2f00      	cmp	r7, #0
 8007102:	dd33      	ble.n	800716c <_dtoa_r+0x36c>
 8007104:	4bad      	ldr	r3, [pc, #692]	@ (80073bc <_dtoa_r+0x5bc>)
 8007106:	f007 020f 	and.w	r2, r7, #15
 800710a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800710e:	ed93 7b00 	vldr	d7, [r3]
 8007112:	05f8      	lsls	r0, r7, #23
 8007114:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007118:	ea4f 1427 	mov.w	r4, r7, asr #4
 800711c:	d516      	bpl.n	800714c <_dtoa_r+0x34c>
 800711e:	4ba8      	ldr	r3, [pc, #672]	@ (80073c0 <_dtoa_r+0x5c0>)
 8007120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007124:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007128:	f7f9 fb90 	bl	800084c <__aeabi_ddiv>
 800712c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007130:	f004 040f 	and.w	r4, r4, #15
 8007134:	2603      	movs	r6, #3
 8007136:	4da2      	ldr	r5, [pc, #648]	@ (80073c0 <_dtoa_r+0x5c0>)
 8007138:	b954      	cbnz	r4, 8007150 <_dtoa_r+0x350>
 800713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800713e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007142:	f7f9 fb83 	bl	800084c <__aeabi_ddiv>
 8007146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800714a:	e028      	b.n	800719e <_dtoa_r+0x39e>
 800714c:	2602      	movs	r6, #2
 800714e:	e7f2      	b.n	8007136 <_dtoa_r+0x336>
 8007150:	07e1      	lsls	r1, r4, #31
 8007152:	d508      	bpl.n	8007166 <_dtoa_r+0x366>
 8007154:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007158:	e9d5 2300 	ldrd	r2, r3, [r5]
 800715c:	f7f9 fa4c 	bl	80005f8 <__aeabi_dmul>
 8007160:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007164:	3601      	adds	r6, #1
 8007166:	1064      	asrs	r4, r4, #1
 8007168:	3508      	adds	r5, #8
 800716a:	e7e5      	b.n	8007138 <_dtoa_r+0x338>
 800716c:	f000 80d2 	beq.w	8007314 <_dtoa_r+0x514>
 8007170:	427c      	negs	r4, r7
 8007172:	4b92      	ldr	r3, [pc, #584]	@ (80073bc <_dtoa_r+0x5bc>)
 8007174:	4d92      	ldr	r5, [pc, #584]	@ (80073c0 <_dtoa_r+0x5c0>)
 8007176:	f004 020f 	and.w	r2, r4, #15
 800717a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007182:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007186:	f7f9 fa37 	bl	80005f8 <__aeabi_dmul>
 800718a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800718e:	1124      	asrs	r4, r4, #4
 8007190:	2300      	movs	r3, #0
 8007192:	2602      	movs	r6, #2
 8007194:	2c00      	cmp	r4, #0
 8007196:	f040 80b2 	bne.w	80072fe <_dtoa_r+0x4fe>
 800719a:	2b00      	cmp	r3, #0
 800719c:	d1d3      	bne.n	8007146 <_dtoa_r+0x346>
 800719e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80071a0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80b7 	beq.w	8007318 <_dtoa_r+0x518>
 80071aa:	4b86      	ldr	r3, [pc, #536]	@ (80073c4 <_dtoa_r+0x5c4>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	4620      	mov	r0, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	f7f9 fc93 	bl	8000adc <__aeabi_dcmplt>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	f000 80ae 	beq.w	8007318 <_dtoa_r+0x518>
 80071bc:	9b07      	ldr	r3, [sp, #28]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	f000 80aa 	beq.w	8007318 <_dtoa_r+0x518>
 80071c4:	9b00      	ldr	r3, [sp, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	dd37      	ble.n	800723a <_dtoa_r+0x43a>
 80071ca:	1e7b      	subs	r3, r7, #1
 80071cc:	9304      	str	r3, [sp, #16]
 80071ce:	4620      	mov	r0, r4
 80071d0:	4b7d      	ldr	r3, [pc, #500]	@ (80073c8 <_dtoa_r+0x5c8>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7f9 fa0f 	bl	80005f8 <__aeabi_dmul>
 80071da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80071de:	9c00      	ldr	r4, [sp, #0]
 80071e0:	3601      	adds	r6, #1
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7f9 f99e 	bl	8000524 <__aeabi_i2d>
 80071e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071ec:	f7f9 fa04 	bl	80005f8 <__aeabi_dmul>
 80071f0:	4b76      	ldr	r3, [pc, #472]	@ (80073cc <_dtoa_r+0x5cc>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	f7f9 f84a 	bl	800028c <__adddf3>
 80071f8:	4605      	mov	r5, r0
 80071fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80071fe:	2c00      	cmp	r4, #0
 8007200:	f040 808d 	bne.w	800731e <_dtoa_r+0x51e>
 8007204:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007208:	4b71      	ldr	r3, [pc, #452]	@ (80073d0 <_dtoa_r+0x5d0>)
 800720a:	2200      	movs	r2, #0
 800720c:	f7f9 f83c 	bl	8000288 <__aeabi_dsub>
 8007210:	4602      	mov	r2, r0
 8007212:	460b      	mov	r3, r1
 8007214:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007218:	462a      	mov	r2, r5
 800721a:	4633      	mov	r3, r6
 800721c:	f7f9 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8007220:	2800      	cmp	r0, #0
 8007222:	f040 828b 	bne.w	800773c <_dtoa_r+0x93c>
 8007226:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800722a:	462a      	mov	r2, r5
 800722c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007230:	f7f9 fc54 	bl	8000adc <__aeabi_dcmplt>
 8007234:	2800      	cmp	r0, #0
 8007236:	f040 8128 	bne.w	800748a <_dtoa_r+0x68a>
 800723a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800723e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007242:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007244:	2b00      	cmp	r3, #0
 8007246:	f2c0 815a 	blt.w	80074fe <_dtoa_r+0x6fe>
 800724a:	2f0e      	cmp	r7, #14
 800724c:	f300 8157 	bgt.w	80074fe <_dtoa_r+0x6fe>
 8007250:	4b5a      	ldr	r3, [pc, #360]	@ (80073bc <_dtoa_r+0x5bc>)
 8007252:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007256:	ed93 7b00 	vldr	d7, [r3]
 800725a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800725c:	2b00      	cmp	r3, #0
 800725e:	ed8d 7b00 	vstr	d7, [sp]
 8007262:	da03      	bge.n	800726c <_dtoa_r+0x46c>
 8007264:	9b07      	ldr	r3, [sp, #28]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f340 8101 	ble.w	800746e <_dtoa_r+0x66e>
 800726c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007270:	4656      	mov	r6, sl
 8007272:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 fae7 	bl	800084c <__aeabi_ddiv>
 800727e:	f7f9 fc6b 	bl	8000b58 <__aeabi_d2iz>
 8007282:	4680      	mov	r8, r0
 8007284:	f7f9 f94e 	bl	8000524 <__aeabi_i2d>
 8007288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800728c:	f7f9 f9b4 	bl	80005f8 <__aeabi_dmul>
 8007290:	4602      	mov	r2, r0
 8007292:	460b      	mov	r3, r1
 8007294:	4620      	mov	r0, r4
 8007296:	4629      	mov	r1, r5
 8007298:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800729c:	f7f8 fff4 	bl	8000288 <__aeabi_dsub>
 80072a0:	f806 4b01 	strb.w	r4, [r6], #1
 80072a4:	9d07      	ldr	r5, [sp, #28]
 80072a6:	eba6 040a 	sub.w	r4, r6, sl
 80072aa:	42a5      	cmp	r5, r4
 80072ac:	4602      	mov	r2, r0
 80072ae:	460b      	mov	r3, r1
 80072b0:	f040 8117 	bne.w	80074e2 <_dtoa_r+0x6e2>
 80072b4:	f7f8 ffea 	bl	800028c <__adddf3>
 80072b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	f7f9 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 80072c4:	2800      	cmp	r0, #0
 80072c6:	f040 80f9 	bne.w	80074bc <_dtoa_r+0x6bc>
 80072ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80072ce:	4620      	mov	r0, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	f7f9 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80072d6:	b118      	cbz	r0, 80072e0 <_dtoa_r+0x4e0>
 80072d8:	f018 0f01 	tst.w	r8, #1
 80072dc:	f040 80ee 	bne.w	80074bc <_dtoa_r+0x6bc>
 80072e0:	4649      	mov	r1, r9
 80072e2:	4658      	mov	r0, fp
 80072e4:	f000 fc90 	bl	8007c08 <_Bfree>
 80072e8:	2300      	movs	r3, #0
 80072ea:	7033      	strb	r3, [r6, #0]
 80072ec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80072ee:	3701      	adds	r7, #1
 80072f0:	601f      	str	r7, [r3, #0]
 80072f2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	f000 831d 	beq.w	8007934 <_dtoa_r+0xb34>
 80072fa:	601e      	str	r6, [r3, #0]
 80072fc:	e31a      	b.n	8007934 <_dtoa_r+0xb34>
 80072fe:	07e2      	lsls	r2, r4, #31
 8007300:	d505      	bpl.n	800730e <_dtoa_r+0x50e>
 8007302:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007306:	f7f9 f977 	bl	80005f8 <__aeabi_dmul>
 800730a:	3601      	adds	r6, #1
 800730c:	2301      	movs	r3, #1
 800730e:	1064      	asrs	r4, r4, #1
 8007310:	3508      	adds	r5, #8
 8007312:	e73f      	b.n	8007194 <_dtoa_r+0x394>
 8007314:	2602      	movs	r6, #2
 8007316:	e742      	b.n	800719e <_dtoa_r+0x39e>
 8007318:	9c07      	ldr	r4, [sp, #28]
 800731a:	9704      	str	r7, [sp, #16]
 800731c:	e761      	b.n	80071e2 <_dtoa_r+0x3e2>
 800731e:	4b27      	ldr	r3, [pc, #156]	@ (80073bc <_dtoa_r+0x5bc>)
 8007320:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007322:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007326:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800732a:	4454      	add	r4, sl
 800732c:	2900      	cmp	r1, #0
 800732e:	d053      	beq.n	80073d8 <_dtoa_r+0x5d8>
 8007330:	4928      	ldr	r1, [pc, #160]	@ (80073d4 <_dtoa_r+0x5d4>)
 8007332:	2000      	movs	r0, #0
 8007334:	f7f9 fa8a 	bl	800084c <__aeabi_ddiv>
 8007338:	4633      	mov	r3, r6
 800733a:	462a      	mov	r2, r5
 800733c:	f7f8 ffa4 	bl	8000288 <__aeabi_dsub>
 8007340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007344:	4656      	mov	r6, sl
 8007346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800734a:	f7f9 fc05 	bl	8000b58 <__aeabi_d2iz>
 800734e:	4605      	mov	r5, r0
 8007350:	f7f9 f8e8 	bl	8000524 <__aeabi_i2d>
 8007354:	4602      	mov	r2, r0
 8007356:	460b      	mov	r3, r1
 8007358:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800735c:	f7f8 ff94 	bl	8000288 <__aeabi_dsub>
 8007360:	3530      	adds	r5, #48	@ 0x30
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800736a:	f806 5b01 	strb.w	r5, [r6], #1
 800736e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007372:	f7f9 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8007376:	2800      	cmp	r0, #0
 8007378:	d171      	bne.n	800745e <_dtoa_r+0x65e>
 800737a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800737e:	4911      	ldr	r1, [pc, #68]	@ (80073c4 <_dtoa_r+0x5c4>)
 8007380:	2000      	movs	r0, #0
 8007382:	f7f8 ff81 	bl	8000288 <__aeabi_dsub>
 8007386:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800738a:	f7f9 fba7 	bl	8000adc <__aeabi_dcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	f040 8095 	bne.w	80074be <_dtoa_r+0x6be>
 8007394:	42a6      	cmp	r6, r4
 8007396:	f43f af50 	beq.w	800723a <_dtoa_r+0x43a>
 800739a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800739e:	4b0a      	ldr	r3, [pc, #40]	@ (80073c8 <_dtoa_r+0x5c8>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	f7f9 f929 	bl	80005f8 <__aeabi_dmul>
 80073a6:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <_dtoa_r+0x5c8>)
 80073a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073ac:	2200      	movs	r2, #0
 80073ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073b2:	f7f9 f921 	bl	80005f8 <__aeabi_dmul>
 80073b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ba:	e7c4      	b.n	8007346 <_dtoa_r+0x546>
 80073bc:	08008c60 	.word	0x08008c60
 80073c0:	08008c38 	.word	0x08008c38
 80073c4:	3ff00000 	.word	0x3ff00000
 80073c8:	40240000 	.word	0x40240000
 80073cc:	401c0000 	.word	0x401c0000
 80073d0:	40140000 	.word	0x40140000
 80073d4:	3fe00000 	.word	0x3fe00000
 80073d8:	4631      	mov	r1, r6
 80073da:	4628      	mov	r0, r5
 80073dc:	f7f9 f90c 	bl	80005f8 <__aeabi_dmul>
 80073e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073e4:	9415      	str	r4, [sp, #84]	@ 0x54
 80073e6:	4656      	mov	r6, sl
 80073e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073ec:	f7f9 fbb4 	bl	8000b58 <__aeabi_d2iz>
 80073f0:	4605      	mov	r5, r0
 80073f2:	f7f9 f897 	bl	8000524 <__aeabi_i2d>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073fe:	f7f8 ff43 	bl	8000288 <__aeabi_dsub>
 8007402:	3530      	adds	r5, #48	@ 0x30
 8007404:	f806 5b01 	strb.w	r5, [r6], #1
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	42a6      	cmp	r6, r4
 800740e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007412:	f04f 0200 	mov.w	r2, #0
 8007416:	d124      	bne.n	8007462 <_dtoa_r+0x662>
 8007418:	4bac      	ldr	r3, [pc, #688]	@ (80076cc <_dtoa_r+0x8cc>)
 800741a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800741e:	f7f8 ff35 	bl	800028c <__adddf3>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800742a:	f7f9 fb75 	bl	8000b18 <__aeabi_dcmpgt>
 800742e:	2800      	cmp	r0, #0
 8007430:	d145      	bne.n	80074be <_dtoa_r+0x6be>
 8007432:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007436:	49a5      	ldr	r1, [pc, #660]	@ (80076cc <_dtoa_r+0x8cc>)
 8007438:	2000      	movs	r0, #0
 800743a:	f7f8 ff25 	bl	8000288 <__aeabi_dsub>
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007446:	f7f9 fb49 	bl	8000adc <__aeabi_dcmplt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f aef5 	beq.w	800723a <_dtoa_r+0x43a>
 8007450:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007452:	1e73      	subs	r3, r6, #1
 8007454:	9315      	str	r3, [sp, #84]	@ 0x54
 8007456:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800745a:	2b30      	cmp	r3, #48	@ 0x30
 800745c:	d0f8      	beq.n	8007450 <_dtoa_r+0x650>
 800745e:	9f04      	ldr	r7, [sp, #16]
 8007460:	e73e      	b.n	80072e0 <_dtoa_r+0x4e0>
 8007462:	4b9b      	ldr	r3, [pc, #620]	@ (80076d0 <_dtoa_r+0x8d0>)
 8007464:	f7f9 f8c8 	bl	80005f8 <__aeabi_dmul>
 8007468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800746c:	e7bc      	b.n	80073e8 <_dtoa_r+0x5e8>
 800746e:	d10c      	bne.n	800748a <_dtoa_r+0x68a>
 8007470:	4b98      	ldr	r3, [pc, #608]	@ (80076d4 <_dtoa_r+0x8d4>)
 8007472:	2200      	movs	r2, #0
 8007474:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007478:	f7f9 f8be 	bl	80005f8 <__aeabi_dmul>
 800747c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007480:	f7f9 fb40 	bl	8000b04 <__aeabi_dcmpge>
 8007484:	2800      	cmp	r0, #0
 8007486:	f000 8157 	beq.w	8007738 <_dtoa_r+0x938>
 800748a:	2400      	movs	r4, #0
 800748c:	4625      	mov	r5, r4
 800748e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007490:	43db      	mvns	r3, r3
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	4656      	mov	r6, sl
 8007496:	2700      	movs	r7, #0
 8007498:	4621      	mov	r1, r4
 800749a:	4658      	mov	r0, fp
 800749c:	f000 fbb4 	bl	8007c08 <_Bfree>
 80074a0:	2d00      	cmp	r5, #0
 80074a2:	d0dc      	beq.n	800745e <_dtoa_r+0x65e>
 80074a4:	b12f      	cbz	r7, 80074b2 <_dtoa_r+0x6b2>
 80074a6:	42af      	cmp	r7, r5
 80074a8:	d003      	beq.n	80074b2 <_dtoa_r+0x6b2>
 80074aa:	4639      	mov	r1, r7
 80074ac:	4658      	mov	r0, fp
 80074ae:	f000 fbab 	bl	8007c08 <_Bfree>
 80074b2:	4629      	mov	r1, r5
 80074b4:	4658      	mov	r0, fp
 80074b6:	f000 fba7 	bl	8007c08 <_Bfree>
 80074ba:	e7d0      	b.n	800745e <_dtoa_r+0x65e>
 80074bc:	9704      	str	r7, [sp, #16]
 80074be:	4633      	mov	r3, r6
 80074c0:	461e      	mov	r6, r3
 80074c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80074c6:	2a39      	cmp	r2, #57	@ 0x39
 80074c8:	d107      	bne.n	80074da <_dtoa_r+0x6da>
 80074ca:	459a      	cmp	sl, r3
 80074cc:	d1f8      	bne.n	80074c0 <_dtoa_r+0x6c0>
 80074ce:	9a04      	ldr	r2, [sp, #16]
 80074d0:	3201      	adds	r2, #1
 80074d2:	9204      	str	r2, [sp, #16]
 80074d4:	2230      	movs	r2, #48	@ 0x30
 80074d6:	f88a 2000 	strb.w	r2, [sl]
 80074da:	781a      	ldrb	r2, [r3, #0]
 80074dc:	3201      	adds	r2, #1
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e7bd      	b.n	800745e <_dtoa_r+0x65e>
 80074e2:	4b7b      	ldr	r3, [pc, #492]	@ (80076d0 <_dtoa_r+0x8d0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	f7f9 f887 	bl	80005f8 <__aeabi_dmul>
 80074ea:	2200      	movs	r2, #0
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	460d      	mov	r5, r1
 80074f2:	f7f9 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f43f aebb 	beq.w	8007272 <_dtoa_r+0x472>
 80074fc:	e6f0      	b.n	80072e0 <_dtoa_r+0x4e0>
 80074fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007500:	2a00      	cmp	r2, #0
 8007502:	f000 80db 	beq.w	80076bc <_dtoa_r+0x8bc>
 8007506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007508:	2a01      	cmp	r2, #1
 800750a:	f300 80bf 	bgt.w	800768c <_dtoa_r+0x88c>
 800750e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007510:	2a00      	cmp	r2, #0
 8007512:	f000 80b7 	beq.w	8007684 <_dtoa_r+0x884>
 8007516:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800751a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800751c:	4646      	mov	r6, r8
 800751e:	9a08      	ldr	r2, [sp, #32]
 8007520:	2101      	movs	r1, #1
 8007522:	441a      	add	r2, r3
 8007524:	4658      	mov	r0, fp
 8007526:	4498      	add	r8, r3
 8007528:	9208      	str	r2, [sp, #32]
 800752a:	f000 fc21 	bl	8007d70 <__i2b>
 800752e:	4605      	mov	r5, r0
 8007530:	b15e      	cbz	r6, 800754a <_dtoa_r+0x74a>
 8007532:	9b08      	ldr	r3, [sp, #32]
 8007534:	2b00      	cmp	r3, #0
 8007536:	dd08      	ble.n	800754a <_dtoa_r+0x74a>
 8007538:	42b3      	cmp	r3, r6
 800753a:	9a08      	ldr	r2, [sp, #32]
 800753c:	bfa8      	it	ge
 800753e:	4633      	movge	r3, r6
 8007540:	eba8 0803 	sub.w	r8, r8, r3
 8007544:	1af6      	subs	r6, r6, r3
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	9308      	str	r3, [sp, #32]
 800754a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800754c:	b1f3      	cbz	r3, 800758c <_dtoa_r+0x78c>
 800754e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	f000 80b7 	beq.w	80076c4 <_dtoa_r+0x8c4>
 8007556:	b18c      	cbz	r4, 800757c <_dtoa_r+0x77c>
 8007558:	4629      	mov	r1, r5
 800755a:	4622      	mov	r2, r4
 800755c:	4658      	mov	r0, fp
 800755e:	f000 fcc7 	bl	8007ef0 <__pow5mult>
 8007562:	464a      	mov	r2, r9
 8007564:	4601      	mov	r1, r0
 8007566:	4605      	mov	r5, r0
 8007568:	4658      	mov	r0, fp
 800756a:	f000 fc17 	bl	8007d9c <__multiply>
 800756e:	4649      	mov	r1, r9
 8007570:	9004      	str	r0, [sp, #16]
 8007572:	4658      	mov	r0, fp
 8007574:	f000 fb48 	bl	8007c08 <_Bfree>
 8007578:	9b04      	ldr	r3, [sp, #16]
 800757a:	4699      	mov	r9, r3
 800757c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800757e:	1b1a      	subs	r2, r3, r4
 8007580:	d004      	beq.n	800758c <_dtoa_r+0x78c>
 8007582:	4649      	mov	r1, r9
 8007584:	4658      	mov	r0, fp
 8007586:	f000 fcb3 	bl	8007ef0 <__pow5mult>
 800758a:	4681      	mov	r9, r0
 800758c:	2101      	movs	r1, #1
 800758e:	4658      	mov	r0, fp
 8007590:	f000 fbee 	bl	8007d70 <__i2b>
 8007594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007596:	4604      	mov	r4, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	f000 81cf 	beq.w	800793c <_dtoa_r+0xb3c>
 800759e:	461a      	mov	r2, r3
 80075a0:	4601      	mov	r1, r0
 80075a2:	4658      	mov	r0, fp
 80075a4:	f000 fca4 	bl	8007ef0 <__pow5mult>
 80075a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	4604      	mov	r4, r0
 80075ae:	f300 8095 	bgt.w	80076dc <_dtoa_r+0x8dc>
 80075b2:	9b02      	ldr	r3, [sp, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	f040 8087 	bne.w	80076c8 <_dtoa_r+0x8c8>
 80075ba:	9b03      	ldr	r3, [sp, #12]
 80075bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f040 8089 	bne.w	80076d8 <_dtoa_r+0x8d8>
 80075c6:	9b03      	ldr	r3, [sp, #12]
 80075c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075cc:	0d1b      	lsrs	r3, r3, #20
 80075ce:	051b      	lsls	r3, r3, #20
 80075d0:	b12b      	cbz	r3, 80075de <_dtoa_r+0x7de>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	3301      	adds	r3, #1
 80075d6:	9308      	str	r3, [sp, #32]
 80075d8:	f108 0801 	add.w	r8, r8, #1
 80075dc:	2301      	movs	r3, #1
 80075de:	930a      	str	r3, [sp, #40]	@ 0x28
 80075e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 81b0 	beq.w	8007948 <_dtoa_r+0xb48>
 80075e8:	6923      	ldr	r3, [r4, #16]
 80075ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80075ee:	6918      	ldr	r0, [r3, #16]
 80075f0:	f000 fb72 	bl	8007cd8 <__hi0bits>
 80075f4:	f1c0 0020 	rsb	r0, r0, #32
 80075f8:	9b08      	ldr	r3, [sp, #32]
 80075fa:	4418      	add	r0, r3
 80075fc:	f010 001f 	ands.w	r0, r0, #31
 8007600:	d077      	beq.n	80076f2 <_dtoa_r+0x8f2>
 8007602:	f1c0 0320 	rsb	r3, r0, #32
 8007606:	2b04      	cmp	r3, #4
 8007608:	dd6b      	ble.n	80076e2 <_dtoa_r+0x8e2>
 800760a:	9b08      	ldr	r3, [sp, #32]
 800760c:	f1c0 001c 	rsb	r0, r0, #28
 8007610:	4403      	add	r3, r0
 8007612:	4480      	add	r8, r0
 8007614:	4406      	add	r6, r0
 8007616:	9308      	str	r3, [sp, #32]
 8007618:	f1b8 0f00 	cmp.w	r8, #0
 800761c:	dd05      	ble.n	800762a <_dtoa_r+0x82a>
 800761e:	4649      	mov	r1, r9
 8007620:	4642      	mov	r2, r8
 8007622:	4658      	mov	r0, fp
 8007624:	f000 fcbe 	bl	8007fa4 <__lshift>
 8007628:	4681      	mov	r9, r0
 800762a:	9b08      	ldr	r3, [sp, #32]
 800762c:	2b00      	cmp	r3, #0
 800762e:	dd05      	ble.n	800763c <_dtoa_r+0x83c>
 8007630:	4621      	mov	r1, r4
 8007632:	461a      	mov	r2, r3
 8007634:	4658      	mov	r0, fp
 8007636:	f000 fcb5 	bl	8007fa4 <__lshift>
 800763a:	4604      	mov	r4, r0
 800763c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800763e:	2b00      	cmp	r3, #0
 8007640:	d059      	beq.n	80076f6 <_dtoa_r+0x8f6>
 8007642:	4621      	mov	r1, r4
 8007644:	4648      	mov	r0, r9
 8007646:	f000 fd19 	bl	800807c <__mcmp>
 800764a:	2800      	cmp	r0, #0
 800764c:	da53      	bge.n	80076f6 <_dtoa_r+0x8f6>
 800764e:	1e7b      	subs	r3, r7, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	4649      	mov	r1, r9
 8007654:	2300      	movs	r3, #0
 8007656:	220a      	movs	r2, #10
 8007658:	4658      	mov	r0, fp
 800765a:	f000 faf7 	bl	8007c4c <__multadd>
 800765e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007660:	4681      	mov	r9, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8172 	beq.w	800794c <_dtoa_r+0xb4c>
 8007668:	2300      	movs	r3, #0
 800766a:	4629      	mov	r1, r5
 800766c:	220a      	movs	r2, #10
 800766e:	4658      	mov	r0, fp
 8007670:	f000 faec 	bl	8007c4c <__multadd>
 8007674:	9b00      	ldr	r3, [sp, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	4605      	mov	r5, r0
 800767a:	dc67      	bgt.n	800774c <_dtoa_r+0x94c>
 800767c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767e:	2b02      	cmp	r3, #2
 8007680:	dc41      	bgt.n	8007706 <_dtoa_r+0x906>
 8007682:	e063      	b.n	800774c <_dtoa_r+0x94c>
 8007684:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007686:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800768a:	e746      	b.n	800751a <_dtoa_r+0x71a>
 800768c:	9b07      	ldr	r3, [sp, #28]
 800768e:	1e5c      	subs	r4, r3, #1
 8007690:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007692:	42a3      	cmp	r3, r4
 8007694:	bfbf      	itttt	lt
 8007696:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007698:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800769a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800769c:	1ae3      	sublt	r3, r4, r3
 800769e:	bfb4      	ite	lt
 80076a0:	18d2      	addlt	r2, r2, r3
 80076a2:	1b1c      	subge	r4, r3, r4
 80076a4:	9b07      	ldr	r3, [sp, #28]
 80076a6:	bfbc      	itt	lt
 80076a8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80076aa:	2400      	movlt	r4, #0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfb5      	itete	lt
 80076b0:	eba8 0603 	sublt.w	r6, r8, r3
 80076b4:	9b07      	ldrge	r3, [sp, #28]
 80076b6:	2300      	movlt	r3, #0
 80076b8:	4646      	movge	r6, r8
 80076ba:	e730      	b.n	800751e <_dtoa_r+0x71e>
 80076bc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80076be:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80076c0:	4646      	mov	r6, r8
 80076c2:	e735      	b.n	8007530 <_dtoa_r+0x730>
 80076c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80076c6:	e75c      	b.n	8007582 <_dtoa_r+0x782>
 80076c8:	2300      	movs	r3, #0
 80076ca:	e788      	b.n	80075de <_dtoa_r+0x7de>
 80076cc:	3fe00000 	.word	0x3fe00000
 80076d0:	40240000 	.word	0x40240000
 80076d4:	40140000 	.word	0x40140000
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	e780      	b.n	80075de <_dtoa_r+0x7de>
 80076dc:	2300      	movs	r3, #0
 80076de:	930a      	str	r3, [sp, #40]	@ 0x28
 80076e0:	e782      	b.n	80075e8 <_dtoa_r+0x7e8>
 80076e2:	d099      	beq.n	8007618 <_dtoa_r+0x818>
 80076e4:	9a08      	ldr	r2, [sp, #32]
 80076e6:	331c      	adds	r3, #28
 80076e8:	441a      	add	r2, r3
 80076ea:	4498      	add	r8, r3
 80076ec:	441e      	add	r6, r3
 80076ee:	9208      	str	r2, [sp, #32]
 80076f0:	e792      	b.n	8007618 <_dtoa_r+0x818>
 80076f2:	4603      	mov	r3, r0
 80076f4:	e7f6      	b.n	80076e4 <_dtoa_r+0x8e4>
 80076f6:	9b07      	ldr	r3, [sp, #28]
 80076f8:	9704      	str	r7, [sp, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	dc20      	bgt.n	8007740 <_dtoa_r+0x940>
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007702:	2b02      	cmp	r3, #2
 8007704:	dd1e      	ble.n	8007744 <_dtoa_r+0x944>
 8007706:	9b00      	ldr	r3, [sp, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	f47f aec0 	bne.w	800748e <_dtoa_r+0x68e>
 800770e:	4621      	mov	r1, r4
 8007710:	2205      	movs	r2, #5
 8007712:	4658      	mov	r0, fp
 8007714:	f000 fa9a 	bl	8007c4c <__multadd>
 8007718:	4601      	mov	r1, r0
 800771a:	4604      	mov	r4, r0
 800771c:	4648      	mov	r0, r9
 800771e:	f000 fcad 	bl	800807c <__mcmp>
 8007722:	2800      	cmp	r0, #0
 8007724:	f77f aeb3 	ble.w	800748e <_dtoa_r+0x68e>
 8007728:	4656      	mov	r6, sl
 800772a:	2331      	movs	r3, #49	@ 0x31
 800772c:	f806 3b01 	strb.w	r3, [r6], #1
 8007730:	9b04      	ldr	r3, [sp, #16]
 8007732:	3301      	adds	r3, #1
 8007734:	9304      	str	r3, [sp, #16]
 8007736:	e6ae      	b.n	8007496 <_dtoa_r+0x696>
 8007738:	9c07      	ldr	r4, [sp, #28]
 800773a:	9704      	str	r7, [sp, #16]
 800773c:	4625      	mov	r5, r4
 800773e:	e7f3      	b.n	8007728 <_dtoa_r+0x928>
 8007740:	9b07      	ldr	r3, [sp, #28]
 8007742:	9300      	str	r3, [sp, #0]
 8007744:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007746:	2b00      	cmp	r3, #0
 8007748:	f000 8104 	beq.w	8007954 <_dtoa_r+0xb54>
 800774c:	2e00      	cmp	r6, #0
 800774e:	dd05      	ble.n	800775c <_dtoa_r+0x95c>
 8007750:	4629      	mov	r1, r5
 8007752:	4632      	mov	r2, r6
 8007754:	4658      	mov	r0, fp
 8007756:	f000 fc25 	bl	8007fa4 <__lshift>
 800775a:	4605      	mov	r5, r0
 800775c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800775e:	2b00      	cmp	r3, #0
 8007760:	d05a      	beq.n	8007818 <_dtoa_r+0xa18>
 8007762:	6869      	ldr	r1, [r5, #4]
 8007764:	4658      	mov	r0, fp
 8007766:	f000 fa0f 	bl	8007b88 <_Balloc>
 800776a:	4606      	mov	r6, r0
 800776c:	b928      	cbnz	r0, 800777a <_dtoa_r+0x97a>
 800776e:	4b84      	ldr	r3, [pc, #528]	@ (8007980 <_dtoa_r+0xb80>)
 8007770:	4602      	mov	r2, r0
 8007772:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007776:	f7ff bb5a 	b.w	8006e2e <_dtoa_r+0x2e>
 800777a:	692a      	ldr	r2, [r5, #16]
 800777c:	3202      	adds	r2, #2
 800777e:	0092      	lsls	r2, r2, #2
 8007780:	f105 010c 	add.w	r1, r5, #12
 8007784:	300c      	adds	r0, #12
 8007786:	f7ff faa2 	bl	8006cce <memcpy>
 800778a:	2201      	movs	r2, #1
 800778c:	4631      	mov	r1, r6
 800778e:	4658      	mov	r0, fp
 8007790:	f000 fc08 	bl	8007fa4 <__lshift>
 8007794:	f10a 0301 	add.w	r3, sl, #1
 8007798:	9307      	str	r3, [sp, #28]
 800779a:	9b00      	ldr	r3, [sp, #0]
 800779c:	4453      	add	r3, sl
 800779e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077a0:	9b02      	ldr	r3, [sp, #8]
 80077a2:	f003 0301 	and.w	r3, r3, #1
 80077a6:	462f      	mov	r7, r5
 80077a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077aa:	4605      	mov	r5, r0
 80077ac:	9b07      	ldr	r3, [sp, #28]
 80077ae:	4621      	mov	r1, r4
 80077b0:	3b01      	subs	r3, #1
 80077b2:	4648      	mov	r0, r9
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	f7ff fa98 	bl	8006cea <quorem>
 80077ba:	4639      	mov	r1, r7
 80077bc:	9002      	str	r0, [sp, #8]
 80077be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80077c2:	4648      	mov	r0, r9
 80077c4:	f000 fc5a 	bl	800807c <__mcmp>
 80077c8:	462a      	mov	r2, r5
 80077ca:	9008      	str	r0, [sp, #32]
 80077cc:	4621      	mov	r1, r4
 80077ce:	4658      	mov	r0, fp
 80077d0:	f000 fc70 	bl	80080b4 <__mdiff>
 80077d4:	68c2      	ldr	r2, [r0, #12]
 80077d6:	4606      	mov	r6, r0
 80077d8:	bb02      	cbnz	r2, 800781c <_dtoa_r+0xa1c>
 80077da:	4601      	mov	r1, r0
 80077dc:	4648      	mov	r0, r9
 80077de:	f000 fc4d 	bl	800807c <__mcmp>
 80077e2:	4602      	mov	r2, r0
 80077e4:	4631      	mov	r1, r6
 80077e6:	4658      	mov	r0, fp
 80077e8:	920e      	str	r2, [sp, #56]	@ 0x38
 80077ea:	f000 fa0d 	bl	8007c08 <_Bfree>
 80077ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077f2:	9e07      	ldr	r6, [sp, #28]
 80077f4:	ea43 0102 	orr.w	r1, r3, r2
 80077f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077fa:	4319      	orrs	r1, r3
 80077fc:	d110      	bne.n	8007820 <_dtoa_r+0xa20>
 80077fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007802:	d029      	beq.n	8007858 <_dtoa_r+0xa58>
 8007804:	9b08      	ldr	r3, [sp, #32]
 8007806:	2b00      	cmp	r3, #0
 8007808:	dd02      	ble.n	8007810 <_dtoa_r+0xa10>
 800780a:	9b02      	ldr	r3, [sp, #8]
 800780c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007810:	9b00      	ldr	r3, [sp, #0]
 8007812:	f883 8000 	strb.w	r8, [r3]
 8007816:	e63f      	b.n	8007498 <_dtoa_r+0x698>
 8007818:	4628      	mov	r0, r5
 800781a:	e7bb      	b.n	8007794 <_dtoa_r+0x994>
 800781c:	2201      	movs	r2, #1
 800781e:	e7e1      	b.n	80077e4 <_dtoa_r+0x9e4>
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	2b00      	cmp	r3, #0
 8007824:	db04      	blt.n	8007830 <_dtoa_r+0xa30>
 8007826:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007828:	430b      	orrs	r3, r1
 800782a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800782c:	430b      	orrs	r3, r1
 800782e:	d120      	bne.n	8007872 <_dtoa_r+0xa72>
 8007830:	2a00      	cmp	r2, #0
 8007832:	dded      	ble.n	8007810 <_dtoa_r+0xa10>
 8007834:	4649      	mov	r1, r9
 8007836:	2201      	movs	r2, #1
 8007838:	4658      	mov	r0, fp
 800783a:	f000 fbb3 	bl	8007fa4 <__lshift>
 800783e:	4621      	mov	r1, r4
 8007840:	4681      	mov	r9, r0
 8007842:	f000 fc1b 	bl	800807c <__mcmp>
 8007846:	2800      	cmp	r0, #0
 8007848:	dc03      	bgt.n	8007852 <_dtoa_r+0xa52>
 800784a:	d1e1      	bne.n	8007810 <_dtoa_r+0xa10>
 800784c:	f018 0f01 	tst.w	r8, #1
 8007850:	d0de      	beq.n	8007810 <_dtoa_r+0xa10>
 8007852:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007856:	d1d8      	bne.n	800780a <_dtoa_r+0xa0a>
 8007858:	9a00      	ldr	r2, [sp, #0]
 800785a:	2339      	movs	r3, #57	@ 0x39
 800785c:	7013      	strb	r3, [r2, #0]
 800785e:	4633      	mov	r3, r6
 8007860:	461e      	mov	r6, r3
 8007862:	3b01      	subs	r3, #1
 8007864:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007868:	2a39      	cmp	r2, #57	@ 0x39
 800786a:	d052      	beq.n	8007912 <_dtoa_r+0xb12>
 800786c:	3201      	adds	r2, #1
 800786e:	701a      	strb	r2, [r3, #0]
 8007870:	e612      	b.n	8007498 <_dtoa_r+0x698>
 8007872:	2a00      	cmp	r2, #0
 8007874:	dd07      	ble.n	8007886 <_dtoa_r+0xa86>
 8007876:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800787a:	d0ed      	beq.n	8007858 <_dtoa_r+0xa58>
 800787c:	9a00      	ldr	r2, [sp, #0]
 800787e:	f108 0301 	add.w	r3, r8, #1
 8007882:	7013      	strb	r3, [r2, #0]
 8007884:	e608      	b.n	8007498 <_dtoa_r+0x698>
 8007886:	9b07      	ldr	r3, [sp, #28]
 8007888:	9a07      	ldr	r2, [sp, #28]
 800788a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800788e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007890:	4293      	cmp	r3, r2
 8007892:	d028      	beq.n	80078e6 <_dtoa_r+0xae6>
 8007894:	4649      	mov	r1, r9
 8007896:	2300      	movs	r3, #0
 8007898:	220a      	movs	r2, #10
 800789a:	4658      	mov	r0, fp
 800789c:	f000 f9d6 	bl	8007c4c <__multadd>
 80078a0:	42af      	cmp	r7, r5
 80078a2:	4681      	mov	r9, r0
 80078a4:	f04f 0300 	mov.w	r3, #0
 80078a8:	f04f 020a 	mov.w	r2, #10
 80078ac:	4639      	mov	r1, r7
 80078ae:	4658      	mov	r0, fp
 80078b0:	d107      	bne.n	80078c2 <_dtoa_r+0xac2>
 80078b2:	f000 f9cb 	bl	8007c4c <__multadd>
 80078b6:	4607      	mov	r7, r0
 80078b8:	4605      	mov	r5, r0
 80078ba:	9b07      	ldr	r3, [sp, #28]
 80078bc:	3301      	adds	r3, #1
 80078be:	9307      	str	r3, [sp, #28]
 80078c0:	e774      	b.n	80077ac <_dtoa_r+0x9ac>
 80078c2:	f000 f9c3 	bl	8007c4c <__multadd>
 80078c6:	4629      	mov	r1, r5
 80078c8:	4607      	mov	r7, r0
 80078ca:	2300      	movs	r3, #0
 80078cc:	220a      	movs	r2, #10
 80078ce:	4658      	mov	r0, fp
 80078d0:	f000 f9bc 	bl	8007c4c <__multadd>
 80078d4:	4605      	mov	r5, r0
 80078d6:	e7f0      	b.n	80078ba <_dtoa_r+0xaba>
 80078d8:	9b00      	ldr	r3, [sp, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	bfcc      	ite	gt
 80078de:	461e      	movgt	r6, r3
 80078e0:	2601      	movle	r6, #1
 80078e2:	4456      	add	r6, sl
 80078e4:	2700      	movs	r7, #0
 80078e6:	4649      	mov	r1, r9
 80078e8:	2201      	movs	r2, #1
 80078ea:	4658      	mov	r0, fp
 80078ec:	f000 fb5a 	bl	8007fa4 <__lshift>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4681      	mov	r9, r0
 80078f4:	f000 fbc2 	bl	800807c <__mcmp>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	dcb0      	bgt.n	800785e <_dtoa_r+0xa5e>
 80078fc:	d102      	bne.n	8007904 <_dtoa_r+0xb04>
 80078fe:	f018 0f01 	tst.w	r8, #1
 8007902:	d1ac      	bne.n	800785e <_dtoa_r+0xa5e>
 8007904:	4633      	mov	r3, r6
 8007906:	461e      	mov	r6, r3
 8007908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800790c:	2a30      	cmp	r2, #48	@ 0x30
 800790e:	d0fa      	beq.n	8007906 <_dtoa_r+0xb06>
 8007910:	e5c2      	b.n	8007498 <_dtoa_r+0x698>
 8007912:	459a      	cmp	sl, r3
 8007914:	d1a4      	bne.n	8007860 <_dtoa_r+0xa60>
 8007916:	9b04      	ldr	r3, [sp, #16]
 8007918:	3301      	adds	r3, #1
 800791a:	9304      	str	r3, [sp, #16]
 800791c:	2331      	movs	r3, #49	@ 0x31
 800791e:	f88a 3000 	strb.w	r3, [sl]
 8007922:	e5b9      	b.n	8007498 <_dtoa_r+0x698>
 8007924:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007926:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007984 <_dtoa_r+0xb84>
 800792a:	b11b      	cbz	r3, 8007934 <_dtoa_r+0xb34>
 800792c:	f10a 0308 	add.w	r3, sl, #8
 8007930:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	4650      	mov	r0, sl
 8007936:	b019      	add	sp, #100	@ 0x64
 8007938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800793e:	2b01      	cmp	r3, #1
 8007940:	f77f ae37 	ble.w	80075b2 <_dtoa_r+0x7b2>
 8007944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007946:	930a      	str	r3, [sp, #40]	@ 0x28
 8007948:	2001      	movs	r0, #1
 800794a:	e655      	b.n	80075f8 <_dtoa_r+0x7f8>
 800794c:	9b00      	ldr	r3, [sp, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	f77f aed6 	ble.w	8007700 <_dtoa_r+0x900>
 8007954:	4656      	mov	r6, sl
 8007956:	4621      	mov	r1, r4
 8007958:	4648      	mov	r0, r9
 800795a:	f7ff f9c6 	bl	8006cea <quorem>
 800795e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007962:	f806 8b01 	strb.w	r8, [r6], #1
 8007966:	9b00      	ldr	r3, [sp, #0]
 8007968:	eba6 020a 	sub.w	r2, r6, sl
 800796c:	4293      	cmp	r3, r2
 800796e:	ddb3      	ble.n	80078d8 <_dtoa_r+0xad8>
 8007970:	4649      	mov	r1, r9
 8007972:	2300      	movs	r3, #0
 8007974:	220a      	movs	r2, #10
 8007976:	4658      	mov	r0, fp
 8007978:	f000 f968 	bl	8007c4c <__multadd>
 800797c:	4681      	mov	r9, r0
 800797e:	e7ea      	b.n	8007956 <_dtoa_r+0xb56>
 8007980:	08008bbc 	.word	0x08008bbc
 8007984:	08008b40 	.word	0x08008b40

08007988 <_free_r>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4605      	mov	r5, r0
 800798c:	2900      	cmp	r1, #0
 800798e:	d041      	beq.n	8007a14 <_free_r+0x8c>
 8007990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007994:	1f0c      	subs	r4, r1, #4
 8007996:	2b00      	cmp	r3, #0
 8007998:	bfb8      	it	lt
 800799a:	18e4      	addlt	r4, r4, r3
 800799c:	f000 f8e8 	bl	8007b70 <__malloc_lock>
 80079a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a18 <_free_r+0x90>)
 80079a2:	6813      	ldr	r3, [r2, #0]
 80079a4:	b933      	cbnz	r3, 80079b4 <_free_r+0x2c>
 80079a6:	6063      	str	r3, [r4, #4]
 80079a8:	6014      	str	r4, [r2, #0]
 80079aa:	4628      	mov	r0, r5
 80079ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079b0:	f000 b8e4 	b.w	8007b7c <__malloc_unlock>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d908      	bls.n	80079ca <_free_r+0x42>
 80079b8:	6820      	ldr	r0, [r4, #0]
 80079ba:	1821      	adds	r1, r4, r0
 80079bc:	428b      	cmp	r3, r1
 80079be:	bf01      	itttt	eq
 80079c0:	6819      	ldreq	r1, [r3, #0]
 80079c2:	685b      	ldreq	r3, [r3, #4]
 80079c4:	1809      	addeq	r1, r1, r0
 80079c6:	6021      	streq	r1, [r4, #0]
 80079c8:	e7ed      	b.n	80079a6 <_free_r+0x1e>
 80079ca:	461a      	mov	r2, r3
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	b10b      	cbz	r3, 80079d4 <_free_r+0x4c>
 80079d0:	42a3      	cmp	r3, r4
 80079d2:	d9fa      	bls.n	80079ca <_free_r+0x42>
 80079d4:	6811      	ldr	r1, [r2, #0]
 80079d6:	1850      	adds	r0, r2, r1
 80079d8:	42a0      	cmp	r0, r4
 80079da:	d10b      	bne.n	80079f4 <_free_r+0x6c>
 80079dc:	6820      	ldr	r0, [r4, #0]
 80079de:	4401      	add	r1, r0
 80079e0:	1850      	adds	r0, r2, r1
 80079e2:	4283      	cmp	r3, r0
 80079e4:	6011      	str	r1, [r2, #0]
 80079e6:	d1e0      	bne.n	80079aa <_free_r+0x22>
 80079e8:	6818      	ldr	r0, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	6053      	str	r3, [r2, #4]
 80079ee:	4408      	add	r0, r1
 80079f0:	6010      	str	r0, [r2, #0]
 80079f2:	e7da      	b.n	80079aa <_free_r+0x22>
 80079f4:	d902      	bls.n	80079fc <_free_r+0x74>
 80079f6:	230c      	movs	r3, #12
 80079f8:	602b      	str	r3, [r5, #0]
 80079fa:	e7d6      	b.n	80079aa <_free_r+0x22>
 80079fc:	6820      	ldr	r0, [r4, #0]
 80079fe:	1821      	adds	r1, r4, r0
 8007a00:	428b      	cmp	r3, r1
 8007a02:	bf04      	itt	eq
 8007a04:	6819      	ldreq	r1, [r3, #0]
 8007a06:	685b      	ldreq	r3, [r3, #4]
 8007a08:	6063      	str	r3, [r4, #4]
 8007a0a:	bf04      	itt	eq
 8007a0c:	1809      	addeq	r1, r1, r0
 8007a0e:	6021      	streq	r1, [r4, #0]
 8007a10:	6054      	str	r4, [r2, #4]
 8007a12:	e7ca      	b.n	80079aa <_free_r+0x22>
 8007a14:	bd38      	pop	{r3, r4, r5, pc}
 8007a16:	bf00      	nop
 8007a18:	20004d84 	.word	0x20004d84

08007a1c <malloc>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	@ (8007a28 <malloc+0xc>)
 8007a1e:	4601      	mov	r1, r0
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	f000 b825 	b.w	8007a70 <_malloc_r>
 8007a26:	bf00      	nop
 8007a28:	2000001c 	.word	0x2000001c

08007a2c <sbrk_aligned>:
 8007a2c:	b570      	push	{r4, r5, r6, lr}
 8007a2e:	4e0f      	ldr	r6, [pc, #60]	@ (8007a6c <sbrk_aligned+0x40>)
 8007a30:	460c      	mov	r4, r1
 8007a32:	6831      	ldr	r1, [r6, #0]
 8007a34:	4605      	mov	r5, r0
 8007a36:	b911      	cbnz	r1, 8007a3e <sbrk_aligned+0x12>
 8007a38:	f000 fcd4 	bl	80083e4 <_sbrk_r>
 8007a3c:	6030      	str	r0, [r6, #0]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f000 fccf 	bl	80083e4 <_sbrk_r>
 8007a46:	1c43      	adds	r3, r0, #1
 8007a48:	d103      	bne.n	8007a52 <sbrk_aligned+0x26>
 8007a4a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a4e:	4620      	mov	r0, r4
 8007a50:	bd70      	pop	{r4, r5, r6, pc}
 8007a52:	1cc4      	adds	r4, r0, #3
 8007a54:	f024 0403 	bic.w	r4, r4, #3
 8007a58:	42a0      	cmp	r0, r4
 8007a5a:	d0f8      	beq.n	8007a4e <sbrk_aligned+0x22>
 8007a5c:	1a21      	subs	r1, r4, r0
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f000 fcc0 	bl	80083e4 <_sbrk_r>
 8007a64:	3001      	adds	r0, #1
 8007a66:	d1f2      	bne.n	8007a4e <sbrk_aligned+0x22>
 8007a68:	e7ef      	b.n	8007a4a <sbrk_aligned+0x1e>
 8007a6a:	bf00      	nop
 8007a6c:	20004d80 	.word	0x20004d80

08007a70 <_malloc_r>:
 8007a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a74:	1ccd      	adds	r5, r1, #3
 8007a76:	f025 0503 	bic.w	r5, r5, #3
 8007a7a:	3508      	adds	r5, #8
 8007a7c:	2d0c      	cmp	r5, #12
 8007a7e:	bf38      	it	cc
 8007a80:	250c      	movcc	r5, #12
 8007a82:	2d00      	cmp	r5, #0
 8007a84:	4606      	mov	r6, r0
 8007a86:	db01      	blt.n	8007a8c <_malloc_r+0x1c>
 8007a88:	42a9      	cmp	r1, r5
 8007a8a:	d904      	bls.n	8007a96 <_malloc_r+0x26>
 8007a8c:	230c      	movs	r3, #12
 8007a8e:	6033      	str	r3, [r6, #0]
 8007a90:	2000      	movs	r0, #0
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b6c <_malloc_r+0xfc>
 8007a9a:	f000 f869 	bl	8007b70 <__malloc_lock>
 8007a9e:	f8d8 3000 	ldr.w	r3, [r8]
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	bb44      	cbnz	r4, 8007af8 <_malloc_r+0x88>
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f7ff ffbf 	bl	8007a2c <sbrk_aligned>
 8007aae:	1c43      	adds	r3, r0, #1
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	d158      	bne.n	8007b66 <_malloc_r+0xf6>
 8007ab4:	f8d8 4000 	ldr.w	r4, [r8]
 8007ab8:	4627      	mov	r7, r4
 8007aba:	2f00      	cmp	r7, #0
 8007abc:	d143      	bne.n	8007b46 <_malloc_r+0xd6>
 8007abe:	2c00      	cmp	r4, #0
 8007ac0:	d04b      	beq.n	8007b5a <_malloc_r+0xea>
 8007ac2:	6823      	ldr	r3, [r4, #0]
 8007ac4:	4639      	mov	r1, r7
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	eb04 0903 	add.w	r9, r4, r3
 8007acc:	f000 fc8a 	bl	80083e4 <_sbrk_r>
 8007ad0:	4581      	cmp	r9, r0
 8007ad2:	d142      	bne.n	8007b5a <_malloc_r+0xea>
 8007ad4:	6821      	ldr	r1, [r4, #0]
 8007ad6:	1a6d      	subs	r5, r5, r1
 8007ad8:	4629      	mov	r1, r5
 8007ada:	4630      	mov	r0, r6
 8007adc:	f7ff ffa6 	bl	8007a2c <sbrk_aligned>
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d03a      	beq.n	8007b5a <_malloc_r+0xea>
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	442b      	add	r3, r5
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	f8d8 3000 	ldr.w	r3, [r8]
 8007aee:	685a      	ldr	r2, [r3, #4]
 8007af0:	bb62      	cbnz	r2, 8007b4c <_malloc_r+0xdc>
 8007af2:	f8c8 7000 	str.w	r7, [r8]
 8007af6:	e00f      	b.n	8007b18 <_malloc_r+0xa8>
 8007af8:	6822      	ldr	r2, [r4, #0]
 8007afa:	1b52      	subs	r2, r2, r5
 8007afc:	d420      	bmi.n	8007b40 <_malloc_r+0xd0>
 8007afe:	2a0b      	cmp	r2, #11
 8007b00:	d917      	bls.n	8007b32 <_malloc_r+0xc2>
 8007b02:	1961      	adds	r1, r4, r5
 8007b04:	42a3      	cmp	r3, r4
 8007b06:	6025      	str	r5, [r4, #0]
 8007b08:	bf18      	it	ne
 8007b0a:	6059      	strne	r1, [r3, #4]
 8007b0c:	6863      	ldr	r3, [r4, #4]
 8007b0e:	bf08      	it	eq
 8007b10:	f8c8 1000 	streq.w	r1, [r8]
 8007b14:	5162      	str	r2, [r4, r5]
 8007b16:	604b      	str	r3, [r1, #4]
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 f82f 	bl	8007b7c <__malloc_unlock>
 8007b1e:	f104 000b 	add.w	r0, r4, #11
 8007b22:	1d23      	adds	r3, r4, #4
 8007b24:	f020 0007 	bic.w	r0, r0, #7
 8007b28:	1ac2      	subs	r2, r0, r3
 8007b2a:	bf1c      	itt	ne
 8007b2c:	1a1b      	subne	r3, r3, r0
 8007b2e:	50a3      	strne	r3, [r4, r2]
 8007b30:	e7af      	b.n	8007a92 <_malloc_r+0x22>
 8007b32:	6862      	ldr	r2, [r4, #4]
 8007b34:	42a3      	cmp	r3, r4
 8007b36:	bf0c      	ite	eq
 8007b38:	f8c8 2000 	streq.w	r2, [r8]
 8007b3c:	605a      	strne	r2, [r3, #4]
 8007b3e:	e7eb      	b.n	8007b18 <_malloc_r+0xa8>
 8007b40:	4623      	mov	r3, r4
 8007b42:	6864      	ldr	r4, [r4, #4]
 8007b44:	e7ae      	b.n	8007aa4 <_malloc_r+0x34>
 8007b46:	463c      	mov	r4, r7
 8007b48:	687f      	ldr	r7, [r7, #4]
 8007b4a:	e7b6      	b.n	8007aba <_malloc_r+0x4a>
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	d1fb      	bne.n	8007b4c <_malloc_r+0xdc>
 8007b54:	2300      	movs	r3, #0
 8007b56:	6053      	str	r3, [r2, #4]
 8007b58:	e7de      	b.n	8007b18 <_malloc_r+0xa8>
 8007b5a:	230c      	movs	r3, #12
 8007b5c:	6033      	str	r3, [r6, #0]
 8007b5e:	4630      	mov	r0, r6
 8007b60:	f000 f80c 	bl	8007b7c <__malloc_unlock>
 8007b64:	e794      	b.n	8007a90 <_malloc_r+0x20>
 8007b66:	6005      	str	r5, [r0, #0]
 8007b68:	e7d6      	b.n	8007b18 <_malloc_r+0xa8>
 8007b6a:	bf00      	nop
 8007b6c:	20004d84 	.word	0x20004d84

08007b70 <__malloc_lock>:
 8007b70:	4801      	ldr	r0, [pc, #4]	@ (8007b78 <__malloc_lock+0x8>)
 8007b72:	f7ff b8aa 	b.w	8006cca <__retarget_lock_acquire_recursive>
 8007b76:	bf00      	nop
 8007b78:	20004d7c 	.word	0x20004d7c

08007b7c <__malloc_unlock>:
 8007b7c:	4801      	ldr	r0, [pc, #4]	@ (8007b84 <__malloc_unlock+0x8>)
 8007b7e:	f7ff b8a5 	b.w	8006ccc <__retarget_lock_release_recursive>
 8007b82:	bf00      	nop
 8007b84:	20004d7c 	.word	0x20004d7c

08007b88 <_Balloc>:
 8007b88:	b570      	push	{r4, r5, r6, lr}
 8007b8a:	69c6      	ldr	r6, [r0, #28]
 8007b8c:	4604      	mov	r4, r0
 8007b8e:	460d      	mov	r5, r1
 8007b90:	b976      	cbnz	r6, 8007bb0 <_Balloc+0x28>
 8007b92:	2010      	movs	r0, #16
 8007b94:	f7ff ff42 	bl	8007a1c <malloc>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	61e0      	str	r0, [r4, #28]
 8007b9c:	b920      	cbnz	r0, 8007ba8 <_Balloc+0x20>
 8007b9e:	4b18      	ldr	r3, [pc, #96]	@ (8007c00 <_Balloc+0x78>)
 8007ba0:	4818      	ldr	r0, [pc, #96]	@ (8007c04 <_Balloc+0x7c>)
 8007ba2:	216b      	movs	r1, #107	@ 0x6b
 8007ba4:	f000 fc2e 	bl	8008404 <__assert_func>
 8007ba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bac:	6006      	str	r6, [r0, #0]
 8007bae:	60c6      	str	r6, [r0, #12]
 8007bb0:	69e6      	ldr	r6, [r4, #28]
 8007bb2:	68f3      	ldr	r3, [r6, #12]
 8007bb4:	b183      	cbz	r3, 8007bd8 <_Balloc+0x50>
 8007bb6:	69e3      	ldr	r3, [r4, #28]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007bbe:	b9b8      	cbnz	r0, 8007bf0 <_Balloc+0x68>
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f605 	lsl.w	r6, r1, r5
 8007bc6:	1d72      	adds	r2, r6, #5
 8007bc8:	0092      	lsls	r2, r2, #2
 8007bca:	4620      	mov	r0, r4
 8007bcc:	f000 fc38 	bl	8008440 <_calloc_r>
 8007bd0:	b160      	cbz	r0, 8007bec <_Balloc+0x64>
 8007bd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007bd6:	e00e      	b.n	8007bf6 <_Balloc+0x6e>
 8007bd8:	2221      	movs	r2, #33	@ 0x21
 8007bda:	2104      	movs	r1, #4
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 fc2f 	bl	8008440 <_calloc_r>
 8007be2:	69e3      	ldr	r3, [r4, #28]
 8007be4:	60f0      	str	r0, [r6, #12]
 8007be6:	68db      	ldr	r3, [r3, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e4      	bne.n	8007bb6 <_Balloc+0x2e>
 8007bec:	2000      	movs	r0, #0
 8007bee:	bd70      	pop	{r4, r5, r6, pc}
 8007bf0:	6802      	ldr	r2, [r0, #0]
 8007bf2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007bfc:	e7f7      	b.n	8007bee <_Balloc+0x66>
 8007bfe:	bf00      	nop
 8007c00:	08008b4d 	.word	0x08008b4d
 8007c04:	08008bcd 	.word	0x08008bcd

08007c08 <_Bfree>:
 8007c08:	b570      	push	{r4, r5, r6, lr}
 8007c0a:	69c6      	ldr	r6, [r0, #28]
 8007c0c:	4605      	mov	r5, r0
 8007c0e:	460c      	mov	r4, r1
 8007c10:	b976      	cbnz	r6, 8007c30 <_Bfree+0x28>
 8007c12:	2010      	movs	r0, #16
 8007c14:	f7ff ff02 	bl	8007a1c <malloc>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	61e8      	str	r0, [r5, #28]
 8007c1c:	b920      	cbnz	r0, 8007c28 <_Bfree+0x20>
 8007c1e:	4b09      	ldr	r3, [pc, #36]	@ (8007c44 <_Bfree+0x3c>)
 8007c20:	4809      	ldr	r0, [pc, #36]	@ (8007c48 <_Bfree+0x40>)
 8007c22:	218f      	movs	r1, #143	@ 0x8f
 8007c24:	f000 fbee 	bl	8008404 <__assert_func>
 8007c28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c2c:	6006      	str	r6, [r0, #0]
 8007c2e:	60c6      	str	r6, [r0, #12]
 8007c30:	b13c      	cbz	r4, 8007c42 <_Bfree+0x3a>
 8007c32:	69eb      	ldr	r3, [r5, #28]
 8007c34:	6862      	ldr	r2, [r4, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c3c:	6021      	str	r1, [r4, #0]
 8007c3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c42:	bd70      	pop	{r4, r5, r6, pc}
 8007c44:	08008b4d 	.word	0x08008b4d
 8007c48:	08008bcd 	.word	0x08008bcd

08007c4c <__multadd>:
 8007c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c50:	690d      	ldr	r5, [r1, #16]
 8007c52:	4607      	mov	r7, r0
 8007c54:	460c      	mov	r4, r1
 8007c56:	461e      	mov	r6, r3
 8007c58:	f101 0c14 	add.w	ip, r1, #20
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007c62:	b299      	uxth	r1, r3
 8007c64:	fb02 6101 	mla	r1, r2, r1, r6
 8007c68:	0c1e      	lsrs	r6, r3, #16
 8007c6a:	0c0b      	lsrs	r3, r1, #16
 8007c6c:	fb02 3306 	mla	r3, r2, r6, r3
 8007c70:	b289      	uxth	r1, r1
 8007c72:	3001      	adds	r0, #1
 8007c74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007c78:	4285      	cmp	r5, r0
 8007c7a:	f84c 1b04 	str.w	r1, [ip], #4
 8007c7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007c82:	dcec      	bgt.n	8007c5e <__multadd+0x12>
 8007c84:	b30e      	cbz	r6, 8007cca <__multadd+0x7e>
 8007c86:	68a3      	ldr	r3, [r4, #8]
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	dc19      	bgt.n	8007cc0 <__multadd+0x74>
 8007c8c:	6861      	ldr	r1, [r4, #4]
 8007c8e:	4638      	mov	r0, r7
 8007c90:	3101      	adds	r1, #1
 8007c92:	f7ff ff79 	bl	8007b88 <_Balloc>
 8007c96:	4680      	mov	r8, r0
 8007c98:	b928      	cbnz	r0, 8007ca6 <__multadd+0x5a>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007cd0 <__multadd+0x84>)
 8007c9e:	480d      	ldr	r0, [pc, #52]	@ (8007cd4 <__multadd+0x88>)
 8007ca0:	21ba      	movs	r1, #186	@ 0xba
 8007ca2:	f000 fbaf 	bl	8008404 <__assert_func>
 8007ca6:	6922      	ldr	r2, [r4, #16]
 8007ca8:	3202      	adds	r2, #2
 8007caa:	f104 010c 	add.w	r1, r4, #12
 8007cae:	0092      	lsls	r2, r2, #2
 8007cb0:	300c      	adds	r0, #12
 8007cb2:	f7ff f80c 	bl	8006cce <memcpy>
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4638      	mov	r0, r7
 8007cba:	f7ff ffa5 	bl	8007c08 <_Bfree>
 8007cbe:	4644      	mov	r4, r8
 8007cc0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007cc4:	3501      	adds	r5, #1
 8007cc6:	615e      	str	r6, [r3, #20]
 8007cc8:	6125      	str	r5, [r4, #16]
 8007cca:	4620      	mov	r0, r4
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	08008bbc 	.word	0x08008bbc
 8007cd4:	08008bcd 	.word	0x08008bcd

08007cd8 <__hi0bits>:
 8007cd8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007cdc:	4603      	mov	r3, r0
 8007cde:	bf36      	itet	cc
 8007ce0:	0403      	lslcc	r3, r0, #16
 8007ce2:	2000      	movcs	r0, #0
 8007ce4:	2010      	movcc	r0, #16
 8007ce6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cea:	bf3c      	itt	cc
 8007cec:	021b      	lslcc	r3, r3, #8
 8007cee:	3008      	addcc	r0, #8
 8007cf0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cf4:	bf3c      	itt	cc
 8007cf6:	011b      	lslcc	r3, r3, #4
 8007cf8:	3004      	addcc	r0, #4
 8007cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cfe:	bf3c      	itt	cc
 8007d00:	009b      	lslcc	r3, r3, #2
 8007d02:	3002      	addcc	r0, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	db05      	blt.n	8007d14 <__hi0bits+0x3c>
 8007d08:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007d0c:	f100 0001 	add.w	r0, r0, #1
 8007d10:	bf08      	it	eq
 8007d12:	2020      	moveq	r0, #32
 8007d14:	4770      	bx	lr

08007d16 <__lo0bits>:
 8007d16:	6803      	ldr	r3, [r0, #0]
 8007d18:	4602      	mov	r2, r0
 8007d1a:	f013 0007 	ands.w	r0, r3, #7
 8007d1e:	d00b      	beq.n	8007d38 <__lo0bits+0x22>
 8007d20:	07d9      	lsls	r1, r3, #31
 8007d22:	d421      	bmi.n	8007d68 <__lo0bits+0x52>
 8007d24:	0798      	lsls	r0, r3, #30
 8007d26:	bf49      	itett	mi
 8007d28:	085b      	lsrmi	r3, r3, #1
 8007d2a:	089b      	lsrpl	r3, r3, #2
 8007d2c:	2001      	movmi	r0, #1
 8007d2e:	6013      	strmi	r3, [r2, #0]
 8007d30:	bf5c      	itt	pl
 8007d32:	6013      	strpl	r3, [r2, #0]
 8007d34:	2002      	movpl	r0, #2
 8007d36:	4770      	bx	lr
 8007d38:	b299      	uxth	r1, r3
 8007d3a:	b909      	cbnz	r1, 8007d40 <__lo0bits+0x2a>
 8007d3c:	0c1b      	lsrs	r3, r3, #16
 8007d3e:	2010      	movs	r0, #16
 8007d40:	b2d9      	uxtb	r1, r3
 8007d42:	b909      	cbnz	r1, 8007d48 <__lo0bits+0x32>
 8007d44:	3008      	adds	r0, #8
 8007d46:	0a1b      	lsrs	r3, r3, #8
 8007d48:	0719      	lsls	r1, r3, #28
 8007d4a:	bf04      	itt	eq
 8007d4c:	091b      	lsreq	r3, r3, #4
 8007d4e:	3004      	addeq	r0, #4
 8007d50:	0799      	lsls	r1, r3, #30
 8007d52:	bf04      	itt	eq
 8007d54:	089b      	lsreq	r3, r3, #2
 8007d56:	3002      	addeq	r0, #2
 8007d58:	07d9      	lsls	r1, r3, #31
 8007d5a:	d403      	bmi.n	8007d64 <__lo0bits+0x4e>
 8007d5c:	085b      	lsrs	r3, r3, #1
 8007d5e:	f100 0001 	add.w	r0, r0, #1
 8007d62:	d003      	beq.n	8007d6c <__lo0bits+0x56>
 8007d64:	6013      	str	r3, [r2, #0]
 8007d66:	4770      	bx	lr
 8007d68:	2000      	movs	r0, #0
 8007d6a:	4770      	bx	lr
 8007d6c:	2020      	movs	r0, #32
 8007d6e:	4770      	bx	lr

08007d70 <__i2b>:
 8007d70:	b510      	push	{r4, lr}
 8007d72:	460c      	mov	r4, r1
 8007d74:	2101      	movs	r1, #1
 8007d76:	f7ff ff07 	bl	8007b88 <_Balloc>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	b928      	cbnz	r0, 8007d8a <__i2b+0x1a>
 8007d7e:	4b05      	ldr	r3, [pc, #20]	@ (8007d94 <__i2b+0x24>)
 8007d80:	4805      	ldr	r0, [pc, #20]	@ (8007d98 <__i2b+0x28>)
 8007d82:	f240 1145 	movw	r1, #325	@ 0x145
 8007d86:	f000 fb3d 	bl	8008404 <__assert_func>
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	6144      	str	r4, [r0, #20]
 8007d8e:	6103      	str	r3, [r0, #16]
 8007d90:	bd10      	pop	{r4, pc}
 8007d92:	bf00      	nop
 8007d94:	08008bbc 	.word	0x08008bbc
 8007d98:	08008bcd 	.word	0x08008bcd

08007d9c <__multiply>:
 8007d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	4614      	mov	r4, r2
 8007da2:	690a      	ldr	r2, [r1, #16]
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	bfa8      	it	ge
 8007daa:	4623      	movge	r3, r4
 8007dac:	460f      	mov	r7, r1
 8007dae:	bfa4      	itt	ge
 8007db0:	460c      	movge	r4, r1
 8007db2:	461f      	movge	r7, r3
 8007db4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007db8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007dbc:	68a3      	ldr	r3, [r4, #8]
 8007dbe:	6861      	ldr	r1, [r4, #4]
 8007dc0:	eb0a 0609 	add.w	r6, sl, r9
 8007dc4:	42b3      	cmp	r3, r6
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	bfb8      	it	lt
 8007dca:	3101      	addlt	r1, #1
 8007dcc:	f7ff fedc 	bl	8007b88 <_Balloc>
 8007dd0:	b930      	cbnz	r0, 8007de0 <__multiply+0x44>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	4b44      	ldr	r3, [pc, #272]	@ (8007ee8 <__multiply+0x14c>)
 8007dd6:	4845      	ldr	r0, [pc, #276]	@ (8007eec <__multiply+0x150>)
 8007dd8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ddc:	f000 fb12 	bl	8008404 <__assert_func>
 8007de0:	f100 0514 	add.w	r5, r0, #20
 8007de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007de8:	462b      	mov	r3, r5
 8007dea:	2200      	movs	r2, #0
 8007dec:	4543      	cmp	r3, r8
 8007dee:	d321      	bcc.n	8007e34 <__multiply+0x98>
 8007df0:	f107 0114 	add.w	r1, r7, #20
 8007df4:	f104 0214 	add.w	r2, r4, #20
 8007df8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007dfc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007e00:	9302      	str	r3, [sp, #8]
 8007e02:	1b13      	subs	r3, r2, r4
 8007e04:	3b15      	subs	r3, #21
 8007e06:	f023 0303 	bic.w	r3, r3, #3
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	f104 0715 	add.w	r7, r4, #21
 8007e10:	42ba      	cmp	r2, r7
 8007e12:	bf38      	it	cc
 8007e14:	2304      	movcc	r3, #4
 8007e16:	9301      	str	r3, [sp, #4]
 8007e18:	9b02      	ldr	r3, [sp, #8]
 8007e1a:	9103      	str	r1, [sp, #12]
 8007e1c:	428b      	cmp	r3, r1
 8007e1e:	d80c      	bhi.n	8007e3a <__multiply+0x9e>
 8007e20:	2e00      	cmp	r6, #0
 8007e22:	dd03      	ble.n	8007e2c <__multiply+0x90>
 8007e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d05b      	beq.n	8007ee4 <__multiply+0x148>
 8007e2c:	6106      	str	r6, [r0, #16]
 8007e2e:	b005      	add	sp, #20
 8007e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e34:	f843 2b04 	str.w	r2, [r3], #4
 8007e38:	e7d8      	b.n	8007dec <__multiply+0x50>
 8007e3a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007e3e:	f1ba 0f00 	cmp.w	sl, #0
 8007e42:	d024      	beq.n	8007e8e <__multiply+0xf2>
 8007e44:	f104 0e14 	add.w	lr, r4, #20
 8007e48:	46a9      	mov	r9, r5
 8007e4a:	f04f 0c00 	mov.w	ip, #0
 8007e4e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e52:	f8d9 3000 	ldr.w	r3, [r9]
 8007e56:	fa1f fb87 	uxth.w	fp, r7
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007e60:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007e64:	f8d9 7000 	ldr.w	r7, [r9]
 8007e68:	4463      	add	r3, ip
 8007e6a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e6e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007e72:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007e76:	b29b      	uxth	r3, r3
 8007e78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007e7c:	4572      	cmp	r2, lr
 8007e7e:	f849 3b04 	str.w	r3, [r9], #4
 8007e82:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007e86:	d8e2      	bhi.n	8007e4e <__multiply+0xb2>
 8007e88:	9b01      	ldr	r3, [sp, #4]
 8007e8a:	f845 c003 	str.w	ip, [r5, r3]
 8007e8e:	9b03      	ldr	r3, [sp, #12]
 8007e90:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007e94:	3104      	adds	r1, #4
 8007e96:	f1b9 0f00 	cmp.w	r9, #0
 8007e9a:	d021      	beq.n	8007ee0 <__multiply+0x144>
 8007e9c:	682b      	ldr	r3, [r5, #0]
 8007e9e:	f104 0c14 	add.w	ip, r4, #20
 8007ea2:	46ae      	mov	lr, r5
 8007ea4:	f04f 0a00 	mov.w	sl, #0
 8007ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8007eac:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007eb0:	fb09 770b 	mla	r7, r9, fp, r7
 8007eb4:	4457      	add	r7, sl
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007ebc:	f84e 3b04 	str.w	r3, [lr], #4
 8007ec0:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007ec4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007ec8:	f8be 3000 	ldrh.w	r3, [lr]
 8007ecc:	fb09 330a 	mla	r3, r9, sl, r3
 8007ed0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007ed4:	4562      	cmp	r2, ip
 8007ed6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007eda:	d8e5      	bhi.n	8007ea8 <__multiply+0x10c>
 8007edc:	9f01      	ldr	r7, [sp, #4]
 8007ede:	51eb      	str	r3, [r5, r7]
 8007ee0:	3504      	adds	r5, #4
 8007ee2:	e799      	b.n	8007e18 <__multiply+0x7c>
 8007ee4:	3e01      	subs	r6, #1
 8007ee6:	e79b      	b.n	8007e20 <__multiply+0x84>
 8007ee8:	08008bbc 	.word	0x08008bbc
 8007eec:	08008bcd 	.word	0x08008bcd

08007ef0 <__pow5mult>:
 8007ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ef4:	4615      	mov	r5, r2
 8007ef6:	f012 0203 	ands.w	r2, r2, #3
 8007efa:	4607      	mov	r7, r0
 8007efc:	460e      	mov	r6, r1
 8007efe:	d007      	beq.n	8007f10 <__pow5mult+0x20>
 8007f00:	4c25      	ldr	r4, [pc, #148]	@ (8007f98 <__pow5mult+0xa8>)
 8007f02:	3a01      	subs	r2, #1
 8007f04:	2300      	movs	r3, #0
 8007f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007f0a:	f7ff fe9f 	bl	8007c4c <__multadd>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	10ad      	asrs	r5, r5, #2
 8007f12:	d03d      	beq.n	8007f90 <__pow5mult+0xa0>
 8007f14:	69fc      	ldr	r4, [r7, #28]
 8007f16:	b97c      	cbnz	r4, 8007f38 <__pow5mult+0x48>
 8007f18:	2010      	movs	r0, #16
 8007f1a:	f7ff fd7f 	bl	8007a1c <malloc>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	61f8      	str	r0, [r7, #28]
 8007f22:	b928      	cbnz	r0, 8007f30 <__pow5mult+0x40>
 8007f24:	4b1d      	ldr	r3, [pc, #116]	@ (8007f9c <__pow5mult+0xac>)
 8007f26:	481e      	ldr	r0, [pc, #120]	@ (8007fa0 <__pow5mult+0xb0>)
 8007f28:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007f2c:	f000 fa6a 	bl	8008404 <__assert_func>
 8007f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f34:	6004      	str	r4, [r0, #0]
 8007f36:	60c4      	str	r4, [r0, #12]
 8007f38:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007f40:	b94c      	cbnz	r4, 8007f56 <__pow5mult+0x66>
 8007f42:	f240 2171 	movw	r1, #625	@ 0x271
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7ff ff12 	bl	8007d70 <__i2b>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f52:	4604      	mov	r4, r0
 8007f54:	6003      	str	r3, [r0, #0]
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	07eb      	lsls	r3, r5, #31
 8007f5c:	d50a      	bpl.n	8007f74 <__pow5mult+0x84>
 8007f5e:	4631      	mov	r1, r6
 8007f60:	4622      	mov	r2, r4
 8007f62:	4638      	mov	r0, r7
 8007f64:	f7ff ff1a 	bl	8007d9c <__multiply>
 8007f68:	4631      	mov	r1, r6
 8007f6a:	4680      	mov	r8, r0
 8007f6c:	4638      	mov	r0, r7
 8007f6e:	f7ff fe4b 	bl	8007c08 <_Bfree>
 8007f72:	4646      	mov	r6, r8
 8007f74:	106d      	asrs	r5, r5, #1
 8007f76:	d00b      	beq.n	8007f90 <__pow5mult+0xa0>
 8007f78:	6820      	ldr	r0, [r4, #0]
 8007f7a:	b938      	cbnz	r0, 8007f8c <__pow5mult+0x9c>
 8007f7c:	4622      	mov	r2, r4
 8007f7e:	4621      	mov	r1, r4
 8007f80:	4638      	mov	r0, r7
 8007f82:	f7ff ff0b 	bl	8007d9c <__multiply>
 8007f86:	6020      	str	r0, [r4, #0]
 8007f88:	f8c0 9000 	str.w	r9, [r0]
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	e7e4      	b.n	8007f5a <__pow5mult+0x6a>
 8007f90:	4630      	mov	r0, r6
 8007f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f96:	bf00      	nop
 8007f98:	08008c28 	.word	0x08008c28
 8007f9c:	08008b4d 	.word	0x08008b4d
 8007fa0:	08008bcd 	.word	0x08008bcd

08007fa4 <__lshift>:
 8007fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa8:	460c      	mov	r4, r1
 8007faa:	6849      	ldr	r1, [r1, #4]
 8007fac:	6923      	ldr	r3, [r4, #16]
 8007fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007fb2:	68a3      	ldr	r3, [r4, #8]
 8007fb4:	4607      	mov	r7, r0
 8007fb6:	4691      	mov	r9, r2
 8007fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007fbc:	f108 0601 	add.w	r6, r8, #1
 8007fc0:	42b3      	cmp	r3, r6
 8007fc2:	db0b      	blt.n	8007fdc <__lshift+0x38>
 8007fc4:	4638      	mov	r0, r7
 8007fc6:	f7ff fddf 	bl	8007b88 <_Balloc>
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b948      	cbnz	r0, 8007fe2 <__lshift+0x3e>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <__lshift+0xd0>)
 8007fd2:	4829      	ldr	r0, [pc, #164]	@ (8008078 <__lshift+0xd4>)
 8007fd4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007fd8:	f000 fa14 	bl	8008404 <__assert_func>
 8007fdc:	3101      	adds	r1, #1
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	e7ee      	b.n	8007fc0 <__lshift+0x1c>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f100 0114 	add.w	r1, r0, #20
 8007fe8:	f100 0210 	add.w	r2, r0, #16
 8007fec:	4618      	mov	r0, r3
 8007fee:	4553      	cmp	r3, sl
 8007ff0:	db33      	blt.n	800805a <__lshift+0xb6>
 8007ff2:	6920      	ldr	r0, [r4, #16]
 8007ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ff8:	f104 0314 	add.w	r3, r4, #20
 8007ffc:	f019 091f 	ands.w	r9, r9, #31
 8008000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008004:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008008:	d02b      	beq.n	8008062 <__lshift+0xbe>
 800800a:	f1c9 0e20 	rsb	lr, r9, #32
 800800e:	468a      	mov	sl, r1
 8008010:	2200      	movs	r2, #0
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	fa00 f009 	lsl.w	r0, r0, r9
 8008018:	4310      	orrs	r0, r2
 800801a:	f84a 0b04 	str.w	r0, [sl], #4
 800801e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008022:	459c      	cmp	ip, r3
 8008024:	fa22 f20e 	lsr.w	r2, r2, lr
 8008028:	d8f3      	bhi.n	8008012 <__lshift+0x6e>
 800802a:	ebac 0304 	sub.w	r3, ip, r4
 800802e:	3b15      	subs	r3, #21
 8008030:	f023 0303 	bic.w	r3, r3, #3
 8008034:	3304      	adds	r3, #4
 8008036:	f104 0015 	add.w	r0, r4, #21
 800803a:	4584      	cmp	ip, r0
 800803c:	bf38      	it	cc
 800803e:	2304      	movcc	r3, #4
 8008040:	50ca      	str	r2, [r1, r3]
 8008042:	b10a      	cbz	r2, 8008048 <__lshift+0xa4>
 8008044:	f108 0602 	add.w	r6, r8, #2
 8008048:	3e01      	subs	r6, #1
 800804a:	4638      	mov	r0, r7
 800804c:	612e      	str	r6, [r5, #16]
 800804e:	4621      	mov	r1, r4
 8008050:	f7ff fdda 	bl	8007c08 <_Bfree>
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	f842 0f04 	str.w	r0, [r2, #4]!
 800805e:	3301      	adds	r3, #1
 8008060:	e7c5      	b.n	8007fee <__lshift+0x4a>
 8008062:	3904      	subs	r1, #4
 8008064:	f853 2b04 	ldr.w	r2, [r3], #4
 8008068:	f841 2f04 	str.w	r2, [r1, #4]!
 800806c:	459c      	cmp	ip, r3
 800806e:	d8f9      	bhi.n	8008064 <__lshift+0xc0>
 8008070:	e7ea      	b.n	8008048 <__lshift+0xa4>
 8008072:	bf00      	nop
 8008074:	08008bbc 	.word	0x08008bbc
 8008078:	08008bcd 	.word	0x08008bcd

0800807c <__mcmp>:
 800807c:	690a      	ldr	r2, [r1, #16]
 800807e:	4603      	mov	r3, r0
 8008080:	6900      	ldr	r0, [r0, #16]
 8008082:	1a80      	subs	r0, r0, r2
 8008084:	b530      	push	{r4, r5, lr}
 8008086:	d10e      	bne.n	80080a6 <__mcmp+0x2a>
 8008088:	3314      	adds	r3, #20
 800808a:	3114      	adds	r1, #20
 800808c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008090:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008094:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008098:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800809c:	4295      	cmp	r5, r2
 800809e:	d003      	beq.n	80080a8 <__mcmp+0x2c>
 80080a0:	d205      	bcs.n	80080ae <__mcmp+0x32>
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295
 80080a6:	bd30      	pop	{r4, r5, pc}
 80080a8:	42a3      	cmp	r3, r4
 80080aa:	d3f3      	bcc.n	8008094 <__mcmp+0x18>
 80080ac:	e7fb      	b.n	80080a6 <__mcmp+0x2a>
 80080ae:	2001      	movs	r0, #1
 80080b0:	e7f9      	b.n	80080a6 <__mcmp+0x2a>
	...

080080b4 <__mdiff>:
 80080b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	4689      	mov	r9, r1
 80080ba:	4606      	mov	r6, r0
 80080bc:	4611      	mov	r1, r2
 80080be:	4648      	mov	r0, r9
 80080c0:	4614      	mov	r4, r2
 80080c2:	f7ff ffdb 	bl	800807c <__mcmp>
 80080c6:	1e05      	subs	r5, r0, #0
 80080c8:	d112      	bne.n	80080f0 <__mdiff+0x3c>
 80080ca:	4629      	mov	r1, r5
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff fd5b 	bl	8007b88 <_Balloc>
 80080d2:	4602      	mov	r2, r0
 80080d4:	b928      	cbnz	r0, 80080e2 <__mdiff+0x2e>
 80080d6:	4b3f      	ldr	r3, [pc, #252]	@ (80081d4 <__mdiff+0x120>)
 80080d8:	f240 2137 	movw	r1, #567	@ 0x237
 80080dc:	483e      	ldr	r0, [pc, #248]	@ (80081d8 <__mdiff+0x124>)
 80080de:	f000 f991 	bl	8008404 <__assert_func>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080e8:	4610      	mov	r0, r2
 80080ea:	b003      	add	sp, #12
 80080ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080f0:	bfbc      	itt	lt
 80080f2:	464b      	movlt	r3, r9
 80080f4:	46a1      	movlt	r9, r4
 80080f6:	4630      	mov	r0, r6
 80080f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80080fc:	bfba      	itte	lt
 80080fe:	461c      	movlt	r4, r3
 8008100:	2501      	movlt	r5, #1
 8008102:	2500      	movge	r5, #0
 8008104:	f7ff fd40 	bl	8007b88 <_Balloc>
 8008108:	4602      	mov	r2, r0
 800810a:	b918      	cbnz	r0, 8008114 <__mdiff+0x60>
 800810c:	4b31      	ldr	r3, [pc, #196]	@ (80081d4 <__mdiff+0x120>)
 800810e:	f240 2145 	movw	r1, #581	@ 0x245
 8008112:	e7e3      	b.n	80080dc <__mdiff+0x28>
 8008114:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008118:	6926      	ldr	r6, [r4, #16]
 800811a:	60c5      	str	r5, [r0, #12]
 800811c:	f109 0310 	add.w	r3, r9, #16
 8008120:	f109 0514 	add.w	r5, r9, #20
 8008124:	f104 0e14 	add.w	lr, r4, #20
 8008128:	f100 0b14 	add.w	fp, r0, #20
 800812c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008130:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	46d9      	mov	r9, fp
 8008138:	f04f 0c00 	mov.w	ip, #0
 800813c:	9b01      	ldr	r3, [sp, #4]
 800813e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008142:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008146:	9301      	str	r3, [sp, #4]
 8008148:	fa1f f38a 	uxth.w	r3, sl
 800814c:	4619      	mov	r1, r3
 800814e:	b283      	uxth	r3, r0
 8008150:	1acb      	subs	r3, r1, r3
 8008152:	0c00      	lsrs	r0, r0, #16
 8008154:	4463      	add	r3, ip
 8008156:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800815a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008164:	4576      	cmp	r6, lr
 8008166:	f849 3b04 	str.w	r3, [r9], #4
 800816a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800816e:	d8e5      	bhi.n	800813c <__mdiff+0x88>
 8008170:	1b33      	subs	r3, r6, r4
 8008172:	3b15      	subs	r3, #21
 8008174:	f023 0303 	bic.w	r3, r3, #3
 8008178:	3415      	adds	r4, #21
 800817a:	3304      	adds	r3, #4
 800817c:	42a6      	cmp	r6, r4
 800817e:	bf38      	it	cc
 8008180:	2304      	movcc	r3, #4
 8008182:	441d      	add	r5, r3
 8008184:	445b      	add	r3, fp
 8008186:	461e      	mov	r6, r3
 8008188:	462c      	mov	r4, r5
 800818a:	4544      	cmp	r4, r8
 800818c:	d30e      	bcc.n	80081ac <__mdiff+0xf8>
 800818e:	f108 0103 	add.w	r1, r8, #3
 8008192:	1b49      	subs	r1, r1, r5
 8008194:	f021 0103 	bic.w	r1, r1, #3
 8008198:	3d03      	subs	r5, #3
 800819a:	45a8      	cmp	r8, r5
 800819c:	bf38      	it	cc
 800819e:	2100      	movcc	r1, #0
 80081a0:	440b      	add	r3, r1
 80081a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80081a6:	b191      	cbz	r1, 80081ce <__mdiff+0x11a>
 80081a8:	6117      	str	r7, [r2, #16]
 80081aa:	e79d      	b.n	80080e8 <__mdiff+0x34>
 80081ac:	f854 1b04 	ldr.w	r1, [r4], #4
 80081b0:	46e6      	mov	lr, ip
 80081b2:	0c08      	lsrs	r0, r1, #16
 80081b4:	fa1c fc81 	uxtah	ip, ip, r1
 80081b8:	4471      	add	r1, lr
 80081ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80081be:	b289      	uxth	r1, r1
 80081c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80081c4:	f846 1b04 	str.w	r1, [r6], #4
 80081c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80081cc:	e7dd      	b.n	800818a <__mdiff+0xd6>
 80081ce:	3f01      	subs	r7, #1
 80081d0:	e7e7      	b.n	80081a2 <__mdiff+0xee>
 80081d2:	bf00      	nop
 80081d4:	08008bbc 	.word	0x08008bbc
 80081d8:	08008bcd 	.word	0x08008bcd

080081dc <__d2b>:
 80081dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80081e0:	460f      	mov	r7, r1
 80081e2:	2101      	movs	r1, #1
 80081e4:	ec59 8b10 	vmov	r8, r9, d0
 80081e8:	4616      	mov	r6, r2
 80081ea:	f7ff fccd 	bl	8007b88 <_Balloc>
 80081ee:	4604      	mov	r4, r0
 80081f0:	b930      	cbnz	r0, 8008200 <__d2b+0x24>
 80081f2:	4602      	mov	r2, r0
 80081f4:	4b23      	ldr	r3, [pc, #140]	@ (8008284 <__d2b+0xa8>)
 80081f6:	4824      	ldr	r0, [pc, #144]	@ (8008288 <__d2b+0xac>)
 80081f8:	f240 310f 	movw	r1, #783	@ 0x30f
 80081fc:	f000 f902 	bl	8008404 <__assert_func>
 8008200:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008204:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008208:	b10d      	cbz	r5, 800820e <__d2b+0x32>
 800820a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800820e:	9301      	str	r3, [sp, #4]
 8008210:	f1b8 0300 	subs.w	r3, r8, #0
 8008214:	d023      	beq.n	800825e <__d2b+0x82>
 8008216:	4668      	mov	r0, sp
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	f7ff fd7c 	bl	8007d16 <__lo0bits>
 800821e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008222:	b1d0      	cbz	r0, 800825a <__d2b+0x7e>
 8008224:	f1c0 0320 	rsb	r3, r0, #32
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	430b      	orrs	r3, r1
 800822e:	40c2      	lsrs	r2, r0
 8008230:	6163      	str	r3, [r4, #20]
 8008232:	9201      	str	r2, [sp, #4]
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	61a3      	str	r3, [r4, #24]
 8008238:	2b00      	cmp	r3, #0
 800823a:	bf0c      	ite	eq
 800823c:	2201      	moveq	r2, #1
 800823e:	2202      	movne	r2, #2
 8008240:	6122      	str	r2, [r4, #16]
 8008242:	b1a5      	cbz	r5, 800826e <__d2b+0x92>
 8008244:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008248:	4405      	add	r5, r0
 800824a:	603d      	str	r5, [r7, #0]
 800824c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008250:	6030      	str	r0, [r6, #0]
 8008252:	4620      	mov	r0, r4
 8008254:	b003      	add	sp, #12
 8008256:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800825a:	6161      	str	r1, [r4, #20]
 800825c:	e7ea      	b.n	8008234 <__d2b+0x58>
 800825e:	a801      	add	r0, sp, #4
 8008260:	f7ff fd59 	bl	8007d16 <__lo0bits>
 8008264:	9b01      	ldr	r3, [sp, #4]
 8008266:	6163      	str	r3, [r4, #20]
 8008268:	3020      	adds	r0, #32
 800826a:	2201      	movs	r2, #1
 800826c:	e7e8      	b.n	8008240 <__d2b+0x64>
 800826e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008272:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008276:	6038      	str	r0, [r7, #0]
 8008278:	6918      	ldr	r0, [r3, #16]
 800827a:	f7ff fd2d 	bl	8007cd8 <__hi0bits>
 800827e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008282:	e7e5      	b.n	8008250 <__d2b+0x74>
 8008284:	08008bbc 	.word	0x08008bbc
 8008288:	08008bcd 	.word	0x08008bcd

0800828c <__sflush_r>:
 800828c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008294:	0716      	lsls	r6, r2, #28
 8008296:	4605      	mov	r5, r0
 8008298:	460c      	mov	r4, r1
 800829a:	d454      	bmi.n	8008346 <__sflush_r+0xba>
 800829c:	684b      	ldr	r3, [r1, #4]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dc02      	bgt.n	80082a8 <__sflush_r+0x1c>
 80082a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	dd48      	ble.n	800833a <__sflush_r+0xae>
 80082a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082aa:	2e00      	cmp	r6, #0
 80082ac:	d045      	beq.n	800833a <__sflush_r+0xae>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80082b4:	682f      	ldr	r7, [r5, #0]
 80082b6:	6a21      	ldr	r1, [r4, #32]
 80082b8:	602b      	str	r3, [r5, #0]
 80082ba:	d030      	beq.n	800831e <__sflush_r+0x92>
 80082bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	0759      	lsls	r1, r3, #29
 80082c2:	d505      	bpl.n	80082d0 <__sflush_r+0x44>
 80082c4:	6863      	ldr	r3, [r4, #4]
 80082c6:	1ad2      	subs	r2, r2, r3
 80082c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80082ca:	b10b      	cbz	r3, 80082d0 <__sflush_r+0x44>
 80082cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80082ce:	1ad2      	subs	r2, r2, r3
 80082d0:	2300      	movs	r3, #0
 80082d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80082d4:	6a21      	ldr	r1, [r4, #32]
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b0      	blx	r6
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	d106      	bne.n	80082ee <__sflush_r+0x62>
 80082e0:	6829      	ldr	r1, [r5, #0]
 80082e2:	291d      	cmp	r1, #29
 80082e4:	d82b      	bhi.n	800833e <__sflush_r+0xb2>
 80082e6:	4a2a      	ldr	r2, [pc, #168]	@ (8008390 <__sflush_r+0x104>)
 80082e8:	410a      	asrs	r2, r1
 80082ea:	07d6      	lsls	r6, r2, #31
 80082ec:	d427      	bmi.n	800833e <__sflush_r+0xb2>
 80082ee:	2200      	movs	r2, #0
 80082f0:	6062      	str	r2, [r4, #4]
 80082f2:	04d9      	lsls	r1, r3, #19
 80082f4:	6922      	ldr	r2, [r4, #16]
 80082f6:	6022      	str	r2, [r4, #0]
 80082f8:	d504      	bpl.n	8008304 <__sflush_r+0x78>
 80082fa:	1c42      	adds	r2, r0, #1
 80082fc:	d101      	bne.n	8008302 <__sflush_r+0x76>
 80082fe:	682b      	ldr	r3, [r5, #0]
 8008300:	b903      	cbnz	r3, 8008304 <__sflush_r+0x78>
 8008302:	6560      	str	r0, [r4, #84]	@ 0x54
 8008304:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008306:	602f      	str	r7, [r5, #0]
 8008308:	b1b9      	cbz	r1, 800833a <__sflush_r+0xae>
 800830a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800830e:	4299      	cmp	r1, r3
 8008310:	d002      	beq.n	8008318 <__sflush_r+0x8c>
 8008312:	4628      	mov	r0, r5
 8008314:	f7ff fb38 	bl	8007988 <_free_r>
 8008318:	2300      	movs	r3, #0
 800831a:	6363      	str	r3, [r4, #52]	@ 0x34
 800831c:	e00d      	b.n	800833a <__sflush_r+0xae>
 800831e:	2301      	movs	r3, #1
 8008320:	4628      	mov	r0, r5
 8008322:	47b0      	blx	r6
 8008324:	4602      	mov	r2, r0
 8008326:	1c50      	adds	r0, r2, #1
 8008328:	d1c9      	bne.n	80082be <__sflush_r+0x32>
 800832a:	682b      	ldr	r3, [r5, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0c6      	beq.n	80082be <__sflush_r+0x32>
 8008330:	2b1d      	cmp	r3, #29
 8008332:	d001      	beq.n	8008338 <__sflush_r+0xac>
 8008334:	2b16      	cmp	r3, #22
 8008336:	d11e      	bne.n	8008376 <__sflush_r+0xea>
 8008338:	602f      	str	r7, [r5, #0]
 800833a:	2000      	movs	r0, #0
 800833c:	e022      	b.n	8008384 <__sflush_r+0xf8>
 800833e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008342:	b21b      	sxth	r3, r3
 8008344:	e01b      	b.n	800837e <__sflush_r+0xf2>
 8008346:	690f      	ldr	r7, [r1, #16]
 8008348:	2f00      	cmp	r7, #0
 800834a:	d0f6      	beq.n	800833a <__sflush_r+0xae>
 800834c:	0793      	lsls	r3, r2, #30
 800834e:	680e      	ldr	r6, [r1, #0]
 8008350:	bf08      	it	eq
 8008352:	694b      	ldreq	r3, [r1, #20]
 8008354:	600f      	str	r7, [r1, #0]
 8008356:	bf18      	it	ne
 8008358:	2300      	movne	r3, #0
 800835a:	eba6 0807 	sub.w	r8, r6, r7
 800835e:	608b      	str	r3, [r1, #8]
 8008360:	f1b8 0f00 	cmp.w	r8, #0
 8008364:	dde9      	ble.n	800833a <__sflush_r+0xae>
 8008366:	6a21      	ldr	r1, [r4, #32]
 8008368:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800836a:	4643      	mov	r3, r8
 800836c:	463a      	mov	r2, r7
 800836e:	4628      	mov	r0, r5
 8008370:	47b0      	blx	r6
 8008372:	2800      	cmp	r0, #0
 8008374:	dc08      	bgt.n	8008388 <__sflush_r+0xfc>
 8008376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800837e:	81a3      	strh	r3, [r4, #12]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008388:	4407      	add	r7, r0
 800838a:	eba8 0800 	sub.w	r8, r8, r0
 800838e:	e7e7      	b.n	8008360 <__sflush_r+0xd4>
 8008390:	dfbffffe 	.word	0xdfbffffe

08008394 <_fflush_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	690b      	ldr	r3, [r1, #16]
 8008398:	4605      	mov	r5, r0
 800839a:	460c      	mov	r4, r1
 800839c:	b913      	cbnz	r3, 80083a4 <_fflush_r+0x10>
 800839e:	2500      	movs	r5, #0
 80083a0:	4628      	mov	r0, r5
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	b118      	cbz	r0, 80083ae <_fflush_r+0x1a>
 80083a6:	6a03      	ldr	r3, [r0, #32]
 80083a8:	b90b      	cbnz	r3, 80083ae <_fflush_r+0x1a>
 80083aa:	f7fe fb41 	bl	8006a30 <__sinit>
 80083ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f3      	beq.n	800839e <_fflush_r+0xa>
 80083b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80083b8:	07d0      	lsls	r0, r2, #31
 80083ba:	d404      	bmi.n	80083c6 <_fflush_r+0x32>
 80083bc:	0599      	lsls	r1, r3, #22
 80083be:	d402      	bmi.n	80083c6 <_fflush_r+0x32>
 80083c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083c2:	f7fe fc82 	bl	8006cca <__retarget_lock_acquire_recursive>
 80083c6:	4628      	mov	r0, r5
 80083c8:	4621      	mov	r1, r4
 80083ca:	f7ff ff5f 	bl	800828c <__sflush_r>
 80083ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083d0:	07da      	lsls	r2, r3, #31
 80083d2:	4605      	mov	r5, r0
 80083d4:	d4e4      	bmi.n	80083a0 <_fflush_r+0xc>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	d4e1      	bmi.n	80083a0 <_fflush_r+0xc>
 80083dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083de:	f7fe fc75 	bl	8006ccc <__retarget_lock_release_recursive>
 80083e2:	e7dd      	b.n	80083a0 <_fflush_r+0xc>

080083e4 <_sbrk_r>:
 80083e4:	b538      	push	{r3, r4, r5, lr}
 80083e6:	4d06      	ldr	r5, [pc, #24]	@ (8008400 <_sbrk_r+0x1c>)
 80083e8:	2300      	movs	r3, #0
 80083ea:	4604      	mov	r4, r0
 80083ec:	4608      	mov	r0, r1
 80083ee:	602b      	str	r3, [r5, #0]
 80083f0:	f7f9 f826 	bl	8001440 <_sbrk>
 80083f4:	1c43      	adds	r3, r0, #1
 80083f6:	d102      	bne.n	80083fe <_sbrk_r+0x1a>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	b103      	cbz	r3, 80083fe <_sbrk_r+0x1a>
 80083fc:	6023      	str	r3, [r4, #0]
 80083fe:	bd38      	pop	{r3, r4, r5, pc}
 8008400:	20004d78 	.word	0x20004d78

08008404 <__assert_func>:
 8008404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008406:	4614      	mov	r4, r2
 8008408:	461a      	mov	r2, r3
 800840a:	4b09      	ldr	r3, [pc, #36]	@ (8008430 <__assert_func+0x2c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4605      	mov	r5, r0
 8008410:	68d8      	ldr	r0, [r3, #12]
 8008412:	b954      	cbnz	r4, 800842a <__assert_func+0x26>
 8008414:	4b07      	ldr	r3, [pc, #28]	@ (8008434 <__assert_func+0x30>)
 8008416:	461c      	mov	r4, r3
 8008418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800841c:	9100      	str	r1, [sp, #0]
 800841e:	462b      	mov	r3, r5
 8008420:	4905      	ldr	r1, [pc, #20]	@ (8008438 <__assert_func+0x34>)
 8008422:	f000 f841 	bl	80084a8 <fiprintf>
 8008426:	f000 f851 	bl	80084cc <abort>
 800842a:	4b04      	ldr	r3, [pc, #16]	@ (800843c <__assert_func+0x38>)
 800842c:	e7f4      	b.n	8008418 <__assert_func+0x14>
 800842e:	bf00      	nop
 8008430:	2000001c 	.word	0x2000001c
 8008434:	08008d6d 	.word	0x08008d6d
 8008438:	08008d3f 	.word	0x08008d3f
 800843c:	08008d32 	.word	0x08008d32

08008440 <_calloc_r>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	fba1 5402 	umull	r5, r4, r1, r2
 8008446:	b93c      	cbnz	r4, 8008458 <_calloc_r+0x18>
 8008448:	4629      	mov	r1, r5
 800844a:	f7ff fb11 	bl	8007a70 <_malloc_r>
 800844e:	4606      	mov	r6, r0
 8008450:	b928      	cbnz	r0, 800845e <_calloc_r+0x1e>
 8008452:	2600      	movs	r6, #0
 8008454:	4630      	mov	r0, r6
 8008456:	bd70      	pop	{r4, r5, r6, pc}
 8008458:	220c      	movs	r2, #12
 800845a:	6002      	str	r2, [r0, #0]
 800845c:	e7f9      	b.n	8008452 <_calloc_r+0x12>
 800845e:	462a      	mov	r2, r5
 8008460:	4621      	mov	r1, r4
 8008462:	f7fe fb5e 	bl	8006b22 <memset>
 8008466:	e7f5      	b.n	8008454 <_calloc_r+0x14>

08008468 <__ascii_mbtowc>:
 8008468:	b082      	sub	sp, #8
 800846a:	b901      	cbnz	r1, 800846e <__ascii_mbtowc+0x6>
 800846c:	a901      	add	r1, sp, #4
 800846e:	b142      	cbz	r2, 8008482 <__ascii_mbtowc+0x1a>
 8008470:	b14b      	cbz	r3, 8008486 <__ascii_mbtowc+0x1e>
 8008472:	7813      	ldrb	r3, [r2, #0]
 8008474:	600b      	str	r3, [r1, #0]
 8008476:	7812      	ldrb	r2, [r2, #0]
 8008478:	1e10      	subs	r0, r2, #0
 800847a:	bf18      	it	ne
 800847c:	2001      	movne	r0, #1
 800847e:	b002      	add	sp, #8
 8008480:	4770      	bx	lr
 8008482:	4610      	mov	r0, r2
 8008484:	e7fb      	b.n	800847e <__ascii_mbtowc+0x16>
 8008486:	f06f 0001 	mvn.w	r0, #1
 800848a:	e7f8      	b.n	800847e <__ascii_mbtowc+0x16>

0800848c <__ascii_wctomb>:
 800848c:	4603      	mov	r3, r0
 800848e:	4608      	mov	r0, r1
 8008490:	b141      	cbz	r1, 80084a4 <__ascii_wctomb+0x18>
 8008492:	2aff      	cmp	r2, #255	@ 0xff
 8008494:	d904      	bls.n	80084a0 <__ascii_wctomb+0x14>
 8008496:	228a      	movs	r2, #138	@ 0x8a
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	f04f 30ff 	mov.w	r0, #4294967295
 800849e:	4770      	bx	lr
 80084a0:	700a      	strb	r2, [r1, #0]
 80084a2:	2001      	movs	r0, #1
 80084a4:	4770      	bx	lr
	...

080084a8 <fiprintf>:
 80084a8:	b40e      	push	{r1, r2, r3}
 80084aa:	b503      	push	{r0, r1, lr}
 80084ac:	4601      	mov	r1, r0
 80084ae:	ab03      	add	r3, sp, #12
 80084b0:	4805      	ldr	r0, [pc, #20]	@ (80084c8 <fiprintf+0x20>)
 80084b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b6:	6800      	ldr	r0, [r0, #0]
 80084b8:	9301      	str	r3, [sp, #4]
 80084ba:	f000 f837 	bl	800852c <_vfiprintf_r>
 80084be:	b002      	add	sp, #8
 80084c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c4:	b003      	add	sp, #12
 80084c6:	4770      	bx	lr
 80084c8:	2000001c 	.word	0x2000001c

080084cc <abort>:
 80084cc:	b508      	push	{r3, lr}
 80084ce:	2006      	movs	r0, #6
 80084d0:	f000 fa00 	bl	80088d4 <raise>
 80084d4:	2001      	movs	r0, #1
 80084d6:	f7f8 ff3b 	bl	8001350 <_exit>

080084da <__sfputc_r>:
 80084da:	6893      	ldr	r3, [r2, #8]
 80084dc:	3b01      	subs	r3, #1
 80084de:	2b00      	cmp	r3, #0
 80084e0:	b410      	push	{r4}
 80084e2:	6093      	str	r3, [r2, #8]
 80084e4:	da08      	bge.n	80084f8 <__sfputc_r+0x1e>
 80084e6:	6994      	ldr	r4, [r2, #24]
 80084e8:	42a3      	cmp	r3, r4
 80084ea:	db01      	blt.n	80084f0 <__sfputc_r+0x16>
 80084ec:	290a      	cmp	r1, #10
 80084ee:	d103      	bne.n	80084f8 <__sfputc_r+0x1e>
 80084f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084f4:	f000 b932 	b.w	800875c <__swbuf_r>
 80084f8:	6813      	ldr	r3, [r2, #0]
 80084fa:	1c58      	adds	r0, r3, #1
 80084fc:	6010      	str	r0, [r2, #0]
 80084fe:	7019      	strb	r1, [r3, #0]
 8008500:	4608      	mov	r0, r1
 8008502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008506:	4770      	bx	lr

08008508 <__sfputs_r>:
 8008508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800850a:	4606      	mov	r6, r0
 800850c:	460f      	mov	r7, r1
 800850e:	4614      	mov	r4, r2
 8008510:	18d5      	adds	r5, r2, r3
 8008512:	42ac      	cmp	r4, r5
 8008514:	d101      	bne.n	800851a <__sfputs_r+0x12>
 8008516:	2000      	movs	r0, #0
 8008518:	e007      	b.n	800852a <__sfputs_r+0x22>
 800851a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800851e:	463a      	mov	r2, r7
 8008520:	4630      	mov	r0, r6
 8008522:	f7ff ffda 	bl	80084da <__sfputc_r>
 8008526:	1c43      	adds	r3, r0, #1
 8008528:	d1f3      	bne.n	8008512 <__sfputs_r+0xa>
 800852a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800852c <_vfiprintf_r>:
 800852c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008530:	460d      	mov	r5, r1
 8008532:	b09d      	sub	sp, #116	@ 0x74
 8008534:	4614      	mov	r4, r2
 8008536:	4698      	mov	r8, r3
 8008538:	4606      	mov	r6, r0
 800853a:	b118      	cbz	r0, 8008544 <_vfiprintf_r+0x18>
 800853c:	6a03      	ldr	r3, [r0, #32]
 800853e:	b90b      	cbnz	r3, 8008544 <_vfiprintf_r+0x18>
 8008540:	f7fe fa76 	bl	8006a30 <__sinit>
 8008544:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d405      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 800854a:	89ab      	ldrh	r3, [r5, #12]
 800854c:	059a      	lsls	r2, r3, #22
 800854e:	d402      	bmi.n	8008556 <_vfiprintf_r+0x2a>
 8008550:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008552:	f7fe fbba 	bl	8006cca <__retarget_lock_acquire_recursive>
 8008556:	89ab      	ldrh	r3, [r5, #12]
 8008558:	071b      	lsls	r3, r3, #28
 800855a:	d501      	bpl.n	8008560 <_vfiprintf_r+0x34>
 800855c:	692b      	ldr	r3, [r5, #16]
 800855e:	b99b      	cbnz	r3, 8008588 <_vfiprintf_r+0x5c>
 8008560:	4629      	mov	r1, r5
 8008562:	4630      	mov	r0, r6
 8008564:	f000 f938 	bl	80087d8 <__swsetup_r>
 8008568:	b170      	cbz	r0, 8008588 <_vfiprintf_r+0x5c>
 800856a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800856c:	07dc      	lsls	r4, r3, #31
 800856e:	d504      	bpl.n	800857a <_vfiprintf_r+0x4e>
 8008570:	f04f 30ff 	mov.w	r0, #4294967295
 8008574:	b01d      	add	sp, #116	@ 0x74
 8008576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800857a:	89ab      	ldrh	r3, [r5, #12]
 800857c:	0598      	lsls	r0, r3, #22
 800857e:	d4f7      	bmi.n	8008570 <_vfiprintf_r+0x44>
 8008580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008582:	f7fe fba3 	bl	8006ccc <__retarget_lock_release_recursive>
 8008586:	e7f3      	b.n	8008570 <_vfiprintf_r+0x44>
 8008588:	2300      	movs	r3, #0
 800858a:	9309      	str	r3, [sp, #36]	@ 0x24
 800858c:	2320      	movs	r3, #32
 800858e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008592:	f8cd 800c 	str.w	r8, [sp, #12]
 8008596:	2330      	movs	r3, #48	@ 0x30
 8008598:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008748 <_vfiprintf_r+0x21c>
 800859c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085a0:	f04f 0901 	mov.w	r9, #1
 80085a4:	4623      	mov	r3, r4
 80085a6:	469a      	mov	sl, r3
 80085a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085ac:	b10a      	cbz	r2, 80085b2 <_vfiprintf_r+0x86>
 80085ae:	2a25      	cmp	r2, #37	@ 0x25
 80085b0:	d1f9      	bne.n	80085a6 <_vfiprintf_r+0x7a>
 80085b2:	ebba 0b04 	subs.w	fp, sl, r4
 80085b6:	d00b      	beq.n	80085d0 <_vfiprintf_r+0xa4>
 80085b8:	465b      	mov	r3, fp
 80085ba:	4622      	mov	r2, r4
 80085bc:	4629      	mov	r1, r5
 80085be:	4630      	mov	r0, r6
 80085c0:	f7ff ffa2 	bl	8008508 <__sfputs_r>
 80085c4:	3001      	adds	r0, #1
 80085c6:	f000 80a7 	beq.w	8008718 <_vfiprintf_r+0x1ec>
 80085ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085cc:	445a      	add	r2, fp
 80085ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80085d0:	f89a 3000 	ldrb.w	r3, [sl]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 809f 	beq.w	8008718 <_vfiprintf_r+0x1ec>
 80085da:	2300      	movs	r3, #0
 80085dc:	f04f 32ff 	mov.w	r2, #4294967295
 80085e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e4:	f10a 0a01 	add.w	sl, sl, #1
 80085e8:	9304      	str	r3, [sp, #16]
 80085ea:	9307      	str	r3, [sp, #28]
 80085ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80085f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80085f2:	4654      	mov	r4, sl
 80085f4:	2205      	movs	r2, #5
 80085f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085fa:	4853      	ldr	r0, [pc, #332]	@ (8008748 <_vfiprintf_r+0x21c>)
 80085fc:	f7f7 fde8 	bl	80001d0 <memchr>
 8008600:	9a04      	ldr	r2, [sp, #16]
 8008602:	b9d8      	cbnz	r0, 800863c <_vfiprintf_r+0x110>
 8008604:	06d1      	lsls	r1, r2, #27
 8008606:	bf44      	itt	mi
 8008608:	2320      	movmi	r3, #32
 800860a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800860e:	0713      	lsls	r3, r2, #28
 8008610:	bf44      	itt	mi
 8008612:	232b      	movmi	r3, #43	@ 0x2b
 8008614:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008618:	f89a 3000 	ldrb.w	r3, [sl]
 800861c:	2b2a      	cmp	r3, #42	@ 0x2a
 800861e:	d015      	beq.n	800864c <_vfiprintf_r+0x120>
 8008620:	9a07      	ldr	r2, [sp, #28]
 8008622:	4654      	mov	r4, sl
 8008624:	2000      	movs	r0, #0
 8008626:	f04f 0c0a 	mov.w	ip, #10
 800862a:	4621      	mov	r1, r4
 800862c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008630:	3b30      	subs	r3, #48	@ 0x30
 8008632:	2b09      	cmp	r3, #9
 8008634:	d94b      	bls.n	80086ce <_vfiprintf_r+0x1a2>
 8008636:	b1b0      	cbz	r0, 8008666 <_vfiprintf_r+0x13a>
 8008638:	9207      	str	r2, [sp, #28]
 800863a:	e014      	b.n	8008666 <_vfiprintf_r+0x13a>
 800863c:	eba0 0308 	sub.w	r3, r0, r8
 8008640:	fa09 f303 	lsl.w	r3, r9, r3
 8008644:	4313      	orrs	r3, r2
 8008646:	9304      	str	r3, [sp, #16]
 8008648:	46a2      	mov	sl, r4
 800864a:	e7d2      	b.n	80085f2 <_vfiprintf_r+0xc6>
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	1d19      	adds	r1, r3, #4
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	9103      	str	r1, [sp, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	bfbb      	ittet	lt
 8008658:	425b      	neglt	r3, r3
 800865a:	f042 0202 	orrlt.w	r2, r2, #2
 800865e:	9307      	strge	r3, [sp, #28]
 8008660:	9307      	strlt	r3, [sp, #28]
 8008662:	bfb8      	it	lt
 8008664:	9204      	strlt	r2, [sp, #16]
 8008666:	7823      	ldrb	r3, [r4, #0]
 8008668:	2b2e      	cmp	r3, #46	@ 0x2e
 800866a:	d10a      	bne.n	8008682 <_vfiprintf_r+0x156>
 800866c:	7863      	ldrb	r3, [r4, #1]
 800866e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008670:	d132      	bne.n	80086d8 <_vfiprintf_r+0x1ac>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	1d1a      	adds	r2, r3, #4
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	9203      	str	r2, [sp, #12]
 800867a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800867e:	3402      	adds	r4, #2
 8008680:	9305      	str	r3, [sp, #20]
 8008682:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008758 <_vfiprintf_r+0x22c>
 8008686:	7821      	ldrb	r1, [r4, #0]
 8008688:	2203      	movs	r2, #3
 800868a:	4650      	mov	r0, sl
 800868c:	f7f7 fda0 	bl	80001d0 <memchr>
 8008690:	b138      	cbz	r0, 80086a2 <_vfiprintf_r+0x176>
 8008692:	9b04      	ldr	r3, [sp, #16]
 8008694:	eba0 000a 	sub.w	r0, r0, sl
 8008698:	2240      	movs	r2, #64	@ 0x40
 800869a:	4082      	lsls	r2, r0
 800869c:	4313      	orrs	r3, r2
 800869e:	3401      	adds	r4, #1
 80086a0:	9304      	str	r3, [sp, #16]
 80086a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a6:	4829      	ldr	r0, [pc, #164]	@ (800874c <_vfiprintf_r+0x220>)
 80086a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086ac:	2206      	movs	r2, #6
 80086ae:	f7f7 fd8f 	bl	80001d0 <memchr>
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d03f      	beq.n	8008736 <_vfiprintf_r+0x20a>
 80086b6:	4b26      	ldr	r3, [pc, #152]	@ (8008750 <_vfiprintf_r+0x224>)
 80086b8:	bb1b      	cbnz	r3, 8008702 <_vfiprintf_r+0x1d6>
 80086ba:	9b03      	ldr	r3, [sp, #12]
 80086bc:	3307      	adds	r3, #7
 80086be:	f023 0307 	bic.w	r3, r3, #7
 80086c2:	3308      	adds	r3, #8
 80086c4:	9303      	str	r3, [sp, #12]
 80086c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086c8:	443b      	add	r3, r7
 80086ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80086cc:	e76a      	b.n	80085a4 <_vfiprintf_r+0x78>
 80086ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d2:	460c      	mov	r4, r1
 80086d4:	2001      	movs	r0, #1
 80086d6:	e7a8      	b.n	800862a <_vfiprintf_r+0xfe>
 80086d8:	2300      	movs	r3, #0
 80086da:	3401      	adds	r4, #1
 80086dc:	9305      	str	r3, [sp, #20]
 80086de:	4619      	mov	r1, r3
 80086e0:	f04f 0c0a 	mov.w	ip, #10
 80086e4:	4620      	mov	r0, r4
 80086e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ea:	3a30      	subs	r2, #48	@ 0x30
 80086ec:	2a09      	cmp	r2, #9
 80086ee:	d903      	bls.n	80086f8 <_vfiprintf_r+0x1cc>
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d0c6      	beq.n	8008682 <_vfiprintf_r+0x156>
 80086f4:	9105      	str	r1, [sp, #20]
 80086f6:	e7c4      	b.n	8008682 <_vfiprintf_r+0x156>
 80086f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086fc:	4604      	mov	r4, r0
 80086fe:	2301      	movs	r3, #1
 8008700:	e7f0      	b.n	80086e4 <_vfiprintf_r+0x1b8>
 8008702:	ab03      	add	r3, sp, #12
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	462a      	mov	r2, r5
 8008708:	4b12      	ldr	r3, [pc, #72]	@ (8008754 <_vfiprintf_r+0x228>)
 800870a:	a904      	add	r1, sp, #16
 800870c:	4630      	mov	r0, r6
 800870e:	f7fd fd4b 	bl	80061a8 <_printf_float>
 8008712:	4607      	mov	r7, r0
 8008714:	1c78      	adds	r0, r7, #1
 8008716:	d1d6      	bne.n	80086c6 <_vfiprintf_r+0x19a>
 8008718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800871a:	07d9      	lsls	r1, r3, #31
 800871c:	d405      	bmi.n	800872a <_vfiprintf_r+0x1fe>
 800871e:	89ab      	ldrh	r3, [r5, #12]
 8008720:	059a      	lsls	r2, r3, #22
 8008722:	d402      	bmi.n	800872a <_vfiprintf_r+0x1fe>
 8008724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008726:	f7fe fad1 	bl	8006ccc <__retarget_lock_release_recursive>
 800872a:	89ab      	ldrh	r3, [r5, #12]
 800872c:	065b      	lsls	r3, r3, #25
 800872e:	f53f af1f 	bmi.w	8008570 <_vfiprintf_r+0x44>
 8008732:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008734:	e71e      	b.n	8008574 <_vfiprintf_r+0x48>
 8008736:	ab03      	add	r3, sp, #12
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	462a      	mov	r2, r5
 800873c:	4b05      	ldr	r3, [pc, #20]	@ (8008754 <_vfiprintf_r+0x228>)
 800873e:	a904      	add	r1, sp, #16
 8008740:	4630      	mov	r0, r6
 8008742:	f7fd ffc9 	bl	80066d8 <_printf_i>
 8008746:	e7e4      	b.n	8008712 <_vfiprintf_r+0x1e6>
 8008748:	08008e6f 	.word	0x08008e6f
 800874c:	08008e79 	.word	0x08008e79
 8008750:	080061a9 	.word	0x080061a9
 8008754:	08008509 	.word	0x08008509
 8008758:	08008e75 	.word	0x08008e75

0800875c <__swbuf_r>:
 800875c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875e:	460e      	mov	r6, r1
 8008760:	4614      	mov	r4, r2
 8008762:	4605      	mov	r5, r0
 8008764:	b118      	cbz	r0, 800876e <__swbuf_r+0x12>
 8008766:	6a03      	ldr	r3, [r0, #32]
 8008768:	b90b      	cbnz	r3, 800876e <__swbuf_r+0x12>
 800876a:	f7fe f961 	bl	8006a30 <__sinit>
 800876e:	69a3      	ldr	r3, [r4, #24]
 8008770:	60a3      	str	r3, [r4, #8]
 8008772:	89a3      	ldrh	r3, [r4, #12]
 8008774:	071a      	lsls	r2, r3, #28
 8008776:	d501      	bpl.n	800877c <__swbuf_r+0x20>
 8008778:	6923      	ldr	r3, [r4, #16]
 800877a:	b943      	cbnz	r3, 800878e <__swbuf_r+0x32>
 800877c:	4621      	mov	r1, r4
 800877e:	4628      	mov	r0, r5
 8008780:	f000 f82a 	bl	80087d8 <__swsetup_r>
 8008784:	b118      	cbz	r0, 800878e <__swbuf_r+0x32>
 8008786:	f04f 37ff 	mov.w	r7, #4294967295
 800878a:	4638      	mov	r0, r7
 800878c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	6922      	ldr	r2, [r4, #16]
 8008792:	1a98      	subs	r0, r3, r2
 8008794:	6963      	ldr	r3, [r4, #20]
 8008796:	b2f6      	uxtb	r6, r6
 8008798:	4283      	cmp	r3, r0
 800879a:	4637      	mov	r7, r6
 800879c:	dc05      	bgt.n	80087aa <__swbuf_r+0x4e>
 800879e:	4621      	mov	r1, r4
 80087a0:	4628      	mov	r0, r5
 80087a2:	f7ff fdf7 	bl	8008394 <_fflush_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d1ed      	bne.n	8008786 <__swbuf_r+0x2a>
 80087aa:	68a3      	ldr	r3, [r4, #8]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	60a3      	str	r3, [r4, #8]
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	1c5a      	adds	r2, r3, #1
 80087b4:	6022      	str	r2, [r4, #0]
 80087b6:	701e      	strb	r6, [r3, #0]
 80087b8:	6962      	ldr	r2, [r4, #20]
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	429a      	cmp	r2, r3
 80087be:	d004      	beq.n	80087ca <__swbuf_r+0x6e>
 80087c0:	89a3      	ldrh	r3, [r4, #12]
 80087c2:	07db      	lsls	r3, r3, #31
 80087c4:	d5e1      	bpl.n	800878a <__swbuf_r+0x2e>
 80087c6:	2e0a      	cmp	r6, #10
 80087c8:	d1df      	bne.n	800878a <__swbuf_r+0x2e>
 80087ca:	4621      	mov	r1, r4
 80087cc:	4628      	mov	r0, r5
 80087ce:	f7ff fde1 	bl	8008394 <_fflush_r>
 80087d2:	2800      	cmp	r0, #0
 80087d4:	d0d9      	beq.n	800878a <__swbuf_r+0x2e>
 80087d6:	e7d6      	b.n	8008786 <__swbuf_r+0x2a>

080087d8 <__swsetup_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4b29      	ldr	r3, [pc, #164]	@ (8008880 <__swsetup_r+0xa8>)
 80087dc:	4605      	mov	r5, r0
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	460c      	mov	r4, r1
 80087e2:	b118      	cbz	r0, 80087ec <__swsetup_r+0x14>
 80087e4:	6a03      	ldr	r3, [r0, #32]
 80087e6:	b90b      	cbnz	r3, 80087ec <__swsetup_r+0x14>
 80087e8:	f7fe f922 	bl	8006a30 <__sinit>
 80087ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087f0:	0719      	lsls	r1, r3, #28
 80087f2:	d422      	bmi.n	800883a <__swsetup_r+0x62>
 80087f4:	06da      	lsls	r2, r3, #27
 80087f6:	d407      	bmi.n	8008808 <__swsetup_r+0x30>
 80087f8:	2209      	movs	r2, #9
 80087fa:	602a      	str	r2, [r5, #0]
 80087fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	f04f 30ff 	mov.w	r0, #4294967295
 8008806:	e033      	b.n	8008870 <__swsetup_r+0x98>
 8008808:	0758      	lsls	r0, r3, #29
 800880a:	d512      	bpl.n	8008832 <__swsetup_r+0x5a>
 800880c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800880e:	b141      	cbz	r1, 8008822 <__swsetup_r+0x4a>
 8008810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008814:	4299      	cmp	r1, r3
 8008816:	d002      	beq.n	800881e <__swsetup_r+0x46>
 8008818:	4628      	mov	r0, r5
 800881a:	f7ff f8b5 	bl	8007988 <_free_r>
 800881e:	2300      	movs	r3, #0
 8008820:	6363      	str	r3, [r4, #52]	@ 0x34
 8008822:	89a3      	ldrh	r3, [r4, #12]
 8008824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008828:	81a3      	strh	r3, [r4, #12]
 800882a:	2300      	movs	r3, #0
 800882c:	6063      	str	r3, [r4, #4]
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	6023      	str	r3, [r4, #0]
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	f043 0308 	orr.w	r3, r3, #8
 8008838:	81a3      	strh	r3, [r4, #12]
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	b94b      	cbnz	r3, 8008852 <__swsetup_r+0x7a>
 800883e:	89a3      	ldrh	r3, [r4, #12]
 8008840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008848:	d003      	beq.n	8008852 <__swsetup_r+0x7a>
 800884a:	4621      	mov	r1, r4
 800884c:	4628      	mov	r0, r5
 800884e:	f000 f883 	bl	8008958 <__smakebuf_r>
 8008852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008856:	f013 0201 	ands.w	r2, r3, #1
 800885a:	d00a      	beq.n	8008872 <__swsetup_r+0x9a>
 800885c:	2200      	movs	r2, #0
 800885e:	60a2      	str	r2, [r4, #8]
 8008860:	6962      	ldr	r2, [r4, #20]
 8008862:	4252      	negs	r2, r2
 8008864:	61a2      	str	r2, [r4, #24]
 8008866:	6922      	ldr	r2, [r4, #16]
 8008868:	b942      	cbnz	r2, 800887c <__swsetup_r+0xa4>
 800886a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800886e:	d1c5      	bne.n	80087fc <__swsetup_r+0x24>
 8008870:	bd38      	pop	{r3, r4, r5, pc}
 8008872:	0799      	lsls	r1, r3, #30
 8008874:	bf58      	it	pl
 8008876:	6962      	ldrpl	r2, [r4, #20]
 8008878:	60a2      	str	r2, [r4, #8]
 800887a:	e7f4      	b.n	8008866 <__swsetup_r+0x8e>
 800887c:	2000      	movs	r0, #0
 800887e:	e7f7      	b.n	8008870 <__swsetup_r+0x98>
 8008880:	2000001c 	.word	0x2000001c

08008884 <_raise_r>:
 8008884:	291f      	cmp	r1, #31
 8008886:	b538      	push	{r3, r4, r5, lr}
 8008888:	4605      	mov	r5, r0
 800888a:	460c      	mov	r4, r1
 800888c:	d904      	bls.n	8008898 <_raise_r+0x14>
 800888e:	2316      	movs	r3, #22
 8008890:	6003      	str	r3, [r0, #0]
 8008892:	f04f 30ff 	mov.w	r0, #4294967295
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800889a:	b112      	cbz	r2, 80088a2 <_raise_r+0x1e>
 800889c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088a0:	b94b      	cbnz	r3, 80088b6 <_raise_r+0x32>
 80088a2:	4628      	mov	r0, r5
 80088a4:	f000 f830 	bl	8008908 <_getpid_r>
 80088a8:	4622      	mov	r2, r4
 80088aa:	4601      	mov	r1, r0
 80088ac:	4628      	mov	r0, r5
 80088ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088b2:	f000 b817 	b.w	80088e4 <_kill_r>
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d00a      	beq.n	80088d0 <_raise_r+0x4c>
 80088ba:	1c59      	adds	r1, r3, #1
 80088bc:	d103      	bne.n	80088c6 <_raise_r+0x42>
 80088be:	2316      	movs	r3, #22
 80088c0:	6003      	str	r3, [r0, #0]
 80088c2:	2001      	movs	r0, #1
 80088c4:	e7e7      	b.n	8008896 <_raise_r+0x12>
 80088c6:	2100      	movs	r1, #0
 80088c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088cc:	4620      	mov	r0, r4
 80088ce:	4798      	blx	r3
 80088d0:	2000      	movs	r0, #0
 80088d2:	e7e0      	b.n	8008896 <_raise_r+0x12>

080088d4 <raise>:
 80088d4:	4b02      	ldr	r3, [pc, #8]	@ (80088e0 <raise+0xc>)
 80088d6:	4601      	mov	r1, r0
 80088d8:	6818      	ldr	r0, [r3, #0]
 80088da:	f7ff bfd3 	b.w	8008884 <_raise_r>
 80088de:	bf00      	nop
 80088e0:	2000001c 	.word	0x2000001c

080088e4 <_kill_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4d07      	ldr	r5, [pc, #28]	@ (8008904 <_kill_r+0x20>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4604      	mov	r4, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	4611      	mov	r1, r2
 80088f0:	602b      	str	r3, [r5, #0]
 80088f2:	f7f8 fd1d 	bl	8001330 <_kill>
 80088f6:	1c43      	adds	r3, r0, #1
 80088f8:	d102      	bne.n	8008900 <_kill_r+0x1c>
 80088fa:	682b      	ldr	r3, [r5, #0]
 80088fc:	b103      	cbz	r3, 8008900 <_kill_r+0x1c>
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	bd38      	pop	{r3, r4, r5, pc}
 8008902:	bf00      	nop
 8008904:	20004d78 	.word	0x20004d78

08008908 <_getpid_r>:
 8008908:	f7f8 bd0a 	b.w	8001320 <_getpid>

0800890c <__swhatbuf_r>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	460c      	mov	r4, r1
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	2900      	cmp	r1, #0
 8008916:	b096      	sub	sp, #88	@ 0x58
 8008918:	4615      	mov	r5, r2
 800891a:	461e      	mov	r6, r3
 800891c:	da0d      	bge.n	800893a <__swhatbuf_r+0x2e>
 800891e:	89a3      	ldrh	r3, [r4, #12]
 8008920:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008924:	f04f 0100 	mov.w	r1, #0
 8008928:	bf14      	ite	ne
 800892a:	2340      	movne	r3, #64	@ 0x40
 800892c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008930:	2000      	movs	r0, #0
 8008932:	6031      	str	r1, [r6, #0]
 8008934:	602b      	str	r3, [r5, #0]
 8008936:	b016      	add	sp, #88	@ 0x58
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	466a      	mov	r2, sp
 800893c:	f000 f848 	bl	80089d0 <_fstat_r>
 8008940:	2800      	cmp	r0, #0
 8008942:	dbec      	blt.n	800891e <__swhatbuf_r+0x12>
 8008944:	9901      	ldr	r1, [sp, #4]
 8008946:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800894a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800894e:	4259      	negs	r1, r3
 8008950:	4159      	adcs	r1, r3
 8008952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008956:	e7eb      	b.n	8008930 <__swhatbuf_r+0x24>

08008958 <__smakebuf_r>:
 8008958:	898b      	ldrh	r3, [r1, #12]
 800895a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800895c:	079d      	lsls	r5, r3, #30
 800895e:	4606      	mov	r6, r0
 8008960:	460c      	mov	r4, r1
 8008962:	d507      	bpl.n	8008974 <__smakebuf_r+0x1c>
 8008964:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	6123      	str	r3, [r4, #16]
 800896c:	2301      	movs	r3, #1
 800896e:	6163      	str	r3, [r4, #20]
 8008970:	b003      	add	sp, #12
 8008972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008974:	ab01      	add	r3, sp, #4
 8008976:	466a      	mov	r2, sp
 8008978:	f7ff ffc8 	bl	800890c <__swhatbuf_r>
 800897c:	9f00      	ldr	r7, [sp, #0]
 800897e:	4605      	mov	r5, r0
 8008980:	4639      	mov	r1, r7
 8008982:	4630      	mov	r0, r6
 8008984:	f7ff f874 	bl	8007a70 <_malloc_r>
 8008988:	b948      	cbnz	r0, 800899e <__smakebuf_r+0x46>
 800898a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800898e:	059a      	lsls	r2, r3, #22
 8008990:	d4ee      	bmi.n	8008970 <__smakebuf_r+0x18>
 8008992:	f023 0303 	bic.w	r3, r3, #3
 8008996:	f043 0302 	orr.w	r3, r3, #2
 800899a:	81a3      	strh	r3, [r4, #12]
 800899c:	e7e2      	b.n	8008964 <__smakebuf_r+0xc>
 800899e:	89a3      	ldrh	r3, [r4, #12]
 80089a0:	6020      	str	r0, [r4, #0]
 80089a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089a6:	81a3      	strh	r3, [r4, #12]
 80089a8:	9b01      	ldr	r3, [sp, #4]
 80089aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089ae:	b15b      	cbz	r3, 80089c8 <__smakebuf_r+0x70>
 80089b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 f81d 	bl	80089f4 <_isatty_r>
 80089ba:	b128      	cbz	r0, 80089c8 <__smakebuf_r+0x70>
 80089bc:	89a3      	ldrh	r3, [r4, #12]
 80089be:	f023 0303 	bic.w	r3, r3, #3
 80089c2:	f043 0301 	orr.w	r3, r3, #1
 80089c6:	81a3      	strh	r3, [r4, #12]
 80089c8:	89a3      	ldrh	r3, [r4, #12]
 80089ca:	431d      	orrs	r5, r3
 80089cc:	81a5      	strh	r5, [r4, #12]
 80089ce:	e7cf      	b.n	8008970 <__smakebuf_r+0x18>

080089d0 <_fstat_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d07      	ldr	r5, [pc, #28]	@ (80089f0 <_fstat_r+0x20>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	4611      	mov	r1, r2
 80089dc:	602b      	str	r3, [r5, #0]
 80089de:	f7f8 fd07 	bl	80013f0 <_fstat>
 80089e2:	1c43      	adds	r3, r0, #1
 80089e4:	d102      	bne.n	80089ec <_fstat_r+0x1c>
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	b103      	cbz	r3, 80089ec <_fstat_r+0x1c>
 80089ea:	6023      	str	r3, [r4, #0]
 80089ec:	bd38      	pop	{r3, r4, r5, pc}
 80089ee:	bf00      	nop
 80089f0:	20004d78 	.word	0x20004d78

080089f4 <_isatty_r>:
 80089f4:	b538      	push	{r3, r4, r5, lr}
 80089f6:	4d06      	ldr	r5, [pc, #24]	@ (8008a10 <_isatty_r+0x1c>)
 80089f8:	2300      	movs	r3, #0
 80089fa:	4604      	mov	r4, r0
 80089fc:	4608      	mov	r0, r1
 80089fe:	602b      	str	r3, [r5, #0]
 8008a00:	f7f8 fd06 	bl	8001410 <_isatty>
 8008a04:	1c43      	adds	r3, r0, #1
 8008a06:	d102      	bne.n	8008a0e <_isatty_r+0x1a>
 8008a08:	682b      	ldr	r3, [r5, #0]
 8008a0a:	b103      	cbz	r3, 8008a0e <_isatty_r+0x1a>
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	bd38      	pop	{r3, r4, r5, pc}
 8008a10:	20004d78 	.word	0x20004d78

08008a14 <_init>:
 8008a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a16:	bf00      	nop
 8008a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	469e      	mov	lr, r3
 8008a1e:	4770      	bx	lr

08008a20 <_fini>:
 8008a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a22:	bf00      	nop
 8008a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a26:	bc08      	pop	{r3}
 8008a28:	469e      	mov	lr, r3
 8008a2a:	4770      	bx	lr
